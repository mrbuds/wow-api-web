-- fix missing values

Enum = {
    PlayerCurrencyFlagsDbFlags = {
        IgnoreMaxQtyOnload = 1,
        Reuse1 = 2,
        InBackpack = 4,
        UnusedInUI = 8,
        Reuse2 = 16,
    }
}

APIDocumentation:AddDocumentationTable(
{
	Name = "AccountInfo",
	Type = "System",
	Namespace = "C_AccountInfo",

	Functions =
	{
		{
			Name = "GetIDFromBattleNetAccountGUID",
			Type = "Function",

			Arguments =
			{
				{ Name = "battleNetAccountGUID", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "battleNetAccountID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "IsGUIDBattleNetAccountType",
			Type = "Function",

			Arguments =
			{
				{ Name = "guid", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "isBNet", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsGUIDRelatedToLocalAccount",
			Type = "Function",

			Arguments =
			{
				{ Name = "guid", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "isLocalUser", Type = "bool", Nilable = false },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "AchievementInfo",
	Type = "System",
	Namespace = "C_AchievementInfo",

	Functions =
	{
		{
			Name = "GetRewardItemID",
			Type = "Function",

			Arguments =
			{
				{ Name = "achievementID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "rewardItemID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetSupercedingAchievements",
			Type = "Function",

			Arguments =
			{
				{ Name = "achievementID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "supercedingAchievements", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "IsGuildAchievement",
			Type = "Function",

			Arguments =
			{
				{ Name = "achievementId", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isGuild", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsValidAchievement",
			Type = "Function",

			Arguments =
			{
				{ Name = "achievementId", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isValidAchievement", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetPortraitTexture",
			Type = "Function",

			Arguments =
			{
				{ Name = "textureObject", Type = "table", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "AchievementEarned",
			Type = "Event",
			LiteralName = "ACHIEVEMENT_EARNED",
			Payload =
			{
				{ Name = "achievementID", Type = "number", Nilable = false },
				{ Name = "alreadyEarned", Type = "bool", Nilable = true },
			},
		},
		{
			Name = "AchievementPlayerName",
			Type = "Event",
			LiteralName = "ACHIEVEMENT_PLAYER_NAME",
			Payload =
			{
				{ Name = "achievementID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "AchievementSearchUpdated",
			Type = "Event",
			LiteralName = "ACHIEVEMENT_SEARCH_UPDATED",
		},
		{
			Name = "CriteriaComplete",
			Type = "Event",
			LiteralName = "CRITERIA_COMPLETE",
			Payload =
			{
				{ Name = "criteriaID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "CriteriaEarned",
			Type = "Event",
			LiteralName = "CRITERIA_EARNED",
			Payload =
			{
				{ Name = "achievementID", Type = "number", Nilable = false },
				{ Name = "description", Type = "string", Nilable = false },
			},
		},
		{
			Name = "CriteriaUpdate",
			Type = "Event",
			LiteralName = "CRITERIA_UPDATE",
		},
		{
			Name = "InspectAchievementReady",
			Type = "Event",
			LiteralName = "INSPECT_ACHIEVEMENT_READY",
			Payload =
			{
				{ Name = "guid", Type = "string", Nilable = false },
			},
		},
		{
			Name = "ReceivedAchievementList",
			Type = "Event",
			LiteralName = "RECEIVED_ACHIEVEMENT_LIST",
		},
		{
			Name = "ReceivedAchievementMemberList",
			Type = "Event",
			LiteralName = "RECEIVED_ACHIEVEMENT_MEMBER_LIST",
			Payload =
			{
				{ Name = "achievementID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "TrackedAchievementListChanged",
			Type = "Event",
			LiteralName = "TRACKED_ACHIEVEMENT_LIST_CHANGED",
			Payload =
			{
				{ Name = "achievementID", Type = "number", Nilable = true },
				{ Name = "added", Type = "bool", Nilable = true },
			},
		},
		{
			Name = "TrackedAchievementUpdate",
			Type = "Event",
			LiteralName = "TRACKED_ACHIEVEMENT_UPDATE",
			Payload =
			{
				{ Name = "achievementID", Type = "number", Nilable = false },
				{ Name = "criteriaID", Type = "number", Nilable = true },
				{ Name = "elapsed", Type = "number", Nilable = true },
				{ Name = "duration", Type = "number", Nilable = true },
			},
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "ActionBar",
	Type = "System",
	Namespace = "C_ActionBar",

	Functions =
	{
		{
			Name = "FindFlyoutActionButtons",
			Type = "Function",

			Arguments =
			{
				{ Name = "flyoutID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "slots", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "FindPetActionButtons",
			Type = "Function",

			Arguments =
			{
				{ Name = "petActionID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "slots", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "FindSpellActionButtons",
			Type = "Function",

			Arguments =
			{
				{ Name = "spellID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "slots", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "GetBonusBarIndexForSlot",
			Type = "Function",

			Arguments =
			{
				{ Name = "slotID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "bonusBarIndex", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetItemActionOnEquipSpellID",
			Type = "Function",

			Arguments =
			{
				{ Name = "actionID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "onEquipSpellID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetPetActionPetBarIndices",
			Type = "Function",

			Arguments =
			{
				{ Name = "petActionID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "slots", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "HasFlyoutActionButtons",
			Type = "Function",

			Arguments =
			{
				{ Name = "flyoutID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "hasFlyoutActionButtons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "HasPetActionButtons",
			Type = "Function",

			Arguments =
			{
				{ Name = "petActionID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "hasPetActionButtons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "HasPetActionPetBarIndices",
			Type = "Function",

			Arguments =
			{
				{ Name = "petActionID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "hasPetActionPetBarIndices", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "HasSpellActionButtons",
			Type = "Function",

			Arguments =
			{
				{ Name = "spellID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "hasSpellActionButtons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsAutoCastPetAction",
			Type = "Function",

			Arguments =
			{
				{ Name = "slotID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isAutoCastPetAction", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsEnabledAutoCastPetAction",
			Type = "Function",

			Arguments =
			{
				{ Name = "slotID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isEnabledAutoCastPetAction", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsHarmfulAction",
			Type = "Function",

			Arguments =
			{
				{ Name = "actionID", Type = "number", Nilable = false },
				{ Name = "useNeutral", Type = "bool", Nilable = false },
			},

			Returns =
			{
				{ Name = "isHarmful", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsHelpfulAction",
			Type = "Function",

			Arguments =
			{
				{ Name = "actionID", Type = "number", Nilable = false },
				{ Name = "useNeutral", Type = "bool", Nilable = false },
			},

			Returns =
			{
				{ Name = "isHelpful", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsOnBarOrSpecialBar",
			Type = "Function",

			Arguments =
			{
				{ Name = "spellID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isOnBarOrSpecialBar", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "PutActionInSlot",
			Type = "Function",

			Arguments =
			{
				{ Name = "slotID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ShouldOverrideBarShowHealthBar",
			Type = "Function",

			Returns =
			{
				{ Name = "showHealthBar", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ShouldOverrideBarShowManaBar",
			Type = "Function",

			Returns =
			{
				{ Name = "showManaBar", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ToggleAutoCastPetAction",
			Type = "Function",

			Arguments =
			{
				{ Name = "slotID", Type = "number", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "ActionbarHidegrid",
			Type = "Event",
			LiteralName = "ACTIONBAR_HIDEGRID",
		},
		{
			Name = "ActionbarPageChanged",
			Type = "Event",
			LiteralName = "ACTIONBAR_PAGE_CHANGED",
		},
		{
			Name = "ActionbarShowBottomleft",
			Type = "Event",
			LiteralName = "ACTIONBAR_SHOW_BOTTOMLEFT",
		},
		{
			Name = "ActionbarShowgrid",
			Type = "Event",
			LiteralName = "ACTIONBAR_SHOWGRID",
		},
		{
			Name = "ActionbarSlotChanged",
			Type = "Event",
			LiteralName = "ACTIONBAR_SLOT_CHANGED",
			Payload =
			{
				{ Name = "slot", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ActionbarUpdateCooldown",
			Type = "Event",
			LiteralName = "ACTIONBAR_UPDATE_COOLDOWN",
		},
		{
			Name = "ActionbarUpdateState",
			Type = "Event",
			LiteralName = "ACTIONBAR_UPDATE_STATE",
		},
		{
			Name = "ActionbarUpdateUsable",
			Type = "Event",
			LiteralName = "ACTIONBAR_UPDATE_USABLE",
		},
		{
			Name = "PetBarUpdate",
			Type = "Event",
			LiteralName = "PET_BAR_UPDATE",
		},
		{
			Name = "UpdateBonusActionbar",
			Type = "Event",
			LiteralName = "UPDATE_BONUS_ACTIONBAR",
		},
		{
			Name = "UpdateExtraActionbar",
			Type = "Event",
			LiteralName = "UPDATE_EXTRA_ACTIONBAR",
		},
		{
			Name = "UpdateMultiCastActionbar",
			Type = "Event",
			LiteralName = "UPDATE_MULTI_CAST_ACTIONBAR",
		},
		{
			Name = "UpdateOverrideActionbar",
			Type = "Event",
			LiteralName = "UPDATE_OVERRIDE_ACTIONBAR",
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "AddOns",
	Type = "System",
	Namespace = "C_AddOns",

	Functions =
	{
	},

	Events =
	{
		{
			Name = "AddonLoaded",
			Type = "Event",
			LiteralName = "ADDON_LOADED",
			Payload =
			{
				{ Name = "addOnName", Type = "string", Nilable = false },
			},
		},
		{
			Name = "AddonsUnloading",
			Type = "Event",
			LiteralName = "ADDONS_UNLOADING",
			Payload =
			{
				{ Name = "closingClient", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SavedVariablesTooLarge",
			Type = "Event",
			LiteralName = "SAVED_VARIABLES_TOO_LARGE",
			Payload =
			{
				{ Name = "addOnName", Type = "string", Nilable = false },
			},
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "AdventureJournal",
	Type = "System",
	Namespace = "C_AdventureJournal",

	Functions =
	{
	},

	Events =
	{
		{
			Name = "AjDungeonAction",
			Type = "Event",
			LiteralName = "AJ_DUNGEON_ACTION",
			Payload =
			{
				{ Name = "lfgDungeonID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "AjOpen",
			Type = "Event",
			LiteralName = "AJ_OPEN",
		},
		{
			Name = "AjPveLfgAction",
			Type = "Event",
			LiteralName = "AJ_PVE_LFG_ACTION",
		},
		{
			Name = "AjPvpAction",
			Type = "Event",
			LiteralName = "AJ_PVP_ACTION",
			Payload =
			{
				{ Name = "battleMasterListID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "AjPvpLfgAction",
			Type = "Event",
			LiteralName = "AJ_PVP_LFG_ACTION",
		},
		{
			Name = "AjPvpRbgAction",
			Type = "Event",
			LiteralName = "AJ_PVP_RBG_ACTION",
		},
		{
			Name = "AjPvpSkirmishAction",
			Type = "Event",
			LiteralName = "AJ_PVP_SKIRMISH_ACTION",
		},
		{
			Name = "AjQuestLogOpen",
			Type = "Event",
			LiteralName = "AJ_QUEST_LOG_OPEN",
			Payload =
			{
				{ Name = "questID", Type = "number", Nilable = false },
				{ Name = "uiMapID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "AjRaidAction",
			Type = "Event",
			LiteralName = "AJ_RAID_ACTION",
			Payload =
			{
				{ Name = "lfgDungeonID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "AjRefreshDisplay",
			Type = "Event",
			LiteralName = "AJ_REFRESH_DISPLAY",
			Payload =
			{
				{ Name = "newAdventureNotice", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "AjRewardDataReceived",
			Type = "Event",
			LiteralName = "AJ_REWARD_DATA_RECEIVED",
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "AdventureMap",
	Type = "System",
	Namespace = "C_AdventureMap",

	Functions =
	{
	},

	Events =
	{
		{
			Name = "AdventureMapClose",
			Type = "Event",
			LiteralName = "ADVENTURE_MAP_CLOSE",
		},
		{
			Name = "AdventureMapOpen",
			Type = "Event",
			LiteralName = "ADVENTURE_MAP_OPEN",
			Payload =
			{
				{ Name = "followerTypeID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "AdventureMapQuestUpdate",
			Type = "Event",
			LiteralName = "ADVENTURE_MAP_QUEST_UPDATE",
			Payload =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "AdventureMapUpdateInsets",
			Type = "Event",
			LiteralName = "ADVENTURE_MAP_UPDATE_INSETS",
		},
		{
			Name = "AdventureMapUpdatePois",
			Type = "Event",
			LiteralName = "ADVENTURE_MAP_UPDATE_POIS",
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "AreaPoiInfo",
	Type = "System",
	Namespace = "C_AreaPoiInfo",

	Functions =
	{
		{
			Name = "GetAreaPOIForMap",
			Type = "Function",

			Arguments =
			{
				{ Name = "uiMapID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "areaPoiIDs", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "GetAreaPOIInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "uiMapID", Type = "number", Nilable = false },
				{ Name = "areaPoiID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "poiInfo", Type = "AreaPOIInfo", Nilable = false },
			},
		},
		{
			Name = "GetAreaPOISecondsLeft",
			Type = "Function",
			Documentation = { "Returns the number of seconds until the POI expires." },

			Arguments =
			{
				{ Name = "areaPoiID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "secondsLeft", Type = "number", Nilable = false },
			},
		},
		{
			Name = "IsAreaPOITimed",
			Type = "Function",
			Documentation = { "This statically determines if the POI is timed, GetAreaPOITimeLeft retrieves the value from the server and may return nothing for long intervals" },

			Arguments =
			{
				{ Name = "areaPoiID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isTimed", Type = "bool", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "AreaPoisUpdated",
			Type = "Event",
			LiteralName = "AREA_POIS_UPDATED",
		},
	},

	Tables =
	{
		{
			Name = "AreaPOIInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "areaPoiID", Type = "number", Nilable = false },
				{ Name = "position", Type = "table", Mixin = "Vector2DMixin", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "description", Type = "string", Nilable = true },
				{ Name = "textureIndex", Type = "number", Nilable = true },
				{ Name = "widgetSetID", Type = "number", Nilable = true },
				{ Name = "atlasName", Type = "string", Nilable = true },
				{ Name = "uiTextureKit", Type = "string", Nilable = true },
				{ Name = "shouldGlow", Type = "bool", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "AuctionHouse",
	Type = "System",
	Namespace = "C_AuctionHouse",

	Functions =
	{
		{
			Name = "CalculateCommodityDeposit",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemID", Type = "number", Nilable = false },
				{ Name = "duration", Type = "number", Nilable = false },
				{ Name = "quantity", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "depositCost", Type = "number", Nilable = true },
			},
		},
		{
			Name = "CalculateItemDeposit",
			Type = "Function",

			Arguments =
			{
				{ Name = "item", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
				{ Name = "duration", Type = "number", Nilable = false },
				{ Name = "quantity", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "depositCost", Type = "number", Nilable = true },
			},
		},
		{
			Name = "CanCancelAuction",
			Type = "Function",

			Arguments =
			{
				{ Name = "ownedAuctionID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "canCancelAuction", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "CancelAuction",
			Type = "Function",

			Arguments =
			{
				{ Name = "ownedAuctionID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "CancelCommoditiesPurchase",
			Type = "Function",
		},
		{
			Name = "CancelSell",
			Type = "Function",
		},
		{
			Name = "CloseAuctionHouse",
			Type = "Function",
		},
		{
			Name = "ConfirmCommoditiesPurchase",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemID", Type = "number", Nilable = false },
				{ Name = "quantity", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ConfirmPostCommodity",
			Type = "Function",

			Arguments =
			{
				{ Name = "item", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
				{ Name = "duration", Type = "number", Nilable = false },
				{ Name = "quantity", Type = "number", Nilable = false },
				{ Name = "unitPrice", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ConfirmPostItem",
			Type = "Function",

			Arguments =
			{
				{ Name = "item", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
				{ Name = "duration", Type = "number", Nilable = false },
				{ Name = "quantity", Type = "number", Nilable = false },
				{ Name = "bid", Type = "number", Nilable = true },
				{ Name = "buyout", Type = "number", Nilable = true },
			},
		},
		{
			Name = "FavoritesAreAvailable",
			Type = "Function",

			Returns =
			{
				{ Name = "favoritesAreAvailable", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetAuctionInfoByID",
			Type = "Function",

			Arguments =
			{
				{ Name = "auctionID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "priceInfo", Type = "AuctionInfo", Nilable = true },
			},
		},
		{
			Name = "GetAuctionItemSubClasses",
			Type = "Function",

			Arguments =
			{
				{ Name = "classID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "subClasses", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "GetAvailablePostCount",
			Type = "Function",

			Arguments =
			{
				{ Name = "item", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "listCount", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetBidInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "bidIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "bid", Type = "BidInfo", Nilable = true },
			},
		},
		{
			Name = "GetBidType",
			Type = "Function",

			Arguments =
			{
				{ Name = "bidTypeIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "typeItemKey", Type = "ItemKey", Nilable = true },
			},
		},
		{
			Name = "GetBids",
			Type = "Function",

			Returns =
			{
				{ Name = "bids", Type = "table", InnerType = "BidInfo", Nilable = false },
			},
		},
		{
			Name = "GetBrowseResults",
			Type = "Function",

			Returns =
			{
				{ Name = "browseResults", Type = "table", InnerType = "BrowseResultInfo", Nilable = false },
			},
		},
		{
			Name = "GetCancelCost",
			Type = "Function",

			Arguments =
			{
				{ Name = "ownedAuctionID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "cancelCost", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetCommoditySearchResultInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemID", Type = "number", Nilable = false },
				{ Name = "commoditySearchResultIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "result", Type = "CommoditySearchResultInfo", Nilable = true },
			},
		},
		{
			Name = "GetCommoditySearchResultsQuantity",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "totalQuantity", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetExtraBrowseInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemKey", Type = "ItemKey", Nilable = false },
			},

			Returns =
			{
				{ Name = "extraInfo", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetFilterGroups",
			Type = "Function",

			Returns =
			{
				{ Name = "filterGroups", Type = "table", InnerType = "AuctionHouseFilterGroup", Nilable = false },
			},
		},
		{
			Name = "GetItemCommodityStatus",
			Type = "Function",

			Arguments =
			{
				{ Name = "item", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "isCommodity", Type = "ItemCommodityStatus", Nilable = false },
			},
		},
		{
			Name = "GetItemKeyFromItem",
			Type = "Function",

			Arguments =
			{
				{ Name = "item", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "itemKey", Type = "ItemKey", Nilable = false },
			},
		},
		{
			Name = "GetItemKeyInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemKey", Type = "ItemKey", Nilable = false },
				{ Name = "restrictQualityToFilter", Type = "bool", Nilable = false, Default = false },
			},

			Returns =
			{
				{ Name = "itemKeyInfo", Type = "ItemKeyInfo", Nilable = true },
			},
		},
		{
			Name = "GetItemKeyRequiredLevel",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemKey", Type = "ItemKey", Nilable = false },
			},

			Returns =
			{
				{ Name = "requiredLevel", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetItemSearchResultInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemKey", Type = "ItemKey", Nilable = false },
				{ Name = "itemSearchResultIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "result", Type = "ItemSearchResultInfo", Nilable = true },
			},
		},
		{
			Name = "GetItemSearchResultsQuantity",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemKey", Type = "ItemKey", Nilable = false },
			},

			Returns =
			{
				{ Name = "totalQuantity", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetMaxBidItemBid",
			Type = "Function",

			Returns =
			{
				{ Name = "maxBid", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetMaxBidItemBuyout",
			Type = "Function",

			Returns =
			{
				{ Name = "maxBuyout", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetMaxCommoditySearchResultPrice",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "maxUnitPrice", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetMaxItemSearchResultBid",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemKey", Type = "ItemKey", Nilable = false },
			},

			Returns =
			{
				{ Name = "maxBid", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetMaxItemSearchResultBuyout",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemKey", Type = "ItemKey", Nilable = false },
			},

			Returns =
			{
				{ Name = "maxBuyout", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetMaxOwnedAuctionBid",
			Type = "Function",

			Returns =
			{
				{ Name = "maxBid", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetMaxOwnedAuctionBuyout",
			Type = "Function",

			Returns =
			{
				{ Name = "maxBuyout", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetNumBidTypes",
			Type = "Function",

			Returns =
			{
				{ Name = "numBidTypes", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetNumBids",
			Type = "Function",

			Returns =
			{
				{ Name = "numBids", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetNumCommoditySearchResults",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "numSearchResults", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetNumItemSearchResults",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemKey", Type = "ItemKey", Nilable = false },
			},

			Returns =
			{
				{ Name = "numItemSearchResults", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetNumOwnedAuctionTypes",
			Type = "Function",

			Returns =
			{
				{ Name = "numOwnedAuctionTypes", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetNumOwnedAuctions",
			Type = "Function",

			Returns =
			{
				{ Name = "numOwnedAuctions", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetNumReplicateItems",
			Type = "Function",

			Returns =
			{
				{ Name = "numReplicateItems", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetOwnedAuctionInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "ownedAuctionIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "ownedAuction", Type = "OwnedAuctionInfo", Nilable = true },
			},
		},
		{
			Name = "GetOwnedAuctionType",
			Type = "Function",

			Arguments =
			{
				{ Name = "ownedAuctionTypeIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "typeItemKey", Type = "ItemKey", Nilable = true },
			},
		},
		{
			Name = "GetOwnedAuctions",
			Type = "Function",

			Returns =
			{
				{ Name = "ownedAuctions", Type = "table", InnerType = "OwnedAuctionInfo", Nilable = false },
			},
		},
		{
			Name = "GetQuoteDurationRemaining",
			Type = "Function",

			Returns =
			{
				{ Name = "quoteDurationSeconds", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetReplicateItemBattlePetInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "index", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "creatureID", Type = "number", Nilable = false },
				{ Name = "displayID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetReplicateItemInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "index", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "name", Type = "string", Nilable = true },
				{ Name = "texture", Type = "number", Nilable = true },
				{ Name = "count", Type = "number", Nilable = false },
				{ Name = "qualityID", Type = "number", Nilable = false },
				{ Name = "usable", Type = "bool", Nilable = true },
				{ Name = "level", Type = "number", Nilable = false },
				{ Name = "levelType", Type = "string", Nilable = true },
				{ Name = "minBid", Type = "number", Nilable = false },
				{ Name = "minIncrement", Type = "number", Nilable = false },
				{ Name = "buyoutPrice", Type = "number", Nilable = false },
				{ Name = "bidAmount", Type = "number", Nilable = false },
				{ Name = "highBidder", Type = "string", Nilable = true },
				{ Name = "bidderFullName", Type = "string", Nilable = true },
				{ Name = "owner", Type = "string", Nilable = true },
				{ Name = "ownerFullName", Type = "string", Nilable = true },
				{ Name = "saleStatus", Type = "number", Nilable = false },
				{ Name = "itemID", Type = "number", Nilable = false },
				{ Name = "hasAllInfo", Type = "bool", Nilable = true },
			},
		},
		{
			Name = "GetReplicateItemLink",
			Type = "Function",

			Arguments =
			{
				{ Name = "index", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "itemLink", Type = "string", Nilable = true },
			},
		},
		{
			Name = "GetReplicateItemTimeLeft",
			Type = "Function",

			Arguments =
			{
				{ Name = "index", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "timeLeft", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetTimeLeftBandInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "timeLeftBand", Type = "AuctionHouseTimeLeftBand", Nilable = false },
			},

			Returns =
			{
				{ Name = "timeLeftMinSeconds", Type = "number", Nilable = false },
				{ Name = "timeLeftMaxSeconds", Type = "number", Nilable = false },
			},
		},
		{
			Name = "HasFavorites",
			Type = "Function",

			Returns =
			{
				{ Name = "hasFavorites", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "HasFullBidResults",
			Type = "Function",

			Returns =
			{
				{ Name = "hasFullBidResults", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "HasFullBrowseResults",
			Type = "Function",

			Returns =
			{
				{ Name = "hasFullBrowseResults", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "HasFullCommoditySearchResults",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "hasFullResults", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "HasFullItemSearchResults",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemKey", Type = "ItemKey", Nilable = false },
			},

			Returns =
			{
				{ Name = "hasFullResults", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "HasFullOwnedAuctionResults",
			Type = "Function",

			Returns =
			{
				{ Name = "hasFullOwnedAuctionResults", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "HasMaxFavorites",
			Type = "Function",

			Returns =
			{
				{ Name = "hasMaxFavorites", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "HasSearchResults",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemKey", Type = "ItemKey", Nilable = false },
			},

			Returns =
			{
				{ Name = "hasSearchResults", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsFavoriteItem",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemKey", Type = "ItemKey", Nilable = false },
			},

			Returns =
			{
				{ Name = "isFavorite", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsSellItemValid",
			Type = "Function",

			Arguments =
			{
				{ Name = "item", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
				{ Name = "displayError", Type = "bool", Nilable = false, Default = true },
			},

			Returns =
			{
				{ Name = "valid", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsThrottledMessageSystemReady",
			Type = "Function",

			Returns =
			{
				{ Name = "canSendThrottledMessage", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "MakeItemKey",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemID", Type = "number", Nilable = false },
				{ Name = "itemLevel", Type = "number", Nilable = false, Default = 0 },
				{ Name = "itemSuffix", Type = "number", Nilable = false, Default = 0 },
				{ Name = "battlePetSpeciesID", Type = "number", Nilable = false, Default = 0 },
			},

			Returns =
			{
				{ Name = "itemKey", Type = "ItemKey", Nilable = false },
			},
		},
		{
			Name = "PlaceBid",
			Type = "Function",

			Arguments =
			{
				{ Name = "auctionID", Type = "number", Nilable = false },
				{ Name = "bidAmount", Type = "number", Nilable = false },
			},
		},
		{
			Name = "PostCommodity",
			Type = "Function",

			Arguments =
			{
				{ Name = "item", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
				{ Name = "duration", Type = "number", Nilable = false },
				{ Name = "quantity", Type = "number", Nilable = false },
				{ Name = "unitPrice", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "needsConfirmation", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "PostItem",
			Type = "Function",

			Arguments =
			{
				{ Name = "item", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
				{ Name = "duration", Type = "number", Nilable = false },
				{ Name = "quantity", Type = "number", Nilable = false },
				{ Name = "bid", Type = "number", Nilable = true },
				{ Name = "buyout", Type = "number", Nilable = true },
			},

			Returns =
			{
				{ Name = "needsConfirmation", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "QueryBids",
			Type = "Function",

			Arguments =
			{
				{ Name = "sorts", Type = "table", InnerType = "AuctionHouseSortType", Nilable = false },
				{ Name = "auctionIDs", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "QueryOwnedAuctions",
			Type = "Function",

			Arguments =
			{
				{ Name = "sorts", Type = "table", InnerType = "AuctionHouseSortType", Nilable = false },
			},
		},
		{
			Name = "RefreshCommoditySearchResults",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "RefreshItemSearchResults",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemKey", Type = "ItemKey", Nilable = false },
				{ Name = "minLevelFilter", Type = "number", Nilable = true },
				{ Name = "maxLevelFilter", Type = "number", Nilable = true },
			},
		},
		{
			Name = "ReplicateItems",
			Type = "Function",
			Documentation = { "This function should be used in place of an 'allItem' QueryAuctionItems call to query the entire auction house." },
		},
		{
			Name = "RequestFavorites",
			Type = "Function",
		},
		{
			Name = "RequestMoreBrowseResults",
			Type = "Function",
		},
		{
			Name = "RequestMoreCommoditySearchResults",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "hasFullResults", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "RequestMoreItemSearchResults",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemKey", Type = "ItemKey", Nilable = false },
			},

			Returns =
			{
				{ Name = "hasFullResults", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "RequestOwnedAuctionBidderInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "auctionID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "bidderName", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SearchForFavorites",
			Type = "Function",

			Arguments =
			{
				{ Name = "sorts", Type = "table", InnerType = "AuctionHouseSortType", Nilable = false },
			},
		},
		{
			Name = "SearchForItemKeys",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemKeys", Type = "table", InnerType = "ItemKey", Nilable = false },
				{ Name = "sorts", Type = "table", InnerType = "AuctionHouseSortType", Nilable = false },
			},
		},
		{
			Name = "SendBrowseQuery",
			Type = "Function",

			Arguments =
			{
				{ Name = "query", Type = "AuctionHouseBrowseQuery", Nilable = false },
			},
		},
		{
			Name = "SendSearchQuery",
			Type = "Function",
			Documentation = { "Search queries are restricted to 100 calls per minute. These should not be used to query the entire auction house. See ReplicateItems" },

			Arguments =
			{
				{ Name = "itemKey", Type = "ItemKey", Nilable = false },
				{ Name = "sorts", Type = "table", InnerType = "AuctionHouseSortType", Nilable = false },
				{ Name = "separateOwnerItems", Type = "bool", Nilable = false },
				{ Name = "minLevelFilter", Type = "number", Nilable = false, Default = 0 },
				{ Name = "maxLevelFilter", Type = "number", Nilable = false, Default = 0 },
			},
		},
		{
			Name = "SendSellSearchQuery",
			Type = "Function",
			Documentation = { "Search queries are restricted to 100 calls per minute. These should not be used to query the entire auction house. See ReplicateItems" },

			Arguments =
			{
				{ Name = "itemKey", Type = "ItemKey", Nilable = false },
				{ Name = "sorts", Type = "table", InnerType = "AuctionHouseSortType", Nilable = false },
				{ Name = "separateOwnerItems", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetFavoriteItem",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemKey", Type = "ItemKey", Nilable = false },
				{ Name = "setFavorite", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "StartCommoditiesPurchase",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemID", Type = "number", Nilable = false },
				{ Name = "quantity", Type = "number", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "AuctionCanceled",
			Type = "Event",
			LiteralName = "AUCTION_CANCELED",
			Payload =
			{
				{ Name = "auctionID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "AuctionHouseAuctionCreated",
			Type = "Event",
			LiteralName = "AUCTION_HOUSE_AUCTION_CREATED",
			Documentation = { "This signal is not used in the base UI but is included for AddOn ease-of-use." },
			Payload =
			{
				{ Name = "auctionID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "AuctionHouseAuctionsExpired",
			Type = "Event",
			LiteralName = "AUCTION_HOUSE_AUCTIONS_EXPIRED",
			Payload =
			{
				{ Name = "auctionID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "AuctionHouseBrowseFailure",
			Type = "Event",
			LiteralName = "AUCTION_HOUSE_BROWSE_FAILURE",
		},
		{
			Name = "AuctionHouseBrowseResultsAdded",
			Type = "Event",
			LiteralName = "AUCTION_HOUSE_BROWSE_RESULTS_ADDED",
			Payload =
			{
				{ Name = "addedBrowseResults", Type = "table", InnerType = "BrowseResultInfo", Nilable = false },
			},
		},
		{
			Name = "AuctionHouseBrowseResultsUpdated",
			Type = "Event",
			LiteralName = "AUCTION_HOUSE_BROWSE_RESULTS_UPDATED",
		},
		{
			Name = "AuctionHouseClosed",
			Type = "Event",
			LiteralName = "AUCTION_HOUSE_CLOSED",
		},
		{
			Name = "AuctionHouseDisabled",
			Type = "Event",
			LiteralName = "AUCTION_HOUSE_DISABLED",
		},
		{
			Name = "AuctionHouseFavoritesUpdated",
			Type = "Event",
			LiteralName = "AUCTION_HOUSE_FAVORITES_UPDATED",
		},
		{
			Name = "AuctionHouseNewBidReceived",
			Type = "Event",
			LiteralName = "AUCTION_HOUSE_NEW_BID_RECEIVED",
			Payload =
			{
				{ Name = "auctionID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "AuctionHouseNewResultsReceived",
			Type = "Event",
			LiteralName = "AUCTION_HOUSE_NEW_RESULTS_RECEIVED",
			Documentation = { "This signal is not used in the base UI but is included for AddOn ease-of-use. Payload is nil for browse queries." },
			Payload =
			{
				{ Name = "itemKey", Type = "ItemKey", Nilable = true },
			},
		},
		{
			Name = "AuctionHousePostError",
			Type = "Event",
			LiteralName = "AUCTION_HOUSE_POST_ERROR",
		},
		{
			Name = "AuctionHousePostWarning",
			Type = "Event",
			LiteralName = "AUCTION_HOUSE_POST_WARNING",
		},
		{
			Name = "AuctionHousePurchaseDeliveryDelayUpdate",
			Type = "Event",
			LiteralName = "AUCTION_HOUSE_PURCHASE_DELIVERY_DELAY_UPDATE",
			Payload =
			{
				{ Name = "purchasedItemDeliveryDelay", Type = "number", Nilable = false },
			},
		},
		{
			Name = "AuctionHouseScriptDeprecated",
			Type = "Event",
			LiteralName = "AUCTION_HOUSE_SCRIPT_DEPRECATED",
		},
		{
			Name = "AuctionHouseShow",
			Type = "Event",
			LiteralName = "AUCTION_HOUSE_SHOW",
		},
		{
			Name = "AuctionHouseShowCommodityWonNotification",
			Type = "Event",
			LiteralName = "AUCTION_HOUSE_SHOW_COMMODITY_WON_NOTIFICATION",
			Payload =
			{
				{ Name = "commodityName", Type = "string", Nilable = false },
				{ Name = "commodityQuantity", Type = "number", Nilable = false },
			},
		},
		{
			Name = "AuctionHouseShowError",
			Type = "Event",
			LiteralName = "AUCTION_HOUSE_SHOW_ERROR",
			Payload =
			{
				{ Name = "error", Type = "AuctionHouseError", Nilable = false },
			},
		},
		{
			Name = "AuctionHouseShowFormattedNotification",
			Type = "Event",
			LiteralName = "AUCTION_HOUSE_SHOW_FORMATTED_NOTIFICATION",
			Payload =
			{
				{ Name = "notification", Type = "AuctionHouseNotification", Nilable = false },
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "auctionID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "AuctionHouseShowNotification",
			Type = "Event",
			LiteralName = "AUCTION_HOUSE_SHOW_NOTIFICATION",
			Payload =
			{
				{ Name = "notification", Type = "AuctionHouseNotification", Nilable = false },
			},
		},
		{
			Name = "AuctionHouseThrottledMessageDropped",
			Type = "Event",
			LiteralName = "AUCTION_HOUSE_THROTTLED_MESSAGE_DROPPED",
		},
		{
			Name = "AuctionHouseThrottledMessageQueued",
			Type = "Event",
			LiteralName = "AUCTION_HOUSE_THROTTLED_MESSAGE_QUEUED",
		},
		{
			Name = "AuctionHouseThrottledMessageResponseReceived",
			Type = "Event",
			LiteralName = "AUCTION_HOUSE_THROTTLED_MESSAGE_RESPONSE_RECEIVED",
		},
		{
			Name = "AuctionHouseThrottledMessageSent",
			Type = "Event",
			LiteralName = "AUCTION_HOUSE_THROTTLED_MESSAGE_SENT",
		},
		{
			Name = "AuctionHouseThrottledSystemReady",
			Type = "Event",
			LiteralName = "AUCTION_HOUSE_THROTTLED_SYSTEM_READY",
		},
		{
			Name = "AuctionMultisellFailure",
			Type = "Event",
			LiteralName = "AUCTION_MULTISELL_FAILURE",
		},
		{
			Name = "AuctionMultisellStart",
			Type = "Event",
			LiteralName = "AUCTION_MULTISELL_START",
			Payload =
			{
				{ Name = "numRepetitions", Type = "number", Nilable = false },
			},
		},
		{
			Name = "AuctionMultisellUpdate",
			Type = "Event",
			LiteralName = "AUCTION_MULTISELL_UPDATE",
			Payload =
			{
				{ Name = "createdCount", Type = "number", Nilable = false },
				{ Name = "totalToCreate", Type = "number", Nilable = false },
			},
		},
		{
			Name = "BidAdded",
			Type = "Event",
			LiteralName = "BID_ADDED",
			Payload =
			{
				{ Name = "bidID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "BidsUpdated",
			Type = "Event",
			LiteralName = "BIDS_UPDATED",
		},
		{
			Name = "CommodityPriceUnavailable",
			Type = "Event",
			LiteralName = "COMMODITY_PRICE_UNAVAILABLE",
		},
		{
			Name = "CommodityPriceUpdated",
			Type = "Event",
			LiteralName = "COMMODITY_PRICE_UPDATED",
			Payload =
			{
				{ Name = "updatedUnitPrice", Type = "number", Nilable = false },
				{ Name = "updatedTotalPrice", Type = "number", Nilable = false },
			},
		},
		{
			Name = "CommodityPurchaseFailed",
			Type = "Event",
			LiteralName = "COMMODITY_PURCHASE_FAILED",
		},
		{
			Name = "CommodityPurchaseSucceeded",
			Type = "Event",
			LiteralName = "COMMODITY_PURCHASE_SUCCEEDED",
		},
		{
			Name = "CommodityPurchased",
			Type = "Event",
			LiteralName = "COMMODITY_PURCHASED",
			Payload =
			{
				{ Name = "itemID", Type = "number", Nilable = false },
				{ Name = "quantity", Type = "number", Nilable = false },
			},
		},
		{
			Name = "CommoditySearchResultsAdded",
			Type = "Event",
			LiteralName = "COMMODITY_SEARCH_RESULTS_ADDED",
			Payload =
			{
				{ Name = "itemID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "CommoditySearchResultsUpdated",
			Type = "Event",
			LiteralName = "COMMODITY_SEARCH_RESULTS_UPDATED",
			Payload =
			{
				{ Name = "itemID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ExtraBrowseInfoReceived",
			Type = "Event",
			LiteralName = "EXTRA_BROWSE_INFO_RECEIVED",
			Payload =
			{
				{ Name = "itemID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ItemKeyItemInfoReceived",
			Type = "Event",
			LiteralName = "ITEM_KEY_ITEM_INFO_RECEIVED",
			Payload =
			{
				{ Name = "itemID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ItemPurchased",
			Type = "Event",
			LiteralName = "ITEM_PURCHASED",
			Payload =
			{
				{ Name = "itemID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ItemSearchResultsAdded",
			Type = "Event",
			LiteralName = "ITEM_SEARCH_RESULTS_ADDED",
			Payload =
			{
				{ Name = "itemKey", Type = "ItemKey", Nilable = false },
			},
		},
		{
			Name = "ItemSearchResultsUpdated",
			Type = "Event",
			LiteralName = "ITEM_SEARCH_RESULTS_UPDATED",
			Payload =
			{
				{ Name = "itemKey", Type = "ItemKey", Nilable = false },
				{ Name = "newAuctionID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "OwnedAuctionBidderInfoReceived",
			Type = "Event",
			LiteralName = "OWNED_AUCTION_BIDDER_INFO_RECEIVED",
			Payload =
			{
				{ Name = "auctionID", Type = "number", Nilable = false },
				{ Name = "bidderName", Type = "string", Nilable = false },
			},
		},
		{
			Name = "OwnedAuctionsUpdated",
			Type = "Event",
			LiteralName = "OWNED_AUCTIONS_UPDATED",
		},
		{
			Name = "ReplicateItemListUpdate",
			Type = "Event",
			LiteralName = "REPLICATE_ITEM_LIST_UPDATE",
		},
	},

	Tables =
	{
		{
			Name = "AuctionHouseFilterCategory",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 0,
			MaxValue = 2,
			Fields =
			{
				{ Name = "Uncategorized", Type = "AuctionHouseFilterCategory", EnumValue = 0 },
				{ Name = "Equipment", Type = "AuctionHouseFilterCategory", EnumValue = 1 },
				{ Name = "Rarity", Type = "AuctionHouseFilterCategory", EnumValue = 2 },
			},
		},
		{
			Name = "AuctionStatus",
			Type = "Enumeration",
			NumValues = 2,
			MinValue = 0,
			MaxValue = 1,
			Fields =
			{
				{ Name = "Active", Type = "AuctionStatus", EnumValue = 0 },
				{ Name = "Sold", Type = "AuctionStatus", EnumValue = 1 },
			},
		},
		{
			Name = "ItemCommodityStatus",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 0,
			MaxValue = 2,
			Fields =
			{
				{ Name = "Unknown", Type = "ItemCommodityStatus", EnumValue = 0 },
				{ Name = "Item", Type = "ItemCommodityStatus", EnumValue = 1 },
				{ Name = "Commodity", Type = "ItemCommodityStatus", EnumValue = 2 },
			},
		},
		{
			Name = "AuctionHouseBrowseQuery",
			Type = "Structure",
			Fields =
			{
				{ Name = "searchString", Type = "string", Nilable = false },
				{ Name = "sorts", Type = "table", InnerType = "AuctionHouseSortType", Nilable = false },
				{ Name = "minLevel", Type = "number", Nilable = true },
				{ Name = "maxLevel", Type = "number", Nilable = true },
				{ Name = "filters", Type = "table", InnerType = "AuctionHouseFilter", Nilable = true },
				{ Name = "itemClassFilters", Type = "table", InnerType = "AuctionHouseItemClassFilter", Nilable = true },
			},
		},
		{
			Name = "AuctionHouseFilterGroup",
			Type = "Structure",
			Fields =
			{
				{ Name = "category", Type = "AuctionHouseFilterCategory", Nilable = false },
				{ Name = "filters", Type = "table", InnerType = "AuctionHouseFilter", Nilable = false },
			},
		},
		{
			Name = "AuctionHouseItemClassFilter",
			Type = "Structure",
			Fields =
			{
				{ Name = "classID", Type = "number", Nilable = false },
				{ Name = "subClassID", Type = "number", Nilable = true },
				{ Name = "inventoryType", Type = "InventoryType", Nilable = true },
			},
		},
		{
			Name = "AuctionHouseSortType",
			Type = "Structure",
			Fields =
			{
				{ Name = "sortOrder", Type = "AuctionHouseSortOrder", Nilable = false },
				{ Name = "reverseSort", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "AuctionInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "itemKey", Type = "ItemKey", Nilable = false },
				{ Name = "itemLink", Type = "string", Nilable = true },
				{ Name = "minBid", Type = "number", Nilable = true },
				{ Name = "bidAmount", Type = "number", Nilable = true },
				{ Name = "buyoutAmount", Type = "number", Nilable = true },
				{ Name = "bidder", Type = "string", Nilable = true },
			},
		},
		{
			Name = "BidInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "auctionID", Type = "number", Nilable = false },
				{ Name = "itemKey", Type = "ItemKey", Nilable = false },
				{ Name = "itemLink", Type = "string", Nilable = true },
				{ Name = "timeLeft", Type = "AuctionHouseTimeLeftBand", Nilable = false },
				{ Name = "minBid", Type = "number", Nilable = true },
				{ Name = "bidAmount", Type = "number", Nilable = true },
				{ Name = "buyoutAmount", Type = "number", Nilable = true },
				{ Name = "bidder", Type = "string", Nilable = true },
			},
		},
		{
			Name = "BrowseResultInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "itemKey", Type = "ItemKey", Nilable = false },
				{ Name = "appearanceLink", Type = "string", Nilable = true },
				{ Name = "totalQuantity", Type = "number", Nilable = false },
				{ Name = "minPrice", Type = "number", Nilable = false },
				{ Name = "containsOwnerItem", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "CommoditySearchResultInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "itemID", Type = "number", Nilable = false },
				{ Name = "quantity", Type = "number", Nilable = false },
				{ Name = "unitPrice", Type = "number", Nilable = false },
				{ Name = "auctionID", Type = "number", Nilable = false },
				{ Name = "owners", Type = "table", InnerType = "string", Nilable = false },
				{ Name = "totalNumberOfOwners", Type = "number", Nilable = false },
				{ Name = "timeLeftSeconds", Type = "number", Nilable = true },
				{ Name = "numOwnerItems", Type = "number", Nilable = false },
				{ Name = "containsOwnerItem", Type = "bool", Nilable = false },
				{ Name = "containsAccountItem", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ItemKey",
			Type = "Structure",
			Fields =
			{
				{ Name = "itemID", Type = "number", Nilable = false },
				{ Name = "itemLevel", Type = "number", Nilable = false, Default = 0 },
				{ Name = "itemSuffix", Type = "number", Nilable = false, Default = 0 },
				{ Name = "battlePetSpeciesID", Type = "number", Nilable = false, Default = 0 },
			},
		},
		{
			Name = "ItemKeyInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "itemID", Type = "number", Nilable = false },
				{ Name = "battlePetSpeciesID", Type = "number", Nilable = false },
				{ Name = "itemName", Type = "string", Nilable = false },
				{ Name = "battlePetLink", Type = "string", Nilable = true },
				{ Name = "appearanceLink", Type = "string", Nilable = true },
				{ Name = "quality", Type = "number", Nilable = false },
				{ Name = "iconFileID", Type = "number", Nilable = false },
				{ Name = "isPet", Type = "bool", Nilable = false },
				{ Name = "isCommodity", Type = "bool", Nilable = false },
				{ Name = "isEquipment", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ItemSearchResultInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "itemKey", Type = "ItemKey", Nilable = false },
				{ Name = "owners", Type = "table", InnerType = "string", Nilable = false },
				{ Name = "totalNumberOfOwners", Type = "number", Nilable = false },
				{ Name = "timeLeft", Type = "AuctionHouseTimeLeftBand", Nilable = false },
				{ Name = "auctionID", Type = "number", Nilable = false },
				{ Name = "quantity", Type = "number", Nilable = false },
				{ Name = "itemLink", Type = "string", Nilable = true },
				{ Name = "containsOwnerItem", Type = "bool", Nilable = false },
				{ Name = "containsAccountItem", Type = "bool", Nilable = false },
				{ Name = "containsSocketedItem", Type = "bool", Nilable = false },
				{ Name = "bidder", Type = "string", Nilable = true },
				{ Name = "minBid", Type = "number", Nilable = true },
				{ Name = "bidAmount", Type = "number", Nilable = true },
				{ Name = "buyoutAmount", Type = "number", Nilable = true },
				{ Name = "timeLeftSeconds", Type = "number", Nilable = true },
			},
		},
		{
			Name = "OwnedAuctionInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "auctionID", Type = "number", Nilable = false },
				{ Name = "itemKey", Type = "ItemKey", Nilable = false },
				{ Name = "itemLink", Type = "string", Nilable = true },
				{ Name = "status", Type = "AuctionStatus", Nilable = false },
				{ Name = "quantity", Type = "number", Nilable = false },
				{ Name = "timeLeftSeconds", Type = "number", Nilable = true },
				{ Name = "timeLeft", Type = "AuctionHouseTimeLeftBand", Nilable = true },
				{ Name = "bidAmount", Type = "number", Nilable = true },
				{ Name = "buyoutAmount", Type = "number", Nilable = true },
				{ Name = "bidder", Type = "string", Nilable = true },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "AzeriteEmpoweredItem",
	Type = "System",
	Namespace = "C_AzeriteEmpoweredItem",

	Functions =
	{
		{
			Name = "CanSelectPower",
			Type = "Function",

			Arguments =
			{
				{ Name = "azeriteEmpoweredItemLocation", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
				{ Name = "powerID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "canSelect", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "CloseAzeriteEmpoweredItemRespec",
			Type = "Function",
		},
		{
			Name = "ConfirmAzeriteEmpoweredItemRespec",
			Type = "Function",

			Arguments =
			{
				{ Name = "azeriteEmpoweredItemLocation", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},
		},
		{
			Name = "GetAllTierInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "azeriteEmpoweredItemLocation", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "tierInfo", Type = "table", InnerType = "AzeriteEmpoweredItemTierInfo", Nilable = false },
			},
		},
		{
			Name = "GetAllTierInfoByItemID",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemInfo", Type = "string", Nilable = false },
				{ Name = "classID", Type = "number", Nilable = true, Documentation = { "Specify a class ID to get tier information about that class, otherwise uses the player's class if left nil" } },
			},

			Returns =
			{
				{ Name = "tierInfo", Type = "table", InnerType = "AzeriteEmpoweredItemTierInfo", Nilable = false },
			},
		},
		{
			Name = "GetAzeriteEmpoweredItemRespecCost",
			Type = "Function",

			Returns =
			{
				{ Name = "cost", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetPowerInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "powerID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "powerInfo", Type = "AzeriteEmpoweredItemPowerInfo", Nilable = false },
			},
		},
		{
			Name = "GetPowerText",
			Type = "Function",

			Arguments =
			{
				{ Name = "azeriteEmpoweredItemLocation", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
				{ Name = "powerID", Type = "number", Nilable = false },
				{ Name = "level", Type = "AzeritePowerLevel", Nilable = false },
			},

			Returns =
			{
				{ Name = "powerText", Type = "AzeriteEmpoweredItemPowerText", Nilable = false },
			},
		},
		{
			Name = "GetSpecsForPower",
			Type = "Function",

			Arguments =
			{
				{ Name = "powerID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "specInfo", Type = "table", InnerType = "AzeriteSpecInfo", Nilable = false },
			},
		},
		{
			Name = "HasAnyUnselectedPowers",
			Type = "Function",

			Arguments =
			{
				{ Name = "azeriteEmpoweredItemLocation", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "hasAnyUnselectedPowers", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "HasBeenViewed",
			Type = "Function",

			Arguments =
			{
				{ Name = "azeriteEmpoweredItemLocation", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "hasBeenViewed", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsAzeriteEmpoweredItem",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemLocation", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "isAzeriteEmpoweredItem", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsAzeriteEmpoweredItemByID",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemInfo", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "isAzeriteEmpoweredItem", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsAzeritePreviewSourceDisplayable",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemInfo", Type = "string", Nilable = false },
				{ Name = "classID", Type = "number", Nilable = true, Documentation = { "Specify a class ID to determine if its displayable for that class, otherwise uses the player's class if left nil" } },
			},

			Returns =
			{
				{ Name = "isAzeritePreviewSourceDisplayable", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsHeartOfAzerothEquipped",
			Type = "Function",

			Returns =
			{
				{ Name = "isHeartOfAzerothEquipped", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsPowerAvailableForSpec",
			Type = "Function",

			Arguments =
			{
				{ Name = "powerID", Type = "number", Nilable = false },
				{ Name = "specID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isPowerAvailableForSpec", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsPowerSelected",
			Type = "Function",

			Arguments =
			{
				{ Name = "azeriteEmpoweredItemLocation", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
				{ Name = "powerID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isSelected", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SelectPower",
			Type = "Function",

			Arguments =
			{
				{ Name = "azeriteEmpoweredItemLocation", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
				{ Name = "powerID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "success", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetHasBeenViewed",
			Type = "Function",

			Arguments =
			{
				{ Name = "azeriteEmpoweredItemLocation", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "AzeriteEmpoweredItemEquippedStatusChanged",
			Type = "Event",
			LiteralName = "AZERITE_EMPOWERED_ITEM_EQUIPPED_STATUS_CHANGED",
			Payload =
			{
				{ Name = "isHeartEquipped", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "AzeriteEmpoweredItemSelectionUpdated",
			Type = "Event",
			LiteralName = "AZERITE_EMPOWERED_ITEM_SELECTION_UPDATED",
			Payload =
			{
				{ Name = "azeriteEmpoweredItemLocation", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},
		},
		{
			Name = "RespecAzeriteEmpoweredItemClosed",
			Type = "Event",
			LiteralName = "RESPEC_AZERITE_EMPOWERED_ITEM_CLOSED",
		},
		{
			Name = "RespecAzeriteEmpoweredItemOpened",
			Type = "Event",
			LiteralName = "RESPEC_AZERITE_EMPOWERED_ITEM_OPENED",
		},
	},

	Tables =
	{
		{
			Name = "AzeritePowerLevel",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 0,
			MaxValue = 2,
			Fields =
			{
				{ Name = "Base", Type = "AzeritePowerLevel", EnumValue = 0 },
				{ Name = "Upgraded", Type = "AzeritePowerLevel", EnumValue = 1 },
				{ Name = "Downgraded", Type = "AzeritePowerLevel", EnumValue = 2 },
			},
		},
		{
			Name = "AzeriteEmpoweredItemPowerInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "azeritePowerID", Type = "number", Nilable = false },
				{ Name = "spellID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "AzeriteEmpoweredItemPowerText",
			Type = "Structure",
			Fields =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "description", Type = "string", Nilable = false },
			},
		},
		{
			Name = "AzeriteEmpoweredItemTierInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "azeritePowerIDs", Type = "table", InnerType = "number", Nilable = false },
				{ Name = "unlockLevel", Type = "number", Nilable = false },
			},
		},
		{
			Name = "AzeriteSpecInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "classID", Type = "number", Nilable = false },
				{ Name = "specID", Type = "number", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "AzeriteEssence",
	Type = "System",
	Namespace = "C_AzeriteEssence",

	Functions =
	{
		{
			Name = "ActivateEssence",
			Type = "Function",

			Arguments =
			{
				{ Name = "essenceID", Type = "number", Nilable = false },
				{ Name = "milestoneID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "CanActivateEssence",
			Type = "Function",

			Arguments =
			{
				{ Name = "essenceID", Type = "number", Nilable = false },
				{ Name = "milestoneID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "canActivate", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "CanDeactivateEssence",
			Type = "Function",

			Arguments =
			{
				{ Name = "milestoneID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "canDeactivate", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "CanOpenUI",
			Type = "Function",

			Returns =
			{
				{ Name = "canOpen", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ClearPendingActivationEssence",
			Type = "Function",
		},
		{
			Name = "CloseForge",
			Type = "Function",
		},
		{
			Name = "GetEssenceHyperlink",
			Type = "Function",

			Arguments =
			{
				{ Name = "essenceID", Type = "number", Nilable = false },
				{ Name = "rank", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "link", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetEssenceInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "essenceID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "info", Type = "AzeriteEssenceInfo", Nilable = false },
			},
		},
		{
			Name = "GetEssences",
			Type = "Function",

			Returns =
			{
				{ Name = "essences", Type = "table", InnerType = "AzeriteEssenceInfo", Nilable = false },
			},
		},
		{
			Name = "GetMilestoneEssence",
			Type = "Function",

			Arguments =
			{
				{ Name = "milestoneID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "essenceID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetMilestoneInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "milestoneID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "info", Type = "AzeriteMilestoneInfo", Nilable = false },
			},
		},
		{
			Name = "GetMilestoneSpell",
			Type = "Function",

			Arguments =
			{
				{ Name = "milestoneID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "spellID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetMilestones",
			Type = "Function",

			Returns =
			{
				{ Name = "milestones", Type = "table", InnerType = "AzeriteMilestoneInfo", Nilable = false },
			},
		},
		{
			Name = "GetNumUnlockedEssences",
			Type = "Function",

			Returns =
			{
				{ Name = "numUnlockedEssences", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetNumUsableEssences",
			Type = "Function",

			Returns =
			{
				{ Name = "numUsableEssences", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetPendingActivationEssence",
			Type = "Function",

			Returns =
			{
				{ Name = "essenceID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "HasNeverActivatedAnyEssences",
			Type = "Function",

			Returns =
			{
				{ Name = "hasNeverActivatedAnyEssences", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "HasPendingActivationEssence",
			Type = "Function",

			Returns =
			{
				{ Name = "hasEssence", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsAtForge",
			Type = "Function",

			Returns =
			{
				{ Name = "isAtForge", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetPendingActivationEssence",
			Type = "Function",

			Arguments =
			{
				{ Name = "essenceID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "UnlockMilestone",
			Type = "Function",

			Arguments =
			{
				{ Name = "milestoneID", Type = "number", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "AzeriteEssenceActivated",
			Type = "Event",
			LiteralName = "AZERITE_ESSENCE_ACTIVATED",
			Payload =
			{
				{ Name = "slot", Type = "AzeriteEssenceSlot", Nilable = false },
				{ Name = "essenceID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "AzeriteEssenceActivationFailed",
			Type = "Event",
			LiteralName = "AZERITE_ESSENCE_ACTIVATION_FAILED",
			Payload =
			{
				{ Name = "slot", Type = "AzeriteEssenceSlot", Nilable = false },
				{ Name = "essenceID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "AzeriteEssenceChanged",
			Type = "Event",
			LiteralName = "AZERITE_ESSENCE_CHANGED",
			Payload =
			{
				{ Name = "essenceID", Type = "number", Nilable = false },
				{ Name = "newRank", Type = "number", Nilable = false },
			},
		},
		{
			Name = "AzeriteEssenceForgeClose",
			Type = "Event",
			LiteralName = "AZERITE_ESSENCE_FORGE_CLOSE",
		},
		{
			Name = "AzeriteEssenceForgeOpen",
			Type = "Event",
			LiteralName = "AZERITE_ESSENCE_FORGE_OPEN",
		},
		{
			Name = "AzeriteEssenceMilestoneUnlocked",
			Type = "Event",
			LiteralName = "AZERITE_ESSENCE_MILESTONE_UNLOCKED",
			Payload =
			{
				{ Name = "milestoneID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "AzeriteEssenceUpdate",
			Type = "Event",
			LiteralName = "AZERITE_ESSENCE_UPDATE",
		},
		{
			Name = "PendingAzeriteEssenceChanged",
			Type = "Event",
			LiteralName = "PENDING_AZERITE_ESSENCE_CHANGED",
			Payload =
			{
				{ Name = "essenceID", Type = "number", Nilable = true },
			},
		},
	},

	Tables =
	{
		{
			Name = "AzeriteEssenceInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "ID", Type = "number", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "rank", Type = "number", Nilable = false },
				{ Name = "unlocked", Type = "bool", Nilable = false },
				{ Name = "valid", Type = "bool", Nilable = false },
				{ Name = "icon", Type = "number", Nilable = false },
			},
		},
		{
			Name = "AzeriteMilestoneInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "ID", Type = "number", Nilable = false },
				{ Name = "requiredLevel", Type = "number", Nilable = false },
				{ Name = "canUnlock", Type = "bool", Nilable = false },
				{ Name = "unlocked", Type = "bool", Nilable = false },
				{ Name = "rank", Type = "number", Nilable = true },
				{ Name = "slot", Type = "AzeriteEssenceSlot", Nilable = true },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "AzeriteItem",
	Type = "System",
	Namespace = "C_AzeriteItem",

	Functions =
	{
		{
			Name = "FindActiveAzeriteItem",
			Type = "Function",

			Returns =
			{
				{ Name = "activeAzeriteItemLocation", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},
		},
		{
			Name = "GetAzeriteItemXPInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "azeriteItemLocation", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "xp", Type = "number", Nilable = false },
				{ Name = "totalLevelXP", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetPowerLevel",
			Type = "Function",

			Arguments =
			{
				{ Name = "azeriteItemLocation", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "powerLevel", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetUnlimitedPowerLevel",
			Type = "Function",

			Arguments =
			{
				{ Name = "azeriteItemLocation", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "powerLevel", Type = "number", Nilable = false },
			},
		},
		{
			Name = "HasActiveAzeriteItem",
			Type = "Function",

			Returns =
			{
				{ Name = "hasActiveAzeriteItem", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsAzeriteItem",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemLocation", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "isAzeriteItem", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsAzeriteItemAtMaxLevel",
			Type = "Function",

			Returns =
			{
				{ Name = "isAtMax", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsAzeriteItemByID",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemInfo", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "isAzeriteItem", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsAzeriteItemEnabled",
			Type = "Function",

			Arguments =
			{
				{ Name = "azeriteItemLocation", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "isEnabled", Type = "bool", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "AzeriteItemEnabledStateChanged",
			Type = "Event",
			LiteralName = "AZERITE_ITEM_ENABLED_STATE_CHANGED",
			Payload =
			{
				{ Name = "enabled", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "AzeriteItemExperienceChanged",
			Type = "Event",
			LiteralName = "AZERITE_ITEM_EXPERIENCE_CHANGED",
			Payload =
			{
				{ Name = "azeriteItemLocation", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
				{ Name = "oldExperienceAmount", Type = "number", Nilable = false },
				{ Name = "newExperienceAmount", Type = "number", Nilable = false },
			},
		},
		{
			Name = "AzeriteItemPowerLevelChanged",
			Type = "Event",
			LiteralName = "AZERITE_ITEM_POWER_LEVEL_CHANGED",
			Payload =
			{
				{ Name = "azeriteItemLocation", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
				{ Name = "oldPowerLevel", Type = "number", Nilable = false },
				{ Name = "newPowerLevel", Type = "number", Nilable = false },
				{ Name = "unlockedEmpoweredItemsInfo", Type = "table", InnerType = "UnlockedAzeriteEmpoweredItems", Nilable = false },
			},
		},
	},

	Tables =
	{
		{
			Name = "UnlockedAzeriteEmpoweredItems",
			Type = "Structure",
			Fields =
			{
				{ Name = "unlockedItem", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
				{ Name = "tierIndex", Type = "number", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "Bank",
	Type = "System",
	Namespace = "C_Bank",

	Functions =
	{
	},

	Events =
	{
		{
			Name = "BankBagSlotFlagsUpdated",
			Type = "Event",
			LiteralName = "BANK_BAG_SLOT_FLAGS_UPDATED",
			Payload =
			{
				{ Name = "slot", Type = "number", Nilable = false },
			},
		},
		{
			Name = "BankframeClosed",
			Type = "Event",
			LiteralName = "BANKFRAME_CLOSED",
		},
		{
			Name = "BankframeOpened",
			Type = "Event",
			LiteralName = "BANKFRAME_OPENED",
		},
		{
			Name = "PlayerbankbagslotsChanged",
			Type = "Event",
			LiteralName = "PLAYERBANKBAGSLOTS_CHANGED",
		},
		{
			Name = "PlayerbankslotsChanged",
			Type = "Event",
			LiteralName = "PLAYERBANKSLOTS_CHANGED",
			Payload =
			{
				{ Name = "slot", Type = "number", Nilable = false },
			},
		},
		{
			Name = "PlayerreagentbankslotsChanged",
			Type = "Event",
			LiteralName = "PLAYERREAGENTBANKSLOTS_CHANGED",
			Payload =
			{
				{ Name = "slot", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ReagentbankPurchased",
			Type = "Event",
			LiteralName = "REAGENTBANK_PURCHASED",
		},
		{
			Name = "ReagentbankUpdate",
			Type = "Event",
			LiteralName = "REAGENTBANK_UPDATE",
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "BarberShop",
	Type = "System",
	Namespace = "C_BarberShop",

	Functions =
	{
		{
			Name = "ApplyCustomizationChoices",
			Type = "Function",

			Returns =
			{
				{ Name = "success", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "Cancel",
			Type = "Function",
		},
		{
			Name = "ClearPreviewChoices",
			Type = "Function",

			Arguments =
			{
				{ Name = "clearSavedChoices", Type = "bool", Nilable = false, Default = false },
			},
		},
		{
			Name = "GetAvailableCustomizations",
			Type = "Function",

			Returns =
			{
				{ Name = "categories", Type = "table", InnerType = "CharCustomizationCategory", Nilable = false },
			},
		},
		{
			Name = "GetCurrentCameraZoom",
			Type = "Function",

			Returns =
			{
				{ Name = "zoomLevel", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetCurrentCharacterData",
			Type = "Function",

			Returns =
			{
				{ Name = "characterData", Type = "BarberShopCharacterData", Nilable = false },
			},
		},
		{
			Name = "GetCurrentCost",
			Type = "Function",

			Returns =
			{
				{ Name = "cost", Type = "number", Nilable = false },
			},
		},
		{
			Name = "HasAnyChanges",
			Type = "Function",

			Returns =
			{
				{ Name = "hasChanges", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsViewingAlteredForm",
			Type = "Function",

			Returns =
			{
				{ Name = "isViewingAlteredForm", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "MarkCustomizationChoiceAsSeen",
			Type = "Function",

			Arguments =
			{
				{ Name = "choiceID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "MarkCustomizationOptionAsSeen",
			Type = "Function",

			Arguments =
			{
				{ Name = "optionID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "PreviewCustomizationChoice",
			Type = "Function",

			Arguments =
			{
				{ Name = "optionID", Type = "number", Nilable = false },
				{ Name = "choiceID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "RandomizeCustomizationChoices",
			Type = "Function",
		},
		{
			Name = "ResetCameraRotation",
			Type = "Function",
		},
		{
			Name = "ResetCustomizationChoices",
			Type = "Function",
		},
		{
			Name = "RotateCamera",
			Type = "Function",

			Arguments =
			{
				{ Name = "diffDegrees", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SaveSeenChoices",
			Type = "Function",
		},
		{
			Name = "SetCameraDistanceOffset",
			Type = "Function",

			Arguments =
			{
				{ Name = "offset", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetCameraZoomLevel",
			Type = "Function",

			Arguments =
			{
				{ Name = "zoomLevel", Type = "number", Nilable = false },
				{ Name = "keepCustomZoom", Type = "bool", Nilable = true },
			},
		},
		{
			Name = "SetCustomizationChoice",
			Type = "Function",

			Arguments =
			{
				{ Name = "optionID", Type = "number", Nilable = false },
				{ Name = "choiceID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetModelDressState",
			Type = "Function",

			Arguments =
			{
				{ Name = "dressedState", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetSelectedSex",
			Type = "Function",

			Arguments =
			{
				{ Name = "sex", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetViewingAlteredForm",
			Type = "Function",

			Arguments =
			{
				{ Name = "isViewingAlteredForm", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetViewingChrModel",
			Type = "Function",

			Arguments =
			{
				{ Name = "chrModelID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "SetViewingShapeshiftForm",
			Type = "Function",

			Arguments =
			{
				{ Name = "shapeshiftFormID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "ZoomCamera",
			Type = "Function",

			Arguments =
			{
				{ Name = "zoomAmount", Type = "number", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "BarberShopAppearanceApplied",
			Type = "Event",
			LiteralName = "BARBER_SHOP_APPEARANCE_APPLIED",
		},
		{
			Name = "BarberShopCameraValuesUpdated",
			Type = "Event",
			LiteralName = "BARBER_SHOP_CAMERA_VALUES_UPDATED",
		},
		{
			Name = "BarberShopClose",
			Type = "Event",
			LiteralName = "BARBER_SHOP_CLOSE",
		},
		{
			Name = "BarberShopCostUpdate",
			Type = "Event",
			LiteralName = "BARBER_SHOP_COST_UPDATE",
		},
		{
			Name = "BarberShopForceCustomizationsUpdate",
			Type = "Event",
			LiteralName = "BARBER_SHOP_FORCE_CUSTOMIZATIONS_UPDATE",
		},
		{
			Name = "BarberShopOpen",
			Type = "Event",
			LiteralName = "BARBER_SHOP_OPEN",
		},
		{
			Name = "BarberShopResult",
			Type = "Event",
			LiteralName = "BARBER_SHOP_RESULT",
			Payload =
			{
				{ Name = "success", Type = "bool", Nilable = false },
			},
		},
	},

	Tables =
	{
		{
			Name = "BarberShopCharacterData",
			Type = "Structure",
			Fields =
			{
				{ Name = "raceData", Type = "BarberShopRaceData", Nilable = false },
				{ Name = "sex", Type = "number", Nilable = false },
			},
		},
		{
			Name = "BarberShopRaceData",
			Type = "Structure",
			Fields =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "fileName", Type = "string", Nilable = false },
				{ Name = "alternateFormRaceData", Type = "CharacterAlternateFormData", Nilable = true },
				{ Name = "createScreenIconAtlas", Type = "string", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "BattlePet",
	Type = "System",
	Namespace = "C_BattlePet",

	Functions =
	{
	},

	Events =
	{
		{
			Name = "PetBattleAbilityChanged",
			Type = "Event",
			LiteralName = "PET_BATTLE_ABILITY_CHANGED",
			Payload =
			{
				{ Name = "owner", Type = "number", Nilable = false },
				{ Name = "petIndex", Type = "number", Nilable = false },
				{ Name = "abilityID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "PetBattleActionSelected",
			Type = "Event",
			LiteralName = "PET_BATTLE_ACTION_SELECTED",
		},
		{
			Name = "PetBattleAuraApplied",
			Type = "Event",
			LiteralName = "PET_BATTLE_AURA_APPLIED",
			Payload =
			{
				{ Name = "owner", Type = "number", Nilable = false },
				{ Name = "petIndex", Type = "number", Nilable = false },
				{ Name = "auraInstanceID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "PetBattleAuraCanceled",
			Type = "Event",
			LiteralName = "PET_BATTLE_AURA_CANCELED",
			Payload =
			{
				{ Name = "owner", Type = "number", Nilable = false },
				{ Name = "petIndex", Type = "number", Nilable = false },
				{ Name = "auraInstanceID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "PetBattleAuraChanged",
			Type = "Event",
			LiteralName = "PET_BATTLE_AURA_CHANGED",
			Payload =
			{
				{ Name = "owner", Type = "number", Nilable = false },
				{ Name = "petIndex", Type = "number", Nilable = false },
				{ Name = "auraInstanceID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "PetBattleCaptured",
			Type = "Event",
			LiteralName = "PET_BATTLE_CAPTURED",
			Payload =
			{
				{ Name = "owner", Type = "number", Nilable = false },
				{ Name = "petIndex", Type = "number", Nilable = false },
			},
		},
		{
			Name = "PetBattleClose",
			Type = "Event",
			LiteralName = "PET_BATTLE_CLOSE",
		},
		{
			Name = "PetBattleFinalRound",
			Type = "Event",
			LiteralName = "PET_BATTLE_FINAL_ROUND",
			Payload =
			{
				{ Name = "owner", Type = "number", Nilable = false },
			},
		},
		{
			Name = "PetBattleHealthChanged",
			Type = "Event",
			LiteralName = "PET_BATTLE_HEALTH_CHANGED",
			Payload =
			{
				{ Name = "owner", Type = "number", Nilable = false },
				{ Name = "petIndex", Type = "number", Nilable = false },
				{ Name = "healthChange", Type = "number", Nilable = false },
			},
		},
		{
			Name = "PetBattleLevelChanged",
			Type = "Event",
			LiteralName = "PET_BATTLE_LEVEL_CHANGED",
			Payload =
			{
				{ Name = "owner", Type = "number", Nilable = false },
				{ Name = "petIndex", Type = "number", Nilable = false },
				{ Name = "newLevel", Type = "number", Nilable = false },
			},
		},
		{
			Name = "PetBattleMaxHealthChanged",
			Type = "Event",
			LiteralName = "PET_BATTLE_MAX_HEALTH_CHANGED",
			Payload =
			{
				{ Name = "owner", Type = "number", Nilable = false },
				{ Name = "petIndex", Type = "number", Nilable = false },
				{ Name = "healthChange", Type = "number", Nilable = false },
			},
		},
		{
			Name = "PetBattleOpeningDone",
			Type = "Event",
			LiteralName = "PET_BATTLE_OPENING_DONE",
		},
		{
			Name = "PetBattleOpeningStart",
			Type = "Event",
			LiteralName = "PET_BATTLE_OPENING_START",
		},
		{
			Name = "PetBattleOver",
			Type = "Event",
			LiteralName = "PET_BATTLE_OVER",
		},
		{
			Name = "PetBattleOverrideAbility",
			Type = "Event",
			LiteralName = "PET_BATTLE_OVERRIDE_ABILITY",
			Payload =
			{
				{ Name = "abilityIndex", Type = "number", Nilable = false },
			},
		},
		{
			Name = "PetBattlePetChanged",
			Type = "Event",
			LiteralName = "PET_BATTLE_PET_CHANGED",
			Payload =
			{
				{ Name = "owner", Type = "number", Nilable = false },
			},
		},
		{
			Name = "PetBattlePetRoundPlaybackComplete",
			Type = "Event",
			LiteralName = "PET_BATTLE_PET_ROUND_PLAYBACK_COMPLETE",
			Payload =
			{
				{ Name = "roundNumber", Type = "number", Nilable = false },
			},
		},
		{
			Name = "PetBattlePetRoundResults",
			Type = "Event",
			LiteralName = "PET_BATTLE_PET_ROUND_RESULTS",
			Payload =
			{
				{ Name = "roundNumber", Type = "number", Nilable = false },
			},
		},
		{
			Name = "PetBattlePetTypeChanged",
			Type = "Event",
			LiteralName = "PET_BATTLE_PET_TYPE_CHANGED",
			Payload =
			{
				{ Name = "owner", Type = "number", Nilable = false },
				{ Name = "petIndex", Type = "number", Nilable = false },
				{ Name = "stateValue", Type = "number", Nilable = false },
			},
		},
		{
			Name = "PetBattlePvpDuelRequestCancel",
			Type = "Event",
			LiteralName = "PET_BATTLE_PVP_DUEL_REQUEST_CANCEL",
		},
		{
			Name = "PetBattlePvpDuelRequested",
			Type = "Event",
			LiteralName = "PET_BATTLE_PVP_DUEL_REQUESTED",
			Payload =
			{
				{ Name = "fullName", Type = "string", Nilable = false },
			},
		},
		{
			Name = "PetBattleQueueProposalAccepted",
			Type = "Event",
			LiteralName = "PET_BATTLE_QUEUE_PROPOSAL_ACCEPTED",
		},
		{
			Name = "PetBattleQueueProposalDeclined",
			Type = "Event",
			LiteralName = "PET_BATTLE_QUEUE_PROPOSAL_DECLINED",
		},
		{
			Name = "PetBattleQueueProposeMatch",
			Type = "Event",
			LiteralName = "PET_BATTLE_QUEUE_PROPOSE_MATCH",
		},
		{
			Name = "PetBattleQueueStatus",
			Type = "Event",
			LiteralName = "PET_BATTLE_QUEUE_STATUS",
		},
		{
			Name = "PetBattleXpChanged",
			Type = "Event",
			LiteralName = "PET_BATTLE_XP_CHANGED",
			Payload =
			{
				{ Name = "owner", Type = "number", Nilable = false },
				{ Name = "petIndex", Type = "number", Nilable = false },
				{ Name = "xpChange", Type = "number", Nilable = false },
			},
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "BehavioralMessaging",
	Type = "System",
	Namespace = "C_BehavioralMessaging",

	Functions =
	{
		{
			Name = "SendNotificationReceipt",
			Type = "Function",

			Arguments =
			{
				{ Name = "dbId", Type = "string", Nilable = false },
				{ Name = "openTimeSeconds", Type = "number", Nilable = false },
				{ Name = "readTimeSeconds", Type = "number", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "BehavioralNotification",
			Type = "Event",
			LiteralName = "BEHAVIORAL_NOTIFICATION",
			Payload =
			{
				{ Name = "notificationType", Type = "string", Nilable = false },
				{ Name = "dbId", Type = "string", Nilable = false },
			},
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "BlackMarketInfo",
	Type = "System",
	Namespace = "C_BlackMarketInfo",

	Functions =
	{
	},

	Events =
	{
		{
			Name = "BlackMarketBidResult",
			Type = "Event",
			LiteralName = "BLACK_MARKET_BID_RESULT",
			Payload =
			{
				{ Name = "marketID", Type = "number", Nilable = false },
				{ Name = "resultCode", Type = "number", Nilable = false },
			},
		},
		{
			Name = "BlackMarketClose",
			Type = "Event",
			LiteralName = "BLACK_MARKET_CLOSE",
		},
		{
			Name = "BlackMarketItemUpdate",
			Type = "Event",
			LiteralName = "BLACK_MARKET_ITEM_UPDATE",
		},
		{
			Name = "BlackMarketOpen",
			Type = "Event",
			LiteralName = "BLACK_MARKET_OPEN",
		},
		{
			Name = "BlackMarketOutbid",
			Type = "Event",
			LiteralName = "BLACK_MARKET_OUTBID",
			Payload =
			{
				{ Name = "marketID", Type = "number", Nilable = false },
				{ Name = "itemID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "BlackMarketUnavailable",
			Type = "Event",
			LiteralName = "BLACK_MARKET_UNAVAILABLE",
		},
		{
			Name = "BlackMarketWon",
			Type = "Event",
			LiteralName = "BLACK_MARKET_WON",
			Payload =
			{
				{ Name = "marketID", Type = "number", Nilable = false },
				{ Name = "itemID", Type = "number", Nilable = false },
			},
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "Browser",
	Type = "System",
	Namespace = "C_Browser",

	Functions =
	{
	},

	Events =
	{
		{
			Name = "SimpleBrowserWebError",
			Type = "Event",
			LiteralName = "SIMPLE_BROWSER_WEB_ERROR",
			Payload =
			{
				{ Name = "errorCode", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SimpleBrowserWebProxyFailed",
			Type = "Event",
			LiteralName = "SIMPLE_BROWSER_WEB_PROXY_FAILED",
		},
		{
			Name = "SimpleCheckoutClosed",
			Type = "Event",
			LiteralName = "SIMPLE_CHECKOUT_CLOSED",
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "Calendar",
	Type = "System",
	Namespace = "C_Calendar",

	Functions =
	{
		{
			Name = "AddEvent",
			Type = "Function",
		},
		{
			Name = "AreNamesReady",
			Type = "Function",

			Returns =
			{
				{ Name = "ready", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "CanAddEvent",
			Type = "Function",

			Returns =
			{
				{ Name = "canAddEvent", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "CanSendInvite",
			Type = "Function",

			Returns =
			{
				{ Name = "canSendInvite", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "CloseEvent",
			Type = "Function",
		},
		{
			Name = "ContextMenuEventCanComplain",
			Type = "Function",

			Arguments =
			{
				{ Name = "offsetMonths", Type = "number", Nilable = false },
				{ Name = "monthDay", Type = "number", Nilable = false },
				{ Name = "eventIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "canComplain", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ContextMenuEventCanEdit",
			Type = "Function",

			Arguments =
			{
				{ Name = "offsetMonths", Type = "number", Nilable = false },
				{ Name = "monthDay", Type = "number", Nilable = false },
				{ Name = "eventIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "canEdit", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ContextMenuEventCanRemove",
			Type = "Function",

			Arguments =
			{
				{ Name = "offsetMonths", Type = "number", Nilable = false },
				{ Name = "monthDay", Type = "number", Nilable = false },
				{ Name = "eventIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "canRemove", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ContextMenuEventClipboard",
			Type = "Function",

			Returns =
			{
				{ Name = "exists", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ContextMenuEventCopy",
			Type = "Function",
		},
		{
			Name = "ContextMenuEventGetCalendarType",
			Type = "Function",

			Returns =
			{
				{ Name = "calendarType", Type = "string", Nilable = true },
			},
		},
		{
			Name = "ContextMenuEventPaste",
			Type = "Function",

			Arguments =
			{
				{ Name = "offsetMonths", Type = "number", Nilable = false },
				{ Name = "monthDay", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ContextMenuEventRemove",
			Type = "Function",
		},
		{
			Name = "ContextMenuEventSignUp",
			Type = "Function",
		},
		{
			Name = "ContextMenuGetEventIndex",
			Type = "Function",

			Returns =
			{
				{ Name = "info", Type = "CalendarEventIndexInfo", Nilable = false },
			},
		},
		{
			Name = "ContextMenuInviteAvailable",
			Type = "Function",
		},
		{
			Name = "ContextMenuInviteDecline",
			Type = "Function",
		},
		{
			Name = "ContextMenuInviteRemove",
			Type = "Function",
		},
		{
			Name = "ContextMenuInviteTentative",
			Type = "Function",
		},
		{
			Name = "ContextMenuSelectEvent",
			Type = "Function",

			Arguments =
			{
				{ Name = "offsetMonths", Type = "number", Nilable = false },
				{ Name = "monthDay", Type = "number", Nilable = false },
				{ Name = "eventIndex", Type = "number", Nilable = false },
			},
		},
		{
			Name = "CreateCommunitySignUpEvent",
			Type = "Function",
		},
		{
			Name = "CreateGuildAnnouncementEvent",
			Type = "Function",
		},
		{
			Name = "CreateGuildSignUpEvent",
			Type = "Function",
		},
		{
			Name = "CreatePlayerEvent",
			Type = "Function",
		},
		{
			Name = "EventAvailable",
			Type = "Function",
		},
		{
			Name = "EventCanEdit",
			Type = "Function",

			Returns =
			{
				{ Name = "canEdit", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "EventClearAutoApprove",
			Type = "Function",
		},
		{
			Name = "EventClearLocked",
			Type = "Function",
		},
		{
			Name = "EventClearModerator",
			Type = "Function",

			Arguments =
			{
				{ Name = "inviteIndex", Type = "number", Nilable = false },
			},
		},
		{
			Name = "EventDecline",
			Type = "Function",
		},
		{
			Name = "EventGetCalendarType",
			Type = "Function",

			Returns =
			{
				{ Name = "calendarType", Type = "string", Nilable = true },
			},
		},
		{
			Name = "EventGetClubId",
			Type = "Function",

			Returns =
			{
				{ Name = "info", Type = "string", Nilable = true },
			},
		},
		{
			Name = "EventGetInvite",
			Type = "Function",

			Arguments =
			{
				{ Name = "eventIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "info", Type = "CalendarEventInviteInfo", Nilable = false },
			},
		},
		{
			Name = "EventGetInviteResponseTime",
			Type = "Function",

			Arguments =
			{
				{ Name = "eventIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "time", Type = "CalendarTime", Nilable = false },
			},
		},
		{
			Name = "EventGetInviteSortCriterion",
			Type = "Function",

			Returns =
			{
				{ Name = "criterion", Type = "string", Nilable = false },
				{ Name = "reverse", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "EventGetSelectedInvite",
			Type = "Function",

			Returns =
			{
				{ Name = "inviteIndex", Type = "number", Nilable = true },
			},
		},
		{
			Name = "EventGetStatusOptions",
			Type = "Function",

			Arguments =
			{
				{ Name = "eventIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "options", Type = "table", InnerType = "CalendarEventStatusOption", Nilable = false },
			},
		},
		{
			Name = "EventGetTextures",
			Type = "Function",

			Arguments =
			{
				{ Name = "eventType", Type = "CalendarEventType", Nilable = false },
			},

			Returns =
			{
				{ Name = "textures", Type = "table", InnerType = "CalendarEventTextureInfo", Nilable = false },
			},
		},
		{
			Name = "EventGetTypes",
			Type = "Function",

			Returns =
			{
				{ Name = "types", Type = "table", InnerType = "string", Nilable = false },
			},
		},
		{
			Name = "EventGetTypesDisplayOrdered",
			Type = "Function",

			Returns =
			{
				{ Name = "infos", Type = "table", InnerType = "CalendarEventTypeDisplayInfo", Nilable = false },
			},
		},
		{
			Name = "EventHasPendingInvite",
			Type = "Function",

			Returns =
			{
				{ Name = "hasPendingInvite", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "EventHaveSettingsChanged",
			Type = "Function",

			Returns =
			{
				{ Name = "haveSettingsChanged", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "EventInvite",
			Type = "Function",

			Arguments =
			{
				{ Name = "name", Type = "string", Nilable = false },
			},
		},
		{
			Name = "EventRemoveInvite",
			Type = "Function",

			Arguments =
			{
				{ Name = "inviteIndex", Type = "number", Nilable = false },
			},
		},
		{
			Name = "EventRemoveInviteByGuid",
			Type = "Function",

			Arguments =
			{
				{ Name = "guid", Type = "string", Nilable = false },
			},
		},
		{
			Name = "EventSelectInvite",
			Type = "Function",

			Arguments =
			{
				{ Name = "inviteIndex", Type = "number", Nilable = false },
			},
		},
		{
			Name = "EventSetAutoApprove",
			Type = "Function",
		},
		{
			Name = "EventSetClubId",
			Type = "Function",

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = true },
			},
		},
		{
			Name = "EventSetDate",
			Type = "Function",

			Arguments =
			{
				{ Name = "month", Type = "number", Nilable = false },
				{ Name = "monthDay", Type = "number", Nilable = false },
				{ Name = "year", Type = "number", Nilable = false },
			},
		},
		{
			Name = "EventSetDescription",
			Type = "Function",

			Arguments =
			{
				{ Name = "description", Type = "string", Nilable = false },
			},
		},
		{
			Name = "EventSetInviteStatus",
			Type = "Function",

			Arguments =
			{
				{ Name = "eventIndex", Type = "number", Nilable = false },
				{ Name = "status", Type = "CalendarStatus", Nilable = false },
			},
		},
		{
			Name = "EventSetLocked",
			Type = "Function",
		},
		{
			Name = "EventSetModerator",
			Type = "Function",

			Arguments =
			{
				{ Name = "inviteIndex", Type = "number", Nilable = false },
			},
		},
		{
			Name = "EventSetTextureID",
			Type = "Function",

			Arguments =
			{
				{ Name = "textureIndex", Type = "number", Nilable = false },
			},
		},
		{
			Name = "EventSetTime",
			Type = "Function",

			Arguments =
			{
				{ Name = "hour", Type = "number", Nilable = false },
				{ Name = "minute", Type = "number", Nilable = false },
			},
		},
		{
			Name = "EventSetTitle",
			Type = "Function",

			Arguments =
			{
				{ Name = "title", Type = "string", Nilable = false },
			},
		},
		{
			Name = "EventSetType",
			Type = "Function",

			Arguments =
			{
				{ Name = "typeIndex", Type = "CalendarEventType", Nilable = false },
			},
		},
		{
			Name = "EventSignUp",
			Type = "Function",
		},
		{
			Name = "EventSortInvites",
			Type = "Function",

			Arguments =
			{
				{ Name = "criterion", Type = "string", Nilable = false },
				{ Name = "reverse", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "EventTentative",
			Type = "Function",
		},
		{
			Name = "GetClubCalendarEvents",
			Type = "Function",

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "startTime", Type = "CalendarTime", Nilable = false },
				{ Name = "endTime", Type = "CalendarTime", Nilable = false },
			},

			Returns =
			{
				{ Name = "events", Type = "table", InnerType = "CalendarDayEvent", Nilable = false },
			},
		},
		{
			Name = "GetDayEvent",
			Type = "Function",

			Arguments =
			{
				{ Name = "monthOffset", Type = "number", Nilable = false },
				{ Name = "monthDay", Type = "number", Nilable = false },
				{ Name = "index", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "event", Type = "CalendarDayEvent", Nilable = false },
			},
		},
		{
			Name = "GetDefaultGuildFilter",
			Type = "Function",

			Returns =
			{
				{ Name = "info", Type = "CalendarGuildFilterInfo", Nilable = false },
			},
		},
		{
			Name = "GetEventIndex",
			Type = "Function",

			Returns =
			{
				{ Name = "info", Type = "CalendarEventIndexInfo", Nilable = false },
			},
		},
		{
			Name = "GetEventIndexInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "eventID", Type = "string", Nilable = false },
				{ Name = "monthOffset", Type = "number", Nilable = true },
				{ Name = "monthDay", Type = "number", Nilable = true },
			},

			Returns =
			{
				{ Name = "eventIndexInfo", Type = "CalendarEventIndexInfo", Nilable = true },
			},
		},
		{
			Name = "GetEventInfo",
			Type = "Function",

			Returns =
			{
				{ Name = "info", Type = "CalendarEventInfo", Nilable = false },
			},
		},
		{
			Name = "GetFirstPendingInvite",
			Type = "Function",

			Arguments =
			{
				{ Name = "offsetMonths", Type = "number", Nilable = false },
				{ Name = "monthDay", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "firstPendingInvite", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetGuildEventInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "index", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "info", Type = "CalendarGuildEventInfo", Nilable = false },
			},
		},
		{
			Name = "GetGuildEventSelectionInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "index", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "info", Type = "CalendarEventIndexInfo", Nilable = false },
			},
		},
		{
			Name = "GetHolidayInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "monthOffset", Type = "number", Nilable = false },
				{ Name = "monthDay", Type = "number", Nilable = false },
				{ Name = "index", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "event", Type = "CalendarHolidayInfo", Nilable = false },
			},
		},
		{
			Name = "GetMaxCreateDate",
			Type = "Function",

			Returns =
			{
				{ Name = "maxCreateDate", Type = "CalendarTime", Nilable = false },
			},
		},
		{
			Name = "GetMinDate",
			Type = "Function",

			Returns =
			{
				{ Name = "minDate", Type = "CalendarTime", Nilable = false },
			},
		},
		{
			Name = "GetMonthInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "offsetMonths", Type = "number", Nilable = false, Default = 0 },
			},

			Returns =
			{
				{ Name = "monthInfo", Type = "CalendarMonthInfo", Nilable = false },
			},
		},
		{
			Name = "GetNextClubId",
			Type = "Function",

			Returns =
			{
				{ Name = "clubId", Type = "string", Nilable = true },
			},
		},
		{
			Name = "GetNumDayEvents",
			Type = "Function",

			Arguments =
			{
				{ Name = "offsetMonths", Type = "number", Nilable = false },
				{ Name = "monthDay", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "numDayEvents", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetNumGuildEvents",
			Type = "Function",

			Returns =
			{
				{ Name = "numGuildEvents", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetNumInvites",
			Type = "Function",

			Returns =
			{
				{ Name = "num", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetNumPendingInvites",
			Type = "Function",

			Returns =
			{
				{ Name = "num", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetRaidInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "offsetMonths", Type = "number", Nilable = false },
				{ Name = "monthDay", Type = "number", Nilable = false },
				{ Name = "eventIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "info", Type = "CalendarRaidInfo", Nilable = false },
			},
		},
		{
			Name = "IsActionPending",
			Type = "Function",

			Returns =
			{
				{ Name = "actionPending", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsEventOpen",
			Type = "Function",

			Returns =
			{
				{ Name = "isOpen", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "MassInviteCommunity",
			Type = "Function",

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "minLevel", Type = "number", Nilable = false },
				{ Name = "maxLevel", Type = "number", Nilable = false },
				{ Name = "maxRankOrder", Type = "number", Nilable = true },
			},
		},
		{
			Name = "MassInviteGuild",
			Type = "Function",

			Arguments =
			{
				{ Name = "minLevel", Type = "number", Nilable = false },
				{ Name = "maxLevel", Type = "number", Nilable = false },
				{ Name = "maxRankOrder", Type = "number", Nilable = false },
			},
		},
		{
			Name = "OpenCalendar",
			Type = "Function",
		},
		{
			Name = "OpenEvent",
			Type = "Function",

			Arguments =
			{
				{ Name = "offsetMonths", Type = "number", Nilable = false },
				{ Name = "monthDay", Type = "number", Nilable = false },
				{ Name = "index", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "success", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "RemoveEvent",
			Type = "Function",
		},
		{
			Name = "SetAbsMonth",
			Type = "Function",

			Arguments =
			{
				{ Name = "month", Type = "number", Nilable = false },
				{ Name = "year", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetMonth",
			Type = "Function",

			Arguments =
			{
				{ Name = "offsetMonths", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetNextClubId",
			Type = "Function",

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = true },
			},
		},
		{
			Name = "UpdateEvent",
			Type = "Function",
		},
	},

	Events =
	{
		{
			Name = "CalendarActionPending",
			Type = "Event",
			LiteralName = "CALENDAR_ACTION_PENDING",
			Payload =
			{
				{ Name = "pending", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "CalendarCloseEvent",
			Type = "Event",
			LiteralName = "CALENDAR_CLOSE_EVENT",
		},
		{
			Name = "CalendarEventAlarm",
			Type = "Event",
			LiteralName = "CALENDAR_EVENT_ALARM",
			Payload =
			{
				{ Name = "title", Type = "string", Nilable = false },
				{ Name = "hour", Type = "number", Nilable = false },
				{ Name = "minute", Type = "number", Nilable = false },
			},
		},
		{
			Name = "CalendarNewEvent",
			Type = "Event",
			LiteralName = "CALENDAR_NEW_EVENT",
			Payload =
			{
				{ Name = "isCopy", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "CalendarOpenEvent",
			Type = "Event",
			LiteralName = "CALENDAR_OPEN_EVENT",
			Payload =
			{
				{ Name = "calendarType", Type = "string", Nilable = false },
			},
		},
		{
			Name = "CalendarUpdateError",
			Type = "Event",
			LiteralName = "CALENDAR_UPDATE_ERROR",
			Payload =
			{
				{ Name = "errorReason", Type = "string", Nilable = false },
			},
		},
		{
			Name = "CalendarUpdateErrorWithCount",
			Type = "Event",
			LiteralName = "CALENDAR_UPDATE_ERROR_WITH_COUNT",
			Payload =
			{
				{ Name = "errorReason", Type = "string", Nilable = false },
				{ Name = "count", Type = "number", Nilable = false },
			},
		},
		{
			Name = "CalendarUpdateErrorWithPlayerName",
			Type = "Event",
			LiteralName = "CALENDAR_UPDATE_ERROR_WITH_PLAYER_NAME",
			Payload =
			{
				{ Name = "errorReason", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
			},
		},
		{
			Name = "CalendarUpdateEvent",
			Type = "Event",
			LiteralName = "CALENDAR_UPDATE_EVENT",
		},
		{
			Name = "CalendarUpdateEventList",
			Type = "Event",
			LiteralName = "CALENDAR_UPDATE_EVENT_LIST",
		},
		{
			Name = "CalendarUpdateGuildEvents",
			Type = "Event",
			LiteralName = "CALENDAR_UPDATE_GUILD_EVENTS",
		},
		{
			Name = "CalendarUpdateInviteList",
			Type = "Event",
			LiteralName = "CALENDAR_UPDATE_INVITE_LIST",
			Payload =
			{
				{ Name = "hasCompleteList", Type = "bool", Nilable = true },
			},
		},
		{
			Name = "CalendarUpdatePendingInvites",
			Type = "Event",
			LiteralName = "CALENDAR_UPDATE_PENDING_INVITES",
		},
	},

	Tables =
	{
		{
			Name = "CalendarDayEvent",
			Type = "Structure",
			Fields =
			{
				{ Name = "eventID", Type = "string", Nilable = false },
				{ Name = "title", Type = "string", Nilable = false },
				{ Name = "isCustomTitle", Type = "bool", Nilable = false },
				{ Name = "startTime", Type = "CalendarTime", Nilable = false },
				{ Name = "endTime", Type = "CalendarTime", Nilable = false },
				{ Name = "calendarType", Type = "string", Nilable = false },
				{ Name = "sequenceType", Type = "string", Nilable = false },
				{ Name = "eventType", Type = "CalendarEventType", Nilable = false },
				{ Name = "iconTexture", Type = "number", Nilable = true },
				{ Name = "modStatus", Type = "string", Nilable = false },
				{ Name = "inviteStatus", Type = "CalendarStatus", Nilable = false },
				{ Name = "invitedBy", Type = "string", Nilable = false },
				{ Name = "difficulty", Type = "number", Nilable = false },
				{ Name = "inviteType", Type = "CalendarInviteType", Nilable = false },
				{ Name = "sequenceIndex", Type = "number", Nilable = false },
				{ Name = "numSequenceDays", Type = "number", Nilable = false },
				{ Name = "difficultyName", Type = "string", Nilable = false },
				{ Name = "dontDisplayBanner", Type = "bool", Nilable = false },
				{ Name = "dontDisplayEnd", Type = "bool", Nilable = false },
				{ Name = "clubID", Type = "string", Nilable = false },
				{ Name = "isLocked", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "CalendarEventIndexInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "offsetMonths", Type = "number", Nilable = false },
				{ Name = "monthDay", Type = "number", Nilable = false },
				{ Name = "eventIndex", Type = "number", Nilable = false },
			},
		},
		{
			Name = "CalendarEventInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "title", Type = "string", Nilable = false },
				{ Name = "description", Type = "string", Nilable = false },
				{ Name = "creator", Type = "string", Nilable = true },
				{ Name = "eventType", Type = "CalendarEventType", Nilable = false },
				{ Name = "repeatOption", Type = "CalendarEventRepeatOptions", Nilable = false },
				{ Name = "maxSize", Type = "number", Nilable = false },
				{ Name = "textureIndex", Type = "number", Nilable = true },
				{ Name = "time", Type = "CalendarTime", Nilable = false },
				{ Name = "lockoutTime", Type = "CalendarTime", Nilable = false },
				{ Name = "isLocked", Type = "bool", Nilable = false },
				{ Name = "isAutoApprove", Type = "bool", Nilable = false },
				{ Name = "hasPendingInvite", Type = "bool", Nilable = false },
				{ Name = "inviteStatus", Type = "CalendarStatus", Nilable = true },
				{ Name = "inviteType", Type = "CalendarInviteType", Nilable = true },
				{ Name = "calendarType", Type = "string", Nilable = false },
				{ Name = "communityName", Type = "string", Nilable = true },
			},
		},
		{
			Name = "CalendarEventInviteInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "name", Type = "string", Nilable = true },
				{ Name = "level", Type = "number", Nilable = false },
				{ Name = "className", Type = "string", Nilable = true },
				{ Name = "classFilename", Type = "string", Nilable = true },
				{ Name = "inviteStatus", Type = "CalendarStatus", Nilable = true },
				{ Name = "modStatus", Type = "string", Nilable = true },
				{ Name = "inviteIsMine", Type = "bool", Nilable = false },
				{ Name = "type", Type = "CalendarInviteType", Nilable = false },
				{ Name = "notes", Type = "string", Nilable = false },
				{ Name = "classID", Type = "number", Nilable = true },
				{ Name = "guid", Type = "string", Nilable = false },
			},
		},
		{
			Name = "CalendarEventStatusOption",
			Type = "Structure",
			Fields =
			{
				{ Name = "status", Type = "CalendarStatus", Nilable = false },
				{ Name = "statusString", Type = "string", Nilable = false },
			},
		},
		{
			Name = "CalendarEventTextureInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "title", Type = "string", Nilable = false },
				{ Name = "iconTexture", Type = "number", Nilable = false },
				{ Name = "expansionLevel", Type = "number", Nilable = false },
				{ Name = "difficultyId", Type = "number", Nilable = true },
				{ Name = "mapId", Type = "number", Nilable = true },
				{ Name = "isLfr", Type = "bool", Nilable = true },
			},
		},
		{
			Name = "CalendarEventTypeDisplayInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "displayString", Type = "string", Nilable = false },
				{ Name = "eventType", Type = "CalendarEventType", Nilable = false },
			},
		},
		{
			Name = "CalendarGuildEventInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "eventID", Type = "string", Nilable = false },
				{ Name = "year", Type = "number", Nilable = false },
				{ Name = "month", Type = "number", Nilable = false },
				{ Name = "monthDay", Type = "number", Nilable = false },
				{ Name = "weekday", Type = "number", Nilable = false },
				{ Name = "hour", Type = "number", Nilable = false },
				{ Name = "minute", Type = "number", Nilable = false },
				{ Name = "eventType", Type = "CalendarEventType", Nilable = false },
				{ Name = "title", Type = "string", Nilable = false },
				{ Name = "calendarType", Type = "string", Nilable = false },
				{ Name = "texture", Type = "number", Nilable = false },
				{ Name = "inviteStatus", Type = "CalendarStatus", Nilable = false },
				{ Name = "clubID", Type = "string", Nilable = false },
			},
		},
		{
			Name = "CalendarGuildFilterInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "minLevel", Type = "number", Nilable = false },
				{ Name = "maxLevel", Type = "number", Nilable = false },
				{ Name = "rank", Type = "number", Nilable = false },
			},
		},
		{
			Name = "CalendarHolidayInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "description", Type = "string", Nilable = false },
				{ Name = "texture", Type = "number", Nilable = false },
				{ Name = "startTime", Type = "CalendarTime", Nilable = true },
				{ Name = "endTime", Type = "CalendarTime", Nilable = true },
			},
		},
		{
			Name = "CalendarMonthInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "month", Type = "number", Nilable = false },
				{ Name = "year", Type = "number", Nilable = false },
				{ Name = "numDays", Type = "number", Nilable = false },
				{ Name = "firstWeekday", Type = "number", Nilable = false },
			},
		},
		{
			Name = "CalendarRaidInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "calendarType", Type = "string", Nilable = false },
				{ Name = "raidID", Type = "number", Nilable = false },
				{ Name = "time", Type = "CalendarTime", Nilable = false },
				{ Name = "difficulty", Type = "number", Nilable = false },
				{ Name = "difficultyName", Type = "string", Nilable = true },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "ChatBubbles",
	Type = "System",
	Namespace = "C_ChatBubbles",

	Functions =
	{
		{
			Name = "GetAllChatBubbles",
			Type = "Function",

			Arguments =
			{
				{ Name = "includeForbidden", Type = "bool", Nilable = false, Default = false },
			},

			Returns =
			{
				{ Name = "chatBubbles", Type = "table", InnerType = "table", Nilable = false },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "ChatInfo",
	Type = "System",
	Namespace = "C_ChatInfo",

	Functions =
	{
		{
			Name = "GetChannelInfoFromIdentifier",
			Type = "Function",

			Arguments =
			{
				{ Name = "channelIdentifier", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "info", Type = "ChatChannelInfo", Nilable = true },
			},
		},
		{
			Name = "GetChannelRosterInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "rosterIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "owner", Type = "bool", Nilable = false },
				{ Name = "moderator", Type = "bool", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetChannelRuleset",
			Type = "Function",

			Arguments =
			{
				{ Name = "channelIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "ruleset", Type = "ChatChannelRuleset", Nilable = false },
			},
		},
		{
			Name = "GetChannelRulesetForChannelID",
			Type = "Function",

			Arguments =
			{
				{ Name = "channelID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "ruleset", Type = "ChatChannelRuleset", Nilable = false },
			},
		},
		{
			Name = "GetChannelShortcut",
			Type = "Function",

			Arguments =
			{
				{ Name = "channelIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "shortcut", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetChannelShortcutForChannelID",
			Type = "Function",

			Arguments =
			{
				{ Name = "channelID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "shortcut", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetChatTypeName",
			Type = "Function",

			Arguments =
			{
				{ Name = "typeID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "name", Type = "string", Nilable = true },
			},
		},
		{
			Name = "GetClubStreamIDs",
			Type = "Function",

			Arguments =
			{
				{ Name = "clubID", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "ids", Type = "table", InnerType = "string", Nilable = false },
			},
		},
		{
			Name = "GetGeneralChannelID",
			Type = "Function",

			Returns =
			{
				{ Name = "channelID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetGeneralChannelLocalID",
			Type = "Function",

			Returns =
			{
				{ Name = "localID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetMentorChannelID",
			Type = "Function",

			Returns =
			{
				{ Name = "channelID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetNumActiveChannels",
			Type = "Function",

			Returns =
			{
				{ Name = "numChannels", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetNumReservedChatWindows",
			Type = "Function",

			Returns =
			{
				{ Name = "numReserved", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetRegisteredAddonMessagePrefixes",
			Type = "Function",

			Returns =
			{
				{ Name = "registeredPrefixes", Type = "table", InnerType = "string", Nilable = false },
			},
		},
		{
			Name = "IsAddonMessagePrefixRegistered",
			Type = "Function",

			Arguments =
			{
				{ Name = "prefix", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "isRegistered", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsChannelRegional",
			Type = "Function",

			Arguments =
			{
				{ Name = "channelIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isRegional", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsChannelRegionalForChannelID",
			Type = "Function",

			Arguments =
			{
				{ Name = "channelID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isRegional", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsPartyChannelType",
			Type = "Function",

			Arguments =
			{
				{ Name = "channelType", Type = "ChatChannelType", Nilable = false },
			},

			Returns =
			{
				{ Name = "isPartyChannelType", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsRegionalServiceAvailable",
			Type = "Function",

			Returns =
			{
				{ Name = "available", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsValidChatLine",
			Type = "Function",

			Arguments =
			{
				{ Name = "chatLine", Type = "number", Nilable = true },
			},

			Returns =
			{
				{ Name = "isValid", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "RegisterAddonMessagePrefix",
			Type = "Function",
			Documentation = { "Registers interest in addon messages with this prefix, cannot be an empty string." },

			Arguments =
			{
				{ Name = "prefix", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "successfulRequest", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ReplaceIconAndGroupExpressions",
			Type = "Function",

			Arguments =
			{
				{ Name = "input", Type = "string", Nilable = false },
				{ Name = "noIconReplacement", Type = "bool", Nilable = true },
				{ Name = "noGroupReplacement", Type = "bool", Nilable = true },
			},

			Returns =
			{
				{ Name = "output", Type = "string", Nilable = false },
			},
		},
		{
			Name = "ResetDefaultZoneChannels",
			Type = "Function",
		},
		{
			Name = "SendAddonMessage",
			Type = "Function",
			Documentation = { "Sends a text payload to other clients specified by chatChannel and target which are registered to listen for prefix." },

			Arguments =
			{
				{ Name = "prefix", Type = "string", Nilable = false },
				{ Name = "message", Type = "string", Nilable = false },
				{ Name = "chatType", Type = "string", Nilable = true, Documentation = { "ChatType, defaults to SLASH_CMD_PARTY." } },
				{ Name = "target", Type = "string", Nilable = true, Documentation = { "Only applies for targeted channels" } },
			},

			Returns =
			{
				{ Name = "success", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SendAddonMessageLogged",
			Type = "Function",
			Documentation = { "Sends a text payload to other clients specified by chatChannel and target which are registered to listen for prefix. Intended for plain text payloads; logged and throttled." },

			Arguments =
			{
				{ Name = "prefix", Type = "string", Nilable = false },
				{ Name = "message", Type = "string", Nilable = false },
				{ Name = "chatType", Type = "string", Nilable = true, Documentation = { "ChatType, defaults to SLASH_CMD_PARTY." } },
				{ Name = "target", Type = "string", Nilable = true, Documentation = { "Only applies for targeted channels" } },
			},

			Returns =
			{
				{ Name = "success", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SwapChatChannelsByChannelIndex",
			Type = "Function",

			Arguments =
			{
				{ Name = "firstChannelIndex", Type = "number", Nilable = false },
				{ Name = "secondChannelIndex", Type = "number", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "AlternativeDefaultLanguageChanged",
			Type = "Event",
			LiteralName = "ALTERNATIVE_DEFAULT_LANGUAGE_CHANGED",
		},
		{
			Name = "BnChatMsgAddon",
			Type = "Event",
			LiteralName = "BN_CHAT_MSG_ADDON",
			Payload =
			{
				{ Name = "prefix", Type = "string", Nilable = false },
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "channel", Type = "string", Nilable = false },
				{ Name = "senderID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ChannelCountUpdate",
			Type = "Event",
			LiteralName = "CHANNEL_COUNT_UPDATE",
			Payload =
			{
				{ Name = "displayIndex", Type = "number", Nilable = false },
				{ Name = "count", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ChannelFlagsUpdated",
			Type = "Event",
			LiteralName = "CHANNEL_FLAGS_UPDATED",
			Payload =
			{
				{ Name = "displayIndex", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ChannelInviteRequest",
			Type = "Event",
			LiteralName = "CHANNEL_INVITE_REQUEST",
			Payload =
			{
				{ Name = "channelID", Type = "string", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
			},
		},
		{
			Name = "ChannelLeft",
			Type = "Event",
			LiteralName = "CHANNEL_LEFT",
			Payload =
			{
				{ Name = "chatChannelID", Type = "number", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
			},
		},
		{
			Name = "ChannelPasswordRequest",
			Type = "Event",
			LiteralName = "CHANNEL_PASSWORD_REQUEST",
			Payload =
			{
				{ Name = "channelID", Type = "string", Nilable = false },
			},
		},
		{
			Name = "ChannelRosterUpdate",
			Type = "Event",
			LiteralName = "CHANNEL_ROSTER_UPDATE",
			Payload =
			{
				{ Name = "displayIndex", Type = "number", Nilable = false },
				{ Name = "count", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ChannelUiUpdate",
			Type = "Event",
			LiteralName = "CHANNEL_UI_UPDATE",
		},
		{
			Name = "ChatCombatMsgArenaPointsGain",
			Type = "Event",
			LiteralName = "CHAT_COMBAT_MSG_ARENA_POINTS_GAIN",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgAchievement",
			Type = "Event",
			LiteralName = "CHAT_MSG_ACHIEVEMENT",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgAddon",
			Type = "Event",
			LiteralName = "CHAT_MSG_ADDON",
			Payload =
			{
				{ Name = "prefix", Type = "string", Nilable = false },
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "channel", Type = "string", Nilable = false },
				{ Name = "sender", Type = "string", Nilable = false },
				{ Name = "target", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "localID", Type = "number", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "instanceID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ChatMsgAddonLogged",
			Type = "Event",
			LiteralName = "CHAT_MSG_ADDON_LOGGED",
			Payload =
			{
				{ Name = "prefix", Type = "string", Nilable = false },
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "channel", Type = "string", Nilable = false },
				{ Name = "sender", Type = "string", Nilable = false },
				{ Name = "target", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "localID", Type = "number", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "instanceID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ChatMsgAfk",
			Type = "Event",
			LiteralName = "CHAT_MSG_AFK",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgBgSystemAlliance",
			Type = "Event",
			LiteralName = "CHAT_MSG_BG_SYSTEM_ALLIANCE",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgBgSystemHorde",
			Type = "Event",
			LiteralName = "CHAT_MSG_BG_SYSTEM_HORDE",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgBgSystemNeutral",
			Type = "Event",
			LiteralName = "CHAT_MSG_BG_SYSTEM_NEUTRAL",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgBn",
			Type = "Event",
			LiteralName = "CHAT_MSG_BN",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgBnInlineToastAlert",
			Type = "Event",
			LiteralName = "CHAT_MSG_BN_INLINE_TOAST_ALERT",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgBnInlineToastBroadcast",
			Type = "Event",
			LiteralName = "CHAT_MSG_BN_INLINE_TOAST_BROADCAST",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgBnInlineToastBroadcastInform",
			Type = "Event",
			LiteralName = "CHAT_MSG_BN_INLINE_TOAST_BROADCAST_INFORM",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgBnInlineToastConversation",
			Type = "Event",
			LiteralName = "CHAT_MSG_BN_INLINE_TOAST_CONVERSATION",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgBnWhisper",
			Type = "Event",
			LiteralName = "CHAT_MSG_BN_WHISPER",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgBnWhisperInform",
			Type = "Event",
			LiteralName = "CHAT_MSG_BN_WHISPER_INFORM",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgBnWhisperPlayerOffline",
			Type = "Event",
			LiteralName = "CHAT_MSG_BN_WHISPER_PLAYER_OFFLINE",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgChannel",
			Type = "Event",
			LiteralName = "CHAT_MSG_CHANNEL",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgChannelJoin",
			Type = "Event",
			LiteralName = "CHAT_MSG_CHANNEL_JOIN",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgChannelLeave",
			Type = "Event",
			LiteralName = "CHAT_MSG_CHANNEL_LEAVE",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgChannelLeavePrevented",
			Type = "Event",
			LiteralName = "CHAT_MSG_CHANNEL_LEAVE_PREVENTED",
			Payload =
			{
				{ Name = "channelName", Type = "string", Nilable = false },
			},
		},
		{
			Name = "ChatMsgChannelList",
			Type = "Event",
			LiteralName = "CHAT_MSG_CHANNEL_LIST",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgChannelNotice",
			Type = "Event",
			LiteralName = "CHAT_MSG_CHANNEL_NOTICE",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgChannelNoticeUser",
			Type = "Event",
			LiteralName = "CHAT_MSG_CHANNEL_NOTICE_USER",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgCombatFactionChange",
			Type = "Event",
			LiteralName = "CHAT_MSG_COMBAT_FACTION_CHANGE",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgCombatHonorGain",
			Type = "Event",
			LiteralName = "CHAT_MSG_COMBAT_HONOR_GAIN",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgCombatMiscInfo",
			Type = "Event",
			LiteralName = "CHAT_MSG_COMBAT_MISC_INFO",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgCombatXpGain",
			Type = "Event",
			LiteralName = "CHAT_MSG_COMBAT_XP_GAIN",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgCommunitiesChannel",
			Type = "Event",
			LiteralName = "CHAT_MSG_COMMUNITIES_CHANNEL",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgCurrency",
			Type = "Event",
			LiteralName = "CHAT_MSG_CURRENCY",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgDnd",
			Type = "Event",
			LiteralName = "CHAT_MSG_DND",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgEmote",
			Type = "Event",
			LiteralName = "CHAT_MSG_EMOTE",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgFiltered",
			Type = "Event",
			LiteralName = "CHAT_MSG_FILTERED",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgGuild",
			Type = "Event",
			LiteralName = "CHAT_MSG_GUILD",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgGuildAchievement",
			Type = "Event",
			LiteralName = "CHAT_MSG_GUILD_ACHIEVEMENT",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgGuildItemLooted",
			Type = "Event",
			LiteralName = "CHAT_MSG_GUILD_ITEM_LOOTED",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgIgnored",
			Type = "Event",
			LiteralName = "CHAT_MSG_IGNORED",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgInstanceChat",
			Type = "Event",
			LiteralName = "CHAT_MSG_INSTANCE_CHAT",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgInstanceChatLeader",
			Type = "Event",
			LiteralName = "CHAT_MSG_INSTANCE_CHAT_LEADER",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgLoot",
			Type = "Event",
			LiteralName = "CHAT_MSG_LOOT",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgMoney",
			Type = "Event",
			LiteralName = "CHAT_MSG_MONEY",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgMonsterEmote",
			Type = "Event",
			LiteralName = "CHAT_MSG_MONSTER_EMOTE",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgMonsterParty",
			Type = "Event",
			LiteralName = "CHAT_MSG_MONSTER_PARTY",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgMonsterSay",
			Type = "Event",
			LiteralName = "CHAT_MSG_MONSTER_SAY",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgMonsterWhisper",
			Type = "Event",
			LiteralName = "CHAT_MSG_MONSTER_WHISPER",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgMonsterYell",
			Type = "Event",
			LiteralName = "CHAT_MSG_MONSTER_YELL",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgOfficer",
			Type = "Event",
			LiteralName = "CHAT_MSG_OFFICER",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgOpening",
			Type = "Event",
			LiteralName = "CHAT_MSG_OPENING",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgParty",
			Type = "Event",
			LiteralName = "CHAT_MSG_PARTY",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgPartyLeader",
			Type = "Event",
			LiteralName = "CHAT_MSG_PARTY_LEADER",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgPetBattleCombatLog",
			Type = "Event",
			LiteralName = "CHAT_MSG_PET_BATTLE_COMBAT_LOG",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgPetBattleInfo",
			Type = "Event",
			LiteralName = "CHAT_MSG_PET_BATTLE_INFO",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgPetInfo",
			Type = "Event",
			LiteralName = "CHAT_MSG_PET_INFO",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgRaid",
			Type = "Event",
			LiteralName = "CHAT_MSG_RAID",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgRaidBossEmote",
			Type = "Event",
			LiteralName = "CHAT_MSG_RAID_BOSS_EMOTE",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgRaidBossWhisper",
			Type = "Event",
			LiteralName = "CHAT_MSG_RAID_BOSS_WHISPER",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgRaidLeader",
			Type = "Event",
			LiteralName = "CHAT_MSG_RAID_LEADER",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgRaidWarning",
			Type = "Event",
			LiteralName = "CHAT_MSG_RAID_WARNING",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgRestricted",
			Type = "Event",
			LiteralName = "CHAT_MSG_RESTRICTED",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgSay",
			Type = "Event",
			LiteralName = "CHAT_MSG_SAY",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgSkill",
			Type = "Event",
			LiteralName = "CHAT_MSG_SKILL",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgSystem",
			Type = "Event",
			LiteralName = "CHAT_MSG_SYSTEM",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgTargeticons",
			Type = "Event",
			LiteralName = "CHAT_MSG_TARGETICONS",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgTextEmote",
			Type = "Event",
			LiteralName = "CHAT_MSG_TEXT_EMOTE",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgTradeskills",
			Type = "Event",
			LiteralName = "CHAT_MSG_TRADESKILLS",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgVoiceText",
			Type = "Event",
			LiteralName = "CHAT_MSG_VOICE_TEXT",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgWhisper",
			Type = "Event",
			LiteralName = "CHAT_MSG_WHISPER",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgWhisperInform",
			Type = "Event",
			LiteralName = "CHAT_MSG_WHISPER_INFORM",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatMsgYell",
			Type = "Event",
			LiteralName = "CHAT_MSG_YELL",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "languageName", Type = "string", Nilable = false },
				{ Name = "channelName", Type = "string", Nilable = false },
				{ Name = "playerName2", Type = "string", Nilable = false },
				{ Name = "specialFlags", Type = "string", Nilable = false },
				{ Name = "zoneChannelID", Type = "number", Nilable = false },
				{ Name = "channelIndex", Type = "number", Nilable = false },
				{ Name = "channelBaseName", Type = "string", Nilable = false },
				{ Name = "languageID", Type = "number", Nilable = false },
				{ Name = "lineID", Type = "number", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "bnSenderID", Type = "number", Nilable = false },
				{ Name = "isMobile", Type = "bool", Nilable = false },
				{ Name = "isSubtitle", Type = "bool", Nilable = false },
				{ Name = "hideSenderInLetterbox", Type = "bool", Nilable = false },
				{ Name = "supressRaidIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatRegionalSendFailed",
			Type = "Event",
			LiteralName = "CHAT_REGIONAL_SEND_FAILED",
		},
		{
			Name = "ChatRegionalStatusChanged",
			Type = "Event",
			LiteralName = "CHAT_REGIONAL_STATUS_CHANGED",
			Payload =
			{
				{ Name = "isServiceAvailable", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatServerDisconnected",
			Type = "Event",
			LiteralName = "CHAT_SERVER_DISCONNECTED",
			Payload =
			{
				{ Name = "isInitialMessage", Type = "bool", Nilable = true },
			},
		},
		{
			Name = "ChatServerReconnected",
			Type = "Event",
			LiteralName = "CHAT_SERVER_RECONNECTED",
		},
		{
			Name = "ClearBossEmotes",
			Type = "Event",
			LiteralName = "CLEAR_BOSS_EMOTES",
		},
		{
			Name = "LanguageListChanged",
			Type = "Event",
			LiteralName = "LANGUAGE_LIST_CHANGED",
		},
		{
			Name = "NotifyChatSuppressed",
			Type = "Event",
			LiteralName = "NOTIFY_CHAT_SUPPRESSED",
		},
		{
			Name = "QuestBossEmote",
			Type = "Event",
			LiteralName = "QUEST_BOSS_EMOTE",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "displayTime", Type = "number", Nilable = false },
				{ Name = "enableBossEmoteWarningSound", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "RaidBossEmote",
			Type = "Event",
			LiteralName = "RAID_BOSS_EMOTE",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "displayTime", Type = "number", Nilable = false },
				{ Name = "enableBossEmoteWarningSound", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "RaidBossWhisper",
			Type = "Event",
			LiteralName = "RAID_BOSS_WHISPER",
			Payload =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "displayTime", Type = "number", Nilable = false },
				{ Name = "enableBossEmoteWarningSound", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "RaidInstanceWelcome",
			Type = "Event",
			LiteralName = "RAID_INSTANCE_WELCOME",
			Payload =
			{
				{ Name = "mapname", Type = "string", Nilable = false },
				{ Name = "timeLeft", Type = "number", Nilable = false },
				{ Name = "locked", Type = "number", Nilable = false },
				{ Name = "extended", Type = "number", Nilable = false },
			},
		},
		{
			Name = "UpdateChatColor",
			Type = "Event",
			LiteralName = "UPDATE_CHAT_COLOR",
			Payload =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "r", Type = "number", Nilable = false },
				{ Name = "g", Type = "number", Nilable = false },
				{ Name = "b", Type = "number", Nilable = false },
			},
		},
		{
			Name = "UpdateChatColorNameByClass",
			Type = "Event",
			LiteralName = "UPDATE_CHAT_COLOR_NAME_BY_CLASS",
			Payload =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "colorNameByClass", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "UpdateChatWindows",
			Type = "Event",
			LiteralName = "UPDATE_CHAT_WINDOWS",
		},
		{
			Name = "UpdateFloatingChatWindows",
			Type = "Event",
			LiteralName = "UPDATE_FLOATING_CHAT_WINDOWS",
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "Cinematic",
	Type = "System",
	Namespace = "C_Cinematic",

	Functions =
	{
	},

	Events =
	{
		{
			Name = "CinematicStart",
			Type = "Event",
			LiteralName = "CINEMATIC_START",
			Payload =
			{
				{ Name = "canBeCancelled", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "CinematicStop",
			Type = "Event",
			LiteralName = "CINEMATIC_STOP",
		},
		{
			Name = "HideSubtitle",
			Type = "Event",
			LiteralName = "HIDE_SUBTITLE",
		},
		{
			Name = "PlayMovie",
			Type = "Event",
			LiteralName = "PLAY_MOVIE",
			Payload =
			{
				{ Name = "movieID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "StopMovie",
			Type = "Event",
			LiteralName = "STOP_MOVIE",
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "ClassTrial",
	Type = "System",
	Namespace = "C_ClassTrial",

	Functions =
	{
	},

	Events =
	{
		{
			Name = "ClassTrialTimerStart",
			Type = "Event",
			LiteralName = "CLASS_TRIAL_TIMER_START",
		},
		{
			Name = "ClassTrialUpgradeComplete",
			Type = "Event",
			LiteralName = "CLASS_TRIAL_UPGRADE_COMPLETE",
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "ClientScene",
	Type = "System",
	Namespace = "C_ClientScene",

	Functions =
	{
	},

	Events =
	{
		{
			Name = "ClientSceneClosed",
			Type = "Event",
			LiteralName = "CLIENT_SCENE_CLOSED",
		},
		{
			Name = "ClientSceneOpened",
			Type = "Event",
			LiteralName = "CLIENT_SCENE_OPENED",
			Payload =
			{
				{ Name = "sceneType", Type = "ClientSceneType", Nilable = false },
			},
		},
	},

	Tables =
	{
		{
			Name = "ClientSceneType",
			Type = "Enumeration",
			NumValues = 2,
			MinValue = 0,
			MaxValue = 1,
			Fields =
			{
				{ Name = "DefaultSceneType", Type = "ClientSceneType", EnumValue = 0 },
				{ Name = "MinigameSceneType", Type = "ClientSceneType", EnumValue = 1 },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "CombatLog",
	Type = "System",
	Namespace = "C_CombatLog",

	Functions =
	{
	},

	Events =
	{
		{
			Name = "CombatLogEvent",
			Type = "Event",
			LiteralName = "COMBAT_LOG_EVENT",
		},
		{
			Name = "CombatLogEventUnfiltered",
			Type = "Event",
			LiteralName = "COMBAT_LOG_EVENT_UNFILTERED",
		},
		{
			Name = "CombatTextUpdate",
			Type = "Event",
			LiteralName = "COMBAT_TEXT_UPDATE",
			Payload =
			{
				{ Name = "combatTextType", Type = "string", Nilable = false },
			},
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "CompactUnitFrames",
	Type = "System",
	Namespace = "C_CompactUnitFrames",

	Functions =
	{
	},

	Events =
	{
		{
			Name = "CompactUnitFrameProfilesLoaded",
			Type = "Event",
			LiteralName = "COMPACT_UNIT_FRAME_PROFILES_LOADED",
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "ConfigurationWarnings",
	Type = "System",
	Namespace = "C_ConfigurationWarnings",

	Functions =
	{
		{
			Name = "GetConfigurationWarningSeen",
			Type = "Function",

			Arguments =
			{
				{ Name = "configurationWarning", Type = "ConfigurationWarning", Nilable = false },
			},

			Returns =
			{
				{ Name = "hasSeenConfigurationWarning", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetConfigurationWarningString",
			Type = "Function",

			Arguments =
			{
				{ Name = "configurationWarning", Type = "ConfigurationWarning", Nilable = false },
			},

			Returns =
			{
				{ Name = "configurationWarningString", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetConfigurationWarnings",
			Type = "Function",

			Arguments =
			{
				{ Name = "includeSeenWarnings", Type = "bool", Nilable = false, Default = false },
			},

			Returns =
			{
				{ Name = "configurationWarnings", Type = "table", InnerType = "ConfigurationWarning", Nilable = false },
			},
		},
		{
			Name = "SetConfigurationWarningSeen",
			Type = "Function",

			Arguments =
			{
				{ Name = "configurationWarning", Type = "ConfigurationWarning", Nilable = false },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
		{
			Name = "ConfigurationWarning",
			Type = "Enumeration",
			NumValues = 8,
			MinValue = 0,
			MaxValue = 7,
			Fields =
			{
				{ Name = "ShaderModelWillBeOutdated", Type = "ConfigurationWarning", EnumValue = 0 },
				{ Name = "ShaderModelIsOutdated", Type = "ConfigurationWarning", EnumValue = 1 },
				{ Name = "ConsoleDeviceSseOutdated", Type = "ConfigurationWarning", EnumValue = 2 },
				{ Name = "DriverBlocklisted", Type = "ConfigurationWarning", EnumValue = 3 },
				{ Name = "DriverOutOfDate", Type = "ConfigurationWarning", EnumValue = 4 },
				{ Name = "DeviceBlocklisted", Type = "ConfigurationWarning", EnumValue = 5 },
				{ Name = "GraphicsApiWillBeOutdated", Type = "ConfigurationWarning", EnumValue = 6 },
				{ Name = "OsBitsWillBeOutdated", Type = "ConfigurationWarning", EnumValue = 7 },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "Console",
	Type = "System",
	Namespace = "C_Console",

	Functions =
	{
		{
			Name = "GetAllCommands",
			Type = "Function",

			Returns =
			{
				{ Name = "commands", Type = "table", InnerType = "ConsoleCommandInfo", Nilable = false },
			},
		},
		{
			Name = "GetColorFromType",
			Type = "Function",

			Arguments =
			{
				{ Name = "colorType", Type = "ConsoleColorType", Nilable = false },
			},

			Returns =
			{
				{ Name = "color", Type = "table", Mixin = "ColorMixin", Nilable = false },
			},
		},
		{
			Name = "GetFontHeight",
			Type = "Function",

			Returns =
			{
				{ Name = "fontHeightInPixels", Type = "number", Nilable = false },
			},
		},
		{
			Name = "PrintAllMatchingCommands",
			Type = "Function",

			Arguments =
			{
				{ Name = "partialCommandText", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetFontHeight",
			Type = "Function",

			Arguments =
			{
				{ Name = "fontHeightInPixels", Type = "number", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "ConsoleClear",
			Type = "Event",
			LiteralName = "CONSOLE_CLEAR",
		},
		{
			Name = "ConsoleColorsChanged",
			Type = "Event",
			LiteralName = "CONSOLE_COLORS_CHANGED",
		},
		{
			Name = "ConsoleFontSizeChanged",
			Type = "Event",
			LiteralName = "CONSOLE_FONT_SIZE_CHANGED",
		},
		{
			Name = "ConsoleLog",
			Type = "Event",
			LiteralName = "CONSOLE_LOG",
			Payload =
			{
				{ Name = "message", Type = "string", Nilable = false },
			},
		},
		{
			Name = "ConsoleMessage",
			Type = "Event",
			LiteralName = "CONSOLE_MESSAGE",
			Payload =
			{
				{ Name = "message", Type = "string", Nilable = false },
				{ Name = "colorType", Type = "number", Nilable = false },
			},
		},
		{
			Name = "CvarUpdate",
			Type = "Event",
			LiteralName = "CVAR_UPDATE",
			Payload =
			{
				{ Name = "eventName", Type = "string", Nilable = false },
				{ Name = "value", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GlueConsoleLog",
			Type = "Event",
			LiteralName = "GLUE_CONSOLE_LOG",
			Payload =
			{
				{ Name = "message", Type = "string", Nilable = false },
			},
		},
		{
			Name = "ToggleConsole",
			Type = "Event",
			LiteralName = "TOGGLE_CONSOLE",
			Payload =
			{
				{ Name = "showConsole", Type = "bool", Nilable = true },
			},
		},
	},

	Tables =
	{
		{
			Name = "ConsoleCategory",
			Type = "Enumeration",
			NumValues = 11,
			MinValue = 0,
			MaxValue = 10,
			Fields =
			{
				{ Name = "Debug", Type = "ConsoleCategory", EnumValue = 0 },
				{ Name = "Graphics", Type = "ConsoleCategory", EnumValue = 1 },
				{ Name = "Console", Type = "ConsoleCategory", EnumValue = 2 },
				{ Name = "Combat", Type = "ConsoleCategory", EnumValue = 3 },
				{ Name = "Game", Type = "ConsoleCategory", EnumValue = 4 },
				{ Name = "Default", Type = "ConsoleCategory", EnumValue = 5 },
				{ Name = "Net", Type = "ConsoleCategory", EnumValue = 6 },
				{ Name = "Sound", Type = "ConsoleCategory", EnumValue = 7 },
				{ Name = "Gm", Type = "ConsoleCategory", EnumValue = 8 },
				{ Name = "Reveal", Type = "ConsoleCategory", EnumValue = 9 },
				{ Name = "None", Type = "ConsoleCategory", EnumValue = 10 },
			},
		},
		{
			Name = "ConsoleColorType",
			Type = "Enumeration",
			NumValues = 12,
			MinValue = 0,
			MaxValue = 11,
			Fields =
			{
				{ Name = "DefaultColor", Type = "ConsoleColorType", EnumValue = 0 },
				{ Name = "InputColor", Type = "ConsoleColorType", EnumValue = 1 },
				{ Name = "EchoColor", Type = "ConsoleColorType", EnumValue = 2 },
				{ Name = "ErrorColor", Type = "ConsoleColorType", EnumValue = 3 },
				{ Name = "WarningColor", Type = "ConsoleColorType", EnumValue = 4 },
				{ Name = "GlobalColor", Type = "ConsoleColorType", EnumValue = 5 },
				{ Name = "AdminColor", Type = "ConsoleColorType", EnumValue = 6 },
				{ Name = "HighlightColor", Type = "ConsoleColorType", EnumValue = 7 },
				{ Name = "BackgroundColor", Type = "ConsoleColorType", EnumValue = 8 },
				{ Name = "ClickbufferColor", Type = "ConsoleColorType", EnumValue = 9 },
				{ Name = "PrivateColor", Type = "ConsoleColorType", EnumValue = 10 },
				{ Name = "DefaultGreen", Type = "ConsoleColorType", EnumValue = 11 },
			},
		},
		{
			Name = "ConsoleCommandType",
			Type = "Enumeration",
			NumValues = 4,
			MinValue = 0,
			MaxValue = 3,
			Fields =
			{
				{ Name = "Cvar", Type = "ConsoleCommandType", EnumValue = 0 },
				{ Name = "Command", Type = "ConsoleCommandType", EnumValue = 1 },
				{ Name = "Macro", Type = "ConsoleCommandType", EnumValue = 2 },
				{ Name = "Script", Type = "ConsoleCommandType", EnumValue = 3 },
			},
		},
		{
			Name = "ConsoleCommandInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "command", Type = "string", Nilable = false },
				{ Name = "help", Type = "string", Nilable = false },
				{ Name = "category", Type = "ConsoleCategory", Nilable = false },
				{ Name = "commandType", Type = "ConsoleCommandType", Nilable = false },
				{ Name = "scriptContents", Type = "string", Nilable = false },
				{ Name = "scriptParameters", Type = "string", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "Container",
	Type = "System",
	Namespace = "C_Container",

	Functions =
	{
		{
			Name = "GetBagSlotFlag",
			Type = "Function",

			Arguments =
			{
				{ Name = "bagIndex", Type = "number", Nilable = false },
				{ Name = "flag", Type = "BagSlotFlags", Nilable = false },
			},

			Returns =
			{
				{ Name = "isSet", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetBagSlotFlag",
			Type = "Function",

			Arguments =
			{
				{ Name = "bagIndex", Type = "number", Nilable = false },
				{ Name = "flag", Type = "BagSlotFlags", Nilable = false },
				{ Name = "isSet", Type = "bool", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "BagClosed",
			Type = "Event",
			LiteralName = "BAG_CLOSED",
			Payload =
			{
				{ Name = "bagID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "BagNewItemsUpdated",
			Type = "Event",
			LiteralName = "BAG_NEW_ITEMS_UPDATED",
		},
		{
			Name = "BagOpen",
			Type = "Event",
			LiteralName = "BAG_OPEN",
			Payload =
			{
				{ Name = "bagID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "BagOverflowWithFullInventory",
			Type = "Event",
			LiteralName = "BAG_OVERFLOW_WITH_FULL_INVENTORY",
		},
		{
			Name = "BagSlotFlagsUpdated",
			Type = "Event",
			LiteralName = "BAG_SLOT_FLAGS_UPDATED",
			Payload =
			{
				{ Name = "slot", Type = "number", Nilable = false },
			},
		},
		{
			Name = "BagUpdate",
			Type = "Event",
			LiteralName = "BAG_UPDATE",
			Payload =
			{
				{ Name = "bagID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "BagUpdateCooldown",
			Type = "Event",
			LiteralName = "BAG_UPDATE_COOLDOWN",
		},
		{
			Name = "BagUpdateDelayed",
			Type = "Event",
			LiteralName = "BAG_UPDATE_DELAYED",
		},
		{
			Name = "EquipBindRefundableConfirm",
			Type = "Event",
			LiteralName = "EQUIP_BIND_REFUNDABLE_CONFIRM",
			Payload =
			{
				{ Name = "slot", Type = "number", Nilable = false },
			},
		},
		{
			Name = "EquipBindTradeableConfirm",
			Type = "Event",
			LiteralName = "EQUIP_BIND_TRADEABLE_CONFIRM",
			Payload =
			{
				{ Name = "slot", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ExpandBagBarChanged",
			Type = "Event",
			LiteralName = "EXPAND_BAG_BAR_CHANGED",
			Payload =
			{
				{ Name = "expandBagBar", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "InventorySearchUpdate",
			Type = "Event",
			LiteralName = "INVENTORY_SEARCH_UPDATE",
		},
		{
			Name = "ItemLockChanged",
			Type = "Event",
			LiteralName = "ITEM_LOCK_CHANGED",
			Payload =
			{
				{ Name = "bagOrSlotIndex", Type = "number", Nilable = false },
				{ Name = "slotIndex", Type = "number", Nilable = true },
			},
		},
		{
			Name = "ItemLocked",
			Type = "Event",
			LiteralName = "ITEM_LOCKED",
			Payload =
			{
				{ Name = "bagOrSlotIndex", Type = "number", Nilable = false },
				{ Name = "slotIndex", Type = "number", Nilable = true },
			},
		},
		{
			Name = "ItemUnlocked",
			Type = "Event",
			LiteralName = "ITEM_UNLOCKED",
			Payload =
			{
				{ Name = "bagOrSlotIndex", Type = "number", Nilable = false },
				{ Name = "slotIndex", Type = "number", Nilable = true },
			},
		},
		{
			Name = "UseCombinedBagsChanged",
			Type = "Event",
			LiteralName = "USE_COMBINED_BAGS_CHANGED",
			Payload =
			{
				{ Name = "useCombinedBags", Type = "bool", Nilable = false },
			},
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "ContributionCollector",
	Type = "System",
	Namespace = "C_ContributionCollector",

	Functions =
	{
		{
			Name = "Close",
			Type = "Function",
		},
		{
			Name = "Contribute",
			Type = "Function",

			Arguments =
			{
				{ Name = "contributionID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetActive",
			Type = "Function",

			Returns =
			{
				{ Name = "contributionID", Type = "number", Nilable = false, StrideIndex = 1 },
			},
		},
		{
			Name = "GetAtlases",
			Type = "Function",

			Arguments =
			{
				{ Name = "contributionID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "atlasName", Type = "table", InnerType = "string", Nilable = false },
			},
		},
		{
			Name = "GetBuffs",
			Type = "Function",

			Arguments =
			{
				{ Name = "contributionID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "spellID", Type = "number", Nilable = false, StrideIndex = 1 },
			},
		},
		{
			Name = "GetContributionAppearance",
			Type = "Function",

			Arguments =
			{
				{ Name = "contributionID", Type = "number", Nilable = false },
				{ Name = "contributionState", Type = "ContributionState", Nilable = false },
			},

			Returns =
			{
				{ Name = "appearance", Type = "ContributionAppearance", Nilable = true },
			},
		},
		{
			Name = "GetContributionCollectorsForMap",
			Type = "Function",

			Arguments =
			{
				{ Name = "uiMapID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "contributionCollectors", Type = "table", InnerType = "ContributionMapInfo", Nilable = false },
			},
		},
		{
			Name = "GetContributionResult",
			Type = "Function",

			Arguments =
			{
				{ Name = "contributionID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "result", Type = "ContributionResult", Nilable = false },
			},
		},
		{
			Name = "GetDescription",
			Type = "Function",

			Arguments =
			{
				{ Name = "contributionID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "description", Type = "string", Nilable = false, Default = "" },
			},
		},
		{
			Name = "GetManagedContributionsForCreatureID",
			Type = "Function",

			Arguments =
			{
				{ Name = "creatureID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "contributionID", Type = "number", Nilable = false, StrideIndex = 1 },
			},
		},
		{
			Name = "GetName",
			Type = "Function",

			Arguments =
			{
				{ Name = "contributionID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "name", Type = "string", Nilable = false, Default = "" },
			},
		},
		{
			Name = "GetOrderIndex",
			Type = "Function",

			Arguments =
			{
				{ Name = "contributionID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "orderIndex", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetRequiredContributionCurrency",
			Type = "Function",

			Arguments =
			{
				{ Name = "contributionID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "currencyID", Type = "number", Nilable = false, Default = 0 },
				{ Name = "currencyAmount", Type = "number", Nilable = false, Default = 0 },
			},
		},
		{
			Name = "GetRequiredContributionItem",
			Type = "Function",

			Arguments =
			{
				{ Name = "contributionID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "itemID", Type = "number", Nilable = false, Default = 0 },
				{ Name = "itemCount", Type = "number", Nilable = false, Default = 0 },
			},
		},
		{
			Name = "GetRewardQuestID",
			Type = "Function",

			Arguments =
			{
				{ Name = "contributionID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetState",
			Type = "Function",

			Arguments =
			{
				{ Name = "contributionID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "contributionState", Type = "ContributionState", Nilable = false, Default = "None" },
				{ Name = "contributionPercentageComplete", Type = "number", Nilable = false },
				{ Name = "timeOfNextStateChange", Type = "number", Nilable = true },
				{ Name = "startTime", Type = "number", Nilable = false },
			},
		},
		{
			Name = "HasPendingContribution",
			Type = "Function",

			Arguments =
			{
				{ Name = "contributionID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "hasPending", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsAwaitingRewardQuestData",
			Type = "Function",

			Arguments =
			{
				{ Name = "contributionID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "awaitingData", Type = "bool", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "ContributionChanged",
			Type = "Event",
			LiteralName = "CONTRIBUTION_CHANGED",
			Payload =
			{
				{ Name = "state", Type = "ContributionState", Nilable = false },
				{ Name = "result", Type = "ContributionResult", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "contributionID", Type = "number", Nilable = false, StrideIndex = 1 },
			},
		},
		{
			Name = "ContributionCollectorClose",
			Type = "Event",
			LiteralName = "CONTRIBUTION_COLLECTOR_CLOSE",
		},
		{
			Name = "ContributionCollectorOpen",
			Type = "Event",
			LiteralName = "CONTRIBUTION_COLLECTOR_OPEN",
		},
		{
			Name = "ContributionCollectorPending",
			Type = "Event",
			LiteralName = "CONTRIBUTION_COLLECTOR_PENDING",
			Payload =
			{
				{ Name = "contributionID", Type = "number", Nilable = false },
				{ Name = "isPending", Type = "bool", Nilable = false },
				{ Name = "result", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ContributionCollectorUpdate",
			Type = "Event",
			LiteralName = "CONTRIBUTION_COLLECTOR_UPDATE",
		},
		{
			Name = "ContributionCollectorUpdateSingle",
			Type = "Event",
			LiteralName = "CONTRIBUTION_COLLECTOR_UPDATE_SINGLE",
			Payload =
			{
				{ Name = "contributionID", Type = "number", Nilable = false },
			},
		},
	},

	Tables =
	{
		{
			Name = "ContributionAppearanceFlags",
			Type = "Enumeration",
			NumValues = 1,
			MinValue = 0,
			MaxValue = 0,
			Fields =
			{
				{ Name = "TooltipUseTimeRemaining", Type = "ContributionAppearanceFlags", EnumValue = 0 },
			},
		},
		{
			Name = "ContributionResult",
			Type = "Enumeration",
			NumValues = 8,
			MinValue = 0,
			MaxValue = 7,
			Fields =
			{
				{ Name = "Success", Type = "ContributionResult", EnumValue = 0 },
				{ Name = "MustBeNearNpc", Type = "ContributionResult", EnumValue = 1 },
				{ Name = "IncorrectState", Type = "ContributionResult", EnumValue = 2 },
				{ Name = "InvalidID", Type = "ContributionResult", EnumValue = 3 },
				{ Name = "QuestDataMissing", Type = "ContributionResult", EnumValue = 4 },
				{ Name = "FailedConditionCheck", Type = "ContributionResult", EnumValue = 5 },
				{ Name = "UnableToCompleteTurnIn", Type = "ContributionResult", EnumValue = 6 },
				{ Name = "InternalError", Type = "ContributionResult", EnumValue = 7 },
			},
		},
		{
			Name = "ContributionAppearance",
			Type = "Structure",
			Fields =
			{
				{ Name = "stateName", Type = "string", Nilable = false },
				{ Name = "stateColor", Type = "table", Mixin = "ColorMixin", Nilable = false },
				{ Name = "tooltipLine", Type = "string", Nilable = false },
				{ Name = "tooltipUseTimeRemaining", Type = "bool", Nilable = false },
				{ Name = "statusBarAtlas", Type = "string", Nilable = false },
				{ Name = "borderAtlas", Type = "string", Nilable = false },
				{ Name = "bannerAtlas", Type = "string", Nilable = false },
			},
		},
		{
			Name = "ContributionMapInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "areaPoiID", Type = "number", Nilable = false },
				{ Name = "position", Type = "table", Mixin = "Vector2DMixin", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "atlasName", Type = "string", Nilable = false },
				{ Name = "collectorCreatureID", Type = "number", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "CooldownFrameAPI",
	Type = "ScriptObject",

	Functions =
	{
		{
			Name = "Clear",
			Type = "Function",

			Arguments =
			{
			},
		},
		{
			Name = "GetCooldownDisplayDuration",
			Type = "Function",
			Documentation = { "The returned duration unit is milliseconds, unaffected by modRate." },

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "duration", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetCooldownDuration",
			Type = "Function",
			Documentation = { "The returned duration unit is milliseconds and is multiplied by the modRate." },

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "duration", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetCooldownTimes",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "start", Type = "number", Nilable = false },
				{ Name = "duration", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetDrawBling",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "drawBling", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetDrawEdge",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "drawEdge", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetDrawSwipe",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "drawSwipe", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetEdgeScale",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "edgeScale", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetReverse",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "reverse", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetRotation",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "rotationRadians", Type = "number", Nilable = false },
			},
		},
		{
			Name = "IsPaused",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "isPaused", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "Pause",
			Type = "Function",

			Arguments =
			{
			},
		},
		{
			Name = "Resume",
			Type = "Function",

			Arguments =
			{
			},
		},
		{
			Name = "SetBlingTexture",
			Type = "Function",

			Arguments =
			{
				{ Name = "texture", Type = "string", Nilable = false },
				{ Name = "colorR", Type = "number", Nilable = false },
				{ Name = "colorG", Type = "number", Nilable = false },
				{ Name = "colorB", Type = "number", Nilable = false },
				{ Name = "colorA", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetCooldown",
			Type = "Function",

			Arguments =
			{
				{ Name = "start", Type = "number", Nilable = false },
				{ Name = "duration", Type = "number", Nilable = false },
				{ Name = "modRate", Type = "number", Nilable = false, Default = 1 },
			},
		},
		{
			Name = "SetCooldownDuration",
			Type = "Function",

			Arguments =
			{
				{ Name = "duration", Type = "number", Nilable = false },
				{ Name = "modRate", Type = "number", Nilable = false, Default = 1 },
			},
		},
		{
			Name = "SetCooldownUNIX",
			Type = "Function",

			Arguments =
			{
				{ Name = "start", Type = "number", Nilable = false },
				{ Name = "duration", Type = "number", Nilable = false },
				{ Name = "modRate", Type = "number", Nilable = false, Default = 1 },
			},
		},
		{
			Name = "SetCountdownAbbrevThreshold",
			Type = "Function",

			Arguments =
			{
				{ Name = "seconds", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetCountdownFont",
			Type = "Function",

			Arguments =
			{
				{ Name = "fontName", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetDrawBling",
			Type = "Function",

			Arguments =
			{
				{ Name = "drawBling", Type = "bool", Nilable = false, Default = false },
			},
		},
		{
			Name = "SetDrawEdge",
			Type = "Function",

			Arguments =
			{
				{ Name = "drawEdge", Type = "bool", Nilable = false, Default = false },
			},
		},
		{
			Name = "SetDrawSwipe",
			Type = "Function",

			Arguments =
			{
				{ Name = "drawSwipe", Type = "bool", Nilable = false, Default = false },
			},
		},
		{
			Name = "SetEdgeScale",
			Type = "Function",

			Arguments =
			{
				{ Name = "scale", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetEdgeTexture",
			Type = "Function",

			Arguments =
			{
				{ Name = "texture", Type = "string", Nilable = false },
				{ Name = "colorR", Type = "number", Nilable = false },
				{ Name = "colorG", Type = "number", Nilable = false },
				{ Name = "colorB", Type = "number", Nilable = false },
				{ Name = "colorA", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetHideCountdownNumbers",
			Type = "Function",

			Arguments =
			{
				{ Name = "hideNumbers", Type = "bool", Nilable = false, Default = false },
			},
		},
		{
			Name = "SetReverse",
			Type = "Function",

			Arguments =
			{
				{ Name = "reverse", Type = "bool", Nilable = false, Default = false },
			},
		},
		{
			Name = "SetRotation",
			Type = "Function",

			Arguments =
			{
				{ Name = "rotationRadians", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetSwipeColor",
			Type = "Function",

			Arguments =
			{
				{ Name = "colorR", Type = "number", Nilable = false },
				{ Name = "colorG", Type = "number", Nilable = false },
				{ Name = "colorB", Type = "number", Nilable = false },
				{ Name = "a", Type = "number", Nilable = true },
			},
		},
		{
			Name = "SetSwipeTexture",
			Type = "Function",

			Arguments =
			{
				{ Name = "texture", Type = "string", Nilable = false },
				{ Name = "colorR", Type = "number", Nilable = false },
				{ Name = "colorG", Type = "number", Nilable = false },
				{ Name = "colorB", Type = "number", Nilable = false },
				{ Name = "colorA", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetUseCircularEdge",
			Type = "Function",

			Arguments =
			{
				{ Name = "useCircularEdge", Type = "bool", Nilable = false, Default = false },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "CreatureInfo",
	Type = "System",
	Namespace = "C_CreatureInfo",

	Functions =
	{
		{
			Name = "GetClassInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "classID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "classInfo", Type = "ClassInfo", Nilable = true },
			},
		},
		{
			Name = "GetFactionInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "raceID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "factionInfo", Type = "FactionInfo", Nilable = true },
			},
		},
		{
			Name = "GetRaceInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "raceID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "raceInfo", Type = "RaceInfo", Nilable = true },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
		{
			Name = "ClassInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "className", Type = "string", Nilable = false },
				{ Name = "classFile", Type = "string", Nilable = false },
				{ Name = "classID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "FactionInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "groupTag", Type = "string", Nilable = false },
			},
		},
		{
			Name = "RaceInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "raceName", Type = "string", Nilable = false },
				{ Name = "clientFileString", Type = "string", Nilable = false },
				{ Name = "raceID", Type = "number", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "CurrencySystem",
	Type = "System",
	Namespace = "C_CurrencyInfo",

	Functions =
	{
		{
			Name = "DoesWarModeBonusApply",
			Type = "Function",

			Arguments =
			{
				{ Name = "currencyID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "warModeApplies", Type = "bool", Nilable = true },
				{ Name = "limitOncePerTooltip", Type = "bool", Nilable = true },
			},
		},
		{
			Name = "ExpandCurrencyList",
			Type = "Function",

			Arguments =
			{
				{ Name = "index", Type = "number", Nilable = false },
				{ Name = "expand", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetAzeriteCurrencyID",
			Type = "Function",

			Returns =
			{
				{ Name = "azeriteCurrencyID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetBackpackCurrencyInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "index", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "info", Type = "BackpackCurrencyInfo", Nilable = false },
			},
		},
		{
			Name = "GetBasicCurrencyInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "currencyType", Type = "number", Nilable = false },
				{ Name = "quantity", Type = "number", Nilable = true },
			},

			Returns =
			{
				{ Name = "info", Type = "CurrencyDisplayInfo", Nilable = false },
			},
		},
		{
			Name = "GetCurrencyContainerInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "currencyType", Type = "number", Nilable = false },
				{ Name = "quantity", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "info", Type = "CurrencyDisplayInfo", Nilable = false },
			},
		},
		{
			Name = "GetCurrencyIDFromLink",
			Type = "Function",

			Arguments =
			{
				{ Name = "currencyLink", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "currencyID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetCurrencyInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "type", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "info", Type = "CurrencyInfo", Nilable = false },
			},
		},
		{
			Name = "GetCurrencyInfoFromLink",
			Type = "Function",

			Arguments =
			{
				{ Name = "link", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "info", Type = "CurrencyInfo", Nilable = false },
			},
		},
		{
			Name = "GetCurrencyLink",
			Type = "Function",

			Arguments =
			{
				{ Name = "type", Type = "number", Nilable = false },
				{ Name = "amount", Type = "number", Nilable = true },
			},

			Returns =
			{
				{ Name = "link", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetCurrencyListInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "index", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "info", Type = "CurrencyInfo", Nilable = false },
			},
		},
		{
			Name = "GetCurrencyListLink",
			Type = "Function",

			Arguments =
			{
				{ Name = "index", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "link", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetCurrencyListSize",
			Type = "Function",

			Returns =
			{
				{ Name = "currencyListSize", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetFactionGrantedByCurrency",
			Type = "Function",
			Documentation = { "Gets the faction ID for currency that is immediately converted into reputation with that faction instead." },

			Arguments =
			{
				{ Name = "currencyID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "factionID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetWarResourcesCurrencyID",
			Type = "Function",

			Returns =
			{
				{ Name = "warResourceCurrencyID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "IsCurrencyContainer",
			Type = "Function",

			Arguments =
			{
				{ Name = "currencyID", Type = "number", Nilable = false },
				{ Name = "quantity", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isCurrencyContainer", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "PickupCurrency",
			Type = "Function",

			Arguments =
			{
				{ Name = "type", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetCurrencyBackpack",
			Type = "Function",

			Arguments =
			{
				{ Name = "index", Type = "number", Nilable = false },
				{ Name = "backpack", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetCurrencyUnused",
			Type = "Function",

			Arguments =
			{
				{ Name = "index", Type = "number", Nilable = false },
				{ Name = "unused", Type = "bool", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "CurrencyDisplayUpdate",
			Type = "Event",
			LiteralName = "CURRENCY_DISPLAY_UPDATE",
			Payload =
			{
				{ Name = "currencyType", Type = "number", Nilable = true },
				{ Name = "quantity", Type = "number", Nilable = true },
				{ Name = "quantityChange", Type = "number", Nilable = true },
				{ Name = "quantityGainSource", Type = "number", Nilable = true },
				{ Name = "quantityLostSource", Type = "number", Nilable = true },
			},
		},
		{
			Name = "PlayerMoney",
			Type = "Event",
			LiteralName = "PLAYER_MONEY",
		},
	},

	Tables =
	{
		{
			Name = "BackpackCurrencyInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "quantity", Type = "number", Nilable = false },
				{ Name = "iconFileID", Type = "number", Nilable = false },
				{ Name = "currencyTypesID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "CurrencyDisplayInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "description", Type = "string", Nilable = false },
				{ Name = "icon", Type = "number", Nilable = false },
				{ Name = "quality", Type = "number", Nilable = false },
				{ Name = "displayAmount", Type = "number", Nilable = false },
				{ Name = "actualAmount", Type = "number", Nilable = false },
			},
		},
		{
			Name = "CurrencyInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "isHeader", Type = "bool", Nilable = false },
				{ Name = "isHeaderExpanded", Type = "bool", Nilable = false },
				{ Name = "isTypeUnused", Type = "bool", Nilable = false },
				{ Name = "isShowInBackpack", Type = "bool", Nilable = false },
				{ Name = "quantity", Type = "number", Nilable = false },
				{ Name = "trackedQuantity", Type = "number", Nilable = false },
				{ Name = "iconFileID", Type = "number", Nilable = false },
				{ Name = "maxQuantity", Type = "number", Nilable = false },
				{ Name = "canEarnPerWeek", Type = "bool", Nilable = false },
				{ Name = "quantityEarnedThisWeek", Type = "number", Nilable = false },
				{ Name = "isTradeable", Type = "bool", Nilable = false },
				{ Name = "quality", Type = "ItemQuality", Nilable = false },
				{ Name = "maxWeeklyQuantity", Type = "number", Nilable = false },
				{ Name = "totalEarned", Type = "number", Nilable = false },
				{ Name = "discovered", Type = "bool", Nilable = false },
				{ Name = "useTotalEarnedForMaxQty", Type = "bool", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "Cursor",
	Type = "System",
	Namespace = "C_Cursor",

	Functions =
	{
		{
			Name = "GetCursorItem",
			Type = "Function",

			Returns =
			{
				{ Name = "item", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "BattlePetCursorClear",
			Type = "Event",
			LiteralName = "BATTLE_PET_CURSOR_CLEAR",
		},
		{
			Name = "CursorChanged",
			Type = "Event",
			LiteralName = "CURSOR_CHANGED",
			Payload =
			{
				{ Name = "isDefault", Type = "bool", Nilable = false },
				{ Name = "newCursorType", Type = "UICursorType", Nilable = false },
				{ Name = "oldCursorType", Type = "UICursorType", Nilable = false },
				{ Name = "oldCursorVirtualID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "MountCursorClear",
			Type = "Event",
			LiteralName = "MOUNT_CURSOR_CLEAR",
		},
	},

	Tables =
	{
		{
			Name = "UICursorType",
			Type = "Enumeration",
			NumValues = 20,
			MinValue = 0,
			MaxValue = 20,
			Fields =
			{
				{ Name = "Default", Type = "UICursorType", EnumValue = 0 },
				{ Name = "Item", Type = "UICursorType", EnumValue = 1 },
				{ Name = "Money", Type = "UICursorType", EnumValue = 2 },
				{ Name = "Spell", Type = "UICursorType", EnumValue = 3 },
				{ Name = "PetAction", Type = "UICursorType", EnumValue = 4 },
				{ Name = "Merchant", Type = "UICursorType", EnumValue = 5 },
				{ Name = "ActionBar", Type = "UICursorType", EnumValue = 6 },
				{ Name = "Macro", Type = "UICursorType", EnumValue = 7 },
				{ Name = "AmmoObsolete", Type = "UICursorType", EnumValue = 9 },
				{ Name = "Pet", Type = "UICursorType", EnumValue = 10 },
				{ Name = "GuildBank", Type = "UICursorType", EnumValue = 11 },
				{ Name = "GuildBankMoney", Type = "UICursorType", EnumValue = 12 },
				{ Name = "EquipmentSet", Type = "UICursorType", EnumValue = 13 },
				{ Name = "Currency", Type = "UICursorType", EnumValue = 14 },
				{ Name = "Flyout", Type = "UICursorType", EnumValue = 15 },
				{ Name = "VoidItem", Type = "UICursorType", EnumValue = 16 },
				{ Name = "BattlePet", Type = "UICursorType", EnumValue = 17 },
				{ Name = "Mount", Type = "UICursorType", EnumValue = 18 },
				{ Name = "Toy", Type = "UICursorType", EnumValue = 19 },
				{ Name = "ConduitCollectionItem", Type = "UICursorType", EnumValue = 20 },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "DeathInfo",
	Type = "System",
	Namespace = "C_DeathInfo",

	Functions =
	{
		{
			Name = "GetCorpseMapPosition",
			Type = "Function",

			Arguments =
			{
				{ Name = "uiMapID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "position", Type = "table", Mixin = "Vector2DMixin", Nilable = true },
			},
		},
		{
			Name = "GetDeathReleasePosition",
			Type = "Function",

			Arguments =
			{
				{ Name = "uiMapID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "position", Type = "table", Mixin = "Vector2DMixin", Nilable = true },
			},
		},
		{
			Name = "GetGraveyardsForMap",
			Type = "Function",

			Arguments =
			{
				{ Name = "uiMapID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "graveyards", Type = "table", InnerType = "GraveyardMapInfo", Nilable = false },
			},
		},
		{
			Name = "GetSelfResurrectOptions",
			Type = "Function",

			Returns =
			{
				{ Name = "options", Type = "table", InnerType = "SelfResurrectOption", Nilable = false },
			},
		},
		{
			Name = "UseSelfResurrectOption",
			Type = "Function",

			Arguments =
			{
				{ Name = "optionType", Type = "SelfResurrectOptionType", Nilable = false },
				{ Name = "id", Type = "number", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "AreaSpiritHealerInRange",
			Type = "Event",
			LiteralName = "AREA_SPIRIT_HEALER_IN_RANGE",
		},
		{
			Name = "AreaSpiritHealerOutOfRange",
			Type = "Event",
			LiteralName = "AREA_SPIRIT_HEALER_OUT_OF_RANGE",
		},
		{
			Name = "CemeteryPreferenceUpdated",
			Type = "Event",
			LiteralName = "CEMETERY_PREFERENCE_UPDATED",
		},
		{
			Name = "ConfirmXpLoss",
			Type = "Event",
			LiteralName = "CONFIRM_XP_LOSS",
		},
		{
			Name = "CorpseInInstance",
			Type = "Event",
			LiteralName = "CORPSE_IN_INSTANCE",
		},
		{
			Name = "CorpseInRange",
			Type = "Event",
			LiteralName = "CORPSE_IN_RANGE",
		},
		{
			Name = "CorpseOutOfRange",
			Type = "Event",
			LiteralName = "CORPSE_OUT_OF_RANGE",
		},
		{
			Name = "PlayerAlive",
			Type = "Event",
			LiteralName = "PLAYER_ALIVE",
		},
		{
			Name = "PlayerDead",
			Type = "Event",
			LiteralName = "PLAYER_DEAD",
		},
		{
			Name = "PlayerSkinned",
			Type = "Event",
			LiteralName = "PLAYER_SKINNED",
			Payload =
			{
				{ Name = "hasFreeRepop", Type = "number", Nilable = false },
			},
		},
		{
			Name = "PlayerUnghost",
			Type = "Event",
			LiteralName = "PLAYER_UNGHOST",
		},
		{
			Name = "RequestCemeteryListResponse",
			Type = "Event",
			LiteralName = "REQUEST_CEMETERY_LIST_RESPONSE",
			Payload =
			{
				{ Name = "isGossipTriggered", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ResurrectRequest",
			Type = "Event",
			LiteralName = "RESURRECT_REQUEST",
			Payload =
			{
				{ Name = "inviter", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SelfResSpellChanged",
			Type = "Event",
			LiteralName = "SELF_RES_SPELL_CHANGED",
		},
	},

	Tables =
	{
		{
			Name = "SelfResurrectOptionType",
			Type = "Enumeration",
			NumValues = 2,
			MinValue = 0,
			MaxValue = 1,
			Fields =
			{
				{ Name = "Spell", Type = "SelfResurrectOptionType", EnumValue = 0 },
				{ Name = "Item", Type = "SelfResurrectOptionType", EnumValue = 1 },
			},
		},
		{
			Name = "GraveyardMapInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "areaPoiID", Type = "number", Nilable = false },
				{ Name = "position", Type = "table", Mixin = "Vector2DMixin", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "textureIndex", Type = "number", Nilable = false },
				{ Name = "graveyardID", Type = "number", Nilable = false },
				{ Name = "isGraveyardSelectable", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SelfResurrectOption",
			Type = "Structure",
			Fields =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "optionType", Type = "SelfResurrectOptionType", Nilable = false },
				{ Name = "id", Type = "number", Nilable = false },
				{ Name = "canUse", Type = "bool", Nilable = false },
				{ Name = "isLimited", Type = "bool", Nilable = false },
				{ Name = "priority", Type = "number", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "DuelInfo",
	Type = "System",
	Namespace = "C_DuelInfo",

	Functions =
	{
	},

	Events =
	{
		{
			Name = "DuelFinished",
			Type = "Event",
			LiteralName = "DUEL_FINISHED",
		},
		{
			Name = "DuelInbounds",
			Type = "Event",
			LiteralName = "DUEL_INBOUNDS",
		},
		{
			Name = "DuelOutofbounds",
			Type = "Event",
			LiteralName = "DUEL_OUTOFBOUNDS",
		},
		{
			Name = "DuelRequested",
			Type = "Event",
			LiteralName = "DUEL_REQUESTED",
			Payload =
			{
				{ Name = "playerName", Type = "string", Nilable = false },
			},
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "EditModeManager",
	Type = "System",
	Namespace = "C_EditMode",

	Functions =
	{
		{
			Name = "ConvertLayoutInfoToHyperlink",
			Type = "Function",

			Arguments =
			{
				{ Name = "layoutInfo", Type = "EditModeLayoutInfo", Nilable = false },
			},

			Returns =
			{
				{ Name = "hyperlink", Type = "string", Nilable = false },
			},
		},
		{
			Name = "ConvertLayoutInfoToString",
			Type = "Function",

			Arguments =
			{
				{ Name = "layoutInfo", Type = "EditModeLayoutInfo", Nilable = false },
			},

			Returns =
			{
				{ Name = "layoutInfoAsString", Type = "string", Nilable = false },
			},
		},
		{
			Name = "ConvertStringToLayoutInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "layoutInfoAsString", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "layoutInfo", Type = "EditModeLayoutInfo", Nilable = false },
			},
		},
		{
			Name = "GetEditModeInfo",
			Type = "Function",

			Returns =
			{
				{ Name = "layoutInfo", Type = "EditModeInfo", Nilable = false },
			},
		},
		{
			Name = "OnLayoutAdded",
			Type = "Function",

			Arguments =
			{
				{ Name = "addedLayoutIndex", Type = "number", Nilable = false },
			},
		},
		{
			Name = "OnLayoutDeleted",
			Type = "Function",

			Arguments =
			{
				{ Name = "deletedLayoutIndex", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SaveEditModeInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "saveInfo", Type = "EditModeInfo", Nilable = false },
			},
		},
		{
			Name = "SetActiveLayout",
			Type = "Function",

			Arguments =
			{
				{ Name = "activeLayout", Type = "number", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "EditModeDataUpdated",
			Type = "Event",
			LiteralName = "EDIT_MODE_DATA_UPDATED",
			Payload =
			{
				{ Name = "layoutInfo", Type = "EditModeInfo", Nilable = false },
				{ Name = "fromServer", Type = "bool", Nilable = false },
			},
		},
	},

	Tables =
	{
		{
			Name = "EditModeAnchorInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "point", Type = "FramePoint", Nilable = false },
				{ Name = "relativeTo", Type = "string", Nilable = false },
				{ Name = "relativePoint", Type = "FramePoint", Nilable = false },
				{ Name = "offsetX", Type = "number", Nilable = false },
				{ Name = "offsetY", Type = "number", Nilable = false },
			},
		},
		{
			Name = "EditModeInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "layouts", Type = "table", InnerType = "EditModeLayoutInfo", Nilable = false },
				{ Name = "activeLayout", Type = "number", Nilable = false },
			},
		},
		{
			Name = "EditModeLayoutInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "layoutName", Type = "string", Nilable = false },
				{ Name = "layoutType", Type = "EditModeLayoutType", Nilable = false },
				{ Name = "systems", Type = "table", InnerType = "EditModeSystemInfo", Nilable = false },
			},
		},
		{
			Name = "EditModeSettingInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "setting", Type = "number", Nilable = false },
				{ Name = "value", Type = "number", Nilable = false },
			},
		},
		{
			Name = "EditModeSystemInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "system", Type = "EditModeSystem", Nilable = false },
				{ Name = "systemIndex", Type = "number", Nilable = true },
				{ Name = "anchorInfo", Type = "EditModeAnchorInfo", Nilable = false },
				{ Name = "settings", Type = "table", InnerType = "EditModeSettingInfo", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "EncounterInfo",
	Type = "System",
	Namespace = "C_EncounterInfo",

	Functions =
	{
	},

	Events =
	{
		{
			Name = "BossKill",
			Type = "Event",
			LiteralName = "BOSS_KILL",
			Payload =
			{
				{ Name = "encounterID", Type = "number", Nilable = false },
				{ Name = "encounterName", Type = "string", Nilable = false },
			},
		},
		{
			Name = "DisableLowLevelRaid",
			Type = "Event",
			LiteralName = "DISABLE_LOW_LEVEL_RAID",
		},
		{
			Name = "EnableLowLevelRaid",
			Type = "Event",
			LiteralName = "ENABLE_LOW_LEVEL_RAID",
		},
		{
			Name = "EncounterEnd",
			Type = "Event",
			LiteralName = "ENCOUNTER_END",
			Payload =
			{
				{ Name = "encounterID", Type = "number", Nilable = false },
				{ Name = "encounterName", Type = "string", Nilable = false },
				{ Name = "difficultyID", Type = "number", Nilable = false },
				{ Name = "groupSize", Type = "number", Nilable = false },
				{ Name = "success", Type = "number", Nilable = false },
			},
		},
		{
			Name = "EncounterStart",
			Type = "Event",
			LiteralName = "ENCOUNTER_START",
			Payload =
			{
				{ Name = "encounterID", Type = "number", Nilable = false },
				{ Name = "encounterName", Type = "string", Nilable = false },
				{ Name = "difficultyID", Type = "number", Nilable = false },
				{ Name = "groupSize", Type = "number", Nilable = false },
			},
		},
		{
			Name = "InstanceLockStart",
			Type = "Event",
			LiteralName = "INSTANCE_LOCK_START",
		},
		{
			Name = "InstanceLockStop",
			Type = "Event",
			LiteralName = "INSTANCE_LOCK_STOP",
		},
		{
			Name = "InstanceLockWarning",
			Type = "Event",
			LiteralName = "INSTANCE_LOCK_WARNING",
		},
		{
			Name = "RaidTargetUpdate",
			Type = "Event",
			LiteralName = "RAID_TARGET_UPDATE",
		},
		{
			Name = "UpdateInstanceInfo",
			Type = "Event",
			LiteralName = "UPDATE_INSTANCE_INFO",
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "EquipmentSet",
	Type = "System",
	Namespace = "C_EquipmentSet",

	Functions =
	{
		{
			Name = "AssignSpecToEquipmentSet",
			Type = "Function",

			Arguments =
			{
				{ Name = "equipmentSetID", Type = "number", Nilable = false },
				{ Name = "specIndex", Type = "number", Nilable = false },
			},
		},
		{
			Name = "CanUseEquipmentSets",
			Type = "Function",

			Returns =
			{
				{ Name = "canUseEquipmentSets", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ClearIgnoredSlotsForSave",
			Type = "Function",
		},
		{
			Name = "CreateEquipmentSet",
			Type = "Function",

			Arguments =
			{
				{ Name = "equipmentSetName", Type = "string", Nilable = false },
				{ Name = "icon", Type = "string", Nilable = true },
			},
		},
		{
			Name = "DeleteEquipmentSet",
			Type = "Function",

			Arguments =
			{
				{ Name = "equipmentSetID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "EquipmentSetContainsLockedItems",
			Type = "Function",

			Arguments =
			{
				{ Name = "equipmentSetID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "hasLockedItems", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetEquipmentSetAssignedSpec",
			Type = "Function",

			Arguments =
			{
				{ Name = "equipmentSetID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "specIndex", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetEquipmentSetForSpec",
			Type = "Function",

			Arguments =
			{
				{ Name = "specIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "equipmentSetID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetEquipmentSetID",
			Type = "Function",

			Arguments =
			{
				{ Name = "equipmentSetName", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "equipmentSetID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetEquipmentSetIDs",
			Type = "Function",

			Returns =
			{
				{ Name = "equipmentSetIDs", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "GetEquipmentSetInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "equipmentSetID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "iconFileID", Type = "number", Nilable = false },
				{ Name = "setID", Type = "number", Nilable = false },
				{ Name = "isEquipped", Type = "bool", Nilable = false },
				{ Name = "numItems", Type = "number", Nilable = false },
				{ Name = "numEquipped", Type = "number", Nilable = false },
				{ Name = "numInInventory", Type = "number", Nilable = false },
				{ Name = "numLost", Type = "number", Nilable = false },
				{ Name = "numIgnored", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetIgnoredSlots",
			Type = "Function",

			Arguments =
			{
				{ Name = "equipmentSetID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "slotIgnored", Type = "table", InnerType = "bool", Nilable = false },
			},
		},
		{
			Name = "GetItemIDs",
			Type = "Function",

			Arguments =
			{
				{ Name = "equipmentSetID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "itemIDs", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "GetItemLocations",
			Type = "Function",

			Arguments =
			{
				{ Name = "equipmentSetID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "locations", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "GetNumEquipmentSets",
			Type = "Function",

			Returns =
			{
				{ Name = "numEquipmentSets", Type = "number", Nilable = false },
			},
		},
		{
			Name = "IgnoreSlotForSave",
			Type = "Function",

			Arguments =
			{
				{ Name = "slot", Type = "number", Nilable = false },
			},
		},
		{
			Name = "IsSlotIgnoredForSave",
			Type = "Function",

			Arguments =
			{
				{ Name = "slot", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isSlotIgnored", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ModifyEquipmentSet",
			Type = "Function",

			Arguments =
			{
				{ Name = "equipmentSetID", Type = "number", Nilable = false },
				{ Name = "newName", Type = "string", Nilable = false },
				{ Name = "newIcon", Type = "string", Nilable = true },
			},
		},
		{
			Name = "PickupEquipmentSet",
			Type = "Function",

			Arguments =
			{
				{ Name = "equipmentSetID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SaveEquipmentSet",
			Type = "Function",

			Arguments =
			{
				{ Name = "equipmentSetID", Type = "number", Nilable = false },
				{ Name = "icon", Type = "string", Nilable = true },
			},
		},
		{
			Name = "UnassignEquipmentSetSpec",
			Type = "Function",

			Arguments =
			{
				{ Name = "equipmentSetID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "UnignoreSlotForSave",
			Type = "Function",

			Arguments =
			{
				{ Name = "slot", Type = "number", Nilable = false },
			},
		},
		{
			Name = "UseEquipmentSet",
			Type = "Function",

			Arguments =
			{
				{ Name = "equipmentSetID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "setWasEquipped", Type = "bool", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "EquipmentSetsChanged",
			Type = "Event",
			LiteralName = "EQUIPMENT_SETS_CHANGED",
		},
		{
			Name = "EquipmentSwapFinished",
			Type = "Event",
			LiteralName = "EQUIPMENT_SWAP_FINISHED",
			Payload =
			{
				{ Name = "result", Type = "bool", Nilable = false },
				{ Name = "setID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "EquipmentSwapPending",
			Type = "Event",
			LiteralName = "EQUIPMENT_SWAP_PENDING",
		},
		{
			Name = "TransmogOutfitsChanged",
			Type = "Event",
			LiteralName = "TRANSMOG_OUTFITS_CHANGED",
		},
		{
			Name = "WearEquipmentSet",
			Type = "Event",
			LiteralName = "WEAR_EQUIPMENT_SET",
			Payload =
			{
				{ Name = "setID", Type = "number", Nilable = false },
			},
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "EventUtils",
	Type = "System",
	Namespace = "C_EventUtils",

	Functions =
	{
		{
			Name = "IsEventValid",
			Type = "Function",

			Arguments =
			{
				{ Name = "eventName", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "valid", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "NotifySettingsLoaded",
			Type = "Function",
		},
	},

	Events =
	{
		{
			Name = "SettingsLoaded",
			Type = "Event",
			LiteralName = "SETTINGS_LOADED",
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "Expansion",
	Type = "System",

	Functions =
	{
		{
			Name = "CanUpgradeExpansion",
			Type = "Function",

			Returns =
			{
				{ Name = "canUpgradeExpansion", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "DoesCurrentLocaleSellExpansionLevels",
			Type = "Function",

			Returns =
			{
				{ Name = "regionSellsExpansions", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetAccountExpansionLevel",
			Type = "Function",

			Returns =
			{
				{ Name = "expansionLevel", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetClientDisplayExpansionLevel",
			Type = "Function",

			Returns =
			{
				{ Name = "expansionLevel", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetCurrentRegionName",
			Type = "Function",

			Returns =
			{
				{ Name = "regionName", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetExpansionDisplayInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "expansionLevel", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "info", Type = "ExpansionDisplayInfo", Nilable = true },
			},
		},
		{
			Name = "GetExpansionForLevel",
			Type = "Function",

			Arguments =
			{
				{ Name = "playerLevel", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "expansionLevel", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetExpansionLevel",
			Type = "Function",

			Returns =
			{
				{ Name = "expansionLevel", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetExpansionTrialInfo",
			Type = "Function",

			Returns =
			{
				{ Name = "isExpansionTrialAccount", Type = "bool", Nilable = false },
				{ Name = "expansionTrialRemainingSeconds", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetMaxLevelForExpansionLevel",
			Type = "Function",
			Documentation = { "Maps an expansion level to a maximum character level for that expansion." },

			Arguments =
			{
				{ Name = "expansionLevel", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "maxLevel", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetMaxLevelForLatestExpansion",
			Type = "Function",

			Returns =
			{
				{ Name = "maxLevel", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetMaxLevelForPlayerExpansion",
			Type = "Function",

			Returns =
			{
				{ Name = "maxLevel", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetMaximumExpansionLevel",
			Type = "Function",

			Returns =
			{
				{ Name = "expansionLevel", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetMinimumExpansionLevel",
			Type = "Function",

			Returns =
			{
				{ Name = "expansionLevel", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetNumExpansions",
			Type = "Function",

			Returns =
			{
				{ Name = "numExpansions", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetServerExpansionLevel",
			Type = "Function",

			Returns =
			{
				{ Name = "serverExpansionLevel", Type = "number", Nilable = false },
			},
		},
		{
			Name = "IsExpansionTrial",
			Type = "Function",

			Returns =
			{
				{ Name = "isExpansionTrialAccount", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsTrialAccount",
			Type = "Function",

			Returns =
			{
				{ Name = "isTrialAccount", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsVeteranTrialAccount",
			Type = "Function",

			Returns =
			{
				{ Name = "isVeteranTrialAccount", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SendSubscriptionInterstitialResponse",
			Type = "Function",

			Arguments =
			{
				{ Name = "response", Type = "SubscriptionInterstitialResponseType", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "MaxExpansionLevelUpdated",
			Type = "Event",
			LiteralName = "MAX_EXPANSION_LEVEL_UPDATED",
		},
		{
			Name = "MinExpansionLevelUpdated",
			Type = "Event",
			LiteralName = "MIN_EXPANSION_LEVEL_UPDATED",
		},
		{
			Name = "ShowSubscriptionInterstitial",
			Type = "Event",
			LiteralName = "SHOW_SUBSCRIPTION_INTERSTITIAL",
			Payload =
			{
				{ Name = "type", Type = "SubscriptionInterstitialType", Nilable = false },
			},
		},
	},

	Tables =
	{
		{
			Name = "SubscriptionInterstitialResponseType",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 0,
			MaxValue = 2,
			Fields =
			{
				{ Name = "Clicked", Type = "SubscriptionInterstitialResponseType", EnumValue = 0 },
				{ Name = "Closed", Type = "SubscriptionInterstitialResponseType", EnumValue = 1 },
				{ Name = "WebRedirect", Type = "SubscriptionInterstitialResponseType", EnumValue = 2 },
			},
		},
		{
			Name = "SubscriptionInterstitialType",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 0,
			MaxValue = 2,
			Fields =
			{
				{ Name = "Standard", Type = "SubscriptionInterstitialType", EnumValue = 0 },
				{ Name = "LeftNpeArea", Type = "SubscriptionInterstitialType", EnumValue = 1 },
				{ Name = "MaxLevel", Type = "SubscriptionInterstitialType", EnumValue = 2 },
			},
		},
		{
			Name = "ExpansionDisplayInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "logo", Type = "number", Nilable = false },
				{ Name = "banner", Type = "string", Nilable = false },
				{ Name = "features", Type = "table", InnerType = "ExpansionDisplayInfoFeature", Nilable = false },
				{ Name = "highResBackgroundID", Type = "number", Nilable = false },
				{ Name = "lowResBackgroundID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ExpansionDisplayInfoFeature",
			Type = "Structure",
			Fields =
			{
				{ Name = "icon", Type = "number", Nilable = false },
				{ Name = "text", Type = "string", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "FogOfWar",
	Type = "System",
	Namespace = "C_FogOfWar",

	Functions =
	{
		{
			Name = "GetFogOfWarForMap",
			Type = "Function",

			Arguments =
			{
				{ Name = "uiMapID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "fogOfWarID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetFogOfWarInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "fogOfWarID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "fogOfWarInfo", Type = "FogOfWarInfo", Nilable = true },
			},
		},
	},

	Events =
	{
		{
			Name = "FogOfWarUpdated",
			Type = "Event",
			LiteralName = "FOG_OF_WAR_UPDATED",
		},
	},

	Tables =
	{
		{
			Name = "FogOfWarInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "fogOfWarID", Type = "number", Nilable = false },
				{ Name = "backgroundAtlas", Type = "string", Nilable = false },
				{ Name = "maskAtlas", Type = "string", Nilable = false },
				{ Name = "maskScalar", Type = "number", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "GMTicketInfo",
	Type = "System",
	Namespace = "C_GMTicketInfo",

	Functions =
	{
	},

	Events =
	{
		{
			Name = "GmPlayerInfo",
			Type = "Event",
			LiteralName = "GM_PLAYER_INFO",
			Payload =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "info", Type = "string", Nilable = false },
			},
		},
		{
			Name = "ItemRestorationButtonStatus",
			Type = "Event",
			LiteralName = "ITEM_RESTORATION_BUTTON_STATUS",
		},
		{
			Name = "PetitionClosed",
			Type = "Event",
			LiteralName = "PETITION_CLOSED",
		},
		{
			Name = "PetitionShow",
			Type = "Event",
			LiteralName = "PETITION_SHOW",
		},
		{
			Name = "PlayerReportSubmitted",
			Type = "Event",
			LiteralName = "PLAYER_REPORT_SUBMITTED",
			Payload =
			{
				{ Name = "invitedByGUID", Type = "string", Nilable = false },
			},
		},
		{
			Name = "QuickTicketSystemStatus",
			Type = "Event",
			LiteralName = "QUICK_TICKET_SYSTEM_STATUS",
		},
		{
			Name = "QuickTicketThrottleChanged",
			Type = "Event",
			LiteralName = "QUICK_TICKET_THROTTLE_CHANGED",
		},
		{
			Name = "UpdateWebTicket",
			Type = "Event",
			LiteralName = "UPDATE_WEB_TICKET",
			Payload =
			{
				{ Name = "hasTicket", Type = "bool", Nilable = false },
				{ Name = "numTickets", Type = "number", Nilable = true },
				{ Name = "ticketStatus", Type = "number", Nilable = true },
				{ Name = "caseIndex", Type = "number", Nilable = true },
				{ Name = "waitTimeMinutes", Type = "number", Nilable = true },
				{ Name = "waitMessage", Type = "string", Nilable = true },
			},
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "GamePad",
	Type = "System",
	Namespace = "C_GamePad",

	Functions =
	{
		{
			Name = "AddSDLMapping",
			Type = "Function",

			Arguments =
			{
				{ Name = "platform", Type = "ClientPlatformType", Nilable = false },
				{ Name = "mapping", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "success", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ApplyConfigs",
			Type = "Function",
		},
		{
			Name = "AxisIndexToConfigName",
			Type = "Function",

			Arguments =
			{
				{ Name = "axisIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "configName", Type = "string", Nilable = true },
			},
		},
		{
			Name = "ButtonBindingToIndex",
			Type = "Function",

			Arguments =
			{
				{ Name = "bindingName", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "buttonIndex", Type = "number", Nilable = true },
			},
		},
		{
			Name = "ButtonIndexToBinding",
			Type = "Function",

			Arguments =
			{
				{ Name = "buttonIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "bindingName", Type = "string", Nilable = true },
			},
		},
		{
			Name = "ButtonIndexToConfigName",
			Type = "Function",

			Arguments =
			{
				{ Name = "buttonIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "configName", Type = "string", Nilable = true },
			},
		},
		{
			Name = "ClearLedColor",
			Type = "Function",
		},
		{
			Name = "DeleteConfig",
			Type = "Function",

			Arguments =
			{
				{ Name = "configID", Type = "GamePadConfigID", Nilable = false },
			},
		},
		{
			Name = "GetActiveDeviceID",
			Type = "Function",

			Returns =
			{
				{ Name = "deviceID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetAllConfigIDs",
			Type = "Function",

			Returns =
			{
				{ Name = "configIDs", Type = "table", InnerType = "GamePadConfigID", Nilable = false },
			},
		},
		{
			Name = "GetAllDeviceIDs",
			Type = "Function",

			Returns =
			{
				{ Name = "deviceIDs", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "GetCombinedDeviceID",
			Type = "Function",

			Returns =
			{
				{ Name = "deviceID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetConfig",
			Type = "Function",

			Arguments =
			{
				{ Name = "configID", Type = "GamePadConfigID", Nilable = false },
			},

			Returns =
			{
				{ Name = "config", Type = "GamePadConfig", Nilable = true },
			},
		},
		{
			Name = "GetDeviceMappedState",
			Type = "Function",

			Arguments =
			{
				{ Name = "deviceID", Type = "number", Nilable = true },
			},

			Returns =
			{
				{ Name = "state", Type = "GamePadMappedState", Nilable = true },
			},
		},
		{
			Name = "GetDeviceRawState",
			Type = "Function",

			Arguments =
			{
				{ Name = "deviceID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "rawState", Type = "GamePadRawState", Nilable = true },
			},
		},
		{
			Name = "GetLedColor",
			Type = "Function",

			Returns =
			{
				{ Name = "color", Type = "table", Mixin = "ColorMixin", Nilable = false },
			},
		},
		{
			Name = "GetPowerLevel",
			Type = "Function",

			Arguments =
			{
				{ Name = "deviceID", Type = "number", Nilable = true },
			},

			Returns =
			{
				{ Name = "powerLevel", Type = "GamePadPowerLevel", Nilable = false },
			},
		},
		{
			Name = "IsEnabled",
			Type = "Function",

			Returns =
			{
				{ Name = "enabled", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetConfig",
			Type = "Function",

			Arguments =
			{
				{ Name = "config", Type = "GamePadConfig", Nilable = false },
			},
		},
		{
			Name = "SetLedColor",
			Type = "Function",

			Arguments =
			{
				{ Name = "color", Type = "table", Mixin = "ColorMixin", Nilable = false },
			},
		},
		{
			Name = "SetVibration",
			Type = "Function",

			Arguments =
			{
				{ Name = "vibrationType", Type = "string", Nilable = false },
				{ Name = "intensity", Type = "number", Nilable = false },
			},
		},
		{
			Name = "StickIndexToConfigName",
			Type = "Function",

			Arguments =
			{
				{ Name = "stickIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "configName", Type = "string", Nilable = true },
			},
		},
		{
			Name = "StopVibration",
			Type = "Function",
		},
	},

	Events =
	{
		{
			Name = "GamePadActiveChanged",
			Type = "Event",
			LiteralName = "GAME_PAD_ACTIVE_CHANGED",
			Payload =
			{
				{ Name = "isActive", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GamePadConfigsChanged",
			Type = "Event",
			LiteralName = "GAME_PAD_CONFIGS_CHANGED",
		},
		{
			Name = "GamePadConnected",
			Type = "Event",
			LiteralName = "GAME_PAD_CONNECTED",
		},
		{
			Name = "GamePadDisconnected",
			Type = "Event",
			LiteralName = "GAME_PAD_DISCONNECTED",
		},
		{
			Name = "GamePadPowerChanged",
			Type = "Event",
			LiteralName = "GAME_PAD_POWER_CHANGED",
			Payload =
			{
				{ Name = "powerLevel", Type = "GamePadPowerLevel", Nilable = false },
			},
		},
	},

	Tables =
	{
		{
			Name = "GamePadAxisConfig",
			Type = "Structure",
			Fields =
			{
				{ Name = "axis", Type = "string", Nilable = false },
				{ Name = "shift", Type = "number", Nilable = true },
				{ Name = "scale", Type = "number", Nilable = true },
				{ Name = "deadzone", Type = "number", Nilable = true },
				{ Name = "buttonThreshold", Type = "number", Nilable = true },
				{ Name = "buttonPos", Type = "string", Nilable = true },
				{ Name = "buttonNeg", Type = "string", Nilable = true },
				{ Name = "comment", Type = "string", Nilable = true },
			},
		},
		{
			Name = "GamePadConfig",
			Type = "Structure",
			Fields =
			{
				{ Name = "comment", Type = "string", Nilable = true },
				{ Name = "name", Type = "string", Nilable = true },
				{ Name = "configID", Type = "GamePadConfigID", Nilable = false },
				{ Name = "labelStyle", Type = "string", Nilable = true },
				{ Name = "rawButtonMappings", Type = "table", InnerType = "GamePadRawButtonMapping", Nilable = false },
				{ Name = "rawAxisMappings", Type = "table", InnerType = "GamePadRawAxisMapping", Nilable = false },
				{ Name = "axisConfigs", Type = "table", InnerType = "GamePadAxisConfig", Nilable = false },
				{ Name = "stickConfigs", Type = "table", InnerType = "GamePadStickConfig", Nilable = false },
			},
		},
		{
			Name = "GamePadConfigID",
			Type = "Structure",
			Fields =
			{
				{ Name = "vendorID", Type = "number", Nilable = true },
				{ Name = "productID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GamePadMappedState",
			Type = "Structure",
			Fields =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "labelStyle", Type = "string", Nilable = false },
				{ Name = "buttonCount", Type = "number", Nilable = false },
				{ Name = "axisCount", Type = "number", Nilable = false },
				{ Name = "stickCount", Type = "number", Nilable = false },
				{ Name = "buttons", Type = "table", InnerType = "bool", Nilable = false },
				{ Name = "axes", Type = "table", InnerType = "number", Nilable = false },
				{ Name = "sticks", Type = "table", InnerType = "GamePadStick", Nilable = false },
			},
		},
		{
			Name = "GamePadRawAxisMapping",
			Type = "Structure",
			Fields =
			{
				{ Name = "rawIndex", Type = "number", Nilable = false },
				{ Name = "axis", Type = "string", Nilable = true },
				{ Name = "comment", Type = "string", Nilable = true },
			},
		},
		{
			Name = "GamePadRawButtonMapping",
			Type = "Structure",
			Fields =
			{
				{ Name = "rawIndex", Type = "number", Nilable = false },
				{ Name = "button", Type = "string", Nilable = true },
				{ Name = "axis", Type = "string", Nilable = true },
				{ Name = "axisValue", Type = "number", Nilable = true },
				{ Name = "comment", Type = "string", Nilable = true },
			},
		},
		{
			Name = "GamePadRawState",
			Type = "Structure",
			Fields =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "vendorID", Type = "number", Nilable = false },
				{ Name = "productID", Type = "number", Nilable = false },
				{ Name = "rawButtonCount", Type = "number", Nilable = false },
				{ Name = "rawAxisCount", Type = "number", Nilable = false },
				{ Name = "rawButtons", Type = "table", InnerType = "bool", Nilable = false },
				{ Name = "rawAxes", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "GamePadStick",
			Type = "Structure",
			Fields =
			{
				{ Name = "x", Type = "number", Nilable = false },
				{ Name = "y", Type = "number", Nilable = false },
				{ Name = "len", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GamePadStickConfig",
			Type = "Structure",
			Fields =
			{
				{ Name = "stick", Type = "string", Nilable = false },
				{ Name = "axisX", Type = "string", Nilable = true },
				{ Name = "axisY", Type = "string", Nilable = true },
				{ Name = "deadzone", Type = "number", Nilable = true },
				{ Name = "deadzoneX", Type = "number", Nilable = true },
				{ Name = "deadzoneY", Type = "number", Nilable = true },
				{ Name = "comment", Type = "string", Nilable = true },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "GlyphInfo",
	Type = "System",
	Namespace = "C_GlyphInfo",

	Functions =
	{
	},

	Events =
	{
		{
			Name = "ActivateGlyph",
			Type = "Event",
			LiteralName = "ACTIVATE_GLYPH",
			Payload =
			{
				{ Name = "spellID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "CancelGlyphCast",
			Type = "Event",
			LiteralName = "CANCEL_GLYPH_CAST",
		},
		{
			Name = "UseGlyph",
			Type = "Event",
			LiteralName = "USE_GLYPH",
			Payload =
			{
				{ Name = "spellID", Type = "number", Nilable = false },
			},
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "GossipInfo",
	Type = "System",
	Namespace = "C_GossipInfo",

	Functions =
	{
		{
			Name = "CloseGossip",
			Type = "Function",
		},
		{
			Name = "ForceGossip",
			Type = "Function",

			Returns =
			{
				{ Name = "forceGossip", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetActiveQuests",
			Type = "Function",

			Returns =
			{
				{ Name = "info", Type = "table", InnerType = "GossipQuestUIInfo", Nilable = false },
			},
		},
		{
			Name = "GetAvailableQuests",
			Type = "Function",

			Returns =
			{
				{ Name = "info", Type = "table", InnerType = "GossipQuestUIInfo", Nilable = false },
			},
		},
		{
			Name = "GetCompletedOptionDescriptionString",
			Type = "Function",

			Returns =
			{
				{ Name = "description", Type = "string", Nilable = true },
			},
		},
		{
			Name = "GetCustomGossipDescriptionString",
			Type = "Function",

			Returns =
			{
				{ Name = "description", Type = "string", Nilable = true },
			},
		},
		{
			Name = "GetNumActiveQuests",
			Type = "Function",

			Returns =
			{
				{ Name = "numQuests", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetNumAvailableQuests",
			Type = "Function",

			Returns =
			{
				{ Name = "numQuests", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetNumOptions",
			Type = "Function",

			Returns =
			{
				{ Name = "numOptions", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetOptions",
			Type = "Function",

			Returns =
			{
				{ Name = "info", Type = "table", InnerType = "GossipOptionUIInfo", Nilable = false },
			},
		},
		{
			Name = "GetPoiForUiMapID",
			Type = "Function",

			Arguments =
			{
				{ Name = "uiMapID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "gossipPoiID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetPoiInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "uiMapID", Type = "number", Nilable = false },
				{ Name = "gossipPoiID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "gossipPoiInfo", Type = "GossipPoiInfo", Nilable = true },
			},
		},
		{
			Name = "GetText",
			Type = "Function",

			Returns =
			{
				{ Name = "gossipText", Type = "string", Nilable = false },
			},
		},
		{
			Name = "RefreshOptions",
			Type = "Function",
		},
		{
			Name = "SelectActiveQuest",
			Type = "Function",

			Arguments =
			{
				{ Name = "index", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SelectAvailableQuest",
			Type = "Function",

			Arguments =
			{
				{ Name = "index", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SelectOption",
			Type = "Function",

			Arguments =
			{
				{ Name = "index", Type = "number", Nilable = false },
				{ Name = "text", Type = "string", Nilable = true },
				{ Name = "confirmed", Type = "bool", Nilable = true },
			},
		},
	},

	Events =
	{
		{
			Name = "DynamicGossipPoiUpdated",
			Type = "Event",
			LiteralName = "DYNAMIC_GOSSIP_POI_UPDATED",
		},
		{
			Name = "GossipClosed",
			Type = "Event",
			LiteralName = "GOSSIP_CLOSED",
		},
		{
			Name = "GossipConfirm",
			Type = "Event",
			LiteralName = "GOSSIP_CONFIRM",
			Payload =
			{
				{ Name = "gossipIndex", Type = "number", Nilable = false },
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "cost", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GossipConfirmCancel",
			Type = "Event",
			LiteralName = "GOSSIP_CONFIRM_CANCEL",
		},
		{
			Name = "GossipEnterCode",
			Type = "Event",
			LiteralName = "GOSSIP_ENTER_CODE",
			Payload =
			{
				{ Name = "gossipIndex", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GossipOptionsRefreshed",
			Type = "Event",
			LiteralName = "GOSSIP_OPTIONS_REFRESHED",
		},
		{
			Name = "GossipShow",
			Type = "Event",
			LiteralName = "GOSSIP_SHOW",
			Payload =
			{
				{ Name = "uiTextureKit", Type = "string", Nilable = true },
			},
		},
	},

	Tables =
	{
		{
			Name = "GossipOptionRewardType",
			Type = "Enumeration",
			NumValues = 2,
			MinValue = 0,
			MaxValue = 1,
			Fields =
			{
				{ Name = "Item", Type = "GossipOptionRewardType", EnumValue = 0 },
				{ Name = "Currency", Type = "GossipOptionRewardType", EnumValue = 1 },
			},
		},
		{
			Name = "GossipOptionStatus",
			Type = "Enumeration",
			NumValues = 4,
			MinValue = 0,
			MaxValue = 3,
			Fields =
			{
				{ Name = "Available", Type = "GossipOptionStatus", EnumValue = 0 },
				{ Name = "Unavailable", Type = "GossipOptionStatus", EnumValue = 1 },
				{ Name = "Locked", Type = "GossipOptionStatus", EnumValue = 2 },
				{ Name = "AlreadyComplete", Type = "GossipOptionStatus", EnumValue = 3 },
			},
		},
		{
			Name = "GossipOptionRewardInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "id", Type = "number", Nilable = false },
				{ Name = "quantity", Type = "number", Nilable = false },
				{ Name = "rewardType", Type = "GossipOptionRewardType", Nilable = false },
			},
		},
		{
			Name = "GossipOptionUIInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "type", Type = "string", Nilable = false },
				{ Name = "rewards", Type = "table", InnerType = "GossipOptionRewardInfo", Nilable = false },
				{ Name = "status", Type = "GossipOptionStatus", Nilable = false },
				{ Name = "spellID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GossipPoiInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "textureIndex", Type = "number", Nilable = false },
				{ Name = "position", Type = "table", Mixin = "Vector2DMixin", Nilable = false },
				{ Name = "inBattleMap", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GossipQuestUIInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "title", Type = "string", Nilable = false },
				{ Name = "questLevel", Type = "number", Nilable = false },
				{ Name = "isTrivial", Type = "bool", Nilable = false },
				{ Name = "frequency", Type = "number", Nilable = true },
				{ Name = "repeatable", Type = "bool", Nilable = true },
				{ Name = "isComplete", Type = "bool", Nilable = true },
				{ Name = "isLegendary", Type = "bool", Nilable = false },
				{ Name = "isIgnored", Type = "bool", Nilable = false },
				{ Name = "questID", Type = "number", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "GuildBank",
	Type = "System",
	Namespace = "C_GuildBank",

	Functions =
	{
	},

	Events =
	{
		{
			Name = "GuildbankItemLockChanged",
			Type = "Event",
			LiteralName = "GUILDBANK_ITEM_LOCK_CHANGED",
		},
		{
			Name = "GuildbankTextChanged",
			Type = "Event",
			LiteralName = "GUILDBANK_TEXT_CHANGED",
			Payload =
			{
				{ Name = "guildBankTab", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GuildbankUpdateMoney",
			Type = "Event",
			LiteralName = "GUILDBANK_UPDATE_MONEY",
		},
		{
			Name = "GuildbankUpdateTabs",
			Type = "Event",
			LiteralName = "GUILDBANK_UPDATE_TABS",
		},
		{
			Name = "GuildbankUpdateText",
			Type = "Event",
			LiteralName = "GUILDBANK_UPDATE_TEXT",
			Payload =
			{
				{ Name = "guildBankTab", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GuildbankUpdateWithdrawmoney",
			Type = "Event",
			LiteralName = "GUILDBANK_UPDATE_WITHDRAWMONEY",
		},
		{
			Name = "GuildbankbagslotsChanged",
			Type = "Event",
			LiteralName = "GUILDBANKBAGSLOTS_CHANGED",
		},
		{
			Name = "GuildbankframeClosed",
			Type = "Event",
			LiteralName = "GUILDBANKFRAME_CLOSED",
		},
		{
			Name = "GuildbankframeOpened",
			Type = "Event",
			LiteralName = "GUILDBANKFRAME_OPENED",
		},
		{
			Name = "GuildbanklogUpdate",
			Type = "Event",
			LiteralName = "GUILDBANKLOG_UPDATE",
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "GuildInfo",
	Type = "System",
	Namespace = "C_GuildInfo",

	Functions =
	{
		{
			Name = "CanEditOfficerNote",
			Type = "Function",

			Returns =
			{
				{ Name = "canEditOfficerNote", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "CanSpeakInGuildChat",
			Type = "Function",

			Returns =
			{
				{ Name = "canSpeakInGuildChat", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "CanViewOfficerNote",
			Type = "Function",

			Returns =
			{
				{ Name = "canViewOfficerNote", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetGuildNewsInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "index", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "newsInfo", Type = "GuildNewsInfo", Nilable = false },
			},
		},
		{
			Name = "GetGuildRankOrder",
			Type = "Function",

			Arguments =
			{
				{ Name = "guid", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "rankOrder", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetGuildTabardInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "unit", Type = "string", Nilable = true },
			},

			Returns =
			{
				{ Name = "tabardInfo", Type = "GuildTabardInfo", Nilable = true },
			},
		},
		{
			Name = "GuildControlGetRankFlags",
			Type = "Function",

			Arguments =
			{
				{ Name = "rankOrder", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "permissions", Type = "table", InnerType = "bool", Nilable = false },
			},
		},
		{
			Name = "GuildRoster",
			Type = "Function",
		},
		{
			Name = "IsGuildOfficer",
			Type = "Function",

			Returns =
			{
				{ Name = "isOfficer", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsGuildRankAssignmentAllowed",
			Type = "Function",

			Arguments =
			{
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "rankOrder", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isGuildRankAssignmentAllowed", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "QueryGuildMemberRecipes",
			Type = "Function",

			Arguments =
			{
				{ Name = "guildMemberGUID", Type = "string", Nilable = false },
				{ Name = "skillLineID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "QueryGuildMembersForRecipe",
			Type = "Function",

			Arguments =
			{
				{ Name = "skillLineID", Type = "number", Nilable = false },
				{ Name = "recipeSpellID", Type = "number", Nilable = false },
				{ Name = "recipeLevel", Type = "number", Nilable = true },
			},

			Returns =
			{
				{ Name = "updatedRecipeSpellID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "RemoveFromGuild",
			Type = "Function",

			Arguments =
			{
				{ Name = "guid", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetGuildRankOrder",
			Type = "Function",

			Arguments =
			{
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "rankOrder", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetNote",
			Type = "Function",

			Arguments =
			{
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "note", Type = "string", Nilable = false },
				{ Name = "isPublic", Type = "bool", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "CloseTabardFrame",
			Type = "Event",
			LiteralName = "CLOSE_TABARD_FRAME",
		},
		{
			Name = "DisableDeclineGuildInvite",
			Type = "Event",
			LiteralName = "DISABLE_DECLINE_GUILD_INVITE",
		},
		{
			Name = "EnableDeclineGuildInvite",
			Type = "Event",
			LiteralName = "ENABLE_DECLINE_GUILD_INVITE",
		},
		{
			Name = "GuildChallengeCompleted",
			Type = "Event",
			LiteralName = "GUILD_CHALLENGE_COMPLETED",
			Payload =
			{
				{ Name = "challengeType", Type = "number", Nilable = false },
				{ Name = "currentCount", Type = "number", Nilable = false },
				{ Name = "maxCount", Type = "number", Nilable = false },
				{ Name = "goldAwarded", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GuildChallengeUpdated",
			Type = "Event",
			LiteralName = "GUILD_CHALLENGE_UPDATED",
		},
		{
			Name = "GuildEventLogUpdate",
			Type = "Event",
			LiteralName = "GUILD_EVENT_LOG_UPDATE",
		},
		{
			Name = "GuildInviteCancel",
			Type = "Event",
			LiteralName = "GUILD_INVITE_CANCEL",
		},
		{
			Name = "GuildInviteRequest",
			Type = "Event",
			LiteralName = "GUILD_INVITE_REQUEST",
			Payload =
			{
				{ Name = "inviter", Type = "string", Nilable = false },
				{ Name = "guildName", Type = "string", Nilable = false },
				{ Name = "guildAchievementPoints", Type = "number", Nilable = false },
				{ Name = "oldGuildName", Type = "string", Nilable = false },
				{ Name = "isNewGuild", Type = "bool", Nilable = true },
				{ Name = "tabardInfo", Type = "GuildTabardInfo", Nilable = true },
			},
		},
		{
			Name = "GuildMotd",
			Type = "Event",
			LiteralName = "GUILD_MOTD",
			Payload =
			{
				{ Name = "motdText", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GuildNewsUpdate",
			Type = "Event",
			LiteralName = "GUILD_NEWS_UPDATE",
		},
		{
			Name = "GuildPartyStateUpdated",
			Type = "Event",
			LiteralName = "GUILD_PARTY_STATE_UPDATED",
			Payload =
			{
				{ Name = "inGuildParty", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GuildRanksUpdate",
			Type = "Event",
			LiteralName = "GUILD_RANKS_UPDATE",
		},
		{
			Name = "GuildRecipeKnownByMembers",
			Type = "Event",
			LiteralName = "GUILD_RECIPE_KNOWN_BY_MEMBERS",
		},
		{
			Name = "GuildRegistrarClosed",
			Type = "Event",
			LiteralName = "GUILD_REGISTRAR_CLOSED",
		},
		{
			Name = "GuildRegistrarShow",
			Type = "Event",
			LiteralName = "GUILD_REGISTRAR_SHOW",
		},
		{
			Name = "GuildRenameRequired",
			Type = "Event",
			LiteralName = "GUILD_RENAME_REQUIRED",
			Payload =
			{
				{ Name = "flagSet", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GuildRewardsList",
			Type = "Event",
			LiteralName = "GUILD_REWARDS_LIST",
		},
		{
			Name = "GuildRosterUpdate",
			Type = "Event",
			LiteralName = "GUILD_ROSTER_UPDATE",
			Payload =
			{
				{ Name = "canRequestRosterUpdate", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GuildTradeskillUpdate",
			Type = "Event",
			LiteralName = "GUILD_TRADESKILL_UPDATE",
		},
		{
			Name = "GuildtabardUpdate",
			Type = "Event",
			LiteralName = "GUILDTABARD_UPDATE",
		},
		{
			Name = "OpenTabardFrame",
			Type = "Event",
			LiteralName = "OPEN_TABARD_FRAME",
		},
		{
			Name = "PlayerGuildUpdate",
			Type = "Event",
			LiteralName = "PLAYER_GUILD_UPDATE",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "RequiredGuildRenameResult",
			Type = "Event",
			LiteralName = "REQUIRED_GUILD_RENAME_RESULT",
			Payload =
			{
				{ Name = "success", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "TabardCansaveChanged",
			Type = "Event",
			LiteralName = "TABARD_CANSAVE_CHANGED",
		},
		{
			Name = "TabardSavePending",
			Type = "Event",
			LiteralName = "TABARD_SAVE_PENDING",
		},
	},

	Tables =
	{
		{
			Name = "GuildNewsInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "isSticky", Type = "bool", Nilable = false },
				{ Name = "isHeader", Type = "bool", Nilable = false },
				{ Name = "newsType", Type = "number", Nilable = false },
				{ Name = "whoText", Type = "string", Nilable = true },
				{ Name = "whatText", Type = "string", Nilable = true },
				{ Name = "newsDataID", Type = "number", Nilable = false },
				{ Name = "data", Type = "table", InnerType = "number", Nilable = false },
				{ Name = "weekday", Type = "number", Nilable = false },
				{ Name = "day", Type = "number", Nilable = false },
				{ Name = "month", Type = "number", Nilable = false },
				{ Name = "year", Type = "number", Nilable = false },
				{ Name = "guildMembersPresent", Type = "number", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "HeirloomInfo",
	Type = "System",
	Namespace = "C_HeirloomInfo",

	Functions =
	{
		{
			Name = "AreAllCollectionFiltersChecked",
			Type = "Function",

			Returns =
			{
				{ Name = "areAllCollectionFiltersChecked", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "AreAllSourceFiltersChecked",
			Type = "Function",

			Returns =
			{
				{ Name = "areAllSourceFiltersChecked", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsHeirloomSourceValid",
			Type = "Function",

			Arguments =
			{
				{ Name = "source", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isHeirloomSourceValid", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsUsingDefaultFilters",
			Type = "Function",

			Returns =
			{
				{ Name = "isUsingDefaultFilters", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetAllCollectionFilters",
			Type = "Function",

			Arguments =
			{
				{ Name = "checked", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetAllSourceFilters",
			Type = "Function",

			Arguments =
			{
				{ Name = "checked", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetDefaultFilters",
			Type = "Function",
		},
	},

	Events =
	{
		{
			Name = "HeirloomUpgradeTargetingChanged",
			Type = "Event",
			LiteralName = "HEIRLOOM_UPGRADE_TARGETING_CHANGED",
			Payload =
			{
				{ Name = "pendingHeirloomUpgradeSpellcast", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "HeirloomsUpdated",
			Type = "Event",
			LiteralName = "HEIRLOOMS_UPDATED",
			Payload =
			{
				{ Name = "itemID", Type = "number", Nilable = true },
				{ Name = "updateReason", Type = "string", Nilable = true },
				{ Name = "hideUntilLearned", Type = "bool", Nilable = true },
			},
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "InstanceEncounter",
	Type = "System",
	Namespace = "C_InstanceEncounter",

	Functions =
	{
	},

	Events =
	{
		{
			Name = "InstanceEncounterAddTimer",
			Type = "Event",
			LiteralName = "INSTANCE_ENCOUNTER_ADD_TIMER",
			Payload =
			{
				{ Name = "timeRemaining", Type = "number", Nilable = false },
			},
		},
		{
			Name = "InstanceEncounterEngageUnit",
			Type = "Event",
			LiteralName = "INSTANCE_ENCOUNTER_ENGAGE_UNIT",
		},
		{
			Name = "InstanceEncounterObjectiveComplete",
			Type = "Event",
			LiteralName = "INSTANCE_ENCOUNTER_OBJECTIVE_COMPLETE",
			Payload =
			{
				{ Name = "objectiveID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "InstanceEncounterObjectiveStart",
			Type = "Event",
			LiteralName = "INSTANCE_ENCOUNTER_OBJECTIVE_START",
			Payload =
			{
				{ Name = "objectiveID", Type = "number", Nilable = false },
				{ Name = "objectiveProgress", Type = "number", Nilable = false },
			},
		},
		{
			Name = "InstanceEncounterObjectiveUpdate",
			Type = "Event",
			LiteralName = "INSTANCE_ENCOUNTER_OBJECTIVE_UPDATE",
			Payload =
			{
				{ Name = "objectiveID", Type = "number", Nilable = false },
				{ Name = "objectiveProgress", Type = "number", Nilable = false },
			},
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "Item",
	Type = "System",
	Namespace = "C_Item",

	Functions =
	{
		{
			Name = "CanItemTransmogAppearance",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemLoc", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "canTransmog", Type = "bool", Nilable = false },
				{ Name = "errorCode", Type = "number", Nilable = false },
			},
		},
		{
			Name = "CanScrapItem",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemLoc", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "canBeScrapped", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "CanViewItemPowers",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemLoc", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "isItemViewable", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "DoesItemExist",
			Type = "Function",

			Arguments =
			{
				{ Name = "emptiableItemLocation", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "itemExists", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "DoesItemExistByID",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemInfo", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "itemExists", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "DoesItemMatchBonusTreeReplacement",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemLoc", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "matchesBonusTree", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetAppliedItemTransmogInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemLoc", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "info", Type = "table", Mixin = "ItemTransmogInfoMixin", Nilable = true },
			},
		},
		{
			Name = "GetBaseItemTransmogInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemLoc", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "info", Type = "table", Mixin = "ItemTransmogInfoMixin", Nilable = true },
			},
		},
		{
			Name = "GetCurrentItemLevel",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemLocation", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "currentItemLevel", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetCurrentItemTransmogInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemLoc", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "info", Type = "table", Mixin = "ItemTransmogInfoMixin", Nilable = true },
			},
		},
		{
			Name = "GetItemConversionOutputIcon",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemLoc", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "icon", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetItemGUID",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemLocation", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "itemGuid", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetItemID",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemLocation", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "itemID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetItemIcon",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemLocation", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "icon", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetItemIconByID",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemInfo", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "icon", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetItemInventoryType",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemLocation", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "inventoryType", Type = "InventoryType", Nilable = true },
			},
		},
		{
			Name = "GetItemInventoryTypeByID",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemInfo", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "inventoryType", Type = "InventoryType", Nilable = true },
			},
		},
		{
			Name = "GetItemLink",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemLocation", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "itemLink", Type = "string", Nilable = true },
			},
		},
		{
			Name = "GetItemMaxStackSize",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemLocation", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "stackSize", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetItemMaxStackSizeByID",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemInfo", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "stackSize", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetItemName",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemLocation", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "itemName", Type = "string", Nilable = true },
			},
		},
		{
			Name = "GetItemNameByID",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemInfo", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "itemName", Type = "string", Nilable = true },
			},
		},
		{
			Name = "GetItemQuality",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemLocation", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "itemQuality", Type = "ItemQuality", Nilable = true },
			},
		},
		{
			Name = "GetItemQualityByID",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemInfo", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "itemQuality", Type = "ItemQuality", Nilable = true },
			},
		},
		{
			Name = "GetItemUniquenessByID",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemInfo", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "isUnique", Type = "bool", Nilable = false },
				{ Name = "limitCategoryName", Type = "string", Nilable = true },
				{ Name = "limitCategoryCount", Type = "number", Nilable = true },
				{ Name = "limitCategoryID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetLimitedCurrencyItemInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemInfo", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "icon", Type = "number", Nilable = false },
				{ Name = "quantity", Type = "number", Nilable = false },
				{ Name = "maxQuantity", Type = "number", Nilable = false },
				{ Name = "totalEarned", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetStackCount",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemLocation", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "stackCount", Type = "number", Nilable = false },
			},
		},
		{
			Name = "IsAnimaItemByID",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemInfo", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "isAnimaItem", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsBound",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemLocation", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "isBound", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsDressableItemByID",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemInfo", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "isDressableItem", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsItemConduit",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemLoc", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "isConduit", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsItemConvertibleAndValidForPlayer",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemLoc", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "isItemConvertibleAndValidForPlayer", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsItemCorrupted",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemLoc", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "isCorrupted", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsItemCorruptionRelated",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemLoc", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "isCorruptionRelated", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsItemCorruptionResistant",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemLoc", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "isCorruptionResistant", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsItemDataCached",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemLocation", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "isCached", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsItemDataCachedByID",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemInfo", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "isCached", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsItemKeystoneByID",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemInfo", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "isKeystone", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsItemSpecificToPlayerClass",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemInfo", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "isItemSpecificToPlayerClass", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsLocked",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemLocation", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "isLocked", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "LockItem",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemLocation", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},
		},
		{
			Name = "LockItemByGUID",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemGUID", Type = "string", Nilable = false },
			},
		},
		{
			Name = "RequestLoadItemData",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemLocation", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},
		},
		{
			Name = "RequestLoadItemDataByID",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemInfo", Type = "string", Nilable = false },
			},
		},
		{
			Name = "UnlockItem",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemLocation", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},
		},
		{
			Name = "UnlockItemByGUID",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemGUID", Type = "string", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "ActionWillBindItem",
			Type = "Event",
			LiteralName = "ACTION_WILL_BIND_ITEM",
		},
		{
			Name = "BindEnchant",
			Type = "Event",
			LiteralName = "BIND_ENCHANT",
		},
		{
			Name = "CharacterItemFixupNotification",
			Type = "Event",
			LiteralName = "CHARACTER_ITEM_FIXUP_NOTIFICATION",
			Payload =
			{
				{ Name = "fixupVersion", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ConfirmBeforeUse",
			Type = "Event",
			LiteralName = "CONFIRM_BEFORE_USE",
		},
		{
			Name = "DeleteItemConfirm",
			Type = "Event",
			LiteralName = "DELETE_ITEM_CONFIRM",
			Payload =
			{
				{ Name = "itemName", Type = "string", Nilable = false },
				{ Name = "qualityID", Type = "number", Nilable = false },
				{ Name = "bonding", Type = "number", Nilable = false },
				{ Name = "questWarn", Type = "number", Nilable = false },
			},
		},
		{
			Name = "EndBoundTradeable",
			Type = "Event",
			LiteralName = "END_BOUND_TRADEABLE",
			Payload =
			{
				{ Name = "reason", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetItemInfoReceived",
			Type = "Event",
			LiteralName = "GET_ITEM_INFO_RECEIVED",
			Payload =
			{
				{ Name = "itemID", Type = "number", Nilable = false },
				{ Name = "success", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ItemChanged",
			Type = "Event",
			LiteralName = "ITEM_CHANGED",
			Payload =
			{
				{ Name = "previousHyperlink", Type = "string", Nilable = false },
				{ Name = "newHyperlink", Type = "string", Nilable = false },
			},
		},
		{
			Name = "ItemConversionDataReady",
			Type = "Event",
			LiteralName = "ITEM_CONVERSION_DATA_READY",
			Payload =
			{
				{ Name = "itemGUID", Type = "string", Nilable = false },
			},
		},
		{
			Name = "ItemCountChanged",
			Type = "Event",
			LiteralName = "ITEM_COUNT_CHANGED",
			Payload =
			{
				{ Name = "itemID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ItemDataLoadResult",
			Type = "Event",
			LiteralName = "ITEM_DATA_LOAD_RESULT",
			Payload =
			{
				{ Name = "itemID", Type = "number", Nilable = false },
				{ Name = "success", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "MerchantConfirmTradeTimerRemoval",
			Type = "Event",
			LiteralName = "MERCHANT_CONFIRM_TRADE_TIMER_REMOVAL",
			Payload =
			{
				{ Name = "itemLink", Type = "string", Nilable = false },
			},
		},
		{
			Name = "ReplaceEnchant",
			Type = "Event",
			LiteralName = "REPLACE_ENCHANT",
			Payload =
			{
				{ Name = "existingStr", Type = "string", Nilable = false },
				{ Name = "replacementStr", Type = "string", Nilable = false },
			},
		},
		{
			Name = "TradeReplaceEnchant",
			Type = "Event",
			LiteralName = "TRADE_REPLACE_ENCHANT",
			Payload =
			{
				{ Name = "existing", Type = "string", Nilable = false },
				{ Name = "replacement", Type = "string", Nilable = false },
			},
		},
		{
			Name = "UseBindConfirm",
			Type = "Event",
			LiteralName = "USE_BIND_CONFIRM",
		},
		{
			Name = "UseNoRefundConfirm",
			Type = "Event",
			LiteralName = "USE_NO_REFUND_CONFIRM",
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "ItemSocketInfo",
	Type = "System",
	Namespace = "C_ItemSocketInfo",

	Functions =
	{
		{
			Name = "CompleteSocketing",
			Type = "Function",
		},
	},

	Events =
	{
		{
			Name = "SocketInfoAccept",
			Type = "Event",
			LiteralName = "SOCKET_INFO_ACCEPT",
		},
		{
			Name = "SocketInfoBindConfirm",
			Type = "Event",
			LiteralName = "SOCKET_INFO_BIND_CONFIRM",
		},
		{
			Name = "SocketInfoClose",
			Type = "Event",
			LiteralName = "SOCKET_INFO_CLOSE",
		},
		{
			Name = "SocketInfoFailure",
			Type = "Event",
			LiteralName = "SOCKET_INFO_FAILURE",
		},
		{
			Name = "SocketInfoRefundableConfirm",
			Type = "Event",
			LiteralName = "SOCKET_INFO_REFUNDABLE_CONFIRM",
		},
		{
			Name = "SocketInfoSuccess",
			Type = "Event",
			LiteralName = "SOCKET_INFO_SUCCESS",
		},
		{
			Name = "SocketInfoUpdate",
			Type = "Event",
			LiteralName = "SOCKET_INFO_UPDATE",
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "ItemText",
	Type = "System",
	Namespace = "C_ItemText",

	Functions =
	{
	},

	Events =
	{
		{
			Name = "ItemTextBegin",
			Type = "Event",
			LiteralName = "ITEM_TEXT_BEGIN",
		},
		{
			Name = "ItemTextClosed",
			Type = "Event",
			LiteralName = "ITEM_TEXT_CLOSED",
		},
		{
			Name = "ItemTextReady",
			Type = "Event",
			LiteralName = "ITEM_TEXT_READY",
		},
		{
			Name = "ItemTextTranslation",
			Type = "Event",
			LiteralName = "ITEM_TEXT_TRANSLATION",
			Payload =
			{
				{ Name = "delay", Type = "number", Nilable = false },
			},
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "ItemUpgrade",
	Type = "System",
	Namespace = "C_ItemUpgrade",

	Functions =
	{
		{
			Name = "CanUpgradeItem",
			Type = "Function",

			Arguments =
			{
				{ Name = "baseItem", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "isValid", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ClearItemUpgrade",
			Type = "Function",
		},
		{
			Name = "CloseItemUpgrade",
			Type = "Function",
		},
		{
			Name = "GetItemHyperlink",
			Type = "Function",

			Returns =
			{
				{ Name = "link", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetItemUpgradeCurrentLevel",
			Type = "Function",

			Returns =
			{
				{ Name = "itemLevel", Type = "number", Nilable = false },
				{ Name = "isPvpItemLevel", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetItemUpgradeEffect",
			Type = "Function",

			Arguments =
			{
				{ Name = "effectIndex", Type = "number", Nilable = false },
				{ Name = "numUpgradeLevels", Type = "number", Nilable = true },
			},

			Returns =
			{
				{ Name = "outBaseEffect", Type = "string", Nilable = false },
				{ Name = "outUpgradedEffect", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetItemUpgradeItemInfo",
			Type = "Function",

			Returns =
			{
				{ Name = "itemInfo", Type = "ItemUpgradeItemInfo", Nilable = false },
			},
		},
		{
			Name = "GetItemUpgradePvpItemLevelDeltaValues",
			Type = "Function",

			Arguments =
			{
				{ Name = "numUpgradeLevels", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "currentPvPItemLevel", Type = "number", Nilable = false },
				{ Name = "upgradedPvPItemLevel", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetNumItemUpgradeEffects",
			Type = "Function",

			Returns =
			{
				{ Name = "numItemUpgradeEffects", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetItemUpgradeFromCursorItem",
			Type = "Function",
		},
		{
			Name = "SetItemUpgradeFromLocation",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemToSet", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},
		},
		{
			Name = "UpgradeItem",
			Type = "Function",

			Arguments =
			{
				{ Name = "numUpgrades", Type = "number", Nilable = false, Default = 1 },
			},
		},
	},

	Events =
	{
		{
			Name = "ItemUpgradeFailed",
			Type = "Event",
			LiteralName = "ITEM_UPGRADE_FAILED",
		},
		{
			Name = "ItemUpgradeMasterClosed",
			Type = "Event",
			LiteralName = "ITEM_UPGRADE_MASTER_CLOSED",
		},
		{
			Name = "ItemUpgradeMasterOpened",
			Type = "Event",
			LiteralName = "ITEM_UPGRADE_MASTER_OPENED",
		},
		{
			Name = "ItemUpgradeMasterSetItem",
			Type = "Event",
			LiteralName = "ITEM_UPGRADE_MASTER_SET_ITEM",
		},
	},

	Tables =
	{
		{
			Name = "ItemUpgradeCurrencyCost",
			Type = "Structure",
			Fields =
			{
				{ Name = "cost", Type = "number", Nilable = false },
				{ Name = "currencyID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ItemUpgradeItemInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "iconID", Type = "number", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "itemUpgradeable", Type = "bool", Nilable = false },
				{ Name = "displayQuality", Type = "number", Nilable = false },
				{ Name = "currUpgrade", Type = "number", Nilable = false },
				{ Name = "maxUpgrade", Type = "number", Nilable = false },
				{ Name = "upgradeLevelInfos", Type = "table", InnerType = "ItemUpgradeLevelInfo", Nilable = false },
			},
		},
		{
			Name = "ItemUpgradeLevelInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "upgradeLevel", Type = "number", Nilable = false },
				{ Name = "displayQuality", Type = "number", Nilable = false },
				{ Name = "itemLevelIncrement", Type = "number", Nilable = false },
				{ Name = "levelStats", Type = "table", InnerType = "ItemUpgradeStat", Nilable = false },
				{ Name = "costsToUpgrade", Type = "table", InnerType = "ItemUpgradeCurrencyCost", Nilable = false },
				{ Name = "failureMessage", Type = "string", Nilable = true },
			},
		},
		{
			Name = "ItemUpgradeStat",
			Type = "Structure",
			Fields =
			{
				{ Name = "displayString", Type = "string", Nilable = false },
				{ Name = "statValue", Type = "number", Nilable = false },
				{ Name = "active", Type = "bool", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "KeyBindings",
	Type = "System",
	Namespace = "C_KeyBindings",

	Functions =
	{
		{
			Name = "GetCustomBindingType",
			Type = "Function",

			Arguments =
			{
				{ Name = "bindingIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "customBindingType", Type = "CustomBindingType", Nilable = true },
			},
		},
	},

	Events =
	{
		{
			Name = "ModifierStateChanged",
			Type = "Event",
			LiteralName = "MODIFIER_STATE_CHANGED",
			Payload =
			{
				{ Name = "key", Type = "string", Nilable = false },
				{ Name = "down", Type = "number", Nilable = false },
			},
		},
		{
			Name = "UpdateBindings",
			Type = "Event",
			LiteralName = "UPDATE_BINDINGS",
		},
	},

	Tables =
	{
		{
			Name = "BindingSet",
			Type = "Enumeration",
			NumValues = 4,
			MinValue = 0,
			MaxValue = 3,
			Fields =
			{
				{ Name = "Default", Type = "BindingSet", EnumValue = 0 },
				{ Name = "Account", Type = "BindingSet", EnumValue = 1 },
				{ Name = "Character", Type = "BindingSet", EnumValue = 2 },
				{ Name = "Current", Type = "BindingSet", EnumValue = 3 },
			},
		},
		{
			Name = "CustomBindingType",
			Type = "Enumeration",
			NumValues = 1,
			MinValue = 0,
			MaxValue = 0,
			Fields =
			{
				{ Name = "VoicePushToTalk", Type = "CustomBindingType", EnumValue = 0 },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "KnowledgeBase",
	Type = "System",
	Namespace = "C_KnowledgeBase",

	Functions =
	{
	},

	Events =
	{
		{
			Name = "KnowledgeBaseArticleLoadFailure",
			Type = "Event",
			LiteralName = "KNOWLEDGE_BASE_ARTICLE_LOAD_FAILURE",
		},
		{
			Name = "KnowledgeBaseArticleLoadSuccess",
			Type = "Event",
			LiteralName = "KNOWLEDGE_BASE_ARTICLE_LOAD_SUCCESS",
		},
		{
			Name = "KnowledgeBaseQueryLoadFailure",
			Type = "Event",
			LiteralName = "KNOWLEDGE_BASE_QUERY_LOAD_FAILURE",
		},
		{
			Name = "KnowledgeBaseQueryLoadSuccess",
			Type = "Event",
			LiteralName = "KNOWLEDGE_BASE_QUERY_LOAD_SUCCESS",
		},
		{
			Name = "KnowledgeBaseServerMessage",
			Type = "Event",
			LiteralName = "KNOWLEDGE_BASE_SERVER_MESSAGE",
		},
		{
			Name = "KnowledgeBaseSetupLoadFailure",
			Type = "Event",
			LiteralName = "KNOWLEDGE_BASE_SETUP_LOAD_FAILURE",
		},
		{
			Name = "KnowledgeBaseSetupLoadSuccess",
			Type = "Event",
			LiteralName = "KNOWLEDGE_BASE_SETUP_LOAD_SUCCESS",
		},
		{
			Name = "KnowledgeBaseSystemMotdUpdated",
			Type = "Event",
			LiteralName = "KNOWLEDGE_BASE_SYSTEM_MOTD_UPDATED",
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "LFGInfo",
	Type = "System",
	Namespace = "C_LFGInfo",

	Functions =
	{
		{
			Name = "CanPlayerUseGroupFinder",
			Type = "Function",

			Returns =
			{
				{ Name = "canUse", Type = "bool", Nilable = false },
				{ Name = "failureReason", Type = "string", Nilable = false },
			},
		},
		{
			Name = "CanPlayerUseLFD",
			Type = "Function",

			Returns =
			{
				{ Name = "canUse", Type = "bool", Nilable = false },
				{ Name = "failureReason", Type = "string", Nilable = false },
			},
		},
		{
			Name = "CanPlayerUseLFR",
			Type = "Function",

			Returns =
			{
				{ Name = "canUse", Type = "bool", Nilable = false },
				{ Name = "failureReason", Type = "string", Nilable = false },
			},
		},
		{
			Name = "CanPlayerUsePVP",
			Type = "Function",

			Returns =
			{
				{ Name = "canUse", Type = "bool", Nilable = false },
				{ Name = "failureReason", Type = "string", Nilable = false },
			},
		},
		{
			Name = "CanPlayerUsePremadeGroup",
			Type = "Function",

			Returns =
			{
				{ Name = "canUse", Type = "bool", Nilable = false },
				{ Name = "failureReason", Type = "string", Nilable = false },
			},
		},
		{
			Name = "ConfirmLfgExpandSearch",
			Type = "Function",
		},
		{
			Name = "GetAllEntriesForCategory",
			Type = "Function",

			Arguments =
			{
				{ Name = "category", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "lfgDungeonIDs", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "GetDungeonInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "lfgDungeonID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "dungeonInfo", Type = "LFGDungeonInfo", Nilable = false },
			},
		},
		{
			Name = "GetLFDLockStates",
			Type = "Function",

			Returns =
			{
				{ Name = "lockInfo", Type = "table", InnerType = "LFGLockInfo", Nilable = false },
			},
		},
		{
			Name = "GetRoleCheckDifficultyDetails",
			Type = "Function",

			Returns =
			{
				{ Name = "maxLevel", Type = "number", Nilable = true },
				{ Name = "isLevelReduced", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "HideNameFromUI",
			Type = "Function",

			Arguments =
			{
				{ Name = "dungeonID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "shouldHide", Type = "bool", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "IslandCompleted",
			Type = "Event",
			LiteralName = "ISLAND_COMPLETED",
			Payload =
			{
				{ Name = "mapID", Type = "number", Nilable = false },
				{ Name = "winner", Type = "number", Nilable = false },
			},
		},
		{
			Name = "LfgBootProposalUpdate",
			Type = "Event",
			LiteralName = "LFG_BOOT_PROPOSAL_UPDATE",
		},
		{
			Name = "LfgCompletionReward",
			Type = "Event",
			LiteralName = "LFG_COMPLETION_REWARD",
		},
		{
			Name = "LfgInvalidErrorMessage",
			Type = "Event",
			LiteralName = "LFG_INVALID_ERROR_MESSAGE",
			Payload =
			{
				{ Name = "reason", Type = "number", Nilable = false },
				{ Name = "subReason1", Type = "number", Nilable = false },
				{ Name = "subReason2", Type = "number", Nilable = false },
			},
		},
		{
			Name = "LfgLockInfoReceived",
			Type = "Event",
			LiteralName = "LFG_LOCK_INFO_RECEIVED",
		},
		{
			Name = "LfgOfferContinue",
			Type = "Event",
			LiteralName = "LFG_OFFER_CONTINUE",
			Payload =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "lfgDungeonsID", Type = "number", Nilable = false },
				{ Name = "typeID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "LfgOpenFromGossip",
			Type = "Event",
			LiteralName = "LFG_OPEN_FROM_GOSSIP",
			Payload =
			{
				{ Name = "dungeonID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "LfgProposalDone",
			Type = "Event",
			LiteralName = "LFG_PROPOSAL_DONE",
		},
		{
			Name = "LfgProposalFailed",
			Type = "Event",
			LiteralName = "LFG_PROPOSAL_FAILED",
		},
		{
			Name = "LfgProposalShow",
			Type = "Event",
			LiteralName = "LFG_PROPOSAL_SHOW",
		},
		{
			Name = "LfgProposalSucceeded",
			Type = "Event",
			LiteralName = "LFG_PROPOSAL_SUCCEEDED",
		},
		{
			Name = "LfgProposalUpdate",
			Type = "Event",
			LiteralName = "LFG_PROPOSAL_UPDATE",
		},
		{
			Name = "LfgQueueStatusUpdate",
			Type = "Event",
			LiteralName = "LFG_QUEUE_STATUS_UPDATE",
		},
		{
			Name = "LfgReadyCheckDeclined",
			Type = "Event",
			LiteralName = "LFG_READY_CHECK_DECLINED",
			Payload =
			{
				{ Name = "name", Type = "string", Nilable = false },
			},
		},
		{
			Name = "LfgReadyCheckHide",
			Type = "Event",
			LiteralName = "LFG_READY_CHECK_HIDE",
		},
		{
			Name = "LfgReadyCheckPlayerIsReady",
			Type = "Event",
			LiteralName = "LFG_READY_CHECK_PLAYER_IS_READY",
			Payload =
			{
				{ Name = "name", Type = "string", Nilable = false },
			},
		},
		{
			Name = "LfgReadyCheckShow",
			Type = "Event",
			LiteralName = "LFG_READY_CHECK_SHOW",
			Payload =
			{
				{ Name = "isRequeue", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "LfgReadyCheckUpdate",
			Type = "Event",
			LiteralName = "LFG_READY_CHECK_UPDATE",
		},
		{
			Name = "LfgRoleCheckDeclined",
			Type = "Event",
			LiteralName = "LFG_ROLE_CHECK_DECLINED",
		},
		{
			Name = "LfgRoleCheckHide",
			Type = "Event",
			LiteralName = "LFG_ROLE_CHECK_HIDE",
		},
		{
			Name = "LfgRoleCheckRoleChosen",
			Type = "Event",
			LiteralName = "LFG_ROLE_CHECK_ROLE_CHOSEN",
			Payload =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "isTank", Type = "bool", Nilable = false },
				{ Name = "isHealer", Type = "bool", Nilable = false },
				{ Name = "isDamage", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "LfgRoleCheckShow",
			Type = "Event",
			LiteralName = "LFG_ROLE_CHECK_SHOW",
			Payload =
			{
				{ Name = "isRequeue", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "LfgRoleCheckUpdate",
			Type = "Event",
			LiteralName = "LFG_ROLE_CHECK_UPDATE",
		},
		{
			Name = "LfgRoleUpdate",
			Type = "Event",
			LiteralName = "LFG_ROLE_UPDATE",
		},
		{
			Name = "LfgUpdate",
			Type = "Event",
			LiteralName = "LFG_UPDATE",
		},
		{
			Name = "LfgUpdateRandomInfo",
			Type = "Event",
			LiteralName = "LFG_UPDATE_RANDOM_INFO",
		},
		{
			Name = "ShowLfgExpandSearchPrompt",
			Type = "Event",
			LiteralName = "SHOW_LFG_EXPAND_SEARCH_PROMPT",
		},
		{
			Name = "UpdateLfgList",
			Type = "Event",
			LiteralName = "UPDATE_LFG_LIST",
		},
		{
			Name = "WarfrontCompleted",
			Type = "Event",
			LiteralName = "WARFRONT_COMPLETED",
			Payload =
			{
				{ Name = "mapID", Type = "number", Nilable = false },
				{ Name = "winner", Type = "number", Nilable = false },
			},
		},
	},

	Tables =
	{
		{
			Name = "LFGDungeonInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "iconID", Type = "number", Nilable = false },
				{ Name = "link", Type = "string", Nilable = true },
			},
		},
		{
			Name = "LFGLockInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "lfgID", Type = "number", Nilable = false },
				{ Name = "reason", Type = "number", Nilable = false },
				{ Name = "hideEntry", Type = "bool", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "LFGList",
	Type = "System",
	Namespace = "C_LFGList",

	Functions =
	{
		{
			Name = "CanActiveEntryUseAutoAccept",
			Type = "Function",

			Returns =
			{
				{ Name = "canUseAutoAccept", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "CanCreateQuestGroup",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "canCreate", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ClearApplicationTextFields",
			Type = "Function",
		},
		{
			Name = "ClearCreationTextFields",
			Type = "Function",
		},
		{
			Name = "ClearSearchTextFields",
			Type = "Function",
		},
		{
			Name = "CopyActiveEntryInfoToCreationFields",
			Type = "Function",
		},
		{
			Name = "DoesEntryTitleMatchPrebuiltTitle",
			Type = "Function",

			Arguments =
			{
				{ Name = "activityID", Type = "number", Nilable = false },
				{ Name = "groupID", Type = "number", Nilable = false },
				{ Name = "playstyle", Type = "LFGEntryPlaystyle", Nilable = true },
			},

			Returns =
			{
				{ Name = "matches", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetActiveEntryInfo",
			Type = "Function",

			Returns =
			{
				{ Name = "entryData", Type = "LfgEntryData", Nilable = false },
			},
		},
		{
			Name = "GetActivityFullName",
			Type = "Function",

			Arguments =
			{
				{ Name = "activityID", Type = "number", Nilable = false },
				{ Name = "questID", Type = "number", Nilable = true },
				{ Name = "showWarmode", Type = "bool", Nilable = true },
			},

			Returns =
			{
				{ Name = "fullName", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetActivityGroupInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "groupID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "orderIndex", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetActivityInfoTable",
			Type = "Function",

			Arguments =
			{
				{ Name = "activityID", Type = "number", Nilable = false },
				{ Name = "questID", Type = "number", Nilable = true },
				{ Name = "showWarmode", Type = "bool", Nilable = true },
			},

			Returns =
			{
				{ Name = "activityInfo", Type = "GroupFinderActivityInfo", Nilable = false },
			},
		},
		{
			Name = "GetApplicantDungeonScoreForListing",
			Type = "Function",

			Arguments =
			{
				{ Name = "localID", Type = "number", Nilable = false },
				{ Name = "applicantIndex", Type = "number", Nilable = false },
				{ Name = "activityID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "bestDungeonScoreForListing", Type = "BestDungeonScoreMapInfo", Nilable = false },
			},
		},
		{
			Name = "GetApplicantInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "applicantID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "applicantData", Type = "LfgApplicantData", Nilable = false },
			},
		},
		{
			Name = "GetApplicantPvpRatingInfoForListing",
			Type = "Function",

			Arguments =
			{
				{ Name = "localID", Type = "number", Nilable = false },
				{ Name = "applicantIndex", Type = "number", Nilable = false },
				{ Name = "activityID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "pvpRatingInfo", Type = "PvpRatingInfo", Nilable = false },
			},
		},
		{
			Name = "GetFilteredSearchResults",
			Type = "Function",

			Returns =
			{
				{ Name = "totalResultsFound", Type = "number", Nilable = false, Default = 0 },
				{ Name = "filteredResults", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "GetKeystoneForActivity",
			Type = "Function",

			Arguments =
			{
				{ Name = "activityID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "level", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetLfgCategoryInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "categoryID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "categoryData", Type = "LfgCategoryData", Nilable = false },
			},
		},
		{
			Name = "GetOwnedKeystoneActivityAndGroupAndLevel",
			Type = "Function",

			Arguments =
			{
				{ Name = "getTimewalking", Type = "bool", Nilable = false, Default = false },
			},

			Returns =
			{
				{ Name = "activityID", Type = "number", Nilable = false },
				{ Name = "groupID", Type = "number", Nilable = false },
				{ Name = "keystoneLevel", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetPlaystyleString",
			Type = "Function",

			Arguments =
			{
				{ Name = "playstyle", Type = "LFGEntryPlaystyle", Nilable = false },
				{ Name = "activityInfo", Type = "GroupFinderActivityInfo", Nilable = false },
			},

			Returns =
			{
				{ Name = "playstyleString", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetSearchResultInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "searchResultID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "searchResultData", Type = "LfgSearchResultData", Nilable = false },
			},
		},
		{
			Name = "GetSearchResults",
			Type = "Function",

			Returns =
			{
				{ Name = "totalResultsFound", Type = "number", Nilable = false, Default = 0 },
				{ Name = "results", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "HasActiveEntryInfo",
			Type = "Function",

			Returns =
			{
				{ Name = "hasActiveEntryInfo", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "HasSearchResultInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "searchResultID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "hasSearchResultInfo", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsPlayerAuthenticatedForLFG",
			Type = "Function",

			Arguments =
			{
				{ Name = "activityID", Type = "number", Nilable = true },
			},

			Returns =
			{
				{ Name = "isAuthenticated", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "Search",
			Type = "Function",

			Arguments =
			{
				{ Name = "categoryID", Type = "number", Nilable = false },
				{ Name = "filter", Type = "number", Nilable = false, Default = 0 },
				{ Name = "preferredFilters", Type = "number", Nilable = false, Default = 0 },
				{ Name = "languageFilter", Type = "WowLocale", Nilable = true },
				{ Name = "searchCrossFactionListings", Type = "bool", Nilable = true, Default = false },
			},
		},
		{
			Name = "SetEntryTitle",
			Type = "Function",

			Arguments =
			{
				{ Name = "activityID", Type = "number", Nilable = false },
				{ Name = "groupID", Type = "number", Nilable = false },
				{ Name = "playstyle", Type = "LFGEntryPlaystyle", Nilable = true },
			},
		},
		{
			Name = "SetSearchToActivity",
			Type = "Function",

			Arguments =
			{
				{ Name = "activityID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetSearchToQuestID",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ValidateRequiredDungeonScore",
			Type = "Function",

			Arguments =
			{
				{ Name = "dungeonScore", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "passes", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ValidateRequiredPvpRatingForActivity",
			Type = "Function",

			Arguments =
			{
				{ Name = "activityID", Type = "number", Nilable = false },
				{ Name = "rating", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "passes", Type = "bool", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "LfgGroupDelistedLeadershipChange",
			Type = "Event",
			LiteralName = "LFG_GROUP_DELISTED_LEADERSHIP_CHANGE",
			Payload =
			{
				{ Name = "listingName", Type = "string", Nilable = false },
				{ Name = "automaticDelistTimeRemaining", Type = "number", Nilable = false },
			},
		},
		{
			Name = "LfgListActiveEntryUpdate",
			Type = "Event",
			LiteralName = "LFG_LIST_ACTIVE_ENTRY_UPDATE",
			Payload =
			{
				{ Name = "created", Type = "bool", Nilable = true },
			},
		},
		{
			Name = "LfgListApplicantListUpdated",
			Type = "Event",
			LiteralName = "LFG_LIST_APPLICANT_LIST_UPDATED",
			Payload =
			{
				{ Name = "newPendingEntry", Type = "bool", Nilable = true },
				{ Name = "newPendingEntryWithData", Type = "bool", Nilable = true },
			},
		},
		{
			Name = "LfgListApplicantUpdated",
			Type = "Event",
			LiteralName = "LFG_LIST_APPLICANT_UPDATED",
			Payload =
			{
				{ Name = "applicantID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "LfgListApplicationStatusUpdated",
			Type = "Event",
			LiteralName = "LFG_LIST_APPLICATION_STATUS_UPDATED",
			Payload =
			{
				{ Name = "searchResultID", Type = "number", Nilable = false },
				{ Name = "newStatus", Type = "string", Nilable = false },
				{ Name = "oldStatus", Type = "string", Nilable = false },
				{ Name = "groupName", Type = "string", Nilable = false },
			},
		},
		{
			Name = "LfgListAvailabilityUpdate",
			Type = "Event",
			LiteralName = "LFG_LIST_AVAILABILITY_UPDATE",
		},
		{
			Name = "LfgListEntryCreationFailed",
			Type = "Event",
			LiteralName = "LFG_LIST_ENTRY_CREATION_FAILED",
		},
		{
			Name = "LfgListEntryExpiredTimeout",
			Type = "Event",
			LiteralName = "LFG_LIST_ENTRY_EXPIRED_TIMEOUT",
		},
		{
			Name = "LfgListEntryExpiredTooManyPlayers",
			Type = "Event",
			LiteralName = "LFG_LIST_ENTRY_EXPIRED_TOO_MANY_PLAYERS",
		},
		{
			Name = "LfgListJoinedGroup",
			Type = "Event",
			LiteralName = "LFG_LIST_JOINED_GROUP",
			Payload =
			{
				{ Name = "searchResultID", Type = "number", Nilable = false },
				{ Name = "groupName", Type = "string", Nilable = false },
			},
		},
		{
			Name = "LfgListSearchFailed",
			Type = "Event",
			LiteralName = "LFG_LIST_SEARCH_FAILED",
			Payload =
			{
				{ Name = "reason", Type = "string", Nilable = true },
			},
		},
		{
			Name = "LfgListSearchResultUpdated",
			Type = "Event",
			LiteralName = "LFG_LIST_SEARCH_RESULT_UPDATED",
			Payload =
			{
				{ Name = "searchResultID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "LfgListSearchResultsReceived",
			Type = "Event",
			LiteralName = "LFG_LIST_SEARCH_RESULTS_RECEIVED",
		},
	},

	Tables =
	{
		{
			Name = "LFGEntryPlaystyle",
			Type = "Enumeration",
			NumValues = 4,
			MinValue = 0,
			MaxValue = 3,
			Fields =
			{
				{ Name = "None", Type = "LFGEntryPlaystyle", EnumValue = 0 },
				{ Name = "Standard", Type = "LFGEntryPlaystyle", EnumValue = 1 },
				{ Name = "Casual", Type = "LFGEntryPlaystyle", EnumValue = 2 },
				{ Name = "Hardcore", Type = "LFGEntryPlaystyle", EnumValue = 3 },
			},
		},
		{
			Name = "LFGListDisplayType",
			Type = "Enumeration",
			NumValues = 6,
			MinValue = 0,
			MaxValue = 5,
			Fields =
			{
				{ Name = "RoleCount", Type = "LFGListDisplayType", EnumValue = 0 },
				{ Name = "RoleEnumerate", Type = "LFGListDisplayType", EnumValue = 1 },
				{ Name = "ClassEnumerate", Type = "LFGListDisplayType", EnumValue = 2 },
				{ Name = "HideAll", Type = "LFGListDisplayType", EnumValue = 3 },
				{ Name = "PlayerCount", Type = "LFGListDisplayType", EnumValue = 4 },
				{ Name = "Comment", Type = "LFGListDisplayType", EnumValue = 5 },
			},
		},
		{
			Name = "BestDungeonScoreMapInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "mapScore", Type = "number", Nilable = false },
				{ Name = "mapName", Type = "string", Nilable = false },
				{ Name = "bestRunLevel", Type = "number", Nilable = false },
				{ Name = "finishedSuccess", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GroupFinderActivityInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "fullName", Type = "string", Nilable = false },
				{ Name = "shortName", Type = "string", Nilable = false },
				{ Name = "categoryID", Type = "number", Nilable = false },
				{ Name = "groupFinderActivityGroupID", Type = "number", Nilable = false },
				{ Name = "ilvlSuggestion", Type = "number", Nilable = false },
				{ Name = "filters", Type = "number", Nilable = false },
				{ Name = "minLevel", Type = "number", Nilable = false },
				{ Name = "maxNumPlayers", Type = "number", Nilable = false },
				{ Name = "displayType", Type = "LFGListDisplayType", Nilable = false },
				{ Name = "orderIndex", Type = "number", Nilable = false },
				{ Name = "useHonorLevel", Type = "bool", Nilable = false },
				{ Name = "showQuickJoinToast", Type = "bool", Nilable = false },
				{ Name = "isMythicPlusActivity", Type = "bool", Nilable = false },
				{ Name = "isRatedPvpActivity", Type = "bool", Nilable = false },
				{ Name = "isCurrentRaidActivity", Type = "bool", Nilable = false },
				{ Name = "isPvpActivity", Type = "bool", Nilable = false },
				{ Name = "isMythicActivity", Type = "bool", Nilable = false },
				{ Name = "allowCrossFaction", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "LfgApplicantData",
			Type = "Structure",
			Fields =
			{
				{ Name = "applicantID", Type = "number", Nilable = false },
				{ Name = "applicationStatus", Type = "string", Nilable = false },
				{ Name = "pendingApplicationStatus", Type = "string", Nilable = true },
				{ Name = "numMembers", Type = "number", Nilable = false },
				{ Name = "isNew", Type = "bool", Nilable = false },
				{ Name = "comment", Type = "string", Nilable = false },
				{ Name = "displayOrderID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "LfgCategoryData",
			Type = "Structure",
			Fields =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "searchPromptOverride", Type = "string", Nilable = true },
				{ Name = "separateRecommended", Type = "bool", Nilable = false },
				{ Name = "autoChooseActivity", Type = "bool", Nilable = false },
				{ Name = "preferCurrentArea", Type = "bool", Nilable = false },
				{ Name = "showPlaystyleDropdown", Type = "bool", Nilable = false },
				{ Name = "allowCrossFaction", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "LfgEntryData",
			Type = "Structure",
			Fields =
			{
				{ Name = "activityID", Type = "number", Nilable = false },
				{ Name = "requiredItemLevel", Type = "number", Nilable = false },
				{ Name = "requiredHonorLevel", Type = "number", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "comment", Type = "string", Nilable = false },
				{ Name = "voiceChat", Type = "string", Nilable = false },
				{ Name = "duration", Type = "number", Nilable = false },
				{ Name = "autoAccept", Type = "bool", Nilable = false },
				{ Name = "privateGroup", Type = "bool", Nilable = false },
				{ Name = "questID", Type = "number", Nilable = true },
				{ Name = "requiredDungeonScore", Type = "number", Nilable = true },
				{ Name = "requiredPvpRating", Type = "number", Nilable = true },
				{ Name = "playstyle", Type = "LFGEntryPlaystyle", Nilable = true },
				{ Name = "isCrossFactionListing", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "LfgSearchResultData",
			Type = "Structure",
			Fields =
			{
				{ Name = "searchResultID", Type = "number", Nilable = false },
				{ Name = "activityID", Type = "number", Nilable = false },
				{ Name = "leaderName", Type = "string", Nilable = true },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "comment", Type = "string", Nilable = false },
				{ Name = "voiceChat", Type = "string", Nilable = false },
				{ Name = "requiredItemLevel", Type = "number", Nilable = false },
				{ Name = "requiredHonorLevel", Type = "number", Nilable = false },
				{ Name = "numMembers", Type = "number", Nilable = false },
				{ Name = "numBNetFriends", Type = "number", Nilable = false },
				{ Name = "numCharFriends", Type = "number", Nilable = false },
				{ Name = "numGuildMates", Type = "number", Nilable = false },
				{ Name = "isDelisted", Type = "bool", Nilable = false },
				{ Name = "autoAccept", Type = "bool", Nilable = false },
				{ Name = "isWarMode", Type = "bool", Nilable = false },
				{ Name = "age", Type = "number", Nilable = false },
				{ Name = "questID", Type = "number", Nilable = true },
				{ Name = "leaderOverallDungeonScore", Type = "number", Nilable = true },
				{ Name = "leaderDungeonScoreInfo", Type = "BestDungeonScoreMapInfo", Nilable = true },
				{ Name = "leaderPvpRatingInfo", Type = "PvpRatingInfo", Nilable = true },
				{ Name = "requiredDungeonScore", Type = "number", Nilable = true },
				{ Name = "requiredPvpRating", Type = "number", Nilable = true },
				{ Name = "playstyle", Type = "LFGEntryPlaystyle", Nilable = true },
				{ Name = "crossFactionListing", Type = "bool", Nilable = true },
				{ Name = "leaderFactionGroup", Type = "number", Nilable = false },
			},
		},
		{
			Name = "PvpRatingInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "bracket", Type = "number", Nilable = false },
				{ Name = "rating", Type = "number", Nilable = false },
				{ Name = "activityName", Type = "string", Nilable = false },
				{ Name = "tier", Type = "number", Nilable = false },
			},
		},
		{
			Name = "WowLocale",
			Type = "Structure",
			Fields =
			{
				{ Name = "enUS", Type = "bool", Nilable = false, Default = false },
				{ Name = "koKR", Type = "bool", Nilable = false, Default = false },
				{ Name = "frFR", Type = "bool", Nilable = false, Default = false },
				{ Name = "deDE", Type = "bool", Nilable = false, Default = false },
				{ Name = "zhCN", Type = "bool", Nilable = false, Default = false },
				{ Name = "zhTW", Type = "bool", Nilable = false, Default = false },
				{ Name = "esES", Type = "bool", Nilable = false, Default = false },
				{ Name = "esMX", Type = "bool", Nilable = false, Default = false },
				{ Name = "ruRU", Type = "bool", Nilable = false, Default = false },
				{ Name = "ptBR", Type = "bool", Nilable = false, Default = false },
				{ Name = "itIT", Type = "bool", Nilable = false, Default = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "LoadingScreen",
	Type = "System",
	Namespace = "C_LoadingScreen",

	Functions =
	{
	},

	Events =
	{
		{
			Name = "LoadingScreenDisabled",
			Type = "Event",
			LiteralName = "LOADING_SCREEN_DISABLED",
		},
		{
			Name = "LoadingScreenEnabled",
			Type = "Event",
			LiteralName = "LOADING_SCREEN_ENABLED",
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "Loot",
	Type = "System",
	Namespace = "C_Loot",

	Functions =
	{
		{
			Name = "IsLegacyLootModeEnabled",
			Type = "Function",

			Returns =
			{
				{ Name = "isLegacyLootModeEnabled", Type = "bool", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "AzeriteEmpoweredItemLooted",
			Type = "Event",
			LiteralName = "AZERITE_EMPOWERED_ITEM_LOOTED",
			Payload =
			{
				{ Name = "itemLink", Type = "string", Nilable = false },
			},
		},
		{
			Name = "BonusRollActivate",
			Type = "Event",
			LiteralName = "BONUS_ROLL_ACTIVATE",
		},
		{
			Name = "BonusRollDeactivate",
			Type = "Event",
			LiteralName = "BONUS_ROLL_DEACTIVATE",
		},
		{
			Name = "BonusRollFailed",
			Type = "Event",
			LiteralName = "BONUS_ROLL_FAILED",
		},
		{
			Name = "BonusRollResult",
			Type = "Event",
			LiteralName = "BONUS_ROLL_RESULT",
			Payload =
			{
				{ Name = "typeIdentifier", Type = "string", Nilable = false },
				{ Name = "itemLink", Type = "string", Nilable = false },
				{ Name = "quantity", Type = "number", Nilable = false },
				{ Name = "specID", Type = "number", Nilable = false },
				{ Name = "sex", Type = "number", Nilable = false },
				{ Name = "personalLootToast", Type = "bool", Nilable = false },
				{ Name = "currencyID", Type = "number", Nilable = true },
				{ Name = "isSecondaryResult", Type = "bool", Nilable = false },
				{ Name = "corrupted", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "BonusRollStarted",
			Type = "Event",
			LiteralName = "BONUS_ROLL_STARTED",
		},
		{
			Name = "CancelLootRoll",
			Type = "Event",
			LiteralName = "CANCEL_LOOT_ROLL",
			Payload =
			{
				{ Name = "rollID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ConfirmDisenchantRoll",
			Type = "Event",
			LiteralName = "CONFIRM_DISENCHANT_ROLL",
			Payload =
			{
				{ Name = "rollID", Type = "number", Nilable = false },
				{ Name = "rollType", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ConfirmLootRoll",
			Type = "Event",
			LiteralName = "CONFIRM_LOOT_ROLL",
			Payload =
			{
				{ Name = "rollID", Type = "number", Nilable = false },
				{ Name = "rollType", Type = "number", Nilable = false },
				{ Name = "confirmReason", Type = "string", Nilable = false },
			},
		},
		{
			Name = "EncounterLootReceived",
			Type = "Event",
			LiteralName = "ENCOUNTER_LOOT_RECEIVED",
			Payload =
			{
				{ Name = "encounterID", Type = "number", Nilable = false },
				{ Name = "itemID", Type = "number", Nilable = false },
				{ Name = "itemLink", Type = "string", Nilable = false },
				{ Name = "quantity", Type = "number", Nilable = false },
				{ Name = "itemName", Type = "string", Nilable = false },
				{ Name = "fileName", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GarrisonMissionBonusRollLoot",
			Type = "Event",
			LiteralName = "GARRISON_MISSION_BONUS_ROLL_LOOT",
			Payload =
			{
				{ Name = "itemID", Type = "number", Nilable = false },
				{ Name = "quantity", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ItemPush",
			Type = "Event",
			LiteralName = "ITEM_PUSH",
			Payload =
			{
				{ Name = "bagSlot", Type = "number", Nilable = false },
				{ Name = "iconFileID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "LootBindConfirm",
			Type = "Event",
			LiteralName = "LOOT_BIND_CONFIRM",
			Payload =
			{
				{ Name = "lootSlot", Type = "number", Nilable = false },
			},
		},
		{
			Name = "LootClosed",
			Type = "Event",
			LiteralName = "LOOT_CLOSED",
		},
		{
			Name = "LootHistoryAutoShow",
			Type = "Event",
			LiteralName = "LOOT_HISTORY_AUTO_SHOW",
			Payload =
			{
				{ Name = "rollID", Type = "number", Nilable = false },
				{ Name = "isMasterLoot", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "LootHistoryFullUpdate",
			Type = "Event",
			LiteralName = "LOOT_HISTORY_FULL_UPDATE",
		},
		{
			Name = "LootHistoryRollChanged",
			Type = "Event",
			LiteralName = "LOOT_HISTORY_ROLL_CHANGED",
			Payload =
			{
				{ Name = "historyIndex", Type = "number", Nilable = false },
				{ Name = "playerIndex", Type = "number", Nilable = false },
			},
		},
		{
			Name = "LootHistoryRollComplete",
			Type = "Event",
			LiteralName = "LOOT_HISTORY_ROLL_COMPLETE",
		},
		{
			Name = "LootItemAvailable",
			Type = "Event",
			LiteralName = "LOOT_ITEM_AVAILABLE",
			Payload =
			{
				{ Name = "itemTooltip", Type = "string", Nilable = false },
				{ Name = "lootHandle", Type = "number", Nilable = false },
			},
		},
		{
			Name = "LootItemRollWon",
			Type = "Event",
			LiteralName = "LOOT_ITEM_ROLL_WON",
			Payload =
			{
				{ Name = "itemLink", Type = "string", Nilable = false },
				{ Name = "rollQuantity", Type = "number", Nilable = false },
				{ Name = "rollType", Type = "number", Nilable = false },
				{ Name = "roll", Type = "number", Nilable = false },
				{ Name = "upgraded", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "LootOpened",
			Type = "Event",
			LiteralName = "LOOT_OPENED",
			Payload =
			{
				{ Name = "autoLoot", Type = "bool", Nilable = false },
				{ Name = "isFromItem", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "LootReady",
			Type = "Event",
			LiteralName = "LOOT_READY",
			Payload =
			{
				{ Name = "autoloot", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "LootRollsComplete",
			Type = "Event",
			LiteralName = "LOOT_ROLLS_COMPLETE",
			Payload =
			{
				{ Name = "lootHandle", Type = "number", Nilable = false },
			},
		},
		{
			Name = "LootSlotChanged",
			Type = "Event",
			LiteralName = "LOOT_SLOT_CHANGED",
			Payload =
			{
				{ Name = "lootSlot", Type = "number", Nilable = false },
			},
		},
		{
			Name = "LootSlotCleared",
			Type = "Event",
			LiteralName = "LOOT_SLOT_CLEARED",
			Payload =
			{
				{ Name = "lootSlot", Type = "number", Nilable = false },
			},
		},
		{
			Name = "OpenMasterLootList",
			Type = "Event",
			LiteralName = "OPEN_MASTER_LOOT_LIST",
		},
		{
			Name = "PetBattleLootReceived",
			Type = "Event",
			LiteralName = "PET_BATTLE_LOOT_RECEIVED",
			Payload =
			{
				{ Name = "typeIdentifier", Type = "string", Nilable = false },
				{ Name = "itemLink", Type = "string", Nilable = false },
				{ Name = "quantity", Type = "number", Nilable = false },
			},
		},
		{
			Name = "PlayerLootSpecUpdated",
			Type = "Event",
			LiteralName = "PLAYER_LOOT_SPEC_UPDATED",
		},
		{
			Name = "QuestCurrencyLootReceived",
			Type = "Event",
			LiteralName = "QUEST_CURRENCY_LOOT_RECEIVED",
			Payload =
			{
				{ Name = "questID", Type = "number", Nilable = false },
				{ Name = "currencyId", Type = "number", Nilable = false },
				{ Name = "quantity", Type = "number", Nilable = false },
			},
		},
		{
			Name = "QuestLootReceived",
			Type = "Event",
			LiteralName = "QUEST_LOOT_RECEIVED",
			Payload =
			{
				{ Name = "questID", Type = "number", Nilable = false },
				{ Name = "itemLink", Type = "string", Nilable = false },
				{ Name = "quantity", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ShowLootToast",
			Type = "Event",
			LiteralName = "SHOW_LOOT_TOAST",
			Payload =
			{
				{ Name = "typeIdentifier", Type = "string", Nilable = false },
				{ Name = "itemLink", Type = "string", Nilable = false },
				{ Name = "quantity", Type = "number", Nilable = false },
				{ Name = "specID", Type = "number", Nilable = false },
				{ Name = "sex", Type = "number", Nilable = false },
				{ Name = "personalLootToast", Type = "bool", Nilable = false },
				{ Name = "toastMethod", Type = "number", Nilable = false },
				{ Name = "lessAwesome", Type = "bool", Nilable = false },
				{ Name = "upgraded", Type = "bool", Nilable = false },
				{ Name = "corrupted", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ShowLootToastLegendaryLooted",
			Type = "Event",
			LiteralName = "SHOW_LOOT_TOAST_LEGENDARY_LOOTED",
			Payload =
			{
				{ Name = "itemLink", Type = "string", Nilable = false },
			},
		},
		{
			Name = "ShowLootToastUpgrade",
			Type = "Event",
			LiteralName = "SHOW_LOOT_TOAST_UPGRADE",
			Payload =
			{
				{ Name = "itemLink", Type = "string", Nilable = false },
				{ Name = "quantity", Type = "number", Nilable = false },
				{ Name = "specID", Type = "number", Nilable = false },
				{ Name = "sex", Type = "number", Nilable = false },
				{ Name = "baseQuality", Type = "number", Nilable = false },
				{ Name = "personalLootToast", Type = "bool", Nilable = false },
				{ Name = "lessAwesome", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ShowPvpFactionLootToast",
			Type = "Event",
			LiteralName = "SHOW_PVP_FACTION_LOOT_TOAST",
			Payload =
			{
				{ Name = "typeIdentifier", Type = "string", Nilable = false },
				{ Name = "itemLink", Type = "string", Nilable = false },
				{ Name = "quantity", Type = "number", Nilable = false },
				{ Name = "specID", Type = "number", Nilable = false },
				{ Name = "sex", Type = "number", Nilable = false },
				{ Name = "personalLootToast", Type = "bool", Nilable = false },
				{ Name = "lessAwesome", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ShowRatedPvpRewardToast",
			Type = "Event",
			LiteralName = "SHOW_RATED_PVP_REWARD_TOAST",
			Payload =
			{
				{ Name = "typeIdentifier", Type = "string", Nilable = false },
				{ Name = "itemLink", Type = "string", Nilable = false },
				{ Name = "quantity", Type = "number", Nilable = false },
				{ Name = "specID", Type = "number", Nilable = false },
				{ Name = "sex", Type = "number", Nilable = false },
				{ Name = "personalLootToast", Type = "bool", Nilable = false },
				{ Name = "lessAwesome", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "StartLootRoll",
			Type = "Event",
			LiteralName = "START_LOOT_ROLL",
			Payload =
			{
				{ Name = "rollID", Type = "number", Nilable = false },
				{ Name = "rollTime", Type = "number", Nilable = false },
				{ Name = "lootHandle", Type = "number", Nilable = true },
			},
		},
		{
			Name = "TrialCapReachedMoney",
			Type = "Event",
			LiteralName = "TRIAL_CAP_REACHED_MONEY",
		},
		{
			Name = "UpdateMasterLootList",
			Type = "Event",
			LiteralName = "UPDATE_MASTER_LOOT_LIST",
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "LossOfControl",
	Type = "System",
	Namespace = "C_LossOfControl",

	Functions =
	{
		{
			Name = "GetActiveLossOfControlData",
			Type = "Function",

			Arguments =
			{
				{ Name = "index", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "event", Type = "LossOfControlData", Nilable = true },
			},
		},
		{
			Name = "GetActiveLossOfControlDataByUnit",
			Type = "Function",

			Arguments =
			{
				{ Name = "unitToken", Type = "string", Nilable = false },
				{ Name = "index", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "event", Type = "LossOfControlData", Nilable = true },
			},
		},
		{
			Name = "GetActiveLossOfControlDataCount",
			Type = "Function",

			Returns =
			{
				{ Name = "count", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetActiveLossOfControlDataCountByUnit",
			Type = "Function",

			Arguments =
			{
				{ Name = "unitToken", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "count", Type = "number", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "LossOfControlAdded",
			Type = "Event",
			LiteralName = "LOSS_OF_CONTROL_ADDED",
			Payload =
			{
				{ Name = "effectIndex", Type = "number", Nilable = false },
			},
		},
		{
			Name = "LossOfControlCommentatorAdded",
			Type = "Event",
			LiteralName = "LOSS_OF_CONTROL_COMMENTATOR_ADDED",
			Payload =
			{
				{ Name = "victim", Type = "string", Nilable = false },
				{ Name = "effectIndex", Type = "number", Nilable = false },
			},
		},
		{
			Name = "LossOfControlCommentatorUpdate",
			Type = "Event",
			LiteralName = "LOSS_OF_CONTROL_COMMENTATOR_UPDATE",
			Payload =
			{
				{ Name = "victim", Type = "string", Nilable = false },
			},
		},
		{
			Name = "LossOfControlUpdate",
			Type = "Event",
			LiteralName = "LOSS_OF_CONTROL_UPDATE",
		},
		{
			Name = "PlayerControlGained",
			Type = "Event",
			LiteralName = "PLAYER_CONTROL_GAINED",
		},
		{
			Name = "PlayerControlLost",
			Type = "Event",
			LiteralName = "PLAYER_CONTROL_LOST",
		},
	},

	Tables =
	{
		{
			Name = "LossOfControlData",
			Type = "Structure",
			Fields =
			{
				{ Name = "locType", Type = "string", Nilable = false },
				{ Name = "spellID", Type = "number", Nilable = false },
				{ Name = "displayText", Type = "string", Nilable = false },
				{ Name = "iconTexture", Type = "number", Nilable = false },
				{ Name = "startTime", Type = "number", Nilable = true },
				{ Name = "timeRemaining", Type = "number", Nilable = true },
				{ Name = "duration", Type = "number", Nilable = true },
				{ Name = "lockoutSchool", Type = "number", Nilable = false },
				{ Name = "priority", Type = "number", Nilable = false },
				{ Name = "displayType", Type = "number", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "MailInfo",
	Type = "System",
	Namespace = "C_Mail",

	Functions =
	{
		{
			Name = "CanCheckInbox",
			Type = "Function",

			Returns =
			{
				{ Name = "canCheckInbox", Type = "bool", Nilable = false },
				{ Name = "secondsUntilAllowed", Type = "number", Nilable = false },
			},
		},
		{
			Name = "HasInboxMoney",
			Type = "Function",

			Arguments =
			{
				{ Name = "inboxIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "inboxItemHasMoneyAttached", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsCommandPending",
			Type = "Function",

			Returns =
			{
				{ Name = "isCommandPending", Type = "bool", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "CloseInboxItem",
			Type = "Event",
			LiteralName = "CLOSE_INBOX_ITEM",
			Payload =
			{
				{ Name = "mailIndex", Type = "number", Nilable = false },
			},
		},
		{
			Name = "MailClosed",
			Type = "Event",
			LiteralName = "MAIL_CLOSED",
		},
		{
			Name = "MailFailed",
			Type = "Event",
			LiteralName = "MAIL_FAILED",
			Payload =
			{
				{ Name = "itemID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "MailInboxUpdate",
			Type = "Event",
			LiteralName = "MAIL_INBOX_UPDATE",
		},
		{
			Name = "MailLockSendItems",
			Type = "Event",
			LiteralName = "MAIL_LOCK_SEND_ITEMS",
			Payload =
			{
				{ Name = "attachSlot", Type = "number", Nilable = false },
				{ Name = "itemLink", Type = "string", Nilable = false },
			},
		},
		{
			Name = "MailSendInfoUpdate",
			Type = "Event",
			LiteralName = "MAIL_SEND_INFO_UPDATE",
		},
		{
			Name = "MailSendSuccess",
			Type = "Event",
			LiteralName = "MAIL_SEND_SUCCESS",
		},
		{
			Name = "MailShow",
			Type = "Event",
			LiteralName = "MAIL_SHOW",
		},
		{
			Name = "MailSuccess",
			Type = "Event",
			LiteralName = "MAIL_SUCCESS",
			Payload =
			{
				{ Name = "itemID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "MailUnlockSendItems",
			Type = "Event",
			LiteralName = "MAIL_UNLOCK_SEND_ITEMS",
		},
		{
			Name = "SendMailCodChanged",
			Type = "Event",
			LiteralName = "SEND_MAIL_COD_CHANGED",
		},
		{
			Name = "SendMailMoneyChanged",
			Type = "Event",
			LiteralName = "SEND_MAIL_MONEY_CHANGED",
		},
		{
			Name = "UpdatePendingMail",
			Type = "Event",
			LiteralName = "UPDATE_PENDING_MAIL",
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "MapExplorationInfo",
	Type = "System",
	Namespace = "C_MapExplorationInfo",

	Functions =
	{
		{
			Name = "GetExploredAreaIDsAtPosition",
			Type = "Function",

			Arguments =
			{
				{ Name = "uiMapID", Type = "number", Nilable = false },
				{ Name = "normalizedPosition", Type = "table", Mixin = "Vector2DMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "areaID", Type = "table", InnerType = "number", Nilable = true },
			},
		},
		{
			Name = "GetExploredMapTextures",
			Type = "Function",

			Arguments =
			{
				{ Name = "uiMapID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "overlayInfo", Type = "table", InnerType = "UiMapExplorationInfo", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "MapExplorationUpdated",
			Type = "Event",
			LiteralName = "MAP_EXPLORATION_UPDATED",
		},
	},

	Tables =
	{
		{
			Name = "UiMapExplorationHitRect",
			Type = "Structure",
			Fields =
			{
				{ Name = "top", Type = "number", Nilable = false },
				{ Name = "bottom", Type = "number", Nilable = false },
				{ Name = "left", Type = "number", Nilable = false },
				{ Name = "right", Type = "number", Nilable = false },
			},
		},
		{
			Name = "UiMapExplorationInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "textureWidth", Type = "number", Nilable = false },
				{ Name = "textureHeight", Type = "number", Nilable = false },
				{ Name = "offsetX", Type = "number", Nilable = false },
				{ Name = "offsetY", Type = "number", Nilable = false },
				{ Name = "isShownByMouseOver", Type = "bool", Nilable = false },
				{ Name = "fileDataIDs", Type = "table", InnerType = "number", Nilable = false },
				{ Name = "hitRect", Type = "UiMapExplorationHitRect", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "MerchantFrame",
	Type = "System",
	Namespace = "C_MerchantFrame",

	Functions =
	{
		{
			Name = "GetBuybackItemID",
			Type = "Function",

			Arguments =
			{
				{ Name = "buybackSlotIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "buybackItemID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "IsMerchantItemRefundable",
			Type = "Function",

			Arguments =
			{
				{ Name = "index", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "refundable", Type = "bool", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "MerchantClosed",
			Type = "Event",
			LiteralName = "MERCHANT_CLOSED",
		},
		{
			Name = "MerchantFilterItemUpdate",
			Type = "Event",
			LiteralName = "MERCHANT_FILTER_ITEM_UPDATE",
			Payload =
			{
				{ Name = "itemID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "MerchantShow",
			Type = "Event",
			LiteralName = "MERCHANT_SHOW",
		},
		{
			Name = "MerchantUpdate",
			Type = "Event",
			LiteralName = "MERCHANT_UPDATE",
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "Minimap",
	Type = "System",
	Namespace = "C_Minimap",

	Functions =
	{
		{
			Name = "CanTrackBattlePets",
			Type = "Function",

			Returns =
			{
				{ Name = "CanTrackBattlePets", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ClearAllTracking",
			Type = "Function",
		},
		{
			Name = "GetDrawGroundTextures",
			Type = "Function",

			Returns =
			{
				{ Name = "draw", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetNumQuestPOIWorldEffects",
			Type = "Function",

			Returns =
			{
				{ Name = "worldEffectCount", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetNumTrackingTypes",
			Type = "Function",

			Returns =
			{
				{ Name = "numTrackingTypes", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetObjectIconTextureCoords",
			Type = "Function",

			Arguments =
			{
				{ Name = "index", Type = "number", Nilable = true },
			},

			Returns =
			{
				{ Name = "textureCoordsX", Type = "number", Nilable = false },
				{ Name = "textureCoordsY", Type = "number", Nilable = false },
				{ Name = "textureCoordsZ", Type = "number", Nilable = false },
				{ Name = "textureCoordsW", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetPOITextureCoords",
			Type = "Function",

			Arguments =
			{
				{ Name = "index", Type = "number", Nilable = true },
			},

			Returns =
			{
				{ Name = "textureCoordsX", Type = "number", Nilable = false },
				{ Name = "textureCoordsY", Type = "number", Nilable = false },
				{ Name = "textureCoordsZ", Type = "number", Nilable = false },
				{ Name = "textureCoordsW", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetTrackingFilter",
			Type = "Function",

			Arguments =
			{
				{ Name = "spellIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "trackingType", Type = "MinimapScriptTrackingFilter", Nilable = false },
			},
		},
		{
			Name = "GetTrackingInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "spellIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "textureFileID", Type = "number", Nilable = false },
				{ Name = "active", Type = "bool", Nilable = false },
				{ Name = "type", Type = "string", Nilable = false },
				{ Name = "subType", Type = "number", Nilable = false },
				{ Name = "spellID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetUiMapID",
			Type = "Function",

			Returns =
			{
				{ Name = "uiMapID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetViewRadius",
			Type = "Function",

			Returns =
			{
				{ Name = "yards", Type = "number", Nilable = false },
			},
		},
		{
			Name = "IsFilteredOut",
			Type = "Function",

			Arguments =
			{
				{ Name = "filterType", Type = "MinimapTrackingFilter", Nilable = false },
			},

			Returns =
			{
				{ Name = "isFiltered", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsRotateMinimapIgnored",
			Type = "Function",

			Returns =
			{
				{ Name = "isIgnored", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsTrackingBattlePets",
			Type = "Function",

			Returns =
			{
				{ Name = "isTrackingBattlePets", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsTrackingHiddenQuests",
			Type = "Function",

			Returns =
			{
				{ Name = "isTrackingHiddenQuests", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetDrawGroundTextures",
			Type = "Function",

			Arguments =
			{
				{ Name = "draw", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetIgnoreRotateMinimap",
			Type = "Function",

			Arguments =
			{
				{ Name = "ignore", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetTracking",
			Type = "Function",

			Arguments =
			{
				{ Name = "index", Type = "number", Nilable = false },
				{ Name = "on", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ShouldUseHybridMinimap",
			Type = "Function",

			Returns =
			{
				{ Name = "shouldUse", Type = "bool", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "MinimapPing",
			Type = "Event",
			LiteralName = "MINIMAP_PING",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
				{ Name = "y", Type = "number", Nilable = false },
				{ Name = "x", Type = "number", Nilable = false },
			},
		},
		{
			Name = "MinimapUpdateTracking",
			Type = "Event",
			LiteralName = "MINIMAP_UPDATE_TRACKING",
		},
		{
			Name = "MinimapUpdateZoom",
			Type = "Event",
			LiteralName = "MINIMAP_UPDATE_ZOOM",
		},
	},

	Tables =
	{
		{
			Name = "MinimapScriptTrackingFilter",
			Type = "Structure",
			Fields =
			{
				{ Name = "spellID", Type = "number", Nilable = true },
				{ Name = "filterID", Type = "MinimapTrackingFilter", Nilable = true },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "MinimapFrameAPI",
	Type = "ScriptObject",

	Functions =
	{
		{
			Name = "GetPingPosition",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "positionX", Type = "number", Nilable = false },
				{ Name = "positionY", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetZoom",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "zoomFactor", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetZoomLevels",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "zoomLevels", Type = "number", Nilable = false },
			},
		},
		{
			Name = "PingLocation",
			Type = "Function",

			Arguments =
			{
				{ Name = "locationX", Type = "number", Nilable = false },
				{ Name = "locationY", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetArchBlobInsideAlpha",
			Type = "Function",

			Arguments =
			{
				{ Name = "alpha", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetArchBlobInsideTexture",
			Type = "Function",

			Arguments =
			{
				{ Name = "asset", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetArchBlobOutsideAlpha",
			Type = "Function",

			Arguments =
			{
				{ Name = "alpha", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetArchBlobOutsideTexture",
			Type = "Function",

			Arguments =
			{
				{ Name = "asset", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetArchBlobRingAlpha",
			Type = "Function",

			Arguments =
			{
				{ Name = "alpha", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetArchBlobRingScalar",
			Type = "Function",

			Arguments =
			{
				{ Name = "scalar", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetArchBlobRingTexture",
			Type = "Function",

			Arguments =
			{
				{ Name = "asset", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetBlipTexture",
			Type = "Function",

			Arguments =
			{
				{ Name = "asset", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetCorpsePOIArrowTexture",
			Type = "Function",

			Arguments =
			{
				{ Name = "asset", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetIconTexture",
			Type = "Function",

			Arguments =
			{
				{ Name = "asset", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetMaskTexture",
			Type = "Function",

			Arguments =
			{
				{ Name = "asset", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetPOIArrowTexture",
			Type = "Function",

			Arguments =
			{
				{ Name = "asset", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetPlayerTexture",
			Type = "Function",

			Arguments =
			{
				{ Name = "asset", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetQuestBlobInsideAlpha",
			Type = "Function",

			Arguments =
			{
				{ Name = "alpha", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetQuestBlobInsideTexture",
			Type = "Function",

			Arguments =
			{
				{ Name = "asset", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetQuestBlobOutsideAlpha",
			Type = "Function",

			Arguments =
			{
				{ Name = "alpha", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetQuestBlobOutsideTexture",
			Type = "Function",

			Arguments =
			{
				{ Name = "asset", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetQuestBlobRingAlpha",
			Type = "Function",

			Arguments =
			{
				{ Name = "alpha", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetQuestBlobRingScalar",
			Type = "Function",

			Arguments =
			{
				{ Name = "scalar", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetQuestBlobRingTexture",
			Type = "Function",

			Arguments =
			{
				{ Name = "asset", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetStaticPOIArrowTexture",
			Type = "Function",

			Arguments =
			{
				{ Name = "asset", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetTaskBlobInsideAlpha",
			Type = "Function",

			Arguments =
			{
				{ Name = "alpha", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetTaskBlobInsideTexture",
			Type = "Function",

			Arguments =
			{
				{ Name = "asset", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetTaskBlobOutsideAlpha",
			Type = "Function",

			Arguments =
			{
				{ Name = "alpha", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetTaskBlobOutsideTexture",
			Type = "Function",

			Arguments =
			{
				{ Name = "asset", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetTaskBlobRingAlpha",
			Type = "Function",

			Arguments =
			{
				{ Name = "alpha", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetTaskBlobRingScalar",
			Type = "Function",

			Arguments =
			{
				{ Name = "scalar", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetTaskBlobRingTexture",
			Type = "Function",

			Arguments =
			{
				{ Name = "asset", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetZoom",
			Type = "Function",

			Arguments =
			{
				{ Name = "zoomFactor", Type = "number", Nilable = false },
			},
		},
		{
			Name = "UpdateBlips",
			Type = "Function",

			Arguments =
			{
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "NamePlateManager",
	Type = "System",
	Namespace = "C_NamePlateManager",

	Functions =
	{
	},

	Events =
	{
		{
			Name = "ForbiddenNamePlateCreated",
			Type = "Event",
			LiteralName = "FORBIDDEN_NAME_PLATE_CREATED",
			Payload =
			{
				{ Name = "namePlateFrame", Type = "table", Nilable = false },
			},
		},
		{
			Name = "ForbiddenNamePlateUnitAdded",
			Type = "Event",
			LiteralName = "FORBIDDEN_NAME_PLATE_UNIT_ADDED",
			Payload =
			{
				{ Name = "unitToken", Type = "string", Nilable = false },
			},
		},
		{
			Name = "ForbiddenNamePlateUnitRemoved",
			Type = "Event",
			LiteralName = "FORBIDDEN_NAME_PLATE_UNIT_REMOVED",
			Payload =
			{
				{ Name = "unitToken", Type = "string", Nilable = false },
			},
		},
		{
			Name = "NamePlateCreated",
			Type = "Event",
			LiteralName = "NAME_PLATE_CREATED",
			Payload =
			{
				{ Name = "namePlateFrame", Type = "table", Nilable = false },
			},
		},
		{
			Name = "NamePlateUnitAdded",
			Type = "Event",
			LiteralName = "NAME_PLATE_UNIT_ADDED",
			Payload =
			{
				{ Name = "unitToken", Type = "string", Nilable = false },
			},
		},
		{
			Name = "NamePlateUnitRemoved",
			Type = "Event",
			LiteralName = "NAME_PLATE_UNIT_REMOVED",
			Payload =
			{
				{ Name = "unitToken", Type = "string", Nilable = false },
			},
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "PaperDollInfo",
	Type = "System",
	Namespace = "C_PaperDollInfo",

	Functions =
	{
		{
			Name = "GetArmorEffectiveness",
			Type = "Function",

			Arguments =
			{
				{ Name = "armor", Type = "number", Nilable = false },
				{ Name = "attackerLevel", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "effectiveness", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetArmorEffectivenessAgainstTarget",
			Type = "Function",

			Arguments =
			{
				{ Name = "armor", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "effectiveness", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetInspectAzeriteItemEmpoweredChoices",
			Type = "Function",

			Arguments =
			{
				{ Name = "unit", Type = "string", Nilable = false },
				{ Name = "equipmentSlotIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "azeritePowerIDs", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "GetInspectItemLevel",
			Type = "Function",

			Arguments =
			{
				{ Name = "unit", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "equippedItemLevel", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetMinItemLevel",
			Type = "Function",

			Returns =
			{
				{ Name = "minItemLevel", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetStaggerPercentage",
			Type = "Function",

			Arguments =
			{
				{ Name = "unit", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "stagger", Type = "number", Nilable = false },
				{ Name = "staggerAgainstTarget", Type = "number", Nilable = true },
			},
		},
		{
			Name = "OffhandHasShield",
			Type = "Function",

			Returns =
			{
				{ Name = "offhandHasShield", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "OffhandHasWeapon",
			Type = "Function",

			Returns =
			{
				{ Name = "offhandHasWeapon", Type = "bool", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "AvoidanceUpdate",
			Type = "Event",
			LiteralName = "AVOIDANCE_UPDATE",
		},
		{
			Name = "CharacterPointsChanged",
			Type = "Event",
			LiteralName = "CHARACTER_POINTS_CHANGED",
			Payload =
			{
				{ Name = "change", Type = "number", Nilable = false },
			},
		},
		{
			Name = "CharacterUpgradeSpellTierSet",
			Type = "Event",
			LiteralName = "CHARACTER_UPGRADE_SPELL_TIER_SET",
			Payload =
			{
				{ Name = "tierIndex", Type = "number", Nilable = false },
			},
		},
		{
			Name = "CombatRatingUpdate",
			Type = "Event",
			LiteralName = "COMBAT_RATING_UPDATE",
		},
		{
			Name = "DisableXpGain",
			Type = "Event",
			LiteralName = "DISABLE_XP_GAIN",
		},
		{
			Name = "EnableXpGain",
			Type = "Event",
			LiteralName = "ENABLE_XP_GAIN",
		},
		{
			Name = "EquipBindConfirm",
			Type = "Event",
			LiteralName = "EQUIP_BIND_CONFIRM",
			Payload =
			{
				{ Name = "slot", Type = "number", Nilable = false },
			},
		},
		{
			Name = "InspectHonorUpdate",
			Type = "Event",
			LiteralName = "INSPECT_HONOR_UPDATE",
		},
		{
			Name = "InspectReady",
			Type = "Event",
			LiteralName = "INSPECT_READY",
			Payload =
			{
				{ Name = "inspecteeGUID", Type = "string", Nilable = false },
			},
		},
		{
			Name = "LifestealUpdate",
			Type = "Event",
			LiteralName = "LIFESTEAL_UPDATE",
		},
		{
			Name = "MasteryUpdate",
			Type = "Event",
			LiteralName = "MASTERY_UPDATE",
		},
		{
			Name = "PetSpellPowerUpdate",
			Type = "Event",
			LiteralName = "PET_SPELL_POWER_UPDATE",
		},
		{
			Name = "PlayerAvgItemLevelUpdate",
			Type = "Event",
			LiteralName = "PLAYER_AVG_ITEM_LEVEL_UPDATE",
		},
		{
			Name = "PlayerEquipmentChanged",
			Type = "Event",
			LiteralName = "PLAYER_EQUIPMENT_CHANGED",
			Payload =
			{
				{ Name = "equipmentSlot", Type = "number", Nilable = false },
				{ Name = "hasCurrent", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "PvpPowerUpdate",
			Type = "Event",
			LiteralName = "PVP_POWER_UPDATE",
		},
		{
			Name = "SpeedUpdate",
			Type = "Event",
			LiteralName = "SPEED_UPDATE",
		},
		{
			Name = "SpellPowerChanged",
			Type = "Event",
			LiteralName = "SPELL_POWER_CHANGED",
		},
		{
			Name = "SturdinessUpdate",
			Type = "Event",
			LiteralName = "STURDINESS_UPDATE",
		},
		{
			Name = "UpdateFaction",
			Type = "Event",
			LiteralName = "UPDATE_FACTION",
		},
		{
			Name = "UpdateInventoryAlerts",
			Type = "Event",
			LiteralName = "UPDATE_INVENTORY_ALERTS",
		},
		{
			Name = "UpdateInventoryDurability",
			Type = "Event",
			LiteralName = "UPDATE_INVENTORY_DURABILITY",
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "PartyInfo",
	Type = "System",
	Namespace = "C_PartyInfo",

	Functions =
	{
		{
			Name = "AllowedToDoPartyConversion",
			Type = "Function",

			Arguments =
			{
				{ Name = "toRaid", Type = "bool", Nilable = false },
			},

			Returns =
			{
				{ Name = "allowed", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "CanFormCrossFactionParties",
			Type = "Function",

			Returns =
			{
				{ Name = "canFormCrossFactionParties", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "CanInvite",
			Type = "Function",

			Returns =
			{
				{ Name = "allowedToInvite", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ConfirmConvertToRaid",
			Type = "Function",
			Documentation = { "Immediately convert to raid with no regard for potentially destructive actions." },
		},
		{
			Name = "ConfirmInviteTravelPass",
			Type = "Function",

			Arguments =
			{
				{ Name = "targetName", Type = "string", Nilable = false },
				{ Name = "targetGUID", Type = "string", Nilable = false },
			},
		},
		{
			Name = "ConfirmInviteUnit",
			Type = "Function",
			Documentation = { "Immediately invites the named unit to a party, with no regard for potentially destructive actions." },

			Arguments =
			{
				{ Name = "targetName", Type = "string", Nilable = false },
			},
		},
		{
			Name = "ConfirmLeaveParty",
			Type = "Function",
			Documentation = { "Immediately leave the party with no regard for potentially destructive actions" },

			Arguments =
			{
				{ Name = "category", Type = "number", Nilable = true },
			},
		},
		{
			Name = "ConfirmRequestInviteFromUnit",
			Type = "Function",
			Documentation = { "Immediately request an invite into the target party, this is the confirmation function to call after RequestInviteFromUnit, or if you would like to skip the confirmation process." },

			Arguments =
			{
				{ Name = "targetName", Type = "string", Nilable = false },
				{ Name = "tank", Type = "bool", Nilable = true },
				{ Name = "healer", Type = "bool", Nilable = true },
				{ Name = "dps", Type = "bool", Nilable = true },
			},
		},
		{
			Name = "ConvertToParty",
			Type = "Function",
		},
		{
			Name = "ConvertToRaid",
			Type = "Function",
			Documentation = { "Usually this will convert to raid immediately. In some cases (e.g. PartySync) the user will be prompted to confirm converting to raid, because it's potentially destructive." },
		},
		{
			Name = "DoCountdown",
			Type = "Function",

			Arguments =
			{
				{ Name = "seconds", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetActiveCategories",
			Type = "Function",

			Returns =
			{
				{ Name = "categories", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "GetInviteConfirmationInvalidQueues",
			Type = "Function",

			Arguments =
			{
				{ Name = "inviteGUID", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "invalidQueues", Type = "table", InnerType = "QueueSpecificInfo", Nilable = false },
			},
		},
		{
			Name = "GetInviteReferralInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "inviteGUID", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "outReferredByGuid", Type = "string", Nilable = false },
				{ Name = "outReferredByName", Type = "string", Nilable = false },
				{ Name = "outRelationType", Type = "PartyRequestJoinRelation", Nilable = false },
				{ Name = "outIsQuickJoin", Type = "bool", Nilable = false },
				{ Name = "outClubId", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetMinLevel",
			Type = "Function",

			Arguments =
			{
				{ Name = "category", Type = "number", Nilable = true, Documentation = { "If not provided, the active party is used" } },
			},

			Returns =
			{
				{ Name = "minLevel", Type = "number", Nilable = false },
			},
		},
		{
			Name = "InviteUnit",
			Type = "Function",
			Documentation = { "Attempt to invite the named unit to a party, requires confirmation in some cases (e.g. the party will convert to a raid, or if there is a party sync in progress)." },

			Arguments =
			{
				{ Name = "targetName", Type = "string", Nilable = false },
			},
		},
		{
			Name = "IsCrossFactionParty",
			Type = "Function",

			Arguments =
			{
				{ Name = "category", Type = "number", Nilable = true, Documentation = { "If not provided, the active party is used" } },
			},

			Returns =
			{
				{ Name = "isCrossFactionParty", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsPartyFull",
			Type = "Function",

			Arguments =
			{
				{ Name = "category", Type = "number", Nilable = true, Documentation = { "If not provided, the active party is used" } },
			},

			Returns =
			{
				{ Name = "isFull", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsPartyInJailersTower",
			Type = "Function",

			Returns =
			{
				{ Name = "isPartyInJailersTower", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "LeaveParty",
			Type = "Function",
			Documentation = { "Usually this will leave the party immediately. In some cases (e.g. PartySync) the user will be prompted to confirm leaving the party, because it's potentially destructive" },

			Arguments =
			{
				{ Name = "category", Type = "number", Nilable = true },
			},
		},
		{
			Name = "RequestInviteFromUnit",
			Type = "Function",
			Documentation = { "Attempt to request an invite into the target party, requires confirmation in some cases (e.g. there is a party sync in progress)." },

			Arguments =
			{
				{ Name = "targetName", Type = "string", Nilable = false },
				{ Name = "tank", Type = "bool", Nilable = true },
				{ Name = "healer", Type = "bool", Nilable = true },
				{ Name = "dps", Type = "bool", Nilable = true },
			},
		},
	},

	Events =
	{
		{
			Name = "BnetRequestInviteConfirmation",
			Type = "Event",
			LiteralName = "BNET_REQUEST_INVITE_CONFIRMATION",
			Payload =
			{
				{ Name = "gameAccountID", Type = "number", Nilable = false },
				{ Name = "questSessionActive", Type = "bool", Nilable = false },
				{ Name = "tank", Type = "bool", Nilable = false },
				{ Name = "healer", Type = "bool", Nilable = false },
				{ Name = "dps", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ConvertToRaidConfirmation",
			Type = "Event",
			LiteralName = "CONVERT_TO_RAID_CONFIRMATION",
		},
		{
			Name = "EnteredDifferentInstanceFromParty",
			Type = "Event",
			LiteralName = "ENTERED_DIFFERENT_INSTANCE_FROM_PARTY",
		},
		{
			Name = "GroupFormed",
			Type = "Event",
			LiteralName = "GROUP_FORMED",
			Payload =
			{
				{ Name = "category", Type = "number", Nilable = false },
				{ Name = "partyGUID", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GroupInviteConfirmation",
			Type = "Event",
			LiteralName = "GROUP_INVITE_CONFIRMATION",
		},
		{
			Name = "GroupJoined",
			Type = "Event",
			LiteralName = "GROUP_JOINED",
			Payload =
			{
				{ Name = "category", Type = "number", Nilable = false },
				{ Name = "partyGUID", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GroupLeft",
			Type = "Event",
			LiteralName = "GROUP_LEFT",
			Payload =
			{
				{ Name = "category", Type = "number", Nilable = false },
				{ Name = "partyGUID", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GroupRosterUpdate",
			Type = "Event",
			LiteralName = "GROUP_ROSTER_UPDATE",
		},
		{
			Name = "InstanceBootStart",
			Type = "Event",
			LiteralName = "INSTANCE_BOOT_START",
		},
		{
			Name = "InstanceBootStop",
			Type = "Event",
			LiteralName = "INSTANCE_BOOT_STOP",
		},
		{
			Name = "InstanceGroupSizeChanged",
			Type = "Event",
			LiteralName = "INSTANCE_GROUP_SIZE_CHANGED",
		},
		{
			Name = "InviteToPartyConfirmation",
			Type = "Event",
			LiteralName = "INVITE_TO_PARTY_CONFIRMATION",
			Payload =
			{
				{ Name = "targetName", Type = "string", Nilable = false },
				{ Name = "willConvertToRaid", Type = "bool", Nilable = false },
				{ Name = "questSessionActive", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "InviteTravelPassConfirmation",
			Type = "Event",
			LiteralName = "INVITE_TRAVEL_PASS_CONFIRMATION",
			Payload =
			{
				{ Name = "targetName", Type = "string", Nilable = false },
				{ Name = "targetGUID", Type = "string", Nilable = false },
				{ Name = "willConvertToRaid", Type = "bool", Nilable = false },
				{ Name = "questSessionActive", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "LeavePartyConfirmation",
			Type = "Event",
			LiteralName = "LEAVE_PARTY_CONFIRMATION",
		},
		{
			Name = "PartyInviteCancel",
			Type = "Event",
			LiteralName = "PARTY_INVITE_CANCEL",
		},
		{
			Name = "PartyInviteRequest",
			Type = "Event",
			LiteralName = "PARTY_INVITE_REQUEST",
			Payload =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "isTank", Type = "bool", Nilable = false },
				{ Name = "isHealer", Type = "bool", Nilable = false },
				{ Name = "isDamage", Type = "bool", Nilable = false },
				{ Name = "isNativeRealm", Type = "bool", Nilable = false },
				{ Name = "allowMultipleRoles", Type = "bool", Nilable = false },
				{ Name = "inviterGUID", Type = "string", Nilable = false },
				{ Name = "questSessionActive", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "PartyLeaderChanged",
			Type = "Event",
			LiteralName = "PARTY_LEADER_CHANGED",
		},
		{
			Name = "PartyLfgRestricted",
			Type = "Event",
			LiteralName = "PARTY_LFG_RESTRICTED",
		},
		{
			Name = "PartyLootMethodChanged",
			Type = "Event",
			LiteralName = "PARTY_LOOT_METHOD_CHANGED",
		},
		{
			Name = "PartyMemberDisable",
			Type = "Event",
			LiteralName = "PARTY_MEMBER_DISABLE",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "PartyMemberEnable",
			Type = "Event",
			LiteralName = "PARTY_MEMBER_ENABLE",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "PlayerDifficultyChanged",
			Type = "Event",
			LiteralName = "PLAYER_DIFFICULTY_CHANGED",
		},
		{
			Name = "PlayerRolesAssigned",
			Type = "Event",
			LiteralName = "PLAYER_ROLES_ASSIGNED",
		},
		{
			Name = "RaidRosterUpdate",
			Type = "Event",
			LiteralName = "RAID_ROSTER_UPDATE",
		},
		{
			Name = "ReadyCheck",
			Type = "Event",
			LiteralName = "READY_CHECK",
			Payload =
			{
				{ Name = "initiatorName", Type = "string", Nilable = false },
				{ Name = "readyCheckTimeLeft", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ReadyCheckConfirm",
			Type = "Event",
			LiteralName = "READY_CHECK_CONFIRM",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
				{ Name = "isReady", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ReadyCheckFinished",
			Type = "Event",
			LiteralName = "READY_CHECK_FINISHED",
			Payload =
			{
				{ Name = "preempted", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "RequestInviteConfirmation",
			Type = "Event",
			LiteralName = "REQUEST_INVITE_CONFIRMATION",
			Payload =
			{
				{ Name = "targetName", Type = "string", Nilable = false },
				{ Name = "partyLevelLink", Type = "number", Nilable = false },
				{ Name = "questSessionActive", Type = "bool", Nilable = false },
				{ Name = "tank", Type = "bool", Nilable = true },
				{ Name = "healer", Type = "bool", Nilable = true },
				{ Name = "dps", Type = "bool", Nilable = true },
			},
		},
		{
			Name = "RoleChangedInform",
			Type = "Event",
			LiteralName = "ROLE_CHANGED_INFORM",
			Payload =
			{
				{ Name = "changedName", Type = "string", Nilable = false },
				{ Name = "fromName", Type = "string", Nilable = false },
				{ Name = "oldRole", Type = "string", Nilable = false },
				{ Name = "newRole", Type = "string", Nilable = false },
			},
		},
		{
			Name = "RolePollBegin",
			Type = "Event",
			LiteralName = "ROLE_POLL_BEGIN",
			Payload =
			{
				{ Name = "fromName", Type = "string", Nilable = false },
			},
		},
		{
			Name = "VoteKickReasonNeeded",
			Type = "Event",
			LiteralName = "VOTE_KICK_REASON_NEEDED",
			Payload =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "resultGUID", Type = "string", Nilable = false },
			},
		},
	},

	Tables =
	{
		{
			Name = "PartyRequestJoinRelation",
			Type = "Enumeration",
			NumValues = 5,
			MinValue = 0,
			MaxValue = 4,
			Fields =
			{
				{ Name = "None", Type = "PartyRequestJoinRelation", EnumValue = 0 },
				{ Name = "Friend", Type = "PartyRequestJoinRelation", EnumValue = 1 },
				{ Name = "Guild", Type = "PartyRequestJoinRelation", EnumValue = 2 },
				{ Name = "Club", Type = "PartyRequestJoinRelation", EnumValue = 3 },
				{ Name = "NumPartyRequestJoinRelations", Type = "PartyRequestJoinRelation", EnumValue = 4 },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "PartyPose",
	Type = "System",
	Namespace = "C_PartyPose",

	Functions =
	{
		{
			Name = "GetPartyPoseInfoByMapID",
			Type = "Function",

			Arguments =
			{
				{ Name = "mapID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "info", Type = "PartyPoseInfo", Nilable = false },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
		{
			Name = "PartyPoseInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "partyPoseID", Type = "number", Nilable = false },
				{ Name = "mapID", Type = "number", Nilable = false },
				{ Name = "widgetSetID", Type = "number", Nilable = true },
				{ Name = "victoryModelSceneID", Type = "number", Nilable = false },
				{ Name = "defeatModelSceneID", Type = "number", Nilable = false },
				{ Name = "victorySoundKitID", Type = "number", Nilable = false },
				{ Name = "defeatSoundKitID", Type = "number", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "PetInfo",
	Type = "System",
	Namespace = "C_PetInfo",

	Functions =
	{
		{
			Name = "GetPetTamersForMap",
			Type = "Function",

			Arguments =
			{
				{ Name = "uiMapID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "petTamers", Type = "table", InnerType = "PetTamerMapInfo", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "PetAttackStart",
			Type = "Event",
			LiteralName = "PET_ATTACK_START",
		},
		{
			Name = "PetAttackStop",
			Type = "Event",
			LiteralName = "PET_ATTACK_STOP",
		},
		{
			Name = "PetBarHidegrid",
			Type = "Event",
			LiteralName = "PET_BAR_HIDEGRID",
		},
		{
			Name = "PetBarShowgrid",
			Type = "Event",
			LiteralName = "PET_BAR_SHOWGRID",
		},
		{
			Name = "PetBarUpdateCooldown",
			Type = "Event",
			LiteralName = "PET_BAR_UPDATE_COOLDOWN",
		},
		{
			Name = "PetDismissStart",
			Type = "Event",
			LiteralName = "PET_DISMISS_START",
			Payload =
			{
				{ Name = "delay", Type = "number", Nilable = false },
			},
		},
		{
			Name = "PetForceNameDeclension",
			Type = "Event",
			LiteralName = "PET_FORCE_NAME_DECLENSION",
			Payload =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "declinedName1", Type = "string", Nilable = true },
				{ Name = "declinedName2", Type = "string", Nilable = true },
				{ Name = "declinedName3", Type = "string", Nilable = true },
				{ Name = "declinedName4", Type = "string", Nilable = true },
				{ Name = "declinedName5", Type = "string", Nilable = true },
			},
		},
		{
			Name = "PetUiClose",
			Type = "Event",
			LiteralName = "PET_UI_CLOSE",
		},
		{
			Name = "RaisedAsGhoul",
			Type = "Event",
			LiteralName = "RAISED_AS_GHOUL",
		},
		{
			Name = "UpdatePossessBar",
			Type = "Event",
			LiteralName = "UPDATE_POSSESS_BAR",
		},
		{
			Name = "UpdateVehicleActionbar",
			Type = "Event",
			LiteralName = "UPDATE_VEHICLE_ACTIONBAR",
		},
	},

	Tables =
	{
		{
			Name = "PetTamerMapInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "areaPoiID", Type = "number", Nilable = false },
				{ Name = "position", Type = "table", Mixin = "Vector2DMixin", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "atlasName", Type = "string", Nilable = true },
				{ Name = "textureIndex", Type = "number", Nilable = true },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "PetJournalInfo",
	Type = "System",
	Namespace = "C_PetJournal",

	Functions =
	{
		{
			Name = "GetDisplayIDByIndex",
			Type = "Function",

			Arguments =
			{
				{ Name = "speciesID", Type = "number", Nilable = false },
				{ Name = "index", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "displayID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetDisplayProbabilityByIndex",
			Type = "Function",

			Arguments =
			{
				{ Name = "speciesID", Type = "number", Nilable = false },
				{ Name = "index", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "displayProbability", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetNumDisplays",
			Type = "Function",

			Arguments =
			{
				{ Name = "speciesID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "numDisplays", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetPetAbilityInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "abilityID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "icon", Type = "number", Nilable = false },
				{ Name = "petType", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetPetAbilityListTable",
			Type = "Function",

			Arguments =
			{
				{ Name = "speciesID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "info", Type = "table", InnerType = "PetAbilityLevelInfo", Nilable = false },
			},
		},
		{
			Name = "GetPetInfoTableByPetID",
			Type = "Function",

			Arguments =
			{
				{ Name = "petID", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "info", Type = "PetJournalPetInfo", Nilable = false },
			},
		},
		{
			Name = "GetPetLoadOutInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "slot", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "petID", Type = "string", Nilable = true },
				{ Name = "ability1ID", Type = "number", Nilable = false },
				{ Name = "ability2ID", Type = "number", Nilable = false },
				{ Name = "ability3ID", Type = "number", Nilable = false },
				{ Name = "locked", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetPetSummonInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "battlePetGUID", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "isSummonable", Type = "bool", Nilable = false },
				{ Name = "error", Type = "PetJournalError", Nilable = false },
				{ Name = "errorText", Type = "string", Nilable = false },
			},
		},
		{
			Name = "HasFavoritePets",
			Type = "Function",

			Returns =
			{
				{ Name = "hasFavorites", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsUsingDefaultFilters",
			Type = "Function",

			Returns =
			{
				{ Name = "isUsingDefaultFilters", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "PetIsSummonable",
			Type = "Function",

			Arguments =
			{
				{ Name = "battlePetGUID", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "isSummonable", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "PetUsesRandomDisplay",
			Type = "Function",

			Arguments =
			{
				{ Name = "speciesID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "usesRandomDisplay", Type = "bool", Nilable = true },
			},
		},
		{
			Name = "SetDefaultFilters",
			Type = "Function",
		},
		{
			Name = "SpellTargetBattlePet",
			Type = "Function",

			Arguments =
			{
				{ Name = "battlePetGUID", Type = "string", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "BattlepetForceNameDeclension",
			Type = "Event",
			LiteralName = "BATTLEPET_FORCE_NAME_DECLENSION",
			Payload =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "battlePetGUID", Type = "string", Nilable = false },
			},
		},
		{
			Name = "CompanionLearned",
			Type = "Event",
			LiteralName = "COMPANION_LEARNED",
		},
		{
			Name = "CompanionUnlearned",
			Type = "Event",
			LiteralName = "COMPANION_UNLEARNED",
		},
		{
			Name = "CompanionUpdate",
			Type = "Event",
			LiteralName = "COMPANION_UPDATE",
			Payload =
			{
				{ Name = "companionType", Type = "string", Nilable = true },
			},
		},
		{
			Name = "NewPetAdded",
			Type = "Event",
			LiteralName = "NEW_PET_ADDED",
			Payload =
			{
				{ Name = "battlePetGUID", Type = "string", Nilable = false },
			},
		},
		{
			Name = "PetJournalAutoSlottedPet",
			Type = "Event",
			LiteralName = "PET_JOURNAL_AUTO_SLOTTED_PET",
			Payload =
			{
				{ Name = "slotIndex", Type = "number", Nilable = false },
				{ Name = "battlePetGUID", Type = "string", Nilable = false },
			},
		},
		{
			Name = "PetJournalCageFailed",
			Type = "Event",
			LiteralName = "PET_JOURNAL_CAGE_FAILED",
		},
		{
			Name = "PetJournalListUpdate",
			Type = "Event",
			LiteralName = "PET_JOURNAL_LIST_UPDATE",
		},
		{
			Name = "PetJournalNewBattleSlot",
			Type = "Event",
			LiteralName = "PET_JOURNAL_NEW_BATTLE_SLOT",
		},
		{
			Name = "PetJournalPetDeleted",
			Type = "Event",
			LiteralName = "PET_JOURNAL_PET_DELETED",
			Payload =
			{
				{ Name = "battlePetGUID", Type = "string", Nilable = false },
			},
		},
		{
			Name = "PetJournalPetRestored",
			Type = "Event",
			LiteralName = "PET_JOURNAL_PET_RESTORED",
			Payload =
			{
				{ Name = "battlePetGUID", Type = "string", Nilable = false },
			},
		},
		{
			Name = "PetJournalPetRevoked",
			Type = "Event",
			LiteralName = "PET_JOURNAL_PET_REVOKED",
			Payload =
			{
				{ Name = "battlePetGUID", Type = "string", Nilable = false },
			},
		},
		{
			Name = "PetJournalPetsHealed",
			Type = "Event",
			LiteralName = "PET_JOURNAL_PETS_HEALED",
		},
		{
			Name = "PetJournalTrapLevelSet",
			Type = "Event",
			LiteralName = "PET_JOURNAL_TRAP_LEVEL_SET",
			Payload =
			{
				{ Name = "trapLevel", Type = "number", Nilable = false },
			},
		},
		{
			Name = "UpdateSummonpetsAction",
			Type = "Event",
			LiteralName = "UPDATE_SUMMONPETS_ACTION",
		},
	},

	Tables =
	{
		{
			Name = "PetJournalError",
			Type = "Enumeration",
			NumValues = 7,
			MinValue = 0,
			MaxValue = 6,
			Fields =
			{
				{ Name = "None", Type = "PetJournalError", EnumValue = 0 },
				{ Name = "PetIsDead", Type = "PetJournalError", EnumValue = 1 },
				{ Name = "JournalIsLocked", Type = "PetJournalError", EnumValue = 2 },
				{ Name = "InvalidFaction", Type = "PetJournalError", EnumValue = 3 },
				{ Name = "NoFavoritesToSummon", Type = "PetJournalError", EnumValue = 4 },
				{ Name = "NoValidRandomSummon", Type = "PetJournalError", EnumValue = 5 },
				{ Name = "InvalidCovenant", Type = "PetJournalError", EnumValue = 6 },
			},
		},
		{
			Name = "PetAbilityLevelInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "abilityID", Type = "number", Nilable = false },
				{ Name = "level", Type = "number", Nilable = false },
			},
		},
		{
			Name = "PetJournalPetInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "speciesID", Type = "number", Nilable = false },
				{ Name = "customName", Type = "string", Nilable = true },
				{ Name = "petLevel", Type = "number", Nilable = false },
				{ Name = "xp", Type = "number", Nilable = false },
				{ Name = "maxXP", Type = "number", Nilable = false },
				{ Name = "displayID", Type = "number", Nilable = false },
				{ Name = "isFavorite", Type = "bool", Nilable = false },
				{ Name = "icon", Type = "number", Nilable = false },
				{ Name = "petType", Type = "number", Nilable = false },
				{ Name = "creatureID", Type = "number", Nilable = false },
				{ Name = "name", Type = "string", Nilable = true },
				{ Name = "sourceText", Type = "string", Nilable = false },
				{ Name = "description", Type = "string", Nilable = false },
				{ Name = "isWild", Type = "bool", Nilable = false },
				{ Name = "canBattle", Type = "bool", Nilable = false },
				{ Name = "tradable", Type = "bool", Nilable = false },
				{ Name = "unique", Type = "bool", Nilable = false },
				{ Name = "obtainable", Type = "bool", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "Platform",
	Type = "System",
	Namespace = "C_Platform",

	Functions =
	{
	},

	Events =
	{
	},

	Tables =
	{
		{
			Name = "ClientPlatformType",
			Type = "Enumeration",
			NumValues = 2,
			MinValue = 0,
			MaxValue = 1,
			Fields =
			{
				{ Name = "Windows", Type = "ClientPlatformType", EnumValue = 0 },
				{ Name = "Macintosh", Type = "ClientPlatformType", EnumValue = 1 },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "PlayerInfo",
	Type = "System",
	Namespace = "C_PlayerInfo",

	Functions =
	{
		{
			Name = "CanPlayerEnterChromieTime",
			Type = "Function",

			Returns =
			{
				{ Name = "canEnter", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "CanPlayerUseAreaLoot",
			Type = "Function",

			Returns =
			{
				{ Name = "canUseAreaLoot", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "CanPlayerUseMountEquipment",
			Type = "Function",

			Returns =
			{
				{ Name = "canUseMountEquipment", Type = "bool", Nilable = false },
				{ Name = "failureReason", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetAlternateFormInfo",
			Type = "Function",

			Returns =
			{
				{ Name = "hasAlternateForm", Type = "bool", Nilable = false },
				{ Name = "inAlternateForm", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetContentDifficultyCreatureForPlayer",
			Type = "Function",

			Arguments =
			{
				{ Name = "unitToken", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "difficulty", Type = "RelativeContentDifficulty", Nilable = false },
			},
		},
		{
			Name = "GetContentDifficultyQuestForPlayer",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "difficulty", Type = "RelativeContentDifficulty", Nilable = false },
			},
		},
		{
			Name = "GetInstancesUnlockedAtLevel",
			Type = "Function",

			Arguments =
			{
				{ Name = "level", Type = "number", Nilable = false },
				{ Name = "isRaid", Type = "bool", Nilable = false },
			},

			Returns =
			{
				{ Name = "dungeonID", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "GetPlayerMythicPlusRatingSummary",
			Type = "Function",
			Documentation = { "Returns the players mythic+ rating summary which includes the runs they've completed as well as their current season m+ rating" },

			Arguments =
			{
				{ Name = "playerToken", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "ratingSummary", Type = "MythicPlusRatingSummary", Nilable = false },
			},
		},
		{
			Name = "IsPlayerEligibleForNPE",
			Type = "Function",

			Returns =
			{
				{ Name = "isEligible", Type = "bool", Nilable = false },
				{ Name = "failureReason", Type = "string", Nilable = false },
			},
		},
		{
			Name = "IsPlayerEligibleForNPEv2",
			Type = "Function",

			Returns =
			{
				{ Name = "isEligible", Type = "bool", Nilable = false },
				{ Name = "failureReason", Type = "string", Nilable = false },
			},
		},
		{
			Name = "IsPlayerInChromieTime",
			Type = "Function",

			Returns =
			{
				{ Name = "inChromieTime", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsPlayerNPERestricted",
			Type = "Function",

			Returns =
			{
				{ Name = "isRestricted", Type = "bool", Nilable = false },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
		{
			Name = "MythicPlusRatingMapSummary",
			Type = "Structure",
			Documentation = { "Specific information about a completed mythic plus run." },
			Fields =
			{
				{ Name = "challengeModeID", Type = "number", Nilable = false },
				{ Name = "mapScore", Type = "number", Nilable = false },
				{ Name = "bestRunLevel", Type = "number", Nilable = false },
				{ Name = "bestRunDurationMS", Type = "number", Nilable = false },
				{ Name = "finishedSuccess", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "MythicPlusRatingSummary",
			Type = "Structure",
			Documentation = { "The current season rating and well as a list of completed mythic plus runs." },
			Fields =
			{
				{ Name = "currentSeasonScore", Type = "number", Nilable = false },
				{ Name = "runs", Type = "table", InnerType = "MythicPlusRatingMapSummary", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "PlayerLocationInfo",
	Type = "System",
	Namespace = "C_PlayerInfo",

	Functions =
	{
		{
			Name = "GUIDIsPlayer",
			Type = "Function",

			Arguments =
			{
				{ Name = "guid", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "isPlayer", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetClass",
			Type = "Function",

			Arguments =
			{
				{ Name = "playerLocation", Type = "table", Mixin = "PlayerLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "className", Type = "string", Nilable = true },
				{ Name = "classFilename", Type = "string", Nilable = true },
				{ Name = "classID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetName",
			Type = "Function",

			Arguments =
			{
				{ Name = "playerLocation", Type = "table", Mixin = "PlayerLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "name", Type = "string", Nilable = true },
			},
		},
		{
			Name = "GetRace",
			Type = "Function",

			Arguments =
			{
				{ Name = "playerLocation", Type = "table", Mixin = "PlayerLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "raceID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetSex",
			Type = "Function",

			Arguments =
			{
				{ Name = "playerLocation", Type = "table", Mixin = "PlayerLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "sex", Type = "number", Nilable = true },
			},
		},
		{
			Name = "IsConnected",
			Type = "Function",

			Arguments =
			{
				{ Name = "playerLocation", Type = "table", Mixin = "PlayerLocationMixin", Nilable = true },
			},

			Returns =
			{
				{ Name = "isConnected", Type = "bool", Nilable = true },
			},
		},
		{
			Name = "UnitIsSameServer",
			Type = "Function",

			Arguments =
			{
				{ Name = "playerLocation", Type = "table", Mixin = "PlayerLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "unitIsSameServer", Type = "bool", Nilable = false },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "PvpInfo",
	Type = "System",
	Namespace = "C_PvP",

	Functions =
	{
		{
			Name = "CanDisplayDamage",
			Type = "Function",

			Returns =
			{
				{ Name = "canDisplay", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "CanDisplayDeaths",
			Type = "Function",

			Returns =
			{
				{ Name = "canDisplay", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "CanDisplayHealing",
			Type = "Function",

			Returns =
			{
				{ Name = "canDisplay", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "CanDisplayHonorableKills",
			Type = "Function",

			Returns =
			{
				{ Name = "canDisplay", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "CanDisplayKillingBlows",
			Type = "Function",

			Returns =
			{
				{ Name = "canDisplay", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "CanPlayerUseRatedPVPUI",
			Type = "Function",

			Returns =
			{
				{ Name = "canUse", Type = "bool", Nilable = false },
				{ Name = "failureReason", Type = "string", Nilable = false },
			},
		},
		{
			Name = "CanToggleWarMode",
			Type = "Function",

			Arguments =
			{
				{ Name = "toggle", Type = "bool", Nilable = false },
			},

			Returns =
			{
				{ Name = "canTogglePvP", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "CanToggleWarModeInArea",
			Type = "Function",

			Returns =
			{
				{ Name = "canTogglePvPInArea", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "DoesMatchOutcomeAffectRating",
			Type = "Function",

			Returns =
			{
				{ Name = "doesAffect", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetActiveBrawlInfo",
			Type = "Function",

			Returns =
			{
				{ Name = "brawlInfo", Type = "PvpBrawlInfo", Nilable = true },
			},
		},
		{
			Name = "GetActiveMatchBracket",
			Type = "Function",

			Returns =
			{
				{ Name = "bracket", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetActiveMatchDuration",
			Type = "Function",

			Returns =
			{
				{ Name = "seconds", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetActiveMatchState",
			Type = "Function",

			Returns =
			{
				{ Name = "state", Type = "PvPMatchState", Nilable = false },
			},
		},
		{
			Name = "GetActiveMatchWinner",
			Type = "Function",

			Returns =
			{
				{ Name = "winner", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetArenaCrowdControlInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "playerToken", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "spellID", Type = "number", Nilable = false },
				{ Name = "startTime", Type = "number", Nilable = false },
				{ Name = "duration", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetArenaRewards",
			Type = "Function",

			Arguments =
			{
				{ Name = "teamSize", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "honor", Type = "number", Nilable = false },
				{ Name = "experience", Type = "number", Nilable = false },
				{ Name = "itemRewards", Type = "table", InnerType = "BattlefieldItemReward", Nilable = true },
				{ Name = "currencyRewards", Type = "table", InnerType = "BattlefieldCurrencyReward", Nilable = true },
			},
		},
		{
			Name = "GetArenaSkirmishRewards",
			Type = "Function",

			Returns =
			{
				{ Name = "honor", Type = "number", Nilable = false },
				{ Name = "experience", Type = "number", Nilable = false },
				{ Name = "itemRewards", Type = "table", InnerType = "BattlefieldItemReward", Nilable = true },
				{ Name = "currencyRewards", Type = "table", InnerType = "BattlefieldCurrencyReward", Nilable = true },
			},
		},
		{
			Name = "GetAvailableBrawlInfo",
			Type = "Function",
			Documentation = { "If nil is returned, PVP_BRAWL_INFO_UPDATED event will be sent when the data is ready." },

			Returns =
			{
				{ Name = "brawlInfo", Type = "PvpBrawlInfo", Nilable = true },
			},
		},
		{
			Name = "GetBattlefieldFlagPosition",
			Type = "Function",

			Arguments =
			{
				{ Name = "flagIndex", Type = "number", Nilable = false },
				{ Name = "uiMapId", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "uiPosx", Type = "number", Nilable = true },
				{ Name = "uiPosy", Type = "number", Nilable = true },
				{ Name = "flagTexture", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetBattlefieldVehicleInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "vehicleIndex", Type = "number", Nilable = false },
				{ Name = "uiMapID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "info", Type = "BattlefieldVehicleInfo", Nilable = false },
			},
		},
		{
			Name = "GetBattlefieldVehicles",
			Type = "Function",

			Arguments =
			{
				{ Name = "uiMapID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "vehicles", Type = "table", InnerType = "BattlefieldVehicleInfo", Nilable = false },
			},
		},
		{
			Name = "GetBrawlRewards",
			Type = "Function",

			Arguments =
			{
				{ Name = "brawlType", Type = "BrawlType", Nilable = false },
			},

			Returns =
			{
				{ Name = "honor", Type = "number", Nilable = false },
				{ Name = "experience", Type = "number", Nilable = false },
				{ Name = "itemRewards", Type = "table", InnerType = "BattlefieldItemReward", Nilable = true },
				{ Name = "currencyRewards", Type = "table", InnerType = "BattlefieldCurrencyReward", Nilable = true },
				{ Name = "hasWon", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetCustomVictoryStatID",
			Type = "Function",

			Returns =
			{
				{ Name = "statID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetGlobalPvpScalingInfoForSpecID",
			Type = "Function",

			Arguments =
			{
				{ Name = "specializationID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "pvpScalingData", Type = "table", InnerType = "PvpScalingData", Nilable = false },
			},
		},
		{
			Name = "GetHonorRewardInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "honorLevel", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "info", Type = "HonorRewardInfo", Nilable = true },
			},
		},
		{
			Name = "GetLevelUpBattlegrounds",
			Type = "Function",

			Arguments =
			{
				{ Name = "level", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "battlefields", Type = "table", InnerType = "LevelUpBattlegroundInfo", Nilable = false },
			},
		},
		{
			Name = "GetMatchPVPStatColumn",
			Type = "Function",

			Arguments =
			{
				{ Name = "pvpStatID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "info", Type = "MatchPVPStatColumn", Nilable = true },
			},
		},
		{
			Name = "GetMatchPVPStatColumns",
			Type = "Function",

			Returns =
			{
				{ Name = "columns", Type = "table", InnerType = "MatchPVPStatColumn", Nilable = false },
			},
		},
		{
			Name = "GetNextHonorLevelForReward",
			Type = "Function",

			Arguments =
			{
				{ Name = "honorLevel", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "nextHonorLevelWithReward", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetOutdoorPvPWaitTime",
			Type = "Function",

			Arguments =
			{
				{ Name = "uiMapID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "pvpWaitTime", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetPVPActiveMatchPersonalRatedInfo",
			Type = "Function",

			Returns =
			{
				{ Name = "info", Type = "PVPPersonalRatedInfo", Nilable = true },
			},
		},
		{
			Name = "GetPVPSeasonRewardAchievementID",
			Type = "Function",

			Returns =
			{
				{ Name = "achievementID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetPostMatchCurrencyRewards",
			Type = "Function",

			Returns =
			{
				{ Name = "rewards", Type = "table", InnerType = "PVPPostMatchCurrencyReward", Nilable = false },
			},
		},
		{
			Name = "GetPostMatchItemRewards",
			Type = "Function",

			Returns =
			{
				{ Name = "rewards", Type = "table", InnerType = "PVPPostMatchItemReward", Nilable = false },
			},
		},
		{
			Name = "GetPvpTierID",
			Type = "Function",

			Arguments =
			{
				{ Name = "tierEnum", Type = "number", Nilable = false },
				{ Name = "bracketEnum", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "id", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetPvpTierInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "tierID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "pvpTierInfo", Type = "PvpTierInfo", Nilable = true },
			},
		},
		{
			Name = "GetRandomBGInfo",
			Type = "Function",

			Returns =
			{
				{ Name = "info", Type = "RandomBGInfo", Nilable = false },
			},
		},
		{
			Name = "GetRandomBGRewards",
			Type = "Function",

			Returns =
			{
				{ Name = "honor", Type = "number", Nilable = false },
				{ Name = "experience", Type = "number", Nilable = false },
				{ Name = "itemRewards", Type = "table", InnerType = "BattlefieldItemReward", Nilable = true },
				{ Name = "currencyRewards", Type = "table", InnerType = "BattlefieldCurrencyReward", Nilable = true },
			},
		},
		{
			Name = "GetRandomEpicBGInfo",
			Type = "Function",

			Returns =
			{
				{ Name = "info", Type = "RandomBGInfo", Nilable = false },
			},
		},
		{
			Name = "GetRandomEpicBGRewards",
			Type = "Function",

			Returns =
			{
				{ Name = "honor", Type = "number", Nilable = false },
				{ Name = "experience", Type = "number", Nilable = false },
				{ Name = "itemRewards", Type = "table", InnerType = "BattlefieldItemReward", Nilable = true },
				{ Name = "currencyRewards", Type = "table", InnerType = "BattlefieldCurrencyReward", Nilable = true },
			},
		},
		{
			Name = "GetRatedBGRewards",
			Type = "Function",

			Returns =
			{
				{ Name = "honor", Type = "number", Nilable = false },
				{ Name = "experience", Type = "number", Nilable = false },
				{ Name = "itemRewards", Type = "table", InnerType = "BattlefieldItemReward", Nilable = true },
				{ Name = "currencyRewards", Type = "table", InnerType = "BattlefieldCurrencyReward", Nilable = true },
			},
		},
		{
			Name = "GetRewardItemLevelsByTierEnum",
			Type = "Function",

			Arguments =
			{
				{ Name = "pvpTierEnum", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "activityItemLevel", Type = "number", Nilable = false },
				{ Name = "weeklyItemLevel", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetScoreInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "offsetIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "info", Type = "PVPScoreInfo", Nilable = true },
			},
		},
		{
			Name = "GetScoreInfoByPlayerGuid",
			Type = "Function",

			Arguments =
			{
				{ Name = "guid", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "info", Type = "PVPScoreInfo", Nilable = true },
			},
		},
		{
			Name = "GetSeasonBestInfo",
			Type = "Function",

			Returns =
			{
				{ Name = "tierID", Type = "number", Nilable = false },
				{ Name = "nextTierID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetSkirmishInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "pvpBracket", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "battlemasterListInfo", Type = "BattlemasterListInfo", Nilable = false },
			},
		},
		{
			Name = "GetSpecialEventBrawlInfo",
			Type = "Function",

			Returns =
			{
				{ Name = "brawlInfo", Type = "PvpBrawlInfo", Nilable = true },
			},
		},
		{
			Name = "GetTeamInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "factionIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "info", Type = "PVPTeamInfo", Nilable = true },
			},
		},
		{
			Name = "GetWarModeRewardBonus",
			Type = "Function",

			Returns =
			{
				{ Name = "rewardBonus", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetWarModeRewardBonusDefault",
			Type = "Function",

			Returns =
			{
				{ Name = "defaultBonus", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetWeeklyChestInfo",
			Type = "Function",

			Returns =
			{
				{ Name = "rewardAchieved", Type = "bool", Nilable = false },
				{ Name = "lastWeekRewardAchieved", Type = "bool", Nilable = false },
				{ Name = "lastWeekRewardClaimed", Type = "bool", Nilable = false },
				{ Name = "pvpTierMaxFromWins", Type = "number", Nilable = false },
			},
		},
		{
			Name = "HasArenaSkirmishWinToday",
			Type = "Function",

			Returns =
			{
				{ Name = "hasArenaSkirmishWinToday", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsActiveBattlefield",
			Type = "Function",

			Returns =
			{
				{ Name = "isActiveBattlefield", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsActiveMatchRegistered",
			Type = "Function",

			Returns =
			{
				{ Name = "registered", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsArena",
			Type = "Function",

			Returns =
			{
				{ Name = "isArena", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsBattleground",
			Type = "Function",

			Returns =
			{
				{ Name = "isBattleground", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsBattlegroundEnlistmentBonusActive",
			Type = "Function",

			Returns =
			{
				{ Name = "battlegroundActive", Type = "bool", Nilable = false },
				{ Name = "brawlActive", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsInBrawl",
			Type = "Function",

			Returns =
			{
				{ Name = "isInBrawl", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsMatchConsideredArena",
			Type = "Function",

			Returns =
			{
				{ Name = "asArena", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsMatchFactional",
			Type = "Function",

			Returns =
			{
				{ Name = "isFactional", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsPVPMap",
			Type = "Function",

			Returns =
			{
				{ Name = "isPVPMap", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsRatedArena",
			Type = "Function",

			Returns =
			{
				{ Name = "isRatedArena", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsRatedBattleground",
			Type = "Function",

			Returns =
			{
				{ Name = "isRatedBattleground", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsRatedMap",
			Type = "Function",

			Returns =
			{
				{ Name = "isRatedMap", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsSoloShuffle",
			Type = "Function",

			Returns =
			{
				{ Name = "isSoloShuffle", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsWarModeActive",
			Type = "Function",

			Returns =
			{
				{ Name = "warModeActive", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsWarModeDesired",
			Type = "Function",

			Returns =
			{
				{ Name = "warModeDesired", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsWarModeFeatureEnabled",
			Type = "Function",

			Returns =
			{
				{ Name = "warModeEnabled", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "JoinBrawl",
			Type = "Function",

			Arguments =
			{
				{ Name = "isSpecialBrawl", Type = "bool", Nilable = false, Default = false },
			},
		},
		{
			Name = "RequestCrowdControlSpell",
			Type = "Function",

			Arguments =
			{
				{ Name = "playerToken", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetWarModeDesired",
			Type = "Function",

			Arguments =
			{
				{ Name = "warModeDesired", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ToggleWarMode",
			Type = "Function",
		},
	},

	Events =
	{
		{
			Name = "ArenaOpponentUpdate",
			Type = "Event",
			LiteralName = "ARENA_OPPONENT_UPDATE",
			Payload =
			{
				{ Name = "unitToken", Type = "string", Nilable = false },
				{ Name = "updateReason", Type = "string", Nilable = false },
			},
		},
		{
			Name = "ArenaPrepOpponentSpecializations",
			Type = "Event",
			LiteralName = "ARENA_PREP_OPPONENT_SPECIALIZATIONS",
		},
		{
			Name = "ArenaSeasonWorldState",
			Type = "Event",
			LiteralName = "ARENA_SEASON_WORLD_STATE",
		},
		{
			Name = "BattlefieldQueueTimeout",
			Type = "Event",
			LiteralName = "BATTLEFIELD_QUEUE_TIMEOUT",
		},
		{
			Name = "BattlefieldsClosed",
			Type = "Event",
			LiteralName = "BATTLEFIELDS_CLOSED",
		},
		{
			Name = "BattlefieldsShow",
			Type = "Event",
			LiteralName = "BATTLEFIELDS_SHOW",
			Payload =
			{
				{ Name = "isArena", Type = "bool", Nilable = true },
				{ Name = "battleMasterListID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "BattlegroundObjectivesUpdate",
			Type = "Event",
			LiteralName = "BATTLEGROUND_OBJECTIVES_UPDATE",
		},
		{
			Name = "BattlegroundPointsUpdate",
			Type = "Event",
			LiteralName = "BATTLEGROUND_POINTS_UPDATE",
		},
		{
			Name = "GdfSimComplete",
			Type = "Event",
			LiteralName = "GDF_SIM_COMPLETE",
		},
		{
			Name = "HonorLevelUpdate",
			Type = "Event",
			LiteralName = "HONOR_LEVEL_UPDATE",
			Payload =
			{
				{ Name = "isHigherLevel", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "NotifyPvpAfkResult",
			Type = "Event",
			LiteralName = "NOTIFY_PVP_AFK_RESULT",
			Payload =
			{
				{ Name = "offender", Type = "string", Nilable = false },
				{ Name = "numBlackMarksOnOffender", Type = "number", Nilable = false },
				{ Name = "numPlayersIHaveReported", Type = "number", Nilable = false },
			},
		},
		{
			Name = "PlayerEnteringBattleground",
			Type = "Event",
			LiteralName = "PLAYER_ENTERING_BATTLEGROUND",
		},
		{
			Name = "PostMatchCurrencyRewardUpdate",
			Type = "Event",
			LiteralName = "POST_MATCH_CURRENCY_REWARD_UPDATE",
			Payload =
			{
				{ Name = "reward", Type = "PVPPostMatchCurrencyReward", Nilable = false },
			},
		},
		{
			Name = "PostMatchItemRewardUpdate",
			Type = "Event",
			LiteralName = "POST_MATCH_ITEM_REWARD_UPDATE",
		},
		{
			Name = "PvpBrawlInfoUpdated",
			Type = "Event",
			LiteralName = "PVP_BRAWL_INFO_UPDATED",
		},
		{
			Name = "PvpMatchActive",
			Type = "Event",
			LiteralName = "PVP_MATCH_ACTIVE",
		},
		{
			Name = "PvpMatchComplete",
			Type = "Event",
			LiteralName = "PVP_MATCH_COMPLETE",
			Payload =
			{
				{ Name = "winner", Type = "number", Nilable = false },
				{ Name = "duration", Type = "number", Nilable = false },
			},
		},
		{
			Name = "PvpMatchInactive",
			Type = "Event",
			LiteralName = "PVP_MATCH_INACTIVE",
		},
		{
			Name = "PvpRatedStatsUpdate",
			Type = "Event",
			LiteralName = "PVP_RATED_STATS_UPDATE",
		},
		{
			Name = "PvpRewardsUpdate",
			Type = "Event",
			LiteralName = "PVP_REWARDS_UPDATE",
		},
		{
			Name = "PvpRolePopupHide",
			Type = "Event",
			LiteralName = "PVP_ROLE_POPUP_HIDE",
			Payload =
			{
				{ Name = "roleQueueInfo", Type = "table", InnerType = "PvpRoleQueueInfo", Nilable = false },
			},
		},
		{
			Name = "PvpRolePopupJoinedMatch",
			Type = "Event",
			LiteralName = "PVP_ROLE_POPUP_JOINED_MATCH",
		},
		{
			Name = "PvpRolePopupShow",
			Type = "Event",
			LiteralName = "PVP_ROLE_POPUP_SHOW",
			Payload =
			{
				{ Name = "roleQueueInfo", Type = "table", InnerType = "PvpRoleQueueInfo", Nilable = false },
			},
		},
		{
			Name = "PvpRoleUpdate",
			Type = "Event",
			LiteralName = "PVP_ROLE_UPDATE",
		},
		{
			Name = "PvpSpecialEventInfoUpdated",
			Type = "Event",
			LiteralName = "PVP_SPECIAL_EVENT_INFO_UPDATED",
		},
		{
			Name = "PvpTypesEnabled",
			Type = "Event",
			LiteralName = "PVP_TYPES_ENABLED",
			Payload =
			{
				{ Name = "wargameBattlegrounds", Type = "bool", Nilable = false },
				{ Name = "ratedBattlegrounds", Type = "bool", Nilable = false },
				{ Name = "ratedArenas", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "PvpVehicleInfoUpdated",
			Type = "Event",
			LiteralName = "PVP_VEHICLE_INFO_UPDATED",
		},
		{
			Name = "PvpWorldstateUpdate",
			Type = "Event",
			LiteralName = "PVP_WORLDSTATE_UPDATE",
		},
		{
			Name = "PvpqueueAnywhereShow",
			Type = "Event",
			LiteralName = "PVPQUEUE_ANYWHERE_SHOW",
		},
		{
			Name = "PvpqueueAnywhereUpdateAvailable",
			Type = "Event",
			LiteralName = "PVPQUEUE_ANYWHERE_UPDATE_AVAILABLE",
		},
		{
			Name = "UpdateActiveBattlefield",
			Type = "Event",
			LiteralName = "UPDATE_ACTIVE_BATTLEFIELD",
		},
		{
			Name = "UpdateBattlefieldScore",
			Type = "Event",
			LiteralName = "UPDATE_BATTLEFIELD_SCORE",
		},
		{
			Name = "UpdateBattlefieldStatus",
			Type = "Event",
			LiteralName = "UPDATE_BATTLEFIELD_STATUS",
			Payload =
			{
				{ Name = "battleFieldIndex", Type = "number", Nilable = false },
			},
		},
		{
			Name = "WarModeStatusUpdate",
			Type = "Event",
			LiteralName = "WAR_MODE_STATUS_UPDATE",
			Payload =
			{
				{ Name = "warModeEnabled", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "WargameRequested",
			Type = "Event",
			LiteralName = "WARGAME_REQUESTED",
			Payload =
			{
				{ Name = "opposingPartyMemberName", Type = "string", Nilable = false },
				{ Name = "battlegroundName", Type = "string", Nilable = false },
				{ Name = "timeoutSeconds", Type = "number", Nilable = false },
				{ Name = "tournamentRules", Type = "bool", Nilable = false },
			},
		},
	},

	Tables =
	{
		{
			Name = "BrawlType",
			Type = "Enumeration",
			NumValues = 5,
			MinValue = 0,
			MaxValue = 4,
			Fields =
			{
				{ Name = "None", Type = "BrawlType", EnumValue = 0 },
				{ Name = "Battleground", Type = "BrawlType", EnumValue = 1 },
				{ Name = "Arena", Type = "BrawlType", EnumValue = 2 },
				{ Name = "LFG", Type = "BrawlType", EnumValue = 3 },
				{ Name = "SoloShuffle", Type = "BrawlType", EnumValue = 4 },
			},
		},
		{
			Name = "PvPMatchState",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 0,
			MaxValue = 2,
			Fields =
			{
				{ Name = "Inactive", Type = "PvPMatchState", EnumValue = 0 },
				{ Name = "Active", Type = "PvPMatchState", EnumValue = 1 },
				{ Name = "Complete", Type = "PvPMatchState", EnumValue = 2 },
			},
		},
		{
			Name = "BattlefieldCurrencyReward",
			Type = "Structure",
			Fields =
			{
				{ Name = "id", Type = "number", Nilable = false },
				{ Name = "quantity", Type = "number", Nilable = false },
			},
		},
		{
			Name = "BattlefieldItemReward",
			Type = "Structure",
			Fields =
			{
				{ Name = "id", Type = "number", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "texture", Type = "number", Nilable = false },
				{ Name = "quantity", Type = "number", Nilable = false },
			},
		},
		{
			Name = "BattlefieldVehicleInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "x", Type = "number", Nilable = false },
				{ Name = "y", Type = "number", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "isOccupied", Type = "bool", Nilable = false },
				{ Name = "atlas", Type = "string", Nilable = false },
				{ Name = "textureWidth", Type = "number", Nilable = false },
				{ Name = "textureHeight", Type = "number", Nilable = false },
				{ Name = "facing", Type = "number", Nilable = false },
				{ Name = "isPlayer", Type = "bool", Nilable = false },
				{ Name = "isAlive", Type = "bool", Nilable = false },
				{ Name = "shouldDrawBelowPlayerBlips", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "BattlemasterListInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "instanceType", Type = "number", Nilable = false },
				{ Name = "minPlayers", Type = "number", Nilable = false },
				{ Name = "maxPlayers", Type = "number", Nilable = false },
				{ Name = "icon", Type = "number", Nilable = false },
				{ Name = "longDescription", Type = "string", Nilable = false },
				{ Name = "shortDescription", Type = "string", Nilable = false },
			},
		},
		{
			Name = "HonorRewardInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "honorLevelName", Type = "string", Nilable = false },
				{ Name = "badgeFileDataID", Type = "number", Nilable = false },
				{ Name = "achievementRewardedID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "LevelUpBattlegroundInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "id", Type = "number", Nilable = false },
				{ Name = "icon", Type = "number", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "isEpic", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "MatchPVPStatColumn",
			Type = "Structure",
			Fields =
			{
				{ Name = "pvpStatID", Type = "number", Nilable = false },
				{ Name = "columnHeaderID", Type = "number", Nilable = false },
				{ Name = "orderIndex", Type = "number", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "tooltip", Type = "string", Nilable = false },
			},
		},
		{
			Name = "PvpBrawlInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "brawlID", Type = "number", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "shortDescription", Type = "string", Nilable = false },
				{ Name = "longDescription", Type = "string", Nilable = false },
				{ Name = "canQueue", Type = "bool", Nilable = false },
				{ Name = "timeLeftUntilNextChange", Type = "number", Nilable = true },
				{ Name = "brawlType", Type = "BrawlType", Nilable = false },
				{ Name = "mapNames", Type = "table", InnerType = "string", Nilable = false },
				{ Name = "includesAllArenas", Type = "bool", Nilable = false, Default = false },
			},
		},
		{
			Name = "PVPPersonalRatedInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "personalRating", Type = "number", Nilable = false },
				{ Name = "bestSeasonRating", Type = "number", Nilable = false },
				{ Name = "bestWeeklyRating", Type = "number", Nilable = false },
				{ Name = "seasonPlayed", Type = "number", Nilable = false },
				{ Name = "seasonWon", Type = "number", Nilable = false },
				{ Name = "weeklyPlayed", Type = "number", Nilable = false },
				{ Name = "weeklyWon", Type = "number", Nilable = false },
				{ Name = "lastWeeksBestRating", Type = "number", Nilable = false },
				{ Name = "hasWonBracketToday", Type = "bool", Nilable = false },
				{ Name = "tier", Type = "number", Nilable = false },
				{ Name = "ranking", Type = "number", Nilable = true },
			},
		},
		{
			Name = "PVPPostMatchCurrencyReward",
			Type = "Structure",
			Fields =
			{
				{ Name = "currencyType", Type = "number", Nilable = false },
				{ Name = "quantityChanged", Type = "number", Nilable = false },
			},
		},
		{
			Name = "PVPPostMatchItemReward",
			Type = "Structure",
			Fields =
			{
				{ Name = "type", Type = "string", Nilable = false },
				{ Name = "link", Type = "string", Nilable = false },
				{ Name = "quantity", Type = "number", Nilable = false },
				{ Name = "specID", Type = "number", Nilable = false },
				{ Name = "sex", Type = "number", Nilable = false },
				{ Name = "isUpgraded", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "PvpRoleQueueInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "role", Type = "string", Nilable = false },
				{ Name = "totalRole", Type = "number", Nilable = false },
				{ Name = "totalAccepted", Type = "number", Nilable = false },
				{ Name = "totalDeclined", Type = "number", Nilable = false },
			},
		},
		{
			Name = "PvpScalingData",
			Type = "Structure",
			Fields =
			{
				{ Name = "scalingDataID", Type = "number", Nilable = false },
				{ Name = "specializationID", Type = "number", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "value", Type = "number", Nilable = false },
			},
		},
		{
			Name = "PVPScoreInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "killingBlows", Type = "number", Nilable = false },
				{ Name = "honorableKills", Type = "number", Nilable = false },
				{ Name = "deaths", Type = "number", Nilable = false },
				{ Name = "honorGained", Type = "number", Nilable = false },
				{ Name = "faction", Type = "number", Nilable = false },
				{ Name = "raceName", Type = "string", Nilable = false },
				{ Name = "className", Type = "string", Nilable = false },
				{ Name = "classToken", Type = "string", Nilable = false },
				{ Name = "damageDone", Type = "number", Nilable = false },
				{ Name = "healingDone", Type = "number", Nilable = false },
				{ Name = "rating", Type = "number", Nilable = false },
				{ Name = "ratingChange", Type = "number", Nilable = false },
				{ Name = "prematchMMR", Type = "number", Nilable = false },
				{ Name = "mmrChange", Type = "number", Nilable = false },
				{ Name = "talentSpec", Type = "string", Nilable = false },
				{ Name = "honorLevel", Type = "number", Nilable = false },
				{ Name = "roleAssigned", Type = "number", Nilable = false },
				{ Name = "stats", Type = "table", InnerType = "PVPStatInfo", Nilable = false },
			},
		},
		{
			Name = "PVPStatInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "pvpStatID", Type = "number", Nilable = false },
				{ Name = "pvpStatValue", Type = "number", Nilable = false },
				{ Name = "orderIndex", Type = "number", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "tooltip", Type = "string", Nilable = false },
				{ Name = "iconName", Type = "string", Nilable = false },
			},
		},
		{
			Name = "PVPTeamInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "size", Type = "number", Nilable = false },
				{ Name = "rating", Type = "number", Nilable = false },
				{ Name = "ratingNew", Type = "number", Nilable = false },
				{ Name = "ratingMMR", Type = "number", Nilable = false },
			},
		},
		{
			Name = "PvpTierInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "descendRating", Type = "number", Nilable = false },
				{ Name = "ascendRating", Type = "number", Nilable = false },
				{ Name = "descendTier", Type = "number", Nilable = false },
				{ Name = "ascendTier", Type = "number", Nilable = false },
				{ Name = "pvpTierEnum", Type = "number", Nilable = false },
				{ Name = "tierIconID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "RandomBGInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "canQueue", Type = "bool", Nilable = false },
				{ Name = "bgID", Type = "number", Nilable = false },
				{ Name = "hasRandomWinToday", Type = "bool", Nilable = false },
				{ Name = "minLevel", Type = "number", Nilable = false },
				{ Name = "maxLevel", Type = "number", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "QuestLineUI",
	Type = "System",
	Namespace = "C_QuestLine",

	Functions =
	{
		{
			Name = "GetAvailableQuestLines",
			Type = "Function",

			Arguments =
			{
				{ Name = "uiMapID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "questLines", Type = "table", InnerType = "QuestLineInfo", Nilable = false },
			},
		},
		{
			Name = "GetQuestLineInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
				{ Name = "uiMapID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "questLineInfo", Type = "QuestLineInfo", Nilable = true },
			},
		},
		{
			Name = "GetQuestLineQuests",
			Type = "Function",

			Arguments =
			{
				{ Name = "questLineID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "questIDs", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "IsComplete",
			Type = "Function",

			Arguments =
			{
				{ Name = "questLineID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isComplete", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "RequestQuestLinesForMap",
			Type = "Function",

			Arguments =
			{
				{ Name = "uiMapID", Type = "number", Nilable = false },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
		{
			Name = "QuestLineFloorLocation",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 0,
			MaxValue = 2,
			Fields =
			{
				{ Name = "Above", Type = "QuestLineFloorLocation", EnumValue = 0 },
				{ Name = "Below", Type = "QuestLineFloorLocation", EnumValue = 1 },
				{ Name = "Same", Type = "QuestLineFloorLocation", EnumValue = 2 },
			},
		},
		{
			Name = "QuestLineInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "questLineName", Type = "string", Nilable = false },
				{ Name = "questName", Type = "string", Nilable = false },
				{ Name = "questLineID", Type = "number", Nilable = false },
				{ Name = "questID", Type = "number", Nilable = false },
				{ Name = "x", Type = "number", Nilable = false },
				{ Name = "y", Type = "number", Nilable = false },
				{ Name = "isHidden", Type = "bool", Nilable = false },
				{ Name = "isLegendary", Type = "bool", Nilable = false },
				{ Name = "isDaily", Type = "bool", Nilable = false },
				{ Name = "isCampaign", Type = "bool", Nilable = false },
				{ Name = "floorLocation", Type = "QuestLineFloorLocation", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "QuestLog",
	Type = "System",
	Namespace = "C_QuestLog",

	Functions =
	{
		{
			Name = "AbandonQuest",
			Type = "Function",
		},
		{
			Name = "AddQuestWatch",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
				{ Name = "watchType", Type = "QuestWatchType", Nilable = true },
			},

			Returns =
			{
				{ Name = "wasWatched", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "AddWorldQuestWatch",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
				{ Name = "watchType", Type = "QuestWatchType", Nilable = true },
			},

			Returns =
			{
				{ Name = "wasWatched", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "CanAbandonQuest",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "canAbandon", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetAbandonQuest",
			Type = "Function",

			Returns =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetAbandonQuestItems",
			Type = "Function",

			Returns =
			{
				{ Name = "itemIDs", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "GetActiveThreatMaps",
			Type = "Function",

			Returns =
			{
				{ Name = "uiMapIDs", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "GetAllCompletedQuestIDs",
			Type = "Function",

			Returns =
			{
				{ Name = "quests", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "GetBountiesForMapID",
			Type = "Function",

			Arguments =
			{
				{ Name = "uiMapID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "bounties", Type = "table", InnerType = "BountyInfo", Nilable = true },
			},
		},
		{
			Name = "GetBountySetInfoForMapID",
			Type = "Function",

			Arguments =
			{
				{ Name = "uiMapID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "displayLocation", Type = "MapOverlayDisplayLocation", Nilable = false },
				{ Name = "lockQuestID", Type = "number", Nilable = false },
				{ Name = "bountySetID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetDistanceSqToQuest",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "distanceSq", Type = "number", Nilable = false },
				{ Name = "onContinent", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "questLogIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "info", Type = "QuestInfo", Nilable = true },
			},
		},
		{
			Name = "GetLogIndexForQuestID",
			Type = "Function",
			Documentation = { "Only returns a log index for actual quests, not headers" },

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "questLogIndex", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetMapForQuestPOIs",
			Type = "Function",

			Returns =
			{
				{ Name = "uiMapID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetMaxNumQuests",
			Type = "Function",
			Documentation = { "This is the maximum number of quests a player can be on, including hidden quests, world quests, emissaries etc" },

			Returns =
			{
				{ Name = "maxNumQuests", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetMaxNumQuestsCanAccept",
			Type = "Function",
			Documentation = { "This is the maximum number of standard quests a player can accept. These are quests that are normally visible in the quest log." },

			Returns =
			{
				{ Name = "maxNumQuestsCanAccept", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetNextWaypoint",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "mapID", Type = "number", Nilable = false },
				{ Name = "x", Type = "number", Nilable = false },
				{ Name = "y", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetNextWaypointForMap",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
				{ Name = "uiMapID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "x", Type = "number", Nilable = false },
				{ Name = "y", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetNextWaypointText",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "waypointText", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetNumQuestLogEntries",
			Type = "Function",

			Returns =
			{
				{ Name = "numShownEntries", Type = "number", Nilable = false },
				{ Name = "numQuests", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetNumQuestObjectives",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "leaderboardCount", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetNumQuestWatches",
			Type = "Function",

			Returns =
			{
				{ Name = "numQuestWatches", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetNumWorldQuestWatches",
			Type = "Function",

			Returns =
			{
				{ Name = "numQuestWatches", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetQuestAdditionalHighlights",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "uiMapID", Type = "number", Nilable = false },
				{ Name = "worldQuests", Type = "bool", Nilable = false },
				{ Name = "worldQuestsElite", Type = "bool", Nilable = false },
				{ Name = "dungeons", Type = "bool", Nilable = false },
				{ Name = "treasures", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetQuestDetailsTheme",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "theme", Type = "QuestTheme", Nilable = true },
			},
		},
		{
			Name = "GetQuestDifficultyLevel",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "level", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetQuestIDForLogIndex",
			Type = "Function",
			Documentation = { "Only returns a questID for actual quests, not headers" },

			Arguments =
			{
				{ Name = "questLogIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "questID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetQuestIDForQuestWatchIndex",
			Type = "Function",

			Arguments =
			{
				{ Name = "questWatchIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "questID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetQuestIDForWorldQuestWatchIndex",
			Type = "Function",

			Arguments =
			{
				{ Name = "questWatchIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "questID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetQuestLogPortraitGiver",
			Type = "Function",

			Arguments =
			{
				{ Name = "questLogIndex", Type = "number", Nilable = true },
			},

			Returns =
			{
				{ Name = "portraitGiver", Type = "number", Nilable = false },
				{ Name = "portraitGiverText", Type = "string", Nilable = false },
				{ Name = "portraitGiverName", Type = "string", Nilable = false },
				{ Name = "portraitGiverMount", Type = "number", Nilable = false },
				{ Name = "portraitGiverModelSceneID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetQuestObjectives",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "objectives", Type = "table", InnerType = "QuestObjectiveInfo", Nilable = false },
			},
		},
		{
			Name = "GetQuestTagInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "info", Type = "QuestTagInfo", Nilable = true },
			},
		},
		{
			Name = "GetQuestType",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "questType", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetQuestWatchType",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "watchType", Type = "QuestWatchType", Nilable = true },
			},
		},
		{
			Name = "GetQuestsOnMap",
			Type = "Function",

			Arguments =
			{
				{ Name = "uiMapID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "quests", Type = "table", InnerType = "QuestOnMapInfo", Nilable = false },
			},
		},
		{
			Name = "GetRequiredMoney",
			Type = "Function",
			Documentation = { "Uses the selected quest if no questID is provided" },

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = true },
			},

			Returns =
			{
				{ Name = "requiredMoney", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetSelectedQuest",
			Type = "Function",

			Returns =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetSuggestedGroupSize",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "suggestedGroupSize", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetTimeAllowed",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "totalTime", Type = "number", Nilable = false },
				{ Name = "elapsedTime", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetTitleForLogIndex",
			Type = "Function",
			Documentation = { "Returns a valid title for anything that is in the quest log." },

			Arguments =
			{
				{ Name = "questLogIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "title", Type = "string", Nilable = true },
			},
		},
		{
			Name = "GetTitleForQuestID",
			Type = "Function",
			Documentation = { "Only returns a valid title for quests, header titles cannot be discovered using this." },

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "title", Type = "string", Nilable = true },
			},
		},
		{
			Name = "GetZoneStoryInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "uiMapID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "achievementID", Type = "number", Nilable = false },
				{ Name = "storyMapID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "HasActiveThreats",
			Type = "Function",

			Returns =
			{
				{ Name = "hasActiveThreats", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsAccountQuest",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isAccountQuest", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsComplete",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isComplete", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsFailed",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isFailed", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsLegendaryQuest",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isLegendaryQuest", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsOnMap",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "onMap", Type = "bool", Nilable = false },
				{ Name = "hasLocalPOI", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsOnQuest",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isOnQuest", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsPushableQuest",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isPushable", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsQuestBounty",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isBounty", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsQuestCalling",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isCalling", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsQuestCriteriaForBounty",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
				{ Name = "bountyQuestID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isCriteriaForBounty", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsQuestDisabledForSession",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isDisabled", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsQuestFlaggedCompleted",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isCompleted", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsQuestInvasion",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isInvasion", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsQuestReplayable",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isReplayable", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsQuestReplayedRecently",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "recentlyReplayed", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsQuestTask",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isTask", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsQuestTrivial",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isTrivial", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsRepeatableQuest",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isRepeatable", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsThreatQuest",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isThreat", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsUnitOnQuest",
			Type = "Function",

			Arguments =
			{
				{ Name = "unit", Type = "string", Nilable = false },
				{ Name = "questID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isOnQuest", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsWorldQuest",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isWorldQuest", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "QuestCanHaveWarModeBonus",
			Type = "Function",
			Documentation = { "Tests whether a quest is eligible for warmode bonuses (e.g. most world quests, some daily quests" },

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "hasBonus", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "QuestHasQuestSessionBonus",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "hasBonus", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "QuestHasWarModeBonus",
			Type = "Function",
			Documentation = { "Tests whether a quest in the player's quest log that is eligible for warmode bonuses (see 'QuestCanHaveWarModeBOnus') has been completed in warmode (including accepting it)" },

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "hasBonus", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ReadyForTurnIn",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "readyForTurnIn", Type = "bool", Nilable = true },
			},
		},
		{
			Name = "RemoveQuestWatch",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "wasRemoved", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "RemoveWorldQuestWatch",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "wasRemoved", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "RequestLoadQuestByID",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetAbandonQuest",
			Type = "Function",
		},
		{
			Name = "SetMapForQuestPOIs",
			Type = "Function",

			Arguments =
			{
				{ Name = "uiMapID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetSelectedQuest",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ShouldDisplayTimeRemaining",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "displayTimeRemaining", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ShouldShowQuestRewards",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "shouldShow", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SortQuestWatches",
			Type = "Function",
		},
		{
			Name = "UnitIsRelatedToActiveQuest",
			Type = "Function",

			Arguments =
			{
				{ Name = "unit", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "isRelatedToActiveQuest", Type = "bool", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "QuestAccepted",
			Type = "Event",
			LiteralName = "QUEST_ACCEPTED",
			Payload =
			{
				{ Name = "questId", Type = "number", Nilable = false },
			},
		},
		{
			Name = "QuestAutocomplete",
			Type = "Event",
			LiteralName = "QUEST_AUTOCOMPLETE",
			Payload =
			{
				{ Name = "questId", Type = "number", Nilable = false },
			},
		},
		{
			Name = "QuestComplete",
			Type = "Event",
			LiteralName = "QUEST_COMPLETE",
		},
		{
			Name = "QuestDataLoadResult",
			Type = "Event",
			LiteralName = "QUEST_DATA_LOAD_RESULT",
			Payload =
			{
				{ Name = "questID", Type = "number", Nilable = false },
				{ Name = "success", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "QuestDetail",
			Type = "Event",
			LiteralName = "QUEST_DETAIL",
			Payload =
			{
				{ Name = "questStartItemID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "QuestLogCriteriaUpdate",
			Type = "Event",
			LiteralName = "QUEST_LOG_CRITERIA_UPDATE",
			Payload =
			{
				{ Name = "questID", Type = "number", Nilable = false },
				{ Name = "specificTreeID", Type = "number", Nilable = false },
				{ Name = "description", Type = "string", Nilable = false },
				{ Name = "numFulfilled", Type = "number", Nilable = false },
				{ Name = "numRequired", Type = "number", Nilable = false },
			},
		},
		{
			Name = "QuestLogUpdate",
			Type = "Event",
			LiteralName = "QUEST_LOG_UPDATE",
		},
		{
			Name = "QuestPoiUpdate",
			Type = "Event",
			LiteralName = "QUEST_POI_UPDATE",
		},
		{
			Name = "QuestRemoved",
			Type = "Event",
			LiteralName = "QUEST_REMOVED",
			Payload =
			{
				{ Name = "questID", Type = "number", Nilable = false },
				{ Name = "wasReplayQuest", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "QuestTurnedIn",
			Type = "Event",
			LiteralName = "QUEST_TURNED_IN",
			Payload =
			{
				{ Name = "questID", Type = "number", Nilable = false },
				{ Name = "xpReward", Type = "number", Nilable = false },
				{ Name = "moneyReward", Type = "number", Nilable = false },
			},
		},
		{
			Name = "QuestWatchListChanged",
			Type = "Event",
			LiteralName = "QUEST_WATCH_LIST_CHANGED",
			Payload =
			{
				{ Name = "questID", Type = "number", Nilable = true },
				{ Name = "added", Type = "bool", Nilable = true },
			},
		},
		{
			Name = "QuestWatchUpdate",
			Type = "Event",
			LiteralName = "QUEST_WATCH_UPDATE",
			Payload =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "QuestlineUpdate",
			Type = "Event",
			LiteralName = "QUESTLINE_UPDATE",
			Payload =
			{
				{ Name = "requestRequired", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "TaskProgressUpdate",
			Type = "Event",
			LiteralName = "TASK_PROGRESS_UPDATE",
		},
		{
			Name = "TreasurePickerCacheFlush",
			Type = "Event",
			LiteralName = "TREASURE_PICKER_CACHE_FLUSH",
		},
		{
			Name = "WaypointUpdate",
			Type = "Event",
			LiteralName = "WAYPOINT_UPDATE",
		},
		{
			Name = "WorldQuestCompletedBySpell",
			Type = "Event",
			LiteralName = "WORLD_QUEST_COMPLETED_BY_SPELL",
			Payload =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},
		},
	},

	Tables =
	{
		{
			Name = "MapOverlayDisplayLocation",
			Type = "Enumeration",
			NumValues = 6,
			MinValue = 0,
			MaxValue = 5,
			Fields =
			{
				{ Name = "Default", Type = "MapOverlayDisplayLocation", EnumValue = 0 },
				{ Name = "BottomLeft", Type = "MapOverlayDisplayLocation", EnumValue = 1 },
				{ Name = "TopLeft", Type = "MapOverlayDisplayLocation", EnumValue = 2 },
				{ Name = "BottomRight", Type = "MapOverlayDisplayLocation", EnumValue = 3 },
				{ Name = "TopRight", Type = "MapOverlayDisplayLocation", EnumValue = 4 },
				{ Name = "Hidden", Type = "MapOverlayDisplayLocation", EnumValue = 5 },
			},
		},
		{
			Name = "QuestFrequency",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 0,
			MaxValue = 2,
			Fields =
			{
				{ Name = "Default", Type = "QuestFrequency", EnumValue = 0 },
				{ Name = "Daily", Type = "QuestFrequency", EnumValue = 1 },
				{ Name = "Weekly", Type = "QuestFrequency", EnumValue = 2 },
			},
		},
		{
			Name = "QuestTag",
			Type = "Enumeration",
			NumValues = 11,
			MinValue = 1,
			MaxValue = 266,
			Fields =
			{
				{ Name = "Group", Type = "QuestTag", EnumValue = 1 },
				{ Name = "PvP", Type = "QuestTag", EnumValue = 41 },
				{ Name = "Raid", Type = "QuestTag", EnumValue = 62 },
				{ Name = "Dungeon", Type = "QuestTag", EnumValue = 81 },
				{ Name = "Legendary", Type = "QuestTag", EnumValue = 83 },
				{ Name = "Heroic", Type = "QuestTag", EnumValue = 85 },
				{ Name = "Raid10", Type = "QuestTag", EnumValue = 88 },
				{ Name = "Raid25", Type = "QuestTag", EnumValue = 89 },
				{ Name = "Scenario", Type = "QuestTag", EnumValue = 98 },
				{ Name = "Account", Type = "QuestTag", EnumValue = 102 },
				{ Name = "CombatAlly", Type = "QuestTag", EnumValue = 266 },
			},
		},
		{
			Name = "QuestWatchType",
			Type = "Enumeration",
			NumValues = 2,
			MinValue = 0,
			MaxValue = 1,
			Fields =
			{
				{ Name = "Automatic", Type = "QuestWatchType", EnumValue = 0 },
				{ Name = "Manual", Type = "QuestWatchType", EnumValue = 1 },
			},
		},
		{
			Name = "WorldQuestQuality",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 0,
			MaxValue = 2,
			Fields =
			{
				{ Name = "Common", Type = "WorldQuestQuality", EnumValue = 0 },
				{ Name = "Rare", Type = "WorldQuestQuality", EnumValue = 1 },
				{ Name = "Epic", Type = "WorldQuestQuality", EnumValue = 2 },
			},
		},
		{
			Name = "QuestInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "title", Type = "string", Nilable = false },
				{ Name = "questLogIndex", Type = "number", Nilable = false },
				{ Name = "questID", Type = "number", Nilable = false },
				{ Name = "campaignID", Type = "number", Nilable = true },
				{ Name = "level", Type = "number", Nilable = false },
				{ Name = "difficultyLevel", Type = "number", Nilable = false },
				{ Name = "suggestedGroup", Type = "number", Nilable = false },
				{ Name = "frequency", Type = "QuestFrequency", Nilable = true },
				{ Name = "isHeader", Type = "bool", Nilable = false },
				{ Name = "isCollapsed", Type = "bool", Nilable = false },
				{ Name = "startEvent", Type = "bool", Nilable = false },
				{ Name = "isTask", Type = "bool", Nilable = false },
				{ Name = "isBounty", Type = "bool", Nilable = false },
				{ Name = "isStory", Type = "bool", Nilable = false },
				{ Name = "isScaling", Type = "bool", Nilable = false },
				{ Name = "isOnMap", Type = "bool", Nilable = false },
				{ Name = "hasLocalPOI", Type = "bool", Nilable = false },
				{ Name = "isHidden", Type = "bool", Nilable = false },
				{ Name = "isAutoComplete", Type = "bool", Nilable = false },
				{ Name = "overridesSortOrder", Type = "bool", Nilable = false },
				{ Name = "readyForTranslation", Type = "bool", Nilable = false, Default = true },
			},
		},
		{
			Name = "QuestObjectiveInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "type", Type = "string", Nilable = false },
				{ Name = "finished", Type = "bool", Nilable = false },
				{ Name = "numFulfilled", Type = "number", Nilable = false },
				{ Name = "numRequired", Type = "number", Nilable = false },
			},
		},
		{
			Name = "QuestOnMapInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "questID", Type = "number", Nilable = false },
				{ Name = "x", Type = "number", Nilable = false },
				{ Name = "y", Type = "number", Nilable = false },
				{ Name = "type", Type = "number", Nilable = false },
				{ Name = "isMapIndicatorQuest", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "QuestTagInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "tagName", Type = "string", Nilable = false },
				{ Name = "tagID", Type = "number", Nilable = false },
				{ Name = "worldQuestType", Type = "number", Nilable = true },
				{ Name = "quality", Type = "WorldQuestQuality", Nilable = true },
				{ Name = "tradeskillLineID", Type = "number", Nilable = true },
				{ Name = "isElite", Type = "bool", Nilable = true },
				{ Name = "displayExpiration", Type = "bool", Nilable = true },
			},
		},
		{
			Name = "QuestTheme",
			Type = "Structure",
			Fields =
			{
				{ Name = "background", Type = "string", Nilable = false },
				{ Name = "seal", Type = "string", Nilable = false },
				{ Name = "signature", Type = "string", Nilable = false },
				{ Name = "poiIcon", Type = "string", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "QuestOffer",
	Type = "System",
	Namespace = "C_QuestOffer",

	Functions =
	{
		{
			Name = "GetHideRequiredItemsOnTurnIn",
			Type = "Function",

			Returns =
			{
				{ Name = "hideRequiredItemsOnTurnIn", Type = "bool", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "QuestAcceptConfirm",
			Type = "Event",
			LiteralName = "QUEST_ACCEPT_CONFIRM",
			Payload =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "questTitle", Type = "string", Nilable = false },
			},
		},
		{
			Name = "QuestFinished",
			Type = "Event",
			LiteralName = "QUEST_FINISHED",
		},
		{
			Name = "QuestGreeting",
			Type = "Event",
			LiteralName = "QUEST_GREETING",
		},
		{
			Name = "QuestItemUpdate",
			Type = "Event",
			LiteralName = "QUEST_ITEM_UPDATE",
		},
		{
			Name = "QuestProgress",
			Type = "Event",
			LiteralName = "QUEST_PROGRESS",
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "QuestSession",
	Type = "System",
	Namespace = "C_QuestSession",

	Functions =
	{
		{
			Name = "CanStart",
			Type = "Function",

			Returns =
			{
				{ Name = "allowed", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "CanStop",
			Type = "Function",

			Returns =
			{
				{ Name = "allowed", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "Exists",
			Type = "Function",

			Returns =
			{
				{ Name = "exists", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetAvailableSessionCommand",
			Type = "Function",

			Returns =
			{
				{ Name = "command", Type = "QuestSessionCommand", Nilable = false },
			},
		},
		{
			Name = "GetPendingCommand",
			Type = "Function",

			Returns =
			{
				{ Name = "command", Type = "QuestSessionCommand", Nilable = false },
			},
		},
		{
			Name = "GetProposedMaxLevelForSession",
			Type = "Function",

			Returns =
			{
				{ Name = "proposedMaxLevel", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetSessionBeginDetails",
			Type = "Function",

			Returns =
			{
				{ Name = "details", Type = "QuestSessionPlayerDetails", Nilable = true },
			},
		},
		{
			Name = "GetSuperTrackedQuest",
			Type = "Function",

			Returns =
			{
				{ Name = "questID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "HasJoined",
			Type = "Function",

			Returns =
			{
				{ Name = "hasJoined", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "HasPendingCommand",
			Type = "Function",

			Returns =
			{
				{ Name = "hasPendingCommand", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "RequestSessionStart",
			Type = "Function",
		},
		{
			Name = "RequestSessionStop",
			Type = "Function",
		},
		{
			Name = "SendSessionBeginResponse",
			Type = "Function",

			Arguments =
			{
				{ Name = "beginSession", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetQuestIsSuperTracked",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
				{ Name = "superTrack", Type = "bool", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "QuestSessionCreated",
			Type = "Event",
			LiteralName = "QUEST_SESSION_CREATED",
		},
		{
			Name = "QuestSessionDestroyed",
			Type = "Event",
			LiteralName = "QUEST_SESSION_DESTROYED",
		},
		{
			Name = "QuestSessionEnabledStateChanged",
			Type = "Event",
			LiteralName = "QUEST_SESSION_ENABLED_STATE_CHANGED",
			Payload =
			{
				{ Name = "enabled", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "QuestSessionJoined",
			Type = "Event",
			LiteralName = "QUEST_SESSION_JOINED",
		},
		{
			Name = "QuestSessionLeft",
			Type = "Event",
			LiteralName = "QUEST_SESSION_LEFT",
		},
		{
			Name = "QuestSessionMemberConfirm",
			Type = "Event",
			LiteralName = "QUEST_SESSION_MEMBER_CONFIRM",
		},
		{
			Name = "QuestSessionMemberStartResponse",
			Type = "Event",
			LiteralName = "QUEST_SESSION_MEMBER_START_RESPONSE",
			Payload =
			{
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "response", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "QuestSessionNotification",
			Type = "Event",
			LiteralName = "QUEST_SESSION_NOTIFICATION",
			Payload =
			{
				{ Name = "result", Type = "QuestSessionResult", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
			},
		},
	},

	Tables =
	{
		{
			Name = "QuestSessionPlayerDetails",
			Type = "Structure",
			Fields =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "guid", Type = "string", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "QuestTaskInfo",
	Type = "System",
	Namespace = "C_TaskQuest",

	Functions =
	{
		{
			Name = "DoesMapShowTaskQuestObjectives",
			Type = "Function",

			Arguments =
			{
				{ Name = "uiMapID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "showsTaskQuestObjectives", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetQuestInfoByQuestID",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "questTitle", Type = "string", Nilable = false },
				{ Name = "factionID", Type = "number", Nilable = true },
				{ Name = "capped", Type = "bool", Nilable = true },
				{ Name = "displayAsObjective", Type = "bool", Nilable = true },
			},
		},
		{
			Name = "GetQuestLocation",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
				{ Name = "uiMapID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "locationX", Type = "number", Nilable = false },
				{ Name = "locationY", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetQuestProgressBarInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "progress", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetQuestTimeLeftMinutes",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "minutesLeft", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetQuestTimeLeftSeconds",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "secondsLeft", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetQuestZoneID",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "uiMapID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetQuestsForPlayerByMapID",
			Type = "Function",

			Arguments =
			{
				{ Name = "uiMapID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "taskPOIs", Type = "table", InnerType = "TaskPOIData", Nilable = false },
			},
		},
		{
			Name = "GetThreatQuests",
			Type = "Function",

			Returns =
			{
				{ Name = "quests", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "GetUIWidgetSetIDFromQuestID",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "UiWidgetSetID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "IsActive",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "active", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "RequestPreloadRewardData",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
		{
			Name = "TaskPOIData",
			Type = "Structure",
			Fields =
			{
				{ Name = "questId", Type = "number", Nilable = false },
				{ Name = "x", Type = "number", Nilable = false },
				{ Name = "y", Type = "number", Nilable = false },
				{ Name = "inProgress", Type = "bool", Nilable = false },
				{ Name = "numObjectives", Type = "number", Nilable = false },
				{ Name = "mapID", Type = "number", Nilable = false },
				{ Name = "isQuestStart", Type = "bool", Nilable = false },
				{ Name = "isDaily", Type = "bool", Nilable = false },
				{ Name = "isCombatAllyQuest", Type = "bool", Nilable = false },
				{ Name = "childDepth", Type = "number", Nilable = true },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "RaidLocks",
	Type = "System",
	Namespace = "C_RaidLocks",

	Functions =
	{
		{
			Name = "IsEncounterComplete",
			Type = "Function",

			Arguments =
			{
				{ Name = "mapID", Type = "number", Nilable = false },
				{ Name = "encounterID", Type = "number", Nilable = false },
				{ Name = "difficultyID", Type = "number", Nilable = true },
			},

			Returns =
			{
				{ Name = "encounterIsComplete", Type = "bool", Nilable = false },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "ReportSystem",
	Type = "System",
	Namespace = "C_ReportSystem",

	Functions =
	{
		{
			Name = "CanReportPlayer",
			Type = "Function",

			Arguments =
			{
				{ Name = "playerLocation", Type = "table", Mixin = "PlayerLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "canReport", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "CanReportPlayerForLanguage",
			Type = "Function",

			Arguments =
			{
				{ Name = "playerLocation", Type = "table", Mixin = "PlayerLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "canReport", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetMajorCategoriesForReportType",
			Type = "Function",

			Arguments =
			{
				{ Name = "reportType", Type = "ReportType", Nilable = false },
			},

			Returns =
			{
				{ Name = "majorCategories", Type = "table", InnerType = "ReportMajorCategory", Nilable = false },
			},
		},
		{
			Name = "GetMajorCategoryString",
			Type = "Function",

			Arguments =
			{
				{ Name = "majorCategory", Type = "ReportMajorCategory", Nilable = false },
			},

			Returns =
			{
				{ Name = "majorCategoryString", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetMinorCategoriesForReportTypeAndMajorCategory",
			Type = "Function",

			Arguments =
			{
				{ Name = "reportType", Type = "ReportType", Nilable = false },
				{ Name = "majorCategory", Type = "ReportMajorCategory", Nilable = false },
			},

			Returns =
			{
				{ Name = "minorCategories", Type = "table", InnerType = "ReportMinorCategory", Nilable = false },
			},
		},
		{
			Name = "GetMinorCategoryString",
			Type = "Function",

			Arguments =
			{
				{ Name = "minorCategory", Type = "ReportMinorCategory", Nilable = false },
			},

			Returns =
			{
				{ Name = "minorCategoryString", Type = "string", Nilable = false },
			},
		},
		{
			Name = "ReportServerLag",
			Type = "Function",
		},
		{
			Name = "ReportStuckInCombat",
			Type = "Function",
		},
		{
			Name = "SendReport",
			Type = "Function",
			Documentation = { "Not allowed to be called by addons" },

			Arguments =
			{
				{ Name = "reportInfo", Type = "table", Mixin = "ReportInfoMixin", Nilable = false },
				{ Name = "playerLocation", Type = "table", Mixin = "PlayerLocationMixin", Nilable = true },
			},
		},
	},

	Events =
	{
		{
			Name = "ReportPlayerResult",
			Type = "Event",
			LiteralName = "REPORT_PLAYER_RESULT",
			Payload =
			{
				{ Name = "success", Type = "bool", Nilable = false },
			},
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "ReputationInfo",
	Type = "System",
	Namespace = "C_Reputation",

	Functions =
	{
		{
			Name = "GetFactionParagonInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "factionID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "currentValue", Type = "number", Nilable = false },
				{ Name = "threshold", Type = "number", Nilable = false },
				{ Name = "rewardQuestID", Type = "number", Nilable = false },
				{ Name = "hasRewardPending", Type = "bool", Nilable = false },
				{ Name = "tooLowLevelForParagon", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsFactionParagon",
			Type = "Function",

			Arguments =
			{
				{ Name = "factionID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "hasParagon", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "RequestFactionParagonPreloadRewardData",
			Type = "Function",

			Arguments =
			{
				{ Name = "factionID", Type = "number", Nilable = false },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "RestrictedActions",
	Type = "System",
	Namespace = "C_RestrictedActions",

	Functions =
	{
	},

	Events =
	{
		{
			Name = "AddonActionBlocked",
			Type = "Event",
			LiteralName = "ADDON_ACTION_BLOCKED",
			Payload =
			{
				{ Name = "isTainted", Type = "string", Nilable = false },
				{ Name = "function", Type = "string", Nilable = false },
			},
		},
		{
			Name = "AddonActionForbidden",
			Type = "Event",
			LiteralName = "ADDON_ACTION_FORBIDDEN",
			Payload =
			{
				{ Name = "isTainted", Type = "string", Nilable = false },
				{ Name = "function", Type = "string", Nilable = false },
			},
		},
		{
			Name = "MacroActionBlocked",
			Type = "Event",
			LiteralName = "MACRO_ACTION_BLOCKED",
			Payload =
			{
				{ Name = "function", Type = "string", Nilable = false },
			},
		},
		{
			Name = "MacroActionForbidden",
			Type = "Event",
			LiteralName = "MACRO_ACTION_FORBIDDEN",
			Payload =
			{
				{ Name = "function", Type = "string", Nilable = false },
			},
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "ScriptWarnings",
	Type = "System",
	Namespace = "C_ScriptWarnings",

	Functions =
	{
	},

	Events =
	{
		{
			Name = "LuaWarning",
			Type = "Event",
			LiteralName = "LUA_WARNING",
			Payload =
			{
				{ Name = "warnType", Type = "number", Nilable = false },
				{ Name = "warningText", Type = "string", Nilable = false },
			},
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "SecureTransfer",
	Type = "System",
	Namespace = "C_SecureTransfer",

	Functions =
	{
	},

	Events =
	{
		{
			Name = "SecureTransferCancel",
			Type = "Event",
			LiteralName = "SECURE_TRANSFER_CANCEL",
		},
		{
			Name = "SecureTransferConfirmSendMail",
			Type = "Event",
			LiteralName = "SECURE_TRANSFER_CONFIRM_SEND_MAIL",
		},
		{
			Name = "SecureTransferConfirmTradeAccept",
			Type = "Event",
			LiteralName = "SECURE_TRANSFER_CONFIRM_TRADE_ACCEPT",
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "SharedTraits",
	Type = "System",
	Namespace = "C_Traits",

	Functions =
	{
		{
			Name = "CanPurchaseRank",
			Type = "Function",

			Arguments =
			{
				{ Name = "configID", Type = "number", Nilable = false },
				{ Name = "nodeID", Type = "number", Nilable = false },
				{ Name = "nodeEntryID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "canPurchase", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "CanRefundRank",
			Type = "Function",

			Arguments =
			{
				{ Name = "configID", Type = "number", Nilable = false },
				{ Name = "nodeID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "canRefund", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "CloseTraitSystemInteraction",
			Type = "Function",
		},
		{
			Name = "CommitConfig",
			Type = "Function",

			Arguments =
			{
				{ Name = "configID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "success", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ConfigHasStagedChanges",
			Type = "Function",

			Arguments =
			{
				{ Name = "configID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "hasChanges", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetConditionInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "configID", Type = "number", Nilable = false },
				{ Name = "condID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "condInfo", Type = "TraitCondInfo", Nilable = false },
			},
		},
		{
			Name = "GetConfigIDBySystemID",
			Type = "Function",

			Arguments =
			{
				{ Name = "systemID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "configID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetConfigInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "configID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "configInfo", Type = "TraitConfigInfo", Nilable = false },
			},
		},
		{
			Name = "GetConfigsByType",
			Type = "Function",

			Arguments =
			{
				{ Name = "configType", Type = "TraitConfigType", Nilable = false },
			},

			Returns =
			{
				{ Name = "configIDs", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "GetDefinitionInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "definitionID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "definitionInfo", Type = "TraitDefinitionInfo", Nilable = false },
			},
		},
		{
			Name = "GetEntryInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "configID", Type = "number", Nilable = false },
				{ Name = "entryID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "entryInfo", Type = "TraitEntryInfo", Nilable = false },
			},
		},
		{
			Name = "GetNodeCost",
			Type = "Function",

			Arguments =
			{
				{ Name = "configID", Type = "number", Nilable = false },
				{ Name = "nodeID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "costs", Type = "table", InnerType = "TraitCurrencyCost", Nilable = false },
			},
		},
		{
			Name = "GetNodeInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "configID", Type = "number", Nilable = false },
				{ Name = "nodeID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "nodeInfo", Type = "TraitNodeInfo", Nilable = false },
			},
		},
		{
			Name = "GetStagedChangesCost",
			Type = "Function",

			Arguments =
			{
				{ Name = "configID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "costs", Type = "table", InnerType = "TraitCurrencyCost", Nilable = false },
			},
		},
		{
			Name = "GetTraitCurrencyInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "traitCurrencyID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "flags", Type = "number", Nilable = false },
				{ Name = "type", Type = "number", Nilable = false },
				{ Name = "currencyTypesID", Type = "number", Nilable = true },
				{ Name = "icon", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetTraitDescription",
			Type = "Function",

			Arguments =
			{
				{ Name = "entryID", Type = "number", Nilable = false },
				{ Name = "rank", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "description", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetTreeCurrencyInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "configID", Type = "number", Nilable = false },
				{ Name = "treeID", Type = "number", Nilable = false },
				{ Name = "excludeStagedChanges", Type = "bool", Nilable = false },
			},

			Returns =
			{
				{ Name = "treeCurrencyInfo", Type = "table", InnerType = "TreeCurrencyInfo", Nilable = false },
			},
		},
		{
			Name = "GetTreeInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "configID", Type = "number", Nilable = false },
				{ Name = "treeID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "treeInfo", Type = "TraitTreeInfo", Nilable = false },
			},
		},
		{
			Name = "GetTreeNodes",
			Type = "Function",

			Arguments =
			{
				{ Name = "treeID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "nodeIDs", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "PurchaseRank",
			Type = "Function",

			Arguments =
			{
				{ Name = "configID", Type = "number", Nilable = false },
				{ Name = "nodeID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "success", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "RefundAllRanks",
			Type = "Function",

			Arguments =
			{
				{ Name = "configID", Type = "number", Nilable = false },
				{ Name = "nodeID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "success", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "RefundRank",
			Type = "Function",

			Arguments =
			{
				{ Name = "configID", Type = "number", Nilable = false },
				{ Name = "nodeID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "success", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ResetTree",
			Type = "Function",

			Arguments =
			{
				{ Name = "configID", Type = "number", Nilable = false },
				{ Name = "treeID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "success", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "RollbackConfig",
			Type = "Function",

			Arguments =
			{
				{ Name = "configID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "success", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetSelection",
			Type = "Function",

			Arguments =
			{
				{ Name = "configID", Type = "number", Nilable = false },
				{ Name = "nodeID", Type = "number", Nilable = false },
				{ Name = "nodeEntryID", Type = "number", Nilable = true },
			},

			Returns =
			{
				{ Name = "success", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "StageConfig",
			Type = "Function",

			Arguments =
			{
				{ Name = "configID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "success", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "TalentTestUnlearnSpells",
			Type = "Function",
		},
	},

	Events =
	{
		{
			Name = "TraitCondInfoChanged",
			Type = "Event",
			LiteralName = "TRAIT_COND_INFO_CHANGED",
			Payload =
			{
				{ Name = "condID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "TraitConfigCreated",
			Type = "Event",
			LiteralName = "TRAIT_CONFIG_CREATED",
			Payload =
			{
				{ Name = "configInfo", Type = "TraitConfigInfo", Nilable = false },
			},
		},
		{
			Name = "TraitConfigUpdated",
			Type = "Event",
			LiteralName = "TRAIT_CONFIG_UPDATED",
			Payload =
			{
				{ Name = "configID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "TraitNodeChanged",
			Type = "Event",
			LiteralName = "TRAIT_NODE_CHANGED",
			Payload =
			{
				{ Name = "nodeID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "TraitNodeChangedPartial",
			Type = "Event",
			LiteralName = "TRAIT_NODE_CHANGED_PARTIAL",
			Payload =
			{
				{ Name = "ID", Type = "number", Nilable = false },
				{ Name = "info", Type = "TraitNodeInfoPartial", Nilable = false },
			},
		},
		{
			Name = "TraitNodeEntryUpdated",
			Type = "Event",
			LiteralName = "TRAIT_NODE_ENTRY_UPDATED",
			Payload =
			{
				{ Name = "nodeEntryID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "TraitSystemInteractionStarted",
			Type = "Event",
			LiteralName = "TRAIT_SYSTEM_INTERACTION_STARTED",
			Payload =
			{
				{ Name = "systemID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "TraitSystemNpcClosed",
			Type = "Event",
			LiteralName = "TRAIT_SYSTEM_NPC_CLOSED",
		},
		{
			Name = "TraitTreeChanged",
			Type = "Event",
			LiteralName = "TRAIT_TREE_CHANGED",
			Payload =
			{
				{ Name = "treeID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "TraitTreeCurrencyInfoUpdated",
			Type = "Event",
			LiteralName = "TRAIT_TREE_CURRENCY_INFO_UPDATED",
			Payload =
			{
				{ Name = "treeID", Type = "number", Nilable = false },
			},
		},
	},

	Tables =
	{
		{
			Name = "TraitCondInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "condID", Type = "number", Nilable = false },
				{ Name = "ranksGranted", Type = "number", Nilable = true },
				{ Name = "isAlwaysMet", Type = "bool", Nilable = false },
				{ Name = "isMet", Type = "bool", Nilable = false },
				{ Name = "isGate", Type = "bool", Nilable = false },
				{ Name = "questID", Type = "number", Nilable = true },
				{ Name = "achievementID", Type = "number", Nilable = true },
				{ Name = "specSetID", Type = "number", Nilable = true },
				{ Name = "playerLevel", Type = "number", Nilable = true },
				{ Name = "traitCurrencyID", Type = "number", Nilable = true },
				{ Name = "spentAmountRequired", Type = "number", Nilable = true },
				{ Name = "tooltipFormat", Type = "string", Nilable = true },
			},
		},
		{
			Name = "TraitConfigInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "ID", Type = "number", Nilable = false },
				{ Name = "type", Type = "TraitConfigType", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "treeIDs", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "TraitCurrencyCost",
			Type = "Structure",
			Fields =
			{
				{ Name = "ID", Type = "number", Nilable = false },
				{ Name = "amount", Type = "number", Nilable = false },
			},
		},
		{
			Name = "TraitDefinitionInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "spellID", Type = "number", Nilable = true },
				{ Name = "overrideName", Type = "string", Nilable = false },
				{ Name = "overrideSubtext", Type = "string", Nilable = false },
				{ Name = "overrideDescription", Type = "string", Nilable = false },
				{ Name = "overrideIcon", Type = "number", Nilable = true },
			},
		},
		{
			Name = "TraitEntryInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "definitionID", Type = "number", Nilable = false },
				{ Name = "type", Type = "TraitNodeEntryType", Nilable = false },
				{ Name = "maxRanks", Type = "number", Nilable = false },
				{ Name = "isAvailable", Type = "bool", Nilable = false },
				{ Name = "conditionIDs", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "TraitEntryRankInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "entryID", Type = "number", Nilable = false },
				{ Name = "rank", Type = "number", Nilable = false },
			},
		},
		{
			Name = "TraitGateInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "topLeftNodeID", Type = "number", Nilable = false },
				{ Name = "conditionID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "TraitNodeInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "ID", Type = "number", Nilable = false },
				{ Name = "posX", Type = "number", Nilable = false },
				{ Name = "posY", Type = "number", Nilable = false },
				{ Name = "flags", Type = "number", Nilable = false },
				{ Name = "entryIDs", Type = "table", InnerType = "number", Nilable = false },
				{ Name = "canPurchaseRank", Type = "bool", Nilable = false },
				{ Name = "canRefundRank", Type = "bool", Nilable = false },
				{ Name = "isAvailable", Type = "bool", Nilable = false },
				{ Name = "isVisible", Type = "bool", Nilable = false },
				{ Name = "ranksPurchased", Type = "number", Nilable = false },
				{ Name = "activeRank", Type = "number", Nilable = false },
				{ Name = "currentRank", Type = "number", Nilable = false },
				{ Name = "activeEntry", Type = "TraitEntryRankInfo", Nilable = true },
				{ Name = "nextEntry", Type = "TraitEntryRankInfo", Nilable = true },
				{ Name = "maxRanks", Type = "number", Nilable = false },
				{ Name = "type", Type = "TraitNodeType", Nilable = false },
				{ Name = "visibleEdges", Type = "table", InnerType = "TraitOutEdgeInfo", Nilable = false },
				{ Name = "meetsEdgeRequirements", Type = "bool", Nilable = false },
				{ Name = "groupIDs", Type = "table", InnerType = "number", Nilable = false },
				{ Name = "conditionIDs", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "TraitNodeInfoPartial",
			Type = "Structure",
			Fields =
			{
				{ Name = "canPurchaseRank", Type = "bool", Nilable = true },
				{ Name = "canRefundRank", Type = "bool", Nilable = true },
				{ Name = "isAvailable", Type = "bool", Nilable = true },
				{ Name = "isVisible", Type = "bool", Nilable = true },
				{ Name = "ranksPurchased", Type = "number", Nilable = true },
				{ Name = "activeRank", Type = "number", Nilable = true },
				{ Name = "currentRank", Type = "number", Nilable = true },
				{ Name = "meetsEdgeRequirements", Type = "bool", Nilable = true },
			},
		},
		{
			Name = "TraitOutEdgeInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "targetNode", Type = "number", Nilable = false },
				{ Name = "type", Type = "number", Nilable = false },
				{ Name = "visualStyle", Type = "number", Nilable = false },
				{ Name = "isActive", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "TraitTreeInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "ID", Type = "number", Nilable = false },
				{ Name = "gates", Type = "table", InnerType = "TraitGateInfo", Nilable = false },
			},
		},
		{
			Name = "TreeCurrencyInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "traitCurrencyID", Type = "number", Nilable = false },
				{ Name = "quantity", Type = "number", Nilable = false },
				{ Name = "maxQuantity", Type = "number", Nilable = true },
				{ Name = "spent", Type = "number", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "SimpleAnimAPI",
	Type = "ScriptObject",

	Functions =
	{
		{
			Name = "GetDuration",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "durationSec", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetElapsed",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "elapsedSec", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetEndDelay",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "delaySec", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetOrder",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "order", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetProgress",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "progress", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetRegionParent",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "region", Type = "table", Nilable = false },
			},
		},
		{
			Name = "GetScript",
			Type = "Function",

			Arguments =
			{
				{ Name = "scriptTypeName", Type = "string", Nilable = false },
				{ Name = "bindingType", Type = "number", Nilable = true },
			},

			Returns =
			{
				{ Name = "script", Type = "function", Nilable = false },
			},
		},
		{
			Name = "GetSmoothProgress",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "progress", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetSmoothing",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "weights", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetStartDelay",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "delaySec", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetTarget",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "target", Type = "table", Nilable = false },
			},
		},
		{
			Name = "HasScript",
			Type = "Function",

			Arguments =
			{
				{ Name = "scriptName", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "hasScript", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "HookScript",
			Type = "Function",

			Arguments =
			{
				{ Name = "scriptTypeName", Type = "string", Nilable = false },
				{ Name = "script", Type = "function", Nilable = false },
				{ Name = "bindingType", Type = "number", Nilable = true },
			},
		},
		{
			Name = "IsDelaying",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "isDelaying", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsDone",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "isDone", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsPaused",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "isPaused", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsPlaying",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "isPlaying", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsStopped",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "isStopped", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "Pause",
			Type = "Function",

			Arguments =
			{
			},
		},
		{
			Name = "Play",
			Type = "Function",

			Arguments =
			{
			},
		},
		{
			Name = "Restart",
			Type = "Function",

			Arguments =
			{
			},
		},
		{
			Name = "SetChildKey",
			Type = "Function",

			Arguments =
			{
				{ Name = "childKey", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "success", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetDuration",
			Type = "Function",

			Arguments =
			{
				{ Name = "durationSec", Type = "number", Nilable = false },
				{ Name = "recomputeGroupDuration", Type = "bool", Nilable = false, Default = true },
			},
		},
		{
			Name = "SetEndDelay",
			Type = "Function",

			Arguments =
			{
				{ Name = "delaySec", Type = "number", Nilable = false },
				{ Name = "recomputeGroupDuration", Type = "bool", Nilable = false, Default = true },
			},
		},
		{
			Name = "SetOrder",
			Type = "Function",

			Arguments =
			{
				{ Name = "newOrder", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetParent",
			Type = "Function",

			Arguments =
			{
				{ Name = "parent", Type = "table", Nilable = false },
				{ Name = "order", Type = "number", Nilable = true },
			},
		},
		{
			Name = "SetPlaying",
			Type = "Function",

			Arguments =
			{
				{ Name = "play", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetScript",
			Type = "Function",

			Arguments =
			{
				{ Name = "scriptTypeName", Type = "string", Nilable = false },
				{ Name = "script", Type = "function", Nilable = true },
			},
		},
		{
			Name = "SetSmoothProgress",
			Type = "Function",

			Arguments =
			{
				{ Name = "durationSec", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetSmoothing",
			Type = "Function",

			Arguments =
			{
				{ Name = "weights", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetStartDelay",
			Type = "Function",

			Arguments =
			{
				{ Name = "delaySec", Type = "number", Nilable = false },
				{ Name = "recomputeGroupDuration", Type = "bool", Nilable = false, Default = true },
			},
		},
		{
			Name = "SetTarget",
			Type = "Function",

			Arguments =
			{
				{ Name = "target", Type = "table", Nilable = false },
			},

			Returns =
			{
				{ Name = "success", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetTargetKey",
			Type = "Function",

			Arguments =
			{
				{ Name = "key", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "success", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetTargetName",
			Type = "Function",

			Arguments =
			{
				{ Name = "name", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "success", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetTargetParent",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "success", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "Stop",
			Type = "Function",

			Arguments =
			{
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "SimpleAnimAlphaAPI",
	Type = "ScriptObject",

	Functions =
	{
		{
			Name = "GetFromAlpha",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "normalizedAlpha", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetToAlpha",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "normalizedAlpha", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetFromAlpha",
			Type = "Function",

			Arguments =
			{
				{ Name = "normalizedAlpha", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetToAlpha",
			Type = "Function",

			Arguments =
			{
				{ Name = "normalizedAlpha", Type = "number", Nilable = false },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "SimpleAnimFlipBookAPI",
	Type = "ScriptObject",

	Functions =
	{
		{
			Name = "GetFlipBookColumns",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "columns", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetFlipBookFrameHeight",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "height", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetFlipBookFrameWidth",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "width", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetFlipBookFrames",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "frames", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetFlipBookRows",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "rows", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetFlipBookColumns",
			Type = "Function",

			Arguments =
			{
				{ Name = "columns", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetFlipBookFrameHeight",
			Type = "Function",

			Arguments =
			{
				{ Name = "height", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetFlipBookFrameWidth",
			Type = "Function",

			Arguments =
			{
				{ Name = "width", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetFlipBookFrames",
			Type = "Function",

			Arguments =
			{
				{ Name = "frames", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetFlipBookRows",
			Type = "Function",

			Arguments =
			{
				{ Name = "rows", Type = "number", Nilable = false },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "SimpleAnimGroupAPI",
	Type = "ScriptObject",

	Functions =
	{
		{
			Name = "CreateAnimation",
			Type = "Function",

			Arguments =
			{
				{ Name = "animationType", Type = "string", Nilable = true },
				{ Name = "name", Type = "string", Nilable = true },
				{ Name = "templateName", Type = "string", Nilable = true },
			},

			Returns =
			{
				{ Name = "anim", Type = "table", Nilable = false },
			},
		},
		{
			Name = "Finish",
			Type = "Function",

			Arguments =
			{
			},
		},
		{
			Name = "GetAnimationSpeedMultiplier",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "animationSpeedMultiplier", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetAnimations",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "scriptObject", Type = "ScriptObject", Nilable = false, StrideIndex = 1 },
			},
		},
		{
			Name = "GetDuration",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "durationSec", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetLoopState",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "loopState", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetLooping",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "loopType", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetProgress",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "progress", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetScript",
			Type = "Function",

			Arguments =
			{
				{ Name = "scriptTypeName", Type = "string", Nilable = false },
				{ Name = "bindingType", Type = "number", Nilable = true },
			},

			Returns =
			{
				{ Name = "script", Type = "function", Nilable = false },
			},
		},
		{
			Name = "HasScript",
			Type = "Function",

			Arguments =
			{
				{ Name = "scriptName", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "hasScript", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "HookScript",
			Type = "Function",

			Arguments =
			{
				{ Name = "scriptTypeName", Type = "string", Nilable = false },
				{ Name = "script", Type = "function", Nilable = false },
				{ Name = "bindingType", Type = "number", Nilable = true },
			},
		},
		{
			Name = "IsDone",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "isDone", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsPaused",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "isPaused", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsPendingFinish",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "isPendingFinish", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsPlaying",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "isPlaying", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsSetToFinalAlpha",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "isSetToFinalAlpha", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "Pause",
			Type = "Function",

			Arguments =
			{
			},
		},
		{
			Name = "Play",
			Type = "Function",

			Arguments =
			{
				{ Name = "reverse", Type = "bool", Nilable = false, Default = false },
				{ Name = "offset", Type = "number", Nilable = false, Default = 0 },
			},
		},
		{
			Name = "RemoveAnimations",
			Type = "Function",

			Arguments =
			{
			},
		},
		{
			Name = "Restart",
			Type = "Function",

			Arguments =
			{
				{ Name = "reverse", Type = "bool", Nilable = false, Default = false },
				{ Name = "offset", Type = "number", Nilable = false, Default = 0 },
			},
		},
		{
			Name = "SetAnimationSpeedMultiplier",
			Type = "Function",

			Arguments =
			{
				{ Name = "animationSpeedMultiplier", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetLooping",
			Type = "Function",

			Arguments =
			{
				{ Name = "loopType", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetPlaying",
			Type = "Function",

			Arguments =
			{
				{ Name = "play", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetScript",
			Type = "Function",

			Arguments =
			{
				{ Name = "scriptTypeName", Type = "string", Nilable = false },
				{ Name = "script", Type = "function", Nilable = true },
			},
		},
		{
			Name = "SetToFinalAlpha",
			Type = "Function",

			Arguments =
			{
				{ Name = "setToFinalAlpha", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "Stop",
			Type = "Function",

			Arguments =
			{
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "SimpleAnimPathAPI",
	Type = "ScriptObject",

	Functions =
	{
		{
			Name = "CreateControlPoint",
			Type = "Function",

			Arguments =
			{
				{ Name = "name", Type = "string", Nilable = true },
				{ Name = "templateName", Type = "string", Nilable = true },
				{ Name = "order", Type = "number", Nilable = true },
			},

			Returns =
			{
				{ Name = "point", Type = "table", Nilable = false },
			},
		},
		{
			Name = "GetControlPoints",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "scriptObject", Type = "ScriptObject", Nilable = false, StrideIndex = 1 },
			},
		},
		{
			Name = "GetCurveType",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "curveType", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetMaxControlPointOrder",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "maxOrder", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetCurveType",
			Type = "Function",

			Arguments =
			{
				{ Name = "curveType", Type = "string", Nilable = false },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "SimpleAnimRotationAPI",
	Type = "ScriptObject",

	Functions =
	{
		{
			Name = "GetDegrees",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "angle", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetOrigin",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "point", Type = "FramePoint", Nilable = false },
				{ Name = "originX", Type = "number", Nilable = false },
				{ Name = "originY", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetRadians",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "angle", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetDegrees",
			Type = "Function",

			Arguments =
			{
				{ Name = "angle", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetOrigin",
			Type = "Function",

			Arguments =
			{
				{ Name = "point", Type = "FramePoint", Nilable = false },
				{ Name = "originX", Type = "number", Nilable = false },
				{ Name = "originY", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetRadians",
			Type = "Function",

			Arguments =
			{
				{ Name = "angle", Type = "number", Nilable = false },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "SimpleAnimScaleAPI",
	Type = "ScriptObject",

	Functions =
	{
		{
			Name = "GetOrigin",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "point", Type = "FramePoint", Nilable = false },
				{ Name = "originX", Type = "number", Nilable = false },
				{ Name = "originY", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetScale",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "scaleX", Type = "number", Nilable = false },
				{ Name = "scaleY", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetScaleFrom",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "scaleX", Type = "number", Nilable = false },
				{ Name = "scaleY", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetScaleTo",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "scaleX", Type = "number", Nilable = false },
				{ Name = "scaleY", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetOrigin",
			Type = "Function",

			Arguments =
			{
				{ Name = "point", Type = "FramePoint", Nilable = false },
				{ Name = "originX", Type = "number", Nilable = false },
				{ Name = "originY", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetScale",
			Type = "Function",

			Arguments =
			{
				{ Name = "scaleX", Type = "number", Nilable = false },
				{ Name = "scaleY", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetScaleFrom",
			Type = "Function",

			Arguments =
			{
				{ Name = "scaleX", Type = "number", Nilable = false },
				{ Name = "scaleY", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetScaleTo",
			Type = "Function",

			Arguments =
			{
				{ Name = "scaleX", Type = "number", Nilable = false },
				{ Name = "scaleY", Type = "number", Nilable = false },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "SimpleAnimScaleLineAPI",
	Type = "ScriptObject",

	Functions =
	{
	},

	Events =
	{
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "SimpleAnimTextureCoordTranslationAPI",
	Type = "ScriptObject",

	Functions =
	{
		{
			Name = "GetOffset",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "offsetU", Type = "number", Nilable = false },
				{ Name = "offsetV", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetOffset",
			Type = "Function",

			Arguments =
			{
				{ Name = "offsetU", Type = "number", Nilable = false },
				{ Name = "offsetV", Type = "number", Nilable = false },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "SimpleAnimTranslationAPI",
	Type = "ScriptObject",

	Functions =
	{
		{
			Name = "GetOffset",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "offsetX", Type = "number", Nilable = false },
				{ Name = "offsetY", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetOffset",
			Type = "Function",

			Arguments =
			{
				{ Name = "offsetX", Type = "number", Nilable = false },
				{ Name = "offsetY", Type = "number", Nilable = false },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "SimpleAnimTranslationLineAPI",
	Type = "ScriptObject",

	Functions =
	{
	},

	Events =
	{
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "SimpleAnimatableObjectAPI",
	Type = "ScriptObject",

	Functions =
	{
		{
			Name = "CreateAnimationGroup",
			Type = "Function",

			Arguments =
			{
				{ Name = "name", Type = "string", Nilable = true },
				{ Name = "templateName", Type = "string", Nilable = true },
			},

			Returns =
			{
				{ Name = "group", Type = "table", Nilable = false },
			},
		},
		{
			Name = "GetAnimationGroups",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "scriptObject", Type = "ScriptObject", Nilable = false, StrideIndex = 1 },
			},
		},
		{
			Name = "StopAnimating",
			Type = "Function",

			Arguments =
			{
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "SimpleBrowserAPI",
	Type = "ScriptObject",

	Functions =
	{
		{
			Name = "ClearFocus",
			Type = "Function",

			Arguments =
			{
			},
		},
		{
			Name = "CopyExternalLink",
			Type = "Function",

			Arguments =
			{
			},
		},
		{
			Name = "DeleteCookies",
			Type = "Function",

			Arguments =
			{
			},
		},
		{
			Name = "NavigateBack",
			Type = "Function",

			Arguments =
			{
			},
		},
		{
			Name = "NavigateForward",
			Type = "Function",

			Arguments =
			{
			},
		},
		{
			Name = "NavigateHome",
			Type = "Function",

			Arguments =
			{
				{ Name = "urlType", Type = "string", Nilable = false },
			},
		},
		{
			Name = "NavigateReload",
			Type = "Function",

			Arguments =
			{
			},
		},
		{
			Name = "NavigateStop",
			Type = "Function",

			Arguments =
			{
			},
		},
		{
			Name = "NavigateTo",
			Type = "Function",
			Documentation = { "Not functional in public builds" },

			Arguments =
			{
				{ Name = "url", Type = "string", Nilable = false },
			},
		},
		{
			Name = "OpenExternalLink",
			Type = "Function",

			Arguments =
			{
			},
		},
		{
			Name = "OpenTicket",
			Type = "Function",

			Arguments =
			{
				{ Name = "index", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetFocus",
			Type = "Function",

			Arguments =
			{
			},
		},
		{
			Name = "SetZoom",
			Type = "Function",

			Arguments =
			{
				{ Name = "zoom", Type = "number", Nilable = false },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "SimpleButtonAPI",
	Type = "ScriptObject",

	Functions =
	{
		{
			Name = "ClearDisabledTexture",
			Type = "Function",

			Arguments =
			{
			},
		},
		{
			Name = "ClearHighlightTexture",
			Type = "Function",

			Arguments =
			{
			},
		},
		{
			Name = "ClearNormalTexture",
			Type = "Function",

			Arguments =
			{
			},
		},
		{
			Name = "ClearPushedTexture",
			Type = "Function",

			Arguments =
			{
			},
		},
		{
			Name = "Click",
			Type = "Function",

			Arguments =
			{
				{ Name = "button", Type = "string", Nilable = false, Default = "LeftButton" },
				{ Name = "isDown", Type = "bool", Nilable = false, Default = false },
			},
		},
		{
			Name = "Disable",
			Type = "Function",

			Arguments =
			{
			},
		},
		{
			Name = "Enable",
			Type = "Function",

			Arguments =
			{
			},
		},
		{
			Name = "GetButtonState",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "buttonState", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetDisabledFontObject",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "font", Type = "table", Nilable = false },
			},
		},
		{
			Name = "GetDisabledTexture",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "texture", Type = "table", Nilable = false },
			},
		},
		{
			Name = "GetFontString",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "fontString", Type = "table", Nilable = false },
			},
		},
		{
			Name = "GetHighlightFontObject",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "font", Type = "table", Nilable = false },
			},
		},
		{
			Name = "GetHighlightTexture",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "texture", Type = "table", Nilable = false },
			},
		},
		{
			Name = "GetMotionScriptsWhileDisabled",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "motionScriptsWhileDisabled", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetNormalFontObject",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "font", Type = "table", Nilable = false },
			},
		},
		{
			Name = "GetNormalTexture",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "texture", Type = "table", Nilable = false },
			},
		},
		{
			Name = "GetPushedTextOffset",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "offsetX", Type = "number", Nilable = false },
				{ Name = "offsetY", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetPushedTexture",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "texture", Type = "table", Nilable = false },
			},
		},
		{
			Name = "GetText",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "text", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetTextHeight",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "height", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetTextWidth",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "width", Type = "number", Nilable = false },
			},
		},
		{
			Name = "IsEnabled",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "isEnabled", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "LockHighlight",
			Type = "Function",

			Arguments =
			{
			},
		},
		{
			Name = "RegisterForClicks",
			Type = "Function",

			Arguments =
			{
				{ Name = "unpackedPrimitiveType", Type = "number", Nilable = false, StrideIndex = 1 },
			},
		},
		{
			Name = "RegisterForMouse",
			Type = "Function",

			Arguments =
			{
				{ Name = "unpackedPrimitiveType", Type = "number", Nilable = false, StrideIndex = 1 },
			},
		},
		{
			Name = "SetButtonState",
			Type = "Function",

			Arguments =
			{
				{ Name = "buttonState", Type = "string", Nilable = false },
				{ Name = "lock", Type = "bool", Nilable = false, Default = false },
			},
		},
		{
			Name = "SetDisabledAtlas",
			Type = "Function",

			Arguments =
			{
				{ Name = "atlas", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetDisabledFontObject",
			Type = "Function",

			Arguments =
			{
				{ Name = "font", Type = "table", Nilable = false },
			},
		},
		{
			Name = "SetDisabledTexture",
			Type = "Function",

			Arguments =
			{
				{ Name = "asset", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetEnabled",
			Type = "Function",

			Arguments =
			{
				{ Name = "enabled", Type = "bool", Nilable = false, Default = false },
			},
		},
		{
			Name = "SetFontString",
			Type = "Function",

			Arguments =
			{
				{ Name = "fontString", Type = "table", Nilable = false },
			},
		},
		{
			Name = "SetFormattedText",
			Type = "Function",

			Arguments =
			{
				{ Name = "text", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetHighlightAtlas",
			Type = "Function",

			Arguments =
			{
				{ Name = "atlas", Type = "string", Nilable = false },
				{ Name = "blendMode", Type = "string", Nilable = true },
			},
		},
		{
			Name = "SetHighlightFontObject",
			Type = "Function",

			Arguments =
			{
				{ Name = "font", Type = "table", Nilable = false },
			},
		},
		{
			Name = "SetHighlightLocked",
			Type = "Function",

			Arguments =
			{
				{ Name = "locked", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetHighlightTexture",
			Type = "Function",

			Arguments =
			{
				{ Name = "asset", Type = "string", Nilable = false },
				{ Name = "blendMode", Type = "string", Nilable = true },
			},
		},
		{
			Name = "SetMotionScriptsWhileDisabled",
			Type = "Function",

			Arguments =
			{
				{ Name = "motionScriptsWhileDisabled", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetNormalAtlas",
			Type = "Function",

			Arguments =
			{
				{ Name = "atlas", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetNormalFontObject",
			Type = "Function",

			Arguments =
			{
				{ Name = "font", Type = "table", Nilable = false },
			},
		},
		{
			Name = "SetNormalTexture",
			Type = "Function",

			Arguments =
			{
				{ Name = "asset", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetPushedAtlas",
			Type = "Function",

			Arguments =
			{
				{ Name = "atlas", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetPushedTextOffset",
			Type = "Function",

			Arguments =
			{
				{ Name = "offsetX", Type = "number", Nilable = false },
				{ Name = "offsetY", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetPushedTexture",
			Type = "Function",

			Arguments =
			{
				{ Name = "asset", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetText",
			Type = "Function",

			Arguments =
			{
				{ Name = "text", Type = "string", Nilable = false, Default = "" },
			},
		},
		{
			Name = "UnlockHighlight",
			Type = "Function",

			Arguments =
			{
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "SimpleCheckboxAPI",
	Type = "ScriptObject",

	Functions =
	{
		{
			Name = "GetChecked",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "checked", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetCheckedTexture",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "texture", Type = "table", Nilable = false },
			},
		},
		{
			Name = "GetDisabledCheckedTexture",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "texture", Type = "table", Nilable = false },
			},
		},
		{
			Name = "SetChecked",
			Type = "Function",

			Arguments =
			{
				{ Name = "checked", Type = "bool", Nilable = false, Default = false },
			},
		},
		{
			Name = "SetCheckedTexture",
			Type = "Function",

			Arguments =
			{
				{ Name = "asset", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetDisabledCheckedTexture",
			Type = "Function",

			Arguments =
			{
				{ Name = "asset", Type = "string", Nilable = false },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "SimpleColorSelectAPI",
	Type = "ScriptObject",

	Functions =
	{
		{
			Name = "ClearColorWheelTexture",
			Type = "Function",

			Arguments =
			{
			},
		},
		{
			Name = "GetColorHSV",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "hsvX", Type = "number", Nilable = false },
				{ Name = "hsvY", Type = "number", Nilable = false },
				{ Name = "hsvZ", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetColorRGB",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "rgbR", Type = "number", Nilable = false },
				{ Name = "rgbG", Type = "number", Nilable = false },
				{ Name = "rgbB", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetColorValueTexture",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "texture", Type = "table", Nilable = false },
			},
		},
		{
			Name = "GetColorValueThumbTexture",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "texture", Type = "table", Nilable = false },
			},
		},
		{
			Name = "GetColorWheelTexture",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "texture", Type = "table", Nilable = false },
			},
		},
		{
			Name = "GetColorWheelThumbTexture",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "texture", Type = "table", Nilable = false },
			},
		},
		{
			Name = "SetColorHSV",
			Type = "Function",

			Arguments =
			{
				{ Name = "hsvX", Type = "number", Nilable = false },
				{ Name = "hsvY", Type = "number", Nilable = false },
				{ Name = "hsvZ", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetColorRGB",
			Type = "Function",

			Arguments =
			{
				{ Name = "rgbR", Type = "number", Nilable = false },
				{ Name = "rgbG", Type = "number", Nilable = false },
				{ Name = "rgbB", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetColorValueTexture",
			Type = "Function",

			Arguments =
			{
				{ Name = "texture", Type = "table", Nilable = false },
			},
		},
		{
			Name = "SetColorValueThumbTexture",
			Type = "Function",

			Arguments =
			{
				{ Name = "texture", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetColorWheelTexture",
			Type = "Function",

			Arguments =
			{
				{ Name = "texture", Type = "table", Nilable = false },
			},
		},
		{
			Name = "SetColorWheelThumbTexture",
			Type = "Function",

			Arguments =
			{
				{ Name = "texture", Type = "string", Nilable = false },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "SimpleControlPointAPI",
	Type = "ScriptObject",

	Functions =
	{
		{
			Name = "GetOffset",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "offsetX", Type = "number", Nilable = false },
				{ Name = "offsetY", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetOrder",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "order", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetOffset",
			Type = "Function",

			Arguments =
			{
				{ Name = "offsetX", Type = "number", Nilable = false },
				{ Name = "offsetY", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetOrder",
			Type = "Function",

			Arguments =
			{
				{ Name = "order", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetParent",
			Type = "Function",

			Arguments =
			{
				{ Name = "parent", Type = "table", Nilable = false },
				{ Name = "order", Type = "number", Nilable = true },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "SimpleEditBoxAPI",
	Type = "ScriptObject",

	Functions =
	{
		{
			Name = "AddHistoryLine",
			Type = "Function",

			Arguments =
			{
				{ Name = "text", Type = "string", Nilable = false },
			},
		},
		{
			Name = "ClearFocus",
			Type = "Function",

			Arguments =
			{
			},
		},
		{
			Name = "ClearHighlightText",
			Type = "Function",

			Arguments =
			{
			},
		},
		{
			Name = "ClearHistory",
			Type = "Function",

			Arguments =
			{
			},
		},
		{
			Name = "Disable",
			Type = "Function",

			Arguments =
			{
			},
		},
		{
			Name = "Enable",
			Type = "Function",

			Arguments =
			{
			},
		},
		{
			Name = "GetAltArrowKeyMode",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "altMode", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetBlinkSpeed",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "cursorBlinkSpeedSec", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetCursorPosition",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "cursorPosition", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetDisplayText",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "displayText", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetFont",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "fontHeight", Type = "number", Nilable = false },
				{ Name = "flags", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetFontObject",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "font", Type = "table", Nilable = false },
			},
		},
		{
			Name = "GetHighlightColor",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "colorR", Type = "number", Nilable = false },
				{ Name = "colorG", Type = "number", Nilable = false },
				{ Name = "colorB", Type = "number", Nilable = false },
				{ Name = "colorA", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetHistoryLines",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "numHistoryLines", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetIndentedWordWrap",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "isIndented", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetInputLanguage",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "language", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetJustifyH",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "justifyH", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetJustifyV",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "justifyV", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetMaxBytes",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "maxBytes", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetMaxLetters",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "maxLetters", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetNumLetters",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "numLetters", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetNumber",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "number", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetShadowColor",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "colorR", Type = "number", Nilable = false },
				{ Name = "colorG", Type = "number", Nilable = false },
				{ Name = "colorB", Type = "number", Nilable = false },
				{ Name = "colorA", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetShadowOffset",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "offsetX", Type = "number", Nilable = false },
				{ Name = "offsetY", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetSpacing",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "fontHeight", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetText",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "text", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetTextColor",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "colorR", Type = "number", Nilable = false },
				{ Name = "colorG", Type = "number", Nilable = false },
				{ Name = "colorB", Type = "number", Nilable = false },
				{ Name = "colorA", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetTextInsets",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "left", Type = "number", Nilable = false },
				{ Name = "right", Type = "number", Nilable = false },
				{ Name = "top", Type = "number", Nilable = false },
				{ Name = "bottom", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetUTF8CursorPosition",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "cursorPosition", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetVisibleTextByteLimit",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "maxVisibleBytes", Type = "number", Nilable = false },
			},
		},
		{
			Name = "HasFocus",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "hasFocus", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "HasText",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "hasText", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "HighlightText",
			Type = "Function",

			Arguments =
			{
				{ Name = "start", Type = "number", Nilable = false, Default = 0 },
				{ Name = "stop", Type = "number", Nilable = false, Default = -1 },
			},
		},
		{
			Name = "Insert",
			Type = "Function",

			Arguments =
			{
				{ Name = "text", Type = "string", Nilable = false },
			},
		},
		{
			Name = "IsAutoFocus",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "autoFocus", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsCountInvisibleLetters",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "countInvisibleLetters", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsEnabled",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "isEnabled", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsInIMECompositionMode",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "isInIMECompositionMode", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsMultiLine",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "multiline", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsNumeric",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "isNumeric", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsPassword",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "isPassword", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsSecureText",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "isSecure", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetAltArrowKeyMode",
			Type = "Function",

			Arguments =
			{
				{ Name = "altMode", Type = "bool", Nilable = false, Default = false },
			},
		},
		{
			Name = "SetAutoFocus",
			Type = "Function",

			Arguments =
			{
				{ Name = "autoFocus", Type = "bool", Nilable = false, Default = false },
			},
		},
		{
			Name = "SetBlinkSpeed",
			Type = "Function",

			Arguments =
			{
				{ Name = "cursorBlinkSpeedSec", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetCountInvisibleLetters",
			Type = "Function",

			Arguments =
			{
				{ Name = "countInvisibleLetters", Type = "bool", Nilable = false, Default = false },
			},
		},
		{
			Name = "SetCursorPosition",
			Type = "Function",

			Arguments =
			{
				{ Name = "cursorPosition", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetEnabled",
			Type = "Function",

			Arguments =
			{
				{ Name = "enabled", Type = "bool", Nilable = false, Default = false },
			},
		},
		{
			Name = "SetFocus",
			Type = "Function",

			Arguments =
			{
			},
		},
		{
			Name = "SetFont",
			Type = "Function",

			Arguments =
			{
				{ Name = "fontFile", Type = "string", Nilable = false },
				{ Name = "height", Type = "number", Nilable = false },
				{ Name = "flags", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "success", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetFontObject",
			Type = "Function",

			Arguments =
			{
				{ Name = "font", Type = "table", Nilable = false },
			},
		},
		{
			Name = "SetHighlightColor",
			Type = "Function",

			Arguments =
			{
				{ Name = "colorR", Type = "number", Nilable = false },
				{ Name = "colorG", Type = "number", Nilable = false },
				{ Name = "colorB", Type = "number", Nilable = false },
				{ Name = "a", Type = "number", Nilable = true },
			},
		},
		{
			Name = "SetHistoryLines",
			Type = "Function",

			Arguments =
			{
				{ Name = "numHistoryLines", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetIndentedWordWrap",
			Type = "Function",

			Arguments =
			{
				{ Name = "isIndented", Type = "bool", Nilable = false, Default = false },
			},
		},
		{
			Name = "SetJustifyH",
			Type = "Function",

			Arguments =
			{
				{ Name = "justifyH", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetJustifyV",
			Type = "Function",

			Arguments =
			{
				{ Name = "justifyV", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetMaxBytes",
			Type = "Function",

			Arguments =
			{
				{ Name = "maxBytes", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetMaxLetters",
			Type = "Function",

			Arguments =
			{
				{ Name = "maxLetters", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetMultiLine",
			Type = "Function",

			Arguments =
			{
				{ Name = "multiline", Type = "bool", Nilable = false, Default = false },
			},
		},
		{
			Name = "SetNumber",
			Type = "Function",

			Arguments =
			{
				{ Name = "number", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetNumeric",
			Type = "Function",

			Arguments =
			{
				{ Name = "isNumeric", Type = "bool", Nilable = false, Default = false },
			},
		},
		{
			Name = "SetPassword",
			Type = "Function",

			Arguments =
			{
				{ Name = "isPassword", Type = "bool", Nilable = false, Default = false },
			},
		},
		{
			Name = "SetSecureText",
			Type = "Function",

			Arguments =
			{
				{ Name = "isSecure", Type = "bool", Nilable = false, Default = false },
			},
		},
		{
			Name = "SetSecurityDisablePaste",
			Type = "Function",

			Arguments =
			{
			},
		},
		{
			Name = "SetSecurityDisableSetText",
			Type = "Function",

			Arguments =
			{
			},
		},
		{
			Name = "SetShadowColor",
			Type = "Function",

			Arguments =
			{
				{ Name = "colorR", Type = "number", Nilable = false },
				{ Name = "colorG", Type = "number", Nilable = false },
				{ Name = "colorB", Type = "number", Nilable = false },
				{ Name = "a", Type = "number", Nilable = true },
			},
		},
		{
			Name = "SetShadowOffset",
			Type = "Function",

			Arguments =
			{
				{ Name = "offsetX", Type = "number", Nilable = false },
				{ Name = "offsetY", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetSpacing",
			Type = "Function",

			Arguments =
			{
				{ Name = "fontHeight", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetText",
			Type = "Function",

			Arguments =
			{
				{ Name = "text", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetTextColor",
			Type = "Function",

			Arguments =
			{
				{ Name = "colorR", Type = "number", Nilable = false },
				{ Name = "colorG", Type = "number", Nilable = false },
				{ Name = "colorB", Type = "number", Nilable = false },
				{ Name = "a", Type = "number", Nilable = true },
			},
		},
		{
			Name = "SetTextInsets",
			Type = "Function",

			Arguments =
			{
				{ Name = "left", Type = "number", Nilable = false },
				{ Name = "right", Type = "number", Nilable = false },
				{ Name = "top", Type = "number", Nilable = false },
				{ Name = "bottom", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetVisibleTextByteLimit",
			Type = "Function",

			Arguments =
			{
				{ Name = "maxVisibleBytes", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ToggleInputLanguage",
			Type = "Function",

			Arguments =
			{
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "SimpleFontAPI",
	Type = "ScriptObject",

	Functions =
	{
		{
			Name = "CopyFontObject",
			Type = "Function",

			Arguments =
			{
				{ Name = "sourceFont", Type = "table", Nilable = false },
			},
		},
		{
			Name = "GetAlpha",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "alpha", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetFont",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "fontFile", Type = "string", Nilable = false },
				{ Name = "height", Type = "number", Nilable = false },
				{ Name = "flags", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetFontObject",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "font", Type = "table", Nilable = false },
			},
		},
		{
			Name = "GetIndentedWordWrap",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "wordWrap", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetJustifyH",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "justifyH", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetJustifyV",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "justifyV", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetShadowColor",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "colorR", Type = "number", Nilable = false },
				{ Name = "colorG", Type = "number", Nilable = false },
				{ Name = "colorB", Type = "number", Nilable = false },
				{ Name = "colorA", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetShadowOffset",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "offsetX", Type = "number", Nilable = false },
				{ Name = "offsetY", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetSpacing",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "spacing", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetTextColor",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "colorR", Type = "number", Nilable = false },
				{ Name = "colorG", Type = "number", Nilable = false },
				{ Name = "colorB", Type = "number", Nilable = false },
				{ Name = "colorA", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetAlpha",
			Type = "Function",

			Arguments =
			{
				{ Name = "alpha", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetFont",
			Type = "Function",

			Arguments =
			{
				{ Name = "fontFile", Type = "string", Nilable = false },
				{ Name = "height", Type = "number", Nilable = false },
				{ Name = "flags", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetFontObject",
			Type = "Function",

			Arguments =
			{
				{ Name = "font", Type = "table", Nilable = false },
			},
		},
		{
			Name = "SetIndentedWordWrap",
			Type = "Function",

			Arguments =
			{
				{ Name = "wordWrap", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetJustifyH",
			Type = "Function",

			Arguments =
			{
				{ Name = "justifyH", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetJustifyV",
			Type = "Function",

			Arguments =
			{
				{ Name = "justifyV", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetShadowColor",
			Type = "Function",

			Arguments =
			{
				{ Name = "colorR", Type = "number", Nilable = false },
				{ Name = "colorG", Type = "number", Nilable = false },
				{ Name = "colorB", Type = "number", Nilable = false },
				{ Name = "a", Type = "number", Nilable = true },
			},
		},
		{
			Name = "SetShadowOffset",
			Type = "Function",

			Arguments =
			{
				{ Name = "offsetX", Type = "number", Nilable = false },
				{ Name = "offsetY", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetSpacing",
			Type = "Function",

			Arguments =
			{
				{ Name = "spacing", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetTextColor",
			Type = "Function",

			Arguments =
			{
				{ Name = "colorR", Type = "number", Nilable = false },
				{ Name = "colorG", Type = "number", Nilable = false },
				{ Name = "colorB", Type = "number", Nilable = false },
				{ Name = "a", Type = "number", Nilable = true },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "SimpleFontStringAPI",
	Type = "ScriptObject",

	Functions =
	{
		{
			Name = "CalculateScreenAreaFromCharacterSpan",
			Type = "Function",

			Arguments =
			{
				{ Name = "leftIndex", Type = "number", Nilable = false },
				{ Name = "rightIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "areas", Type = "table", InnerType = "uiRect", Nilable = true },
			},
		},
		{
			Name = "CanNonSpaceWrap",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "wrap", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "CanWordWrap",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "wrap", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "FindCharacterIndexAtCoordinate",
			Type = "Function",

			Arguments =
			{
				{ Name = "x", Type = "number", Nilable = false },
				{ Name = "y", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "characterIndex", Type = "number", Nilable = false },
				{ Name = "inside", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetFieldSize",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "fieldSize", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetFont",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "fontFile", Type = "string", Nilable = true },
				{ Name = "fontHeight", Type = "number", Nilable = false },
				{ Name = "flags", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetFontObject",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "font", Type = "table", Nilable = false },
			},
		},
		{
			Name = "GetIndentedWordWrap",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "wrap", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetJustifyH",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "justifyH", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetJustifyV",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "justifyH", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetLineHeight",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "lineHeight", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetMaxLines",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "maxLines", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetNumLines",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "numLines", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetRotation",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "radians", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetShadowColor",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "colorR", Type = "number", Nilable = false },
				{ Name = "colorG", Type = "number", Nilable = false },
				{ Name = "colorB", Type = "number", Nilable = false },
				{ Name = "colorA", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetShadowOffset",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "offsetX", Type = "number", Nilable = false },
				{ Name = "offsetY", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetSpacing",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "spacing", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetStringHeight",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "height", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetStringWidth",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "width", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetText",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "text", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetTextColor",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "colorR", Type = "number", Nilable = false },
				{ Name = "colorG", Type = "number", Nilable = false },
				{ Name = "colorB", Type = "number", Nilable = false },
				{ Name = "colorA", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetTextScale",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "textScale", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetUnboundedStringWidth",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "width", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetWrappedWidth",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "width", Type = "number", Nilable = false },
			},
		},
		{
			Name = "IsTruncated",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "isTruncated", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetAlphaGradient",
			Type = "Function",

			Arguments =
			{
				{ Name = "start", Type = "number", Nilable = false },
				{ Name = "length", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isWithinText", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetFixedColor",
			Type = "Function",

			Arguments =
			{
				{ Name = "fixedColor", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetFont",
			Type = "Function",

			Arguments =
			{
				{ Name = "fontFile", Type = "string", Nilable = false },
				{ Name = "fontHeight", Type = "number", Nilable = false },
				{ Name = "flags", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetFontObject",
			Type = "Function",

			Arguments =
			{
				{ Name = "font", Type = "table", Nilable = false },
			},
		},
		{
			Name = "SetFormattedText",
			Type = "Function",

			Arguments =
			{
				{ Name = "text", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetIndentedWordWrap",
			Type = "Function",

			Arguments =
			{
				{ Name = "wrap", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetJustifyH",
			Type = "Function",

			Arguments =
			{
				{ Name = "justifyH", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetJustifyV",
			Type = "Function",

			Arguments =
			{
				{ Name = "justifyV", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetMaxLines",
			Type = "Function",

			Arguments =
			{
				{ Name = "maxLines", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetNonSpaceWrap",
			Type = "Function",

			Arguments =
			{
				{ Name = "wrap", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetRotation",
			Type = "Function",

			Arguments =
			{
				{ Name = "radians", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetShadowColor",
			Type = "Function",

			Arguments =
			{
				{ Name = "colorR", Type = "number", Nilable = false },
				{ Name = "colorG", Type = "number", Nilable = false },
				{ Name = "colorB", Type = "number", Nilable = false },
				{ Name = "a", Type = "number", Nilable = true },
			},
		},
		{
			Name = "SetShadowOffset",
			Type = "Function",

			Arguments =
			{
				{ Name = "offsetX", Type = "number", Nilable = false },
				{ Name = "offsetY", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetSpacing",
			Type = "Function",

			Arguments =
			{
				{ Name = "spacing", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetText",
			Type = "Function",

			Arguments =
			{
				{ Name = "text", Type = "string", Nilable = false, Default = "" },
			},
		},
		{
			Name = "SetTextColor",
			Type = "Function",

			Arguments =
			{
				{ Name = "colorR", Type = "number", Nilable = false },
				{ Name = "colorG", Type = "number", Nilable = false },
				{ Name = "colorB", Type = "number", Nilable = false },
				{ Name = "a", Type = "number", Nilable = true },
			},
		},
		{
			Name = "SetTextHeight",
			Type = "Function",

			Arguments =
			{
				{ Name = "height", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetTextScale",
			Type = "Function",

			Arguments =
			{
				{ Name = "textScale", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetWordWrap",
			Type = "Function",

			Arguments =
			{
				{ Name = "wrap", Type = "bool", Nilable = false },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "SimpleFrameAPI",
	Type = "ScriptObject",

	Functions =
	{
		{
			Name = "CanChangeAttribute",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "canChangeAttributes", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "CreateFontString",
			Type = "Function",

			Arguments =
			{
				{ Name = "name", Type = "string", Nilable = true },
				{ Name = "drawLayer", Type = "string", Nilable = true },
				{ Name = "templateName", Type = "string", Nilable = true },
			},

			Returns =
			{
				{ Name = "line", Type = "table", Nilable = false },
			},
		},
		{
			Name = "CreateLine",
			Type = "Function",

			Arguments =
			{
				{ Name = "name", Type = "string", Nilable = true },
				{ Name = "drawLayer", Type = "string", Nilable = true },
				{ Name = "templateName", Type = "string", Nilable = true },
				{ Name = "subLevel", Type = "number", Nilable = true },
			},

			Returns =
			{
				{ Name = "line", Type = "table", Nilable = false },
			},
		},
		{
			Name = "CreateMaskTexture",
			Type = "Function",

			Arguments =
			{
				{ Name = "name", Type = "string", Nilable = true },
				{ Name = "drawLayer", Type = "string", Nilable = true },
				{ Name = "templateName", Type = "string", Nilable = true },
				{ Name = "subLevel", Type = "number", Nilable = true },
			},

			Returns =
			{
				{ Name = "maskTexture", Type = "table", Nilable = false },
			},
		},
		{
			Name = "CreateTexture",
			Type = "Function",

			Arguments =
			{
				{ Name = "name", Type = "string", Nilable = true },
				{ Name = "drawLayer", Type = "string", Nilable = true },
				{ Name = "templateName", Type = "string", Nilable = true },
				{ Name = "subLevel", Type = "number", Nilable = true },
			},

			Returns =
			{
				{ Name = "texture", Type = "table", Nilable = false },
			},
		},
		{
			Name = "DesaturateHierarchy",
			Type = "Function",

			Arguments =
			{
				{ Name = "desaturation", Type = "number", Nilable = false },
				{ Name = "excludeRoot", Type = "bool", Nilable = false, Default = false },
			},
		},
		{
			Name = "DisableDrawLayer",
			Type = "Function",

			Arguments =
			{
				{ Name = "layer", Type = "string", Nilable = false },
			},
		},
		{
			Name = "DoesClipChildren",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "clipsChildren", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "EnableDrawLayer",
			Type = "Function",

			Arguments =
			{
				{ Name = "layer", Type = "string", Nilable = false },
			},
		},
		{
			Name = "EnableGamePadButton",
			Type = "Function",

			Arguments =
			{
				{ Name = "enable", Type = "bool", Nilable = false, Default = false },
			},
		},
		{
			Name = "EnableGamePadStick",
			Type = "Function",

			Arguments =
			{
				{ Name = "enable", Type = "bool", Nilable = false, Default = false },
			},
		},
		{
			Name = "EnableKeyboard",
			Type = "Function",

			Arguments =
			{
				{ Name = "enable", Type = "bool", Nilable = false, Default = false },
			},
		},
		{
			Name = "ExecuteAttribute",
			Type = "Function",

			Arguments =
			{
				{ Name = "attributeName", Type = "string", Nilable = false },
				{ Name = "unpackedPrimitiveType", Type = "string", Nilable = false, StrideIndex = 1 },
			},

			Returns =
			{
				{ Name = "success", Type = "bool", Nilable = false },
				{ Name = "unpackedPrimitiveType", Type = "string", Nilable = false, StrideIndex = 1 },
			},
		},
		{
			Name = "GetAlpha",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "alpha", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetAttribute",
			Type = "Function",

			Arguments =
			{
				{ Name = "attributeName", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "value", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetBoundsRect",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "left", Type = "number", Nilable = false },
				{ Name = "bottom", Type = "number", Nilable = false },
				{ Name = "width", Type = "number", Nilable = false },
				{ Name = "height", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetChildren",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "scriptObject", Type = "ScriptObject", Nilable = false, StrideIndex = 1 },
			},
		},
		{
			Name = "GetClampRectInsets",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "left", Type = "number", Nilable = false },
				{ Name = "right", Type = "number", Nilable = false },
				{ Name = "top", Type = "number", Nilable = false },
				{ Name = "bottom", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetDontSavePosition",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "dontSave", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetEffectiveAlpha",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "effectiveAlpha", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetEffectiveScale",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "effectiveScale", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetEffectivelyFlattensRenderLayers",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "flatten", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetFlattensRenderLayers",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "flatten", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetFrameLevel",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "frameLevel", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetFrameStrata",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "strata", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetHitRectInsets",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "left", Type = "number", Nilable = false },
				{ Name = "right", Type = "number", Nilable = false },
				{ Name = "top", Type = "number", Nilable = false },
				{ Name = "bottom", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetHyperlinksEnabled",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "enabled", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetID",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "id", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetNumChildren",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "numChildren", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetNumRegions",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "numRegions", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetPropagateKeyboardInput",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "propagate", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetRegions",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "scriptObject", Type = "ScriptObject", Nilable = false, StrideIndex = 1 },
			},
		},
		{
			Name = "GetResizeBounds",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "minWidth", Type = "number", Nilable = false },
				{ Name = "minHeight", Type = "number", Nilable = false },
				{ Name = "maxWidth", Type = "number", Nilable = false },
				{ Name = "maxHeight", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetScale",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "frameScale", Type = "number", Nilable = false },
			},
		},
		{
			Name = "HasFixedFrameLevel",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "isFixed", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "HasFixedFrameStrata",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "isFixed", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "Hide",
			Type = "Function",

			Arguments =
			{
			},
		},
		{
			Name = "IsClampedToScreen",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "clampedToScreen", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsEventRegistered",
			Type = "Function",

			Arguments =
			{
				{ Name = "eventName", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "isRegistered", Type = "bool", Nilable = false },
				{ Name = "units", Type = "string", Nilable = true, StrideIndex = 1 },
			},
		},
		{
			Name = "IsGamePadButtonEnabled",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "enabled", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsGamePadStickEnabled",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "enabled", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsIgnoringParentAlpha",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "ignore", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsIgnoringParentScale",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "ignore", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsKeyboardEnabled",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "enabled", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsMovable",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "isMovable", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsObjectLoaded",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "isLoaded", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsResizable",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "resizable", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsShown",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "isShown", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsToplevel",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "isTopLevel", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsUserPlaced",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "isUserPlaced", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsVisible",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "isVisible", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "Lower",
			Type = "Function",

			Arguments =
			{
			},
		},
		{
			Name = "Raise",
			Type = "Function",

			Arguments =
			{
			},
		},
		{
			Name = "RegisterAllEvents",
			Type = "Function",

			Arguments =
			{
			},
		},
		{
			Name = "RegisterEvent",
			Type = "Function",

			Arguments =
			{
				{ Name = "eventName", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "registered", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "RegisterForDrag",
			Type = "Function",

			Arguments =
			{
				{ Name = "unpackedPrimitiveType", Type = "number", Nilable = false, StrideIndex = 1 },
			},
		},
		{
			Name = "RegisterUnitEvent",
			Type = "Function",

			Arguments =
			{
				{ Name = "eventName", Type = "string", Nilable = false },
				{ Name = "units", Type = "string", Nilable = false, StrideIndex = 1 },
			},

			Returns =
			{
				{ Name = "registered", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "RotateTextures",
			Type = "Function",

			Arguments =
			{
				{ Name = "radians", Type = "number", Nilable = false },
				{ Name = "x", Type = "number", Nilable = false, Default = 0.5 },
				{ Name = "y", Type = "number", Nilable = false, Default = 0.5 },
			},
		},
		{
			Name = "SetAlpha",
			Type = "Function",

			Arguments =
			{
				{ Name = "alpha", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetAttribute",
			Type = "Function",

			Arguments =
			{
				{ Name = "attributeName", Type = "string", Nilable = false },
				{ Name = "value", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetAttributeNoHandler",
			Type = "Function",

			Arguments =
			{
				{ Name = "attributeName", Type = "string", Nilable = false },
				{ Name = "value", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetClampRectInsets",
			Type = "Function",

			Arguments =
			{
				{ Name = "left", Type = "number", Nilable = false },
				{ Name = "right", Type = "number", Nilable = false },
				{ Name = "top", Type = "number", Nilable = false },
				{ Name = "bottom", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetClampedToScreen",
			Type = "Function",

			Arguments =
			{
				{ Name = "clampedToScreen", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetClipsChildren",
			Type = "Function",

			Arguments =
			{
				{ Name = "clipsChildren", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetDontSavePosition",
			Type = "Function",

			Arguments =
			{
				{ Name = "dontSave", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetDrawLayerEnabled",
			Type = "Function",

			Arguments =
			{
				{ Name = "layer", Type = "string", Nilable = false },
				{ Name = "isEnabled", Type = "bool", Nilable = false, Default = false },
			},
		},
		{
			Name = "SetFixedFrameLevel",
			Type = "Function",

			Arguments =
			{
				{ Name = "isFixed", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetFixedFrameStrata",
			Type = "Function",

			Arguments =
			{
				{ Name = "isFixed", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetFlattensRenderLayers",
			Type = "Function",

			Arguments =
			{
				{ Name = "flatten", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetFrameLevel",
			Type = "Function",

			Arguments =
			{
				{ Name = "frameLevel", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetFrameStrata",
			Type = "Function",

			Arguments =
			{
				{ Name = "strata", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetHitRectInsets",
			Type = "Function",

			Arguments =
			{
				{ Name = "left", Type = "number", Nilable = false },
				{ Name = "right", Type = "number", Nilable = false },
				{ Name = "top", Type = "number", Nilable = false },
				{ Name = "bottom", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetHyperlinksEnabled",
			Type = "Function",

			Arguments =
			{
				{ Name = "enabled", Type = "bool", Nilable = false, Default = false },
			},
		},
		{
			Name = "SetID",
			Type = "Function",

			Arguments =
			{
				{ Name = "id", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetIgnoreParentAlpha",
			Type = "Function",

			Arguments =
			{
				{ Name = "ignore", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetIgnoreParentScale",
			Type = "Function",

			Arguments =
			{
				{ Name = "ignore", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetIsFrameBuffer",
			Type = "Function",

			Arguments =
			{
				{ Name = "isFrameBuffer", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetMovable",
			Type = "Function",

			Arguments =
			{
				{ Name = "movable", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetPropagateKeyboardInput",
			Type = "Function",

			Arguments =
			{
				{ Name = "propagate", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetResizable",
			Type = "Function",

			Arguments =
			{
				{ Name = "resizable", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetResizeBounds",
			Type = "Function",

			Arguments =
			{
				{ Name = "minWidth", Type = "number", Nilable = false },
				{ Name = "minHeight", Type = "number", Nilable = false },
				{ Name = "maxWidth", Type = "number", Nilable = true },
				{ Name = "maxHeight", Type = "number", Nilable = true },
			},
		},
		{
			Name = "SetScale",
			Type = "Function",

			Arguments =
			{
				{ Name = "scale", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetShown",
			Type = "Function",

			Arguments =
			{
				{ Name = "shown", Type = "bool", Nilable = false, Default = false },
			},
		},
		{
			Name = "SetToplevel",
			Type = "Function",

			Arguments =
			{
				{ Name = "topLevel", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetUserPlaced",
			Type = "Function",

			Arguments =
			{
				{ Name = "userPlaced", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "Show",
			Type = "Function",

			Arguments =
			{
			},
		},
		{
			Name = "StartMoving",
			Type = "Function",

			Arguments =
			{
				{ Name = "alwaysStartFromMouse", Type = "bool", Nilable = false, Default = false },
			},
		},
		{
			Name = "StartSizing",
			Type = "Function",

			Arguments =
			{
				{ Name = "resizePoint", Type = "FramePoint", Nilable = true },
				{ Name = "alwaysStartFromMouse", Type = "bool", Nilable = false, Default = false },
			},
		},
		{
			Name = "StopMovingOrSizing",
			Type = "Function",

			Arguments =
			{
			},
		},
		{
			Name = "UnregisterAllEvents",
			Type = "Function",

			Arguments =
			{
			},
		},
		{
			Name = "UnregisterEvent",
			Type = "Function",

			Arguments =
			{
				{ Name = "eventName", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "registered", Type = "bool", Nilable = false },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "SimpleFrameScriptObjectAPI",
	Type = "ScriptObject",

	Functions =
	{
		{
			Name = "GetName",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "name", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetObjectType",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "objectType", Type = "string", Nilable = false },
			},
		},
		{
			Name = "IsForbidden",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "isForbidden", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsObjectType",
			Type = "Function",

			Arguments =
			{
				{ Name = "objectType", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "isType", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetForbidden",
			Type = "Function",

			Arguments =
			{
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "SimpleHTMLAPI",
	Type = "ScriptObject",

	Functions =
	{
		{
			Name = "GetContentHeight",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "height", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetFont",
			Type = "Function",

			Arguments =
			{
				{ Name = "textType", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "fontFile", Type = "string", Nilable = false },
				{ Name = "height", Type = "number", Nilable = false },
				{ Name = "flags", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetFontObject",
			Type = "Function",

			Arguments =
			{
				{ Name = "textType", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "font", Type = "table", Nilable = false },
			},
		},
		{
			Name = "GetHyperlinkFormat",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "format", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetIndentedWordWrap",
			Type = "Function",

			Arguments =
			{
				{ Name = "textType", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "wordWrap", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetJustifyH",
			Type = "Function",

			Arguments =
			{
				{ Name = "textType", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "justifyH", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetJustifyV",
			Type = "Function",

			Arguments =
			{
				{ Name = "textType", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "justifyV", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetShadowColor",
			Type = "Function",

			Arguments =
			{
				{ Name = "textType", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "colorR", Type = "number", Nilable = false },
				{ Name = "colorG", Type = "number", Nilable = false },
				{ Name = "colorB", Type = "number", Nilable = false },
				{ Name = "colorA", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetShadowOffset",
			Type = "Function",

			Arguments =
			{
				{ Name = "textType", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "offsetX", Type = "number", Nilable = false },
				{ Name = "offsetY", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetSpacing",
			Type = "Function",

			Arguments =
			{
				{ Name = "textType", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "spacing", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetTextColor",
			Type = "Function",

			Arguments =
			{
				{ Name = "textType", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "colorR", Type = "number", Nilable = false },
				{ Name = "colorG", Type = "number", Nilable = false },
				{ Name = "colorB", Type = "number", Nilable = false },
				{ Name = "colorA", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetTextData",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "content", Type = "table", InnerType = "HTMLContentNode", Nilable = false },
			},
		},
		{
			Name = "SetFont",
			Type = "Function",

			Arguments =
			{
				{ Name = "textType", Type = "string", Nilable = false },
				{ Name = "fontFile", Type = "string", Nilable = false },
				{ Name = "height", Type = "number", Nilable = false },
				{ Name = "flags", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetFontObject",
			Type = "Function",

			Arguments =
			{
				{ Name = "textType", Type = "string", Nilable = false },
				{ Name = "font", Type = "table", Nilable = false },
			},
		},
		{
			Name = "SetHyperlinkFormat",
			Type = "Function",

			Arguments =
			{
				{ Name = "format", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetIndentedWordWrap",
			Type = "Function",

			Arguments =
			{
				{ Name = "textType", Type = "string", Nilable = false },
				{ Name = "wordWrap", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetJustifyH",
			Type = "Function",

			Arguments =
			{
				{ Name = "textType", Type = "string", Nilable = false },
				{ Name = "justifyH", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetJustifyV",
			Type = "Function",

			Arguments =
			{
				{ Name = "textType", Type = "string", Nilable = false },
				{ Name = "justifyV", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetShadowColor",
			Type = "Function",

			Arguments =
			{
				{ Name = "textType", Type = "string", Nilable = false },
				{ Name = "colorR", Type = "number", Nilable = false },
				{ Name = "colorG", Type = "number", Nilable = false },
				{ Name = "colorB", Type = "number", Nilable = false },
				{ Name = "a", Type = "number", Nilable = true },
			},
		},
		{
			Name = "SetShadowOffset",
			Type = "Function",

			Arguments =
			{
				{ Name = "textType", Type = "string", Nilable = false },
				{ Name = "offsetX", Type = "number", Nilable = false },
				{ Name = "offsetY", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetSpacing",
			Type = "Function",

			Arguments =
			{
				{ Name = "textType", Type = "string", Nilable = false },
				{ Name = "spacing", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetText",
			Type = "Function",

			Arguments =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "ignoreMarkup", Type = "bool", Nilable = false, Default = false },
			},
		},
		{
			Name = "SetTextColor",
			Type = "Function",

			Arguments =
			{
				{ Name = "textType", Type = "string", Nilable = false },
				{ Name = "colorR", Type = "number", Nilable = false },
				{ Name = "colorG", Type = "number", Nilable = false },
				{ Name = "colorB", Type = "number", Nilable = false },
				{ Name = "a", Type = "number", Nilable = true },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "SimpleLineAPI",
	Type = "ScriptObject",

	Functions =
	{
		{
			Name = "ClearAllPoints",
			Type = "Function",

			Arguments =
			{
			},
		},
		{
			Name = "GetEndPoint",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "relativePoint", Type = "FramePoint", Nilable = false },
				{ Name = "relativeTo", Type = "table", Nilable = false },
				{ Name = "offsetX", Type = "number", Nilable = false },
				{ Name = "offsetY", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetStartPoint",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "relativePoint", Type = "FramePoint", Nilable = false },
				{ Name = "relativeTo", Type = "table", Nilable = false },
				{ Name = "offsetX", Type = "number", Nilable = false },
				{ Name = "offsetY", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetThickness",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "thickness", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetEndPoint",
			Type = "Function",

			Arguments =
			{
				{ Name = "relativePoint", Type = "FramePoint", Nilable = false },
				{ Name = "relativeTo", Type = "table", Nilable = false },
				{ Name = "offsetX", Type = "number", Nilable = false, Default = 0 },
				{ Name = "offsetY", Type = "number", Nilable = false, Default = 0 },
			},
		},
		{
			Name = "SetStartPoint",
			Type = "Function",

			Arguments =
			{
				{ Name = "relativePoint", Type = "FramePoint", Nilable = false },
				{ Name = "relativeTo", Type = "table", Nilable = false },
				{ Name = "offsetX", Type = "number", Nilable = false, Default = 0 },
				{ Name = "offsetY", Type = "number", Nilable = false, Default = 0 },
			},
		},
		{
			Name = "SetThickness",
			Type = "Function",

			Arguments =
			{
				{ Name = "thickness", Type = "number", Nilable = false },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "SimpleMaskTextureAPI",
	Type = "ScriptObject",

	Functions =
	{
	},

	Events =
	{
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "SimpleMessageFrameAPI",
	Type = "ScriptObject",

	Functions =
	{
		{
			Name = "AddMessage",
			Type = "Function",

			Arguments =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "colorR", Type = "number", Nilable = false },
				{ Name = "colorG", Type = "number", Nilable = false },
				{ Name = "colorB", Type = "number", Nilable = false },
				{ Name = "a", Type = "number", Nilable = true },
				{ Name = "messageID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "Clear",
			Type = "Function",

			Arguments =
			{
			},
		},
		{
			Name = "GetFadeDuration",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "fadeDurationSeconds", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetFadePower",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "fadePower", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetFading",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "isFading", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetFont",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "fontFile", Type = "string", Nilable = false },
				{ Name = "height", Type = "number", Nilable = false },
				{ Name = "flags", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetFontObject",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "font", Type = "table", Nilable = false },
			},
		},
		{
			Name = "GetFontStringByID",
			Type = "Function",

			Arguments =
			{
				{ Name = "messageID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "fontString", Type = "table", Nilable = false },
			},
		},
		{
			Name = "GetIndentedWordWrap",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "wordWrap", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetInsertMode",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "mode", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetJustifyH",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "justifyH", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetJustifyV",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "justifyV", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetShadowColor",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "colorR", Type = "number", Nilable = false },
				{ Name = "colorG", Type = "number", Nilable = false },
				{ Name = "colorB", Type = "number", Nilable = false },
				{ Name = "colorA", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetShadowOffset",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "offsetX", Type = "number", Nilable = false },
				{ Name = "offsetY", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetSpacing",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "spacing", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetTextColor",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "colorR", Type = "number", Nilable = false },
				{ Name = "colorG", Type = "number", Nilable = false },
				{ Name = "colorB", Type = "number", Nilable = false },
				{ Name = "colorA", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetTimeVisible",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "timeVisibleSeconds", Type = "number", Nilable = false },
			},
		},
		{
			Name = "HasMessageByID",
			Type = "Function",

			Arguments =
			{
				{ Name = "messageID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "hasMessage", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ResetMessageFadeByID",
			Type = "Function",

			Arguments =
			{
				{ Name = "messageID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetFadeDuration",
			Type = "Function",

			Arguments =
			{
				{ Name = "fadeDurationSeconds", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetFadePower",
			Type = "Function",

			Arguments =
			{
				{ Name = "fadePower", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetFading",
			Type = "Function",

			Arguments =
			{
				{ Name = "fading", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetFont",
			Type = "Function",

			Arguments =
			{
				{ Name = "fontFile", Type = "string", Nilable = false },
				{ Name = "height", Type = "number", Nilable = false },
				{ Name = "flags", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetFontObject",
			Type = "Function",

			Arguments =
			{
				{ Name = "font", Type = "table", Nilable = false },
			},
		},
		{
			Name = "SetIndentedWordWrap",
			Type = "Function",

			Arguments =
			{
				{ Name = "wordWrap", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetInsertMode",
			Type = "Function",

			Arguments =
			{
				{ Name = "mode", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetJustifyH",
			Type = "Function",

			Arguments =
			{
				{ Name = "justifyH", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetJustifyV",
			Type = "Function",

			Arguments =
			{
				{ Name = "justifyV", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetShadowColor",
			Type = "Function",

			Arguments =
			{
				{ Name = "colorR", Type = "number", Nilable = false },
				{ Name = "colorG", Type = "number", Nilable = false },
				{ Name = "colorB", Type = "number", Nilable = false },
				{ Name = "a", Type = "number", Nilable = true },
			},
		},
		{
			Name = "SetShadowOffset",
			Type = "Function",

			Arguments =
			{
				{ Name = "offsetX", Type = "number", Nilable = false },
				{ Name = "offsetY", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetSpacing",
			Type = "Function",

			Arguments =
			{
				{ Name = "spacing", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetTextColor",
			Type = "Function",

			Arguments =
			{
				{ Name = "colorR", Type = "number", Nilable = false },
				{ Name = "colorG", Type = "number", Nilable = false },
				{ Name = "colorB", Type = "number", Nilable = false },
				{ Name = "a", Type = "number", Nilable = true },
			},
		},
		{
			Name = "SetTimeVisible",
			Type = "Function",

			Arguments =
			{
				{ Name = "timeVisibleSeconds", Type = "number", Nilable = false },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "SimpleModelAPI",
	Type = "ScriptObject",

	Functions =
	{
		{
			Name = "AdvanceTime",
			Type = "Function",

			Arguments =
			{
			},
		},
		{
			Name = "ClearFog",
			Type = "Function",

			Arguments =
			{
			},
		},
		{
			Name = "ClearModel",
			Type = "Function",

			Arguments =
			{
			},
		},
		{
			Name = "ClearTransform",
			Type = "Function",

			Arguments =
			{
			},
		},
		{
			Name = "GetCameraDistance",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "distance", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetCameraFacing",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "radians", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetCameraPosition",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "positionX", Type = "number", Nilable = false },
				{ Name = "positionY", Type = "number", Nilable = false },
				{ Name = "positionZ", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetCameraRoll",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "radians", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetCameraTarget",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "targetX", Type = "number", Nilable = false },
				{ Name = "targetY", Type = "number", Nilable = false },
				{ Name = "targetZ", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetDesaturation",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "strength", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetFacing",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "facing", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetFogColor",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "colorR", Type = "number", Nilable = false },
				{ Name = "colorG", Type = "number", Nilable = false },
				{ Name = "colorB", Type = "number", Nilable = false },
				{ Name = "colorA", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetFogFar",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "fogFar", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetFogNear",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "fogNear", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetLight",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "enabled", Type = "bool", Nilable = false },
				{ Name = "light", Type = "ModelLight", Nilable = false },
			},
		},
		{
			Name = "GetModelAlpha",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "alpha", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetModelDrawLayer",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "layer", Type = "string", Nilable = false },
				{ Name = "sublayer", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetModelFileID",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "modelFileID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetModelScale",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "scale", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetPaused",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "paused", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetPitch",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "pitch", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetPosition",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "positionX", Type = "number", Nilable = false },
				{ Name = "positionY", Type = "number", Nilable = false },
				{ Name = "positionZ", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetRoll",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "roll", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetShadowEffect",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "strength", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetViewInsets",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "left", Type = "number", Nilable = false },
				{ Name = "right", Type = "number", Nilable = false },
				{ Name = "top", Type = "number", Nilable = false },
				{ Name = "bottom", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetViewTranslation",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "x", Type = "number", Nilable = false },
				{ Name = "y", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetWorldScale",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "worldScale", Type = "number", Nilable = false },
			},
		},
		{
			Name = "HasAttachmentPoints",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "hasAttachmentPoints", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "HasCustomCamera",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "hasCustomCamera", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsUsingModelCenterToTransform",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "useCenter", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "MakeCurrentCameraCustom",
			Type = "Function",

			Arguments =
			{
			},
		},
		{
			Name = "ReplaceIconTexture",
			Type = "Function",

			Arguments =
			{
				{ Name = "asset", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetCamera",
			Type = "Function",

			Arguments =
			{
				{ Name = "cameraIndex", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetCameraDistance",
			Type = "Function",

			Arguments =
			{
				{ Name = "distance", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetCameraFacing",
			Type = "Function",

			Arguments =
			{
				{ Name = "radians", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetCameraPosition",
			Type = "Function",

			Arguments =
			{
				{ Name = "positionX", Type = "number", Nilable = false },
				{ Name = "positionY", Type = "number", Nilable = false },
				{ Name = "positionZ", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetCameraRoll",
			Type = "Function",

			Arguments =
			{
				{ Name = "radians", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetCameraTarget",
			Type = "Function",

			Arguments =
			{
				{ Name = "targetX", Type = "number", Nilable = false },
				{ Name = "targetY", Type = "number", Nilable = false },
				{ Name = "targetZ", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetCustomCamera",
			Type = "Function",

			Arguments =
			{
				{ Name = "cameraIndex", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetDesaturation",
			Type = "Function",

			Arguments =
			{
				{ Name = "strength", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetFacing",
			Type = "Function",

			Arguments =
			{
				{ Name = "facing", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetFogColor",
			Type = "Function",

			Arguments =
			{
				{ Name = "colorR", Type = "number", Nilable = false },
				{ Name = "colorG", Type = "number", Nilable = false },
				{ Name = "colorB", Type = "number", Nilable = false },
				{ Name = "a", Type = "number", Nilable = true },
			},
		},
		{
			Name = "SetFogFar",
			Type = "Function",

			Arguments =
			{
				{ Name = "fogFar", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetFogNear",
			Type = "Function",

			Arguments =
			{
				{ Name = "fogNear", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetGlow",
			Type = "Function",

			Arguments =
			{
				{ Name = "glow", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetLight",
			Type = "Function",

			Arguments =
			{
				{ Name = "enabled", Type = "bool", Nilable = false },
				{ Name = "light", Type = "ModelLight", Nilable = false },
			},
		},
		{
			Name = "SetModel",
			Type = "Function",

			Arguments =
			{
				{ Name = "asset", Type = "string", Nilable = false },
				{ Name = "noMip", Type = "bool", Nilable = false, Default = false },
			},
		},
		{
			Name = "SetModelAlpha",
			Type = "Function",

			Arguments =
			{
				{ Name = "alpha", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetModelDrawLayer",
			Type = "Function",

			Arguments =
			{
				{ Name = "layer", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetModelScale",
			Type = "Function",

			Arguments =
			{
				{ Name = "scale", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetParticlesEnabled",
			Type = "Function",

			Arguments =
			{
				{ Name = "enabled", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetPaused",
			Type = "Function",

			Arguments =
			{
				{ Name = "paused", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetPitch",
			Type = "Function",

			Arguments =
			{
				{ Name = "pitch", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetPosition",
			Type = "Function",

			Arguments =
			{
				{ Name = "positionX", Type = "number", Nilable = false },
				{ Name = "positionY", Type = "number", Nilable = false },
				{ Name = "positionZ", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetRoll",
			Type = "Function",

			Arguments =
			{
				{ Name = "roll", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetSequence",
			Type = "Function",

			Arguments =
			{
				{ Name = "sequence", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetSequenceTime",
			Type = "Function",

			Arguments =
			{
				{ Name = "sequence", Type = "number", Nilable = false },
				{ Name = "timeOffset", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetShadowEffect",
			Type = "Function",

			Arguments =
			{
				{ Name = "strength", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetTransform",
			Type = "Function",

			Arguments =
			{
				{ Name = "translation", Type = "table", Mixin = "Vector3DMixin", Nilable = true },
				{ Name = "rotation", Type = "table", Mixin = "Vector3DMixin", Nilable = true },
				{ Name = "scale", Type = "number", Nilable = true },
			},
		},
		{
			Name = "SetViewInsets",
			Type = "Function",

			Arguments =
			{
				{ Name = "left", Type = "number", Nilable = false },
				{ Name = "right", Type = "number", Nilable = false },
				{ Name = "top", Type = "number", Nilable = false },
				{ Name = "bottom", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetViewTranslation",
			Type = "Function",

			Arguments =
			{
				{ Name = "x", Type = "number", Nilable = false },
				{ Name = "y", Type = "number", Nilable = false },
			},
		},
		{
			Name = "TransformCameraSpaceToModelSpace",
			Type = "Function",

			Arguments =
			{
				{ Name = "cameraPosition", Type = "table", Mixin = "Vector3DMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "modelPosition", Type = "table", Mixin = "Vector3DMixin", Nilable = false },
			},
		},
		{
			Name = "UseModelCenterToTransform",
			Type = "Function",

			Arguments =
			{
				{ Name = "useCenter", Type = "bool", Nilable = false },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "SimpleModelFFXAPI",
	Type = "ScriptObject",

	Functions =
	{
		{
			Name = "AddCharacterLight",
			Type = "Function",

			Arguments =
			{
				{ Name = "index", Type = "number", Nilable = true },
				{ Name = "light", Type = "ModelLight", Nilable = false },
			},
		},
		{
			Name = "AddLight",
			Type = "Function",

			Arguments =
			{
				{ Name = "index", Type = "number", Nilable = true },
				{ Name = "light", Type = "ModelLight", Nilable = false },
			},
		},
		{
			Name = "AddPetLight",
			Type = "Function",

			Arguments =
			{
				{ Name = "index", Type = "number", Nilable = true },
				{ Name = "light", Type = "ModelLight", Nilable = false },
			},
		},
		{
			Name = "ResetLights",
			Type = "Function",

			Arguments =
			{
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "SimpleMovieAPI",
	Type = "ScriptObject",

	Functions =
	{
		{
			Name = "EnableSubtitles",
			Type = "Function",

			Arguments =
			{
				{ Name = "enable", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "StartMovie",
			Type = "Function",

			Arguments =
			{
				{ Name = "movieID", Type = "number", Nilable = false },
				{ Name = "looping", Type = "bool", Nilable = false, Default = false },
			},

			Returns =
			{
				{ Name = "success", Type = "bool", Nilable = false },
				{ Name = "returnCode", Type = "number", Nilable = false },
			},
		},
		{
			Name = "StartMovieByName",
			Type = "Function",

			Arguments =
			{
				{ Name = "movieName", Type = "string", Nilable = false },
				{ Name = "looping", Type = "bool", Nilable = false, Default = false },
				{ Name = "resolution", Type = "number", Nilable = false, Default = 0 },
			},

			Returns =
			{
				{ Name = "success", Type = "bool", Nilable = false },
				{ Name = "returnCode", Type = "number", Nilable = false },
			},
		},
		{
			Name = "StopMovie",
			Type = "Function",

			Arguments =
			{
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "SimpleObjectAPI",
	Type = "ScriptObject",

	Functions =
	{
		{
			Name = "GetDebugName",
			Type = "Function",

			Arguments =
			{
				{ Name = "preferParentKey", Type = "bool", Nilable = false, Default = false },
			},

			Returns =
			{
				{ Name = "debugName", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetParent",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "parent", Type = "table", Nilable = false },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "SimpleOffScreenFrameAPI",
	Type = "ScriptObject",

	Functions =
	{
		{
			Name = "ApplySnapshot",
			Type = "Function",

			Arguments =
			{
				{ Name = "texture", Type = "table", Nilable = false },
				{ Name = "snapshotID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "success", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "Flush",
			Type = "Function",

			Arguments =
			{
			},
		},
		{
			Name = "GetMaxSnapshots",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "maxSnapshots", Type = "number", Nilable = false },
			},
		},
		{
			Name = "IsSnapshotValid",
			Type = "Function",

			Arguments =
			{
				{ Name = "snapshotID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isValid", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetMaxSnapshots",
			Type = "Function",

			Arguments =
			{
				{ Name = "maxSnapshots", Type = "number", Nilable = false },
			},
		},
		{
			Name = "TakeSnapshot",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "snapshotID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "TestPrintToFile",
			Type = "Function",
			Documentation = { "Unavailable in public builds" },

			Arguments =
			{
				{ Name = "snapshotID", Type = "number", Nilable = false },
				{ Name = "filename", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "success", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "UsesNPOT",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "usesNPOT", Type = "bool", Nilable = true },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "SimpleRegionAPI",
	Type = "ScriptObject",

	Functions =
	{
		{
			Name = "GetAlpha",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "alpha", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetDrawLayer",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "layer", Type = "string", Nilable = false },
				{ Name = "sublayer", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetEffectiveScale",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "effectiveScale", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetScale",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "scale", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetVertexColor",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "colorR", Type = "number", Nilable = false },
				{ Name = "colorG", Type = "number", Nilable = false },
				{ Name = "colorB", Type = "number", Nilable = false },
				{ Name = "colorA", Type = "number", Nilable = false },
			},
		},
		{
			Name = "IsIgnoringParentAlpha",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "isIgnoring", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsIgnoringParentScale",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "isIgnoring", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsObjectLoaded",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "isLoaded", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetAlpha",
			Type = "Function",

			Arguments =
			{
				{ Name = "alpha", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetDrawLayer",
			Type = "Function",

			Arguments =
			{
				{ Name = "layer", Type = "string", Nilable = false },
				{ Name = "sublevel", Type = "number", Nilable = false, Default = 0 },
			},
		},
		{
			Name = "SetIgnoreParentAlpha",
			Type = "Function",

			Arguments =
			{
				{ Name = "ignore", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetIgnoreParentScale",
			Type = "Function",

			Arguments =
			{
				{ Name = "ignore", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetScale",
			Type = "Function",

			Arguments =
			{
				{ Name = "scale", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetVertexColor",
			Type = "Function",

			Arguments =
			{
				{ Name = "colorR", Type = "number", Nilable = false },
				{ Name = "colorG", Type = "number", Nilable = false },
				{ Name = "colorB", Type = "number", Nilable = false },
				{ Name = "a", Type = "number", Nilable = true },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "SimpleScriptRegionAPI",
	Type = "ScriptObject",

	Functions =
	{
		{
			Name = "CanChangeProtectedState",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "canChange", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "EnableMouse",
			Type = "Function",

			Arguments =
			{
				{ Name = "enable", Type = "bool", Nilable = false, Default = false },
			},
		},
		{
			Name = "EnableMouseWheel",
			Type = "Function",

			Arguments =
			{
				{ Name = "enable", Type = "bool", Nilable = false, Default = false },
			},
		},
		{
			Name = "GetBottom",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "bottom", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetCenter",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "x", Type = "number", Nilable = false },
				{ Name = "y", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetHeight",
			Type = "Function",

			Arguments =
			{
				{ Name = "ignoreRect", Type = "bool", Nilable = false, Default = false },
			},

			Returns =
			{
				{ Name = "height", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetLeft",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "left", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetRect",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "left", Type = "number", Nilable = false },
				{ Name = "bottom", Type = "number", Nilable = false },
				{ Name = "width", Type = "number", Nilable = false },
				{ Name = "height", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetRight",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "right", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetScaledRect",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "left", Type = "number", Nilable = false },
				{ Name = "bottom", Type = "number", Nilable = false },
				{ Name = "width", Type = "number", Nilable = false },
				{ Name = "height", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetScript",
			Type = "Function",

			Arguments =
			{
				{ Name = "scriptTypeName", Type = "string", Nilable = false },
				{ Name = "bindingType", Type = "number", Nilable = true },
			},

			Returns =
			{
				{ Name = "script", Type = "function", Nilable = false },
			},
		},
		{
			Name = "GetSize",
			Type = "Function",

			Arguments =
			{
				{ Name = "ignoreRect", Type = "bool", Nilable = false, Default = false },
			},

			Returns =
			{
				{ Name = "width", Type = "number", Nilable = false },
				{ Name = "height", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetSourceLocation",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "location", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetTop",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "top", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetWidth",
			Type = "Function",

			Arguments =
			{
				{ Name = "ignoreRect", Type = "bool", Nilable = false, Default = false },
			},

			Returns =
			{
				{ Name = "width", Type = "number", Nilable = false },
			},
		},
		{
			Name = "HasScript",
			Type = "Function",

			Arguments =
			{
				{ Name = "scriptName", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "hasScript", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "Hide",
			Type = "Function",

			Arguments =
			{
			},
		},
		{
			Name = "HookScript",
			Type = "Function",

			Arguments =
			{
				{ Name = "scriptTypeName", Type = "string", Nilable = false },
				{ Name = "script", Type = "function", Nilable = false },
				{ Name = "bindingType", Type = "number", Nilable = true },
			},
		},
		{
			Name = "IsAnchoringRestricted",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "isRestricted", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsDragging",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "isDragging", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsMouseClickEnabled",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "enabled", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsMouseEnabled",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "enabled", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsMouseMotionEnabled",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "enabled", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsMouseOver",
			Type = "Function",

			Arguments =
			{
				{ Name = "offsetTop", Type = "number", Nilable = false, Default = 0 },
				{ Name = "offsetBottom", Type = "number", Nilable = false, Default = 0 },
				{ Name = "offsetLeft", Type = "number", Nilable = false, Default = 0 },
				{ Name = "offsetRight", Type = "number", Nilable = false, Default = 0 },
			},

			Returns =
			{
				{ Name = "isMouseOver", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsMouseWheelEnabled",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "enabled", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsProtected",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "isProtected", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsRectValid",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "isValid", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsShown",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "isShown", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsVisible",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "isVisible", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetMouseClickEnabled",
			Type = "Function",

			Arguments =
			{
				{ Name = "enabled", Type = "bool", Nilable = false, Default = false },
			},
		},
		{
			Name = "SetMouseMotionEnabled",
			Type = "Function",

			Arguments =
			{
				{ Name = "enabled", Type = "bool", Nilable = false, Default = false },
			},
		},
		{
			Name = "SetParent",
			Type = "Function",

			Arguments =
			{
				{ Name = "parent", Type = "table", Nilable = true },
			},
		},
		{
			Name = "SetPassThroughButtons",
			Type = "Function",

			Arguments =
			{
				{ Name = "unpackedPrimitiveType", Type = "number", Nilable = false, StrideIndex = 1 },
			},
		},
		{
			Name = "SetScript",
			Type = "Function",

			Arguments =
			{
				{ Name = "scriptTypeName", Type = "string", Nilable = false },
				{ Name = "script", Type = "function", Nilable = true },
			},
		},
		{
			Name = "SetShown",
			Type = "Function",

			Arguments =
			{
				{ Name = "show", Type = "bool", Nilable = false, Default = false },
			},
		},
		{
			Name = "Show",
			Type = "Function",

			Arguments =
			{
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "SimpleScriptRegionResizingAPI",
	Type = "ScriptObject",

	Functions =
	{
		{
			Name = "AdjustPointsOffset",
			Type = "Function",

			Arguments =
			{
				{ Name = "x", Type = "number", Nilable = false },
				{ Name = "y", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ClearAllPoints",
			Type = "Function",

			Arguments =
			{
			},
		},
		{
			Name = "ClearPoint",
			Type = "Function",

			Arguments =
			{
				{ Name = "point", Type = "FramePoint", Nilable = false },
			},
		},
		{
			Name = "ClearPointsOffset",
			Type = "Function",

			Arguments =
			{
			},
		},
		{
			Name = "GetNumPoints",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "numPoints", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetPoint",
			Type = "Function",

			Arguments =
			{
				{ Name = "anchorIndex", Type = "number", Nilable = false, Default = 0 },
			},

			Returns =
			{
				{ Name = "point", Type = "FramePoint", Nilable = false },
				{ Name = "relativeTo", Type = "table", Nilable = false },
				{ Name = "relativePoint", Type = "FramePoint", Nilable = false },
				{ Name = "offsetX", Type = "number", Nilable = false },
				{ Name = "offsetY", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetPointByName",
			Type = "Function",

			Arguments =
			{
				{ Name = "point", Type = "FramePoint", Nilable = false },
			},

			Returns =
			{
				{ Name = "point", Type = "FramePoint", Nilable = false },
				{ Name = "relativeTo", Type = "table", Nilable = false },
				{ Name = "relativePoint", Type = "FramePoint", Nilable = false },
				{ Name = "offsetX", Type = "number", Nilable = false },
				{ Name = "offsetY", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetAllPoints",
			Type = "Function",

			Arguments =
			{
				{ Name = "relativeTo", Type = "table", Nilable = false },
				{ Name = "doResize", Type = "bool", Nilable = false, Default = true },
			},
		},
		{
			Name = "SetHeight",
			Type = "Function",

			Arguments =
			{
				{ Name = "height", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetPoint",
			Type = "Function",

			Arguments =
			{
				{ Name = "point", Type = "FramePoint", Nilable = false },
				{ Name = "relativeTo", Type = "table", Nilable = false },
				{ Name = "relativePoint", Type = "FramePoint", Nilable = false },
				{ Name = "offsetX", Type = "number", Nilable = false },
				{ Name = "offsetY", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetSize",
			Type = "Function",

			Arguments =
			{
				{ Name = "x", Type = "number", Nilable = false },
				{ Name = "y", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetWidth",
			Type = "Function",

			Arguments =
			{
				{ Name = "width", Type = "number", Nilable = false },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "SimpleScrollFrameAPI",
	Type = "ScriptObject",

	Functions =
	{
		{
			Name = "GetHorizontalScroll",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "offset", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetHorizontalScrollRange",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "range", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetScrollChild",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "scrollChild", Type = "table", Nilable = false },
			},
		},
		{
			Name = "GetVerticalScroll",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "offset", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetVerticalScrollRange",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "range", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetHorizontalScroll",
			Type = "Function",

			Arguments =
			{
				{ Name = "offset", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetScrollChild",
			Type = "Function",

			Arguments =
			{
				{ Name = "scrollChild", Type = "table", Nilable = false },
			},
		},
		{
			Name = "SetVerticalScroll",
			Type = "Function",

			Arguments =
			{
				{ Name = "offset", Type = "number", Nilable = false },
			},
		},
		{
			Name = "UpdateScrollChildRect",
			Type = "Function",

			Arguments =
			{
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "SimpleSliderAPI",
	Type = "ScriptObject",

	Functions =
	{
		{
			Name = "Disable",
			Type = "Function",

			Arguments =
			{
			},
		},
		{
			Name = "Enable",
			Type = "Function",

			Arguments =
			{
			},
		},
		{
			Name = "GetMinMaxValues",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "minValue", Type = "number", Nilable = false },
				{ Name = "maxValue", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetObeyStepOnDrag",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "isObeyStepOnDrag", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetOrientation",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "orientation", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetStepsPerPage",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "stepsPerPage", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetThumbTexture",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "texture", Type = "table", Nilable = false },
			},
		},
		{
			Name = "GetValue",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "value", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetValueStep",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "valueStep", Type = "number", Nilable = false },
			},
		},
		{
			Name = "IsDraggingThumb",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "isDraggingThumb", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsEnabled",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "enabled", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetEnabled",
			Type = "Function",

			Arguments =
			{
				{ Name = "enabled", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetMinMaxValues",
			Type = "Function",

			Arguments =
			{
				{ Name = "minValue", Type = "number", Nilable = false },
				{ Name = "maxValue", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetObeyStepOnDrag",
			Type = "Function",

			Arguments =
			{
				{ Name = "obeyStepOnDrag", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetOrientation",
			Type = "Function",

			Arguments =
			{
				{ Name = "orientation", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetStepsPerPage",
			Type = "Function",

			Arguments =
			{
				{ Name = "stepsPerPage", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetThumbTexture",
			Type = "Function",

			Arguments =
			{
				{ Name = "asset", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetValue",
			Type = "Function",

			Arguments =
			{
				{ Name = "value", Type = "number", Nilable = false },
				{ Name = "treatAsMouseEvent", Type = "bool", Nilable = false, Default = false },
			},
		},
		{
			Name = "SetValueStep",
			Type = "Function",

			Arguments =
			{
				{ Name = "valueStep", Type = "number", Nilable = false },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "SimpleStatusBarAPI",
	Type = "ScriptObject",

	Functions =
	{
		{
			Name = "GetFillStyle",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "fillStyle", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetMinMaxValues",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "minValue", Type = "number", Nilable = false },
				{ Name = "maxValue", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetOrientation",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "orientation", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetReverseFill",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "isReverseFill", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetRotatesTexture",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "rotatesTexture", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetStatusBarColor",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "colorR", Type = "number", Nilable = false },
				{ Name = "colorG", Type = "number", Nilable = false },
				{ Name = "colorB", Type = "number", Nilable = false },
				{ Name = "colorA", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetStatusBarTexture",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "texture", Type = "table", Nilable = false },
			},
		},
		{
			Name = "GetValue",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "value", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetColorFill",
			Type = "Function",

			Arguments =
			{
				{ Name = "colorR", Type = "number", Nilable = false },
				{ Name = "colorG", Type = "number", Nilable = false },
				{ Name = "colorB", Type = "number", Nilable = false },
				{ Name = "a", Type = "number", Nilable = true },
			},
		},
		{
			Name = "SetFillStyle",
			Type = "Function",

			Arguments =
			{
				{ Name = "fillStyle", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetMinMaxValues",
			Type = "Function",

			Arguments =
			{
				{ Name = "minValue", Type = "number", Nilable = false },
				{ Name = "maxValue", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetOrientation",
			Type = "Function",

			Arguments =
			{
				{ Name = "orientation", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetReverseFill",
			Type = "Function",

			Arguments =
			{
				{ Name = "isReverseFill", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetRotatesTexture",
			Type = "Function",

			Arguments =
			{
				{ Name = "rotatesTexture", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetStatusBarColor",
			Type = "Function",

			Arguments =
			{
				{ Name = "colorR", Type = "number", Nilable = false },
				{ Name = "colorG", Type = "number", Nilable = false },
				{ Name = "colorB", Type = "number", Nilable = false },
				{ Name = "a", Type = "number", Nilable = true },
			},
		},
		{
			Name = "SetStatusBarTexture",
			Type = "Function",

			Arguments =
			{
				{ Name = "asset", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetValue",
			Type = "Function",

			Arguments =
			{
				{ Name = "value", Type = "number", Nilable = false },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "SimpleTextureAPI",
	Type = "ScriptObject",

	Functions =
	{
		{
			Name = "AddMaskTexture",
			Type = "Function",

			Arguments =
			{
				{ Name = "mask", Type = "table", Nilable = false },
			},
		},
		{
			Name = "GetMaskTexture",
			Type = "Function",

			Arguments =
			{
				{ Name = "index", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "mask", Type = "table", Nilable = false },
			},
		},
		{
			Name = "GetNumMaskTextures",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "count", Type = "number", Nilable = false },
			},
		},
		{
			Name = "RemoveMaskTexture",
			Type = "Function",

			Arguments =
			{
				{ Name = "mask", Type = "table", Nilable = false },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "SimpleTextureBaseAPI",
	Type = "ScriptObject",

	Functions =
	{
		{
			Name = "GetAtlas",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "atlas", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetBlendMode",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "blendMode", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetDesaturation",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "desaturation", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetHorizTile",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "tiling", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetRotation",
			Type = "Function",

			Arguments =
			{
				{ Name = "radians", Type = "number", Nilable = false },
				{ Name = "normalizedRotationPoint", Type = "table", Mixin = "Vector2DMixin", Nilable = false },
			},
		},
		{
			Name = "GetTexCoord",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "x", Type = "number", Nilable = false, StrideIndex = 1 },
				{ Name = "y", Type = "number", Nilable = false, StrideIndex = 2 },
			},
		},
		{
			Name = "GetTexelSnappingBias",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "bias", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetTexture",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "textureFile", Type = "string", Nilable = true },
			},
		},
		{
			Name = "GetTextureFileID",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "textureFile", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetTextureFilePath",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "textureFile", Type = "string", Nilable = true },
			},
		},
		{
			Name = "GetVertTile",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "tiling", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetVertexOffset",
			Type = "Function",

			Arguments =
			{
				{ Name = "vertexIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "offsetX", Type = "number", Nilable = false },
				{ Name = "offsetY", Type = "number", Nilable = false },
			},
		},
		{
			Name = "IsBlockingLoadRequested",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "blocking", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsDesaturated",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "desaturated", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsSnappingToPixelGrid",
			Type = "Function",

			Arguments =
			{
			},

			Returns =
			{
				{ Name = "snap", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetAtlas",
			Type = "Function",

			Arguments =
			{
				{ Name = "atlas", Type = "string", Nilable = false },
				{ Name = "useAtlasSize", Type = "bool", Nilable = false, Default = false },
				{ Name = "filterMode", Type = "string", Nilable = true },
				{ Name = "resetTexCoords", Type = "bool", Nilable = true },
			},
		},
		{
			Name = "SetBlendMode",
			Type = "Function",

			Arguments =
			{
				{ Name = "blendMode", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetBlockingLoadsRequested",
			Type = "Function",

			Arguments =
			{
				{ Name = "blocking", Type = "bool", Nilable = false, Default = false },
			},
		},
		{
			Name = "SetColorTexture",
			Type = "Function",

			Arguments =
			{
				{ Name = "colorR", Type = "number", Nilable = false },
				{ Name = "colorG", Type = "number", Nilable = false },
				{ Name = "colorB", Type = "number", Nilable = false },
				{ Name = "a", Type = "number", Nilable = true },
			},
		},
		{
			Name = "SetDesaturated",
			Type = "Function",

			Arguments =
			{
				{ Name = "desaturated", Type = "bool", Nilable = false, Default = false },
			},
		},
		{
			Name = "SetDesaturation",
			Type = "Function",

			Arguments =
			{
				{ Name = "desaturation", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetGradient",
			Type = "Function",

			Arguments =
			{
				{ Name = "orientation", Type = "string", Nilable = false },
				{ Name = "minColor", Type = "table", Mixin = "ColorMixin", Nilable = false },
				{ Name = "maxColor", Type = "table", Mixin = "ColorMixin", Nilable = false },
			},
		},
		{
			Name = "SetHorizTile",
			Type = "Function",

			Arguments =
			{
				{ Name = "tiling", Type = "bool", Nilable = false, Default = false },
			},
		},
		{
			Name = "SetMask",
			Type = "Function",

			Arguments =
			{
				{ Name = "file", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetRotation",
			Type = "Function",

			Arguments =
			{
				{ Name = "radians", Type = "number", Nilable = false },
				{ Name = "normalizedRotationPoint", Type = "table", Mixin = "Vector2DMixin", Nilable = true },
			},
		},
		{
			Name = "SetSnapToPixelGrid",
			Type = "Function",

			Arguments =
			{
				{ Name = "snap", Type = "bool", Nilable = false, Default = false },
			},
		},
		{
			Name = "SetTexCoord",
			Type = "Function",

			Arguments =
			{
				{ Name = "left", Type = "number", Nilable = false },
				{ Name = "right", Type = "number", Nilable = false },
				{ Name = "bottom", Type = "number", Nilable = false },
				{ Name = "top", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetTexelSnappingBias",
			Type = "Function",

			Arguments =
			{
				{ Name = "bias", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetTexture",
			Type = "Function",

			Arguments =
			{
				{ Name = "textureAsset", Type = "string", Nilable = true },
				{ Name = "wrapModeHorizontal", Type = "string", Nilable = true },
				{ Name = "wrapModeVertical", Type = "string", Nilable = true },
				{ Name = "filterMode", Type = "string", Nilable = true },
			},

			Returns =
			{
				{ Name = "success", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetVertTile",
			Type = "Function",

			Arguments =
			{
				{ Name = "tiling", Type = "bool", Nilable = false, Default = false },
			},
		},
		{
			Name = "SetVertexOffset",
			Type = "Function",

			Arguments =
			{
				{ Name = "vertexIndex", Type = "number", Nilable = false },
				{ Name = "offsetX", Type = "number", Nilable = false },
				{ Name = "offsetY", Type = "number", Nilable = false },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "SkillInfo",
	Type = "System",
	Namespace = "C_SkillInfo",

	Functions =
	{
	},

	Events =
	{
		{
			Name = "SkillLinesChanged",
			Type = "Event",
			LiteralName = "SKILL_LINES_CHANGED",
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "SocialInfo",
	Type = "System",
	Namespace = "C_Social",

	Functions =
	{
		{
			Name = "GetLastAchievement",
			Type = "Function",

			Returns =
			{
				{ Name = "achievementID", Type = "number", Nilable = false },
				{ Name = "achievementName", Type = "string", Nilable = false },
				{ Name = "achievementDesc", Type = "string", Nilable = false },
				{ Name = "iconFileID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetLastItem",
			Type = "Function",

			Returns =
			{
				{ Name = "itemID", Type = "number", Nilable = false },
				{ Name = "itemName", Type = "string", Nilable = false },
				{ Name = "iconFileID", Type = "number", Nilable = false },
				{ Name = "itemQuality", Type = "number", Nilable = false },
				{ Name = "itemLevel", Type = "number", Nilable = false },
				{ Name = "itemLinkString", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetLastScreenshotIndex",
			Type = "Function",

			Returns =
			{
				{ Name = "screenShotIndex", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetMaxTweetLength",
			Type = "Function",

			Returns =
			{
				{ Name = "maxTweetLength", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetScreenshotInfoByIndex",
			Type = "Function",

			Arguments =
			{
				{ Name = "index", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "screenWidth", Type = "number", Nilable = false },
				{ Name = "screenHeight", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetTweetLength",
			Type = "Function",

			Arguments =
			{
				{ Name = "tweetText", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "tweetLength", Type = "number", Nilable = false },
			},
		},
		{
			Name = "IsSocialEnabled",
			Type = "Function",

			Returns =
			{
				{ Name = "isEnabled", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "TwitterCheckStatus",
			Type = "Function",
			Documentation = { "Not allowed to be called by addons" },
		},
		{
			Name = "TwitterConnect",
			Type = "Function",
			Documentation = { "Not allowed to be called by addons" },
		},
		{
			Name = "TwitterDisconnect",
			Type = "Function",
			Documentation = { "Not allowed to be called by addons" },
		},
		{
			Name = "TwitterGetMSTillCanPost",
			Type = "Function",

			Returns =
			{
				{ Name = "msTimeLeft", Type = "number", Nilable = false },
			},
		},
		{
			Name = "TwitterPostMessage",
			Type = "Function",
			Documentation = { "Not allowed to be called by addons" },

			Arguments =
			{
				{ Name = "message", Type = "string", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "SocialItemReceived",
			Type = "Event",
			LiteralName = "SOCIAL_ITEM_RECEIVED",
		},
		{
			Name = "TwitterLinkResult",
			Type = "Event",
			LiteralName = "TWITTER_LINK_RESULT",
			Payload =
			{
				{ Name = "isLinked", Type = "bool", Nilable = false },
				{ Name = "screenName", Type = "string", Nilable = false },
				{ Name = "error", Type = "string", Nilable = false },
			},
		},
		{
			Name = "TwitterPostResult",
			Type = "Event",
			LiteralName = "TWITTER_POST_RESULT",
			Payload =
			{
				{ Name = "result", Type = "number", Nilable = false },
			},
		},
		{
			Name = "TwitterStatusUpdate",
			Type = "Event",
			LiteralName = "TWITTER_STATUS_UPDATE",
			Payload =
			{
				{ Name = "isTwitterEnabled", Type = "bool", Nilable = false },
				{ Name = "isLinked", Type = "bool", Nilable = false },
				{ Name = "screenName", Type = "string", Nilable = false },
			},
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "SocialQueue",
	Type = "System",
	Namespace = "C_SocialQueue",

	Functions =
	{
		{
			Name = "GetAllGroups",
			Type = "Function",

			Arguments =
			{
				{ Name = "allowNonJoinable", Type = "bool", Nilable = false, Default = false },
				{ Name = "allowNonQueuedGroups", Type = "bool", Nilable = false, Default = false },
			},

			Returns =
			{
				{ Name = "groupGUIDs", Type = "table", InnerType = "string", Nilable = false },
			},
		},
		{
			Name = "GetConfig",
			Type = "Function",

			Returns =
			{
				{ Name = "config", Type = "SocialQueueConfig", Nilable = false },
			},
		},
		{
			Name = "GetGroupForPlayer",
			Type = "Function",

			Arguments =
			{
				{ Name = "playerGUID", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "groupGUID", Type = "string", Nilable = false },
				{ Name = "isSoloQueueParty", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetGroupInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "groupGUID", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "canJoin", Type = "bool", Nilable = false },
				{ Name = "numQueues", Type = "number", Nilable = false },
				{ Name = "needTank", Type = "bool", Nilable = false },
				{ Name = "needHealer", Type = "bool", Nilable = false },
				{ Name = "needDamage", Type = "bool", Nilable = false },
				{ Name = "isSoloQueueParty", Type = "bool", Nilable = false },
				{ Name = "questSessionActive", Type = "bool", Nilable = false },
				{ Name = "leaderGUID", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetGroupMembers",
			Type = "Function",

			Arguments =
			{
				{ Name = "groupGUID", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "groupMembers", Type = "table", InnerType = "SocialQueuePlayerInfo", Nilable = false },
			},
		},
		{
			Name = "GetGroupQueues",
			Type = "Function",

			Arguments =
			{
				{ Name = "groupGUID", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "queues", Type = "table", InnerType = "SocialQueueGroupQueueInfo", Nilable = false },
			},
		},
		{
			Name = "RequestToJoin",
			Type = "Function",

			Arguments =
			{
				{ Name = "groupGUID", Type = "string", Nilable = false },
				{ Name = "applyAsTank", Type = "bool", Nilable = false, Default = false },
				{ Name = "applyAsHealer", Type = "bool", Nilable = false, Default = false },
				{ Name = "applyAsDamage", Type = "bool", Nilable = false, Default = false },
			},

			Returns =
			{
				{ Name = "requestSuccessful", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SignalToastDisplayed",
			Type = "Function",

			Arguments =
			{
				{ Name = "groupGUID", Type = "string", Nilable = false },
				{ Name = "priority", Type = "number", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "SocialQueueConfigUpdated",
			Type = "Event",
			LiteralName = "SOCIAL_QUEUE_CONFIG_UPDATED",
		},
		{
			Name = "SocialQueueUpdate",
			Type = "Event",
			LiteralName = "SOCIAL_QUEUE_UPDATE",
			Payload =
			{
				{ Name = "groupGUID", Type = "string", Nilable = false },
				{ Name = "numAddedItems", Type = "number", Nilable = true },
			},
		},
	},

	Tables =
	{
		{
			Name = "SocialQueueConfig",
			Type = "Structure",
			Fields =
			{
				{ Name = "TOASTS_DISABLED", Type = "bool", Nilable = false },
				{ Name = "TOAST_DURATION", Type = "number", Nilable = false },
				{ Name = "DELAY_DURATION", Type = "number", Nilable = false },
				{ Name = "QUEUE_MULTIPLIER", Type = "number", Nilable = false },
				{ Name = "PLAYER_MULTIPLIER", Type = "number", Nilable = false },
				{ Name = "PLAYER_FRIEND_VALUE", Type = "number", Nilable = false },
				{ Name = "PLAYER_GUILD_VALUE", Type = "number", Nilable = false },
				{ Name = "THROTTLE_INITIAL_THRESHOLD", Type = "number", Nilable = false },
				{ Name = "THROTTLE_DECAY_TIME", Type = "number", Nilable = false },
				{ Name = "THROTTLE_PRIORITY_SPIKE", Type = "number", Nilable = false },
				{ Name = "THROTTLE_MIN_THRESHOLD", Type = "number", Nilable = false },
				{ Name = "THROTTLE_PVP_PRIORITY_NORMAL", Type = "number", Nilable = false },
				{ Name = "THROTTLE_PVP_PRIORITY_LOW", Type = "number", Nilable = false },
				{ Name = "THROTTLE_PVP_HONOR_THRESHOLD", Type = "number", Nilable = false },
				{ Name = "THROTTLE_LFGLIST_PRIORITY_DEFAULT", Type = "number", Nilable = false },
				{ Name = "THROTTLE_LFGLIST_PRIORITY_ABOVE", Type = "number", Nilable = false },
				{ Name = "THROTTLE_LFGLIST_PRIORITY_BELOW", Type = "number", Nilable = false },
				{ Name = "THROTTLE_LFGLIST_ILVL_SCALING_ABOVE", Type = "number", Nilable = false },
				{ Name = "THROTTLE_LFGLIST_ILVL_SCALING_BELOW", Type = "number", Nilable = false },
				{ Name = "THROTTLE_RF_PRIORITY_ABOVE", Type = "number", Nilable = false },
				{ Name = "THROTTLE_RF_ILVL_SCALING_ABOVE", Type = "number", Nilable = false },
				{ Name = "THROTTLE_DF_MAX_ITEM_LEVEL", Type = "number", Nilable = false },
				{ Name = "THROTTLE_DF_BEST_PRIORITY", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SocialQueueGroupQueueInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "clientID", Type = "number", Nilable = false },
				{ Name = "eligible", Type = "bool", Nilable = false },
				{ Name = "needTank", Type = "bool", Nilable = false },
				{ Name = "needHealer", Type = "bool", Nilable = false },
				{ Name = "needDamage", Type = "bool", Nilable = false },
				{ Name = "isAutoAccept", Type = "bool", Nilable = false },
				{ Name = "queueData", Type = "QueueSpecificInfo", Nilable = false },
			},
		},
		{
			Name = "SocialQueuePlayerInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "clubId", Type = "string", Nilable = true },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "Sound",
	Type = "System",
	Namespace = "C_Sound",

	Functions =
	{
		{
			Name = "GetSoundScaledVolume",
			Type = "Function",

			Arguments =
			{
				{ Name = "soundHandle", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "scaledVolume", Type = "number", Nilable = false },
			},
		},
		{
			Name = "IsPlaying",
			Type = "Function",

			Arguments =
			{
				{ Name = "soundHandle", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isPlaying", Type = "bool", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "SoundDeviceUpdate",
			Type = "Event",
			LiteralName = "SOUND_DEVICE_UPDATE",
		},
		{
			Name = "SoundkitFinished",
			Type = "Event",
			LiteralName = "SOUNDKIT_FINISHED",
			Payload =
			{
				{ Name = "soundHandle", Type = "number", Nilable = false },
			},
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "SpecializationInfo",
	Type = "System",
	Namespace = "C_SpecializationInfo",

	Functions =
	{
		{
			Name = "CanPlayerUsePVPTalentUI",
			Type = "Function",

			Returns =
			{
				{ Name = "canUse", Type = "bool", Nilable = false },
				{ Name = "failureReason", Type = "string", Nilable = false },
			},
		},
		{
			Name = "CanPlayerUseTalentSpecUI",
			Type = "Function",

			Returns =
			{
				{ Name = "canUse", Type = "bool", Nilable = false },
				{ Name = "failureReason", Type = "string", Nilable = false },
			},
		},
		{
			Name = "CanPlayerUseTalentUI",
			Type = "Function",

			Returns =
			{
				{ Name = "canUse", Type = "bool", Nilable = false },
				{ Name = "failureReason", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetAllSelectedPvpTalentIDs",
			Type = "Function",

			Returns =
			{
				{ Name = "selectedPvpTalentIDs", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "GetInspectSelectedPvpTalent",
			Type = "Function",

			Arguments =
			{
				{ Name = "inspectedUnit", Type = "string", Nilable = false },
				{ Name = "talentIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "selectedTalentID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetPvpTalentAlertStatus",
			Type = "Function",

			Returns =
			{
				{ Name = "hasUnspentSlot", Type = "bool", Nilable = false },
				{ Name = "hasNewTalent", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetPvpTalentSlotInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "talentIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "slotInfo", Type = "PvpTalentSlotInfo", Nilable = true },
			},
		},
		{
			Name = "GetPvpTalentSlotUnlockLevel",
			Type = "Function",

			Arguments =
			{
				{ Name = "talentIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "requiredLevel", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetPvpTalentUnlockLevel",
			Type = "Function",

			Arguments =
			{
				{ Name = "talentID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "requiredLevel", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetSpecIDs",
			Type = "Function",

			Arguments =
			{
				{ Name = "specSetID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "specIDs", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "GetSpellsDisplay",
			Type = "Function",

			Arguments =
			{
				{ Name = "specializationID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "spellID", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "IsInitialized",
			Type = "Function",

			Returns =
			{
				{ Name = "isSpecializationDataInitialized", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsPvpTalentLocked",
			Type = "Function",

			Arguments =
			{
				{ Name = "talentID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "locked", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "MatchesCurrentSpecSet",
			Type = "Function",

			Arguments =
			{
				{ Name = "specSetID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "matches", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetPvpTalentLocked",
			Type = "Function",

			Arguments =
			{
				{ Name = "talentID", Type = "number", Nilable = false },
				{ Name = "locked", Type = "bool", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "ActiveTalentGroupChanged",
			Type = "Event",
			LiteralName = "ACTIVE_TALENT_GROUP_CHANGED",
			Payload =
			{
				{ Name = "curr", Type = "number", Nilable = false },
				{ Name = "prev", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ConfirmTalentWipe",
			Type = "Event",
			LiteralName = "CONFIRM_TALENT_WIPE",
			Payload =
			{
				{ Name = "cost", Type = "number", Nilable = false },
				{ Name = "respecType", Type = "number", Nilable = false },
			},
		},
		{
			Name = "PetSpecializationChanged",
			Type = "Event",
			LiteralName = "PET_SPECIALIZATION_CHANGED",
		},
		{
			Name = "PlayerLearnPvpTalentFailed",
			Type = "Event",
			LiteralName = "PLAYER_LEARN_PVP_TALENT_FAILED",
		},
		{
			Name = "PlayerLearnTalentFailed",
			Type = "Event",
			LiteralName = "PLAYER_LEARN_TALENT_FAILED",
		},
		{
			Name = "PlayerPvpTalentUpdate",
			Type = "Event",
			LiteralName = "PLAYER_PVP_TALENT_UPDATE",
		},
		{
			Name = "PlayerTalentUpdate",
			Type = "Event",
			LiteralName = "PLAYER_TALENT_UPDATE",
		},
		{
			Name = "SpecInvoluntarilyChanged",
			Type = "Event",
			LiteralName = "SPEC_INVOLUNTARILY_CHANGED",
			Payload =
			{
				{ Name = "isPet", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "TalentsInvoluntarilyReset",
			Type = "Event",
			LiteralName = "TALENTS_INVOLUNTARILY_RESET",
			Payload =
			{
				{ Name = "isPetTalents", Type = "bool", Nilable = false },
			},
		},
	},

	Tables =
	{
		{
			Name = "LevelLearnedSpell",
			Type = "Structure",
			Fields =
			{
				{ Name = "spellID", Type = "number", Nilable = false },
				{ Name = "level", Type = "number", Nilable = false },
			},
		},
		{
			Name = "PvpTalentSlotInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "enabled", Type = "bool", Nilable = false },
				{ Name = "level", Type = "number", Nilable = false },
				{ Name = "selectedTalentID", Type = "number", Nilable = true },
				{ Name = "availableTalentIDs", Type = "table", InnerType = "number", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "Spell",
	Type = "System",
	Namespace = "C_Spell",

	Functions =
	{
		{
			Name = "DoesSpellExist",
			Type = "Function",

			Arguments =
			{
				{ Name = "spellID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "spellExists", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetMawPowerBorderAtlasBySpellID",
			Type = "Function",

			Arguments =
			{
				{ Name = "spellID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "rarityBorderAtlas", Type = "string", Nilable = false },
			},
		},
		{
			Name = "IsSpellDataCached",
			Type = "Function",

			Arguments =
			{
				{ Name = "spellID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isCached", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "RequestLoadSpellData",
			Type = "Function",

			Arguments =
			{
				{ Name = "spellID", Type = "number", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "SpellDataLoadResult",
			Type = "Event",
			LiteralName = "SPELL_DATA_LOAD_RESULT",
			Payload =
			{
				{ Name = "spellID", Type = "number", Nilable = false },
				{ Name = "success", Type = "bool", Nilable = false },
			},
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "SpellActivationOverlay",
	Type = "System",
	Namespace = "C_SpellActivationOverlay",

	Functions =
	{
	},

	Events =
	{
		{
			Name = "SpellActivationOverlayGlowHide",
			Type = "Event",
			LiteralName = "SPELL_ACTIVATION_OVERLAY_GLOW_HIDE",
			Payload =
			{
				{ Name = "spellID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SpellActivationOverlayGlowShow",
			Type = "Event",
			LiteralName = "SPELL_ACTIVATION_OVERLAY_GLOW_SHOW",
			Payload =
			{
				{ Name = "spellID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SpellActivationOverlayHide",
			Type = "Event",
			LiteralName = "SPELL_ACTIVATION_OVERLAY_HIDE",
			Payload =
			{
				{ Name = "spellID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "SpellActivationOverlayShow",
			Type = "Event",
			LiteralName = "SPELL_ACTIVATION_OVERLAY_SHOW",
			Payload =
			{
				{ Name = "spellID", Type = "number", Nilable = false },
				{ Name = "overlayFileDataID", Type = "number", Nilable = false },
				{ Name = "locationName", Type = "string", Nilable = false },
				{ Name = "scale", Type = "number", Nilable = false },
				{ Name = "r", Type = "number", Nilable = false },
				{ Name = "g", Type = "number", Nilable = false },
				{ Name = "b", Type = "number", Nilable = false },
			},
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "SpellBook",
	Type = "System",
	Namespace = "C_SpellBook",

	Functions =
	{
		{
			Name = "ContainsAnyDisenchantSpell",
			Type = "Function",

			Returns =
			{
				{ Name = "contains", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetCurrentLevelSpells",
			Type = "Function",

			Arguments =
			{
				{ Name = "level", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "spellIDs", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "GetDeadlyDebuffInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "spellID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "deadlyDebuffInfo", Type = "DeadlyDebuffInfo", Nilable = false },
			},
		},
		{
			Name = "GetOverrideSpell",
			Type = "Function",

			Arguments =
			{
				{ Name = "spellID", Type = "number", Nilable = false },
				{ Name = "spec", Type = "number", Nilable = false, Default = 0 },
				{ Name = "onlyKnown", Type = "bool", Nilable = false, Default = true },
				{ Name = "ignoreOverrideSpellID", Type = "number", Nilable = false, Default = 0 },
			},

			Returns =
			{
				{ Name = "overrideSpellID", Type = "number", Nilable = false, Documentation = { "Returns the spellID passed in if there is no override" } },
			},
		},
		{
			Name = "GetSkillLineIndexByID",
			Type = "Function",

			Arguments =
			{
				{ Name = "skillLineID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "skillIndex", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetSpellInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "spellID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "spellInfo", Type = "SpellInfo", Nilable = false },
			},
		},
		{
			Name = "GetSpellLinkFromSpellID",
			Type = "Function",

			Arguments =
			{
				{ Name = "spellID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "spellLink", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetTrackedNameplateSpells",
			Type = "Function",

			Returns =
			{
				{ Name = "spellIDs", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "IsSpellDisabled",
			Type = "Function",

			Arguments =
			{
				{ Name = "spellID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "disabled", Type = "bool", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "CurrentSpellCastChanged",
			Type = "Event",
			LiteralName = "CURRENT_SPELL_CAST_CHANGED",
			Payload =
			{
				{ Name = "cancelledCast", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "LearnedSpellInTab",
			Type = "Event",
			LiteralName = "LEARNED_SPELL_IN_TAB",
			Payload =
			{
				{ Name = "spellID", Type = "number", Nilable = false },
				{ Name = "skillInfoIndex", Type = "number", Nilable = false },
				{ Name = "isGuildPerkSpell", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "MaxSpellStartRecoveryOffsetChanged",
			Type = "Event",
			LiteralName = "MAX_SPELL_START_RECOVERY_OFFSET_CHANGED",
			Payload =
			{
				{ Name = "clampedNewQueueWindowMs", Type = "number", Nilable = false },
			},
		},
		{
			Name = "PlayerTotemUpdate",
			Type = "Event",
			LiteralName = "PLAYER_TOTEM_UPDATE",
			Payload =
			{
				{ Name = "totemSlot", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SpellFlyoutUpdate",
			Type = "Event",
			LiteralName = "SPELL_FLYOUT_UPDATE",
			Payload =
			{
				{ Name = "flyoutID", Type = "number", Nilable = true },
				{ Name = "spellID", Type = "number", Nilable = true },
				{ Name = "isLearned", Type = "bool", Nilable = true },
			},
		},
		{
			Name = "SpellPushedToActionbar",
			Type = "Event",
			LiteralName = "SPELL_PUSHED_TO_ACTIONBAR",
			Payload =
			{
				{ Name = "spellID", Type = "number", Nilable = false },
				{ Name = "slot", Type = "number", Nilable = false },
				{ Name = "page", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SpellTextUpdate",
			Type = "Event",
			LiteralName = "SPELL_TEXT_UPDATE",
			Payload =
			{
				{ Name = "spellID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SpellUpdateCharges",
			Type = "Event",
			LiteralName = "SPELL_UPDATE_CHARGES",
		},
		{
			Name = "SpellUpdateCooldown",
			Type = "Event",
			LiteralName = "SPELL_UPDATE_COOLDOWN",
		},
		{
			Name = "SpellUpdateIcon",
			Type = "Event",
			LiteralName = "SPELL_UPDATE_ICON",
		},
		{
			Name = "SpellUpdateUsable",
			Type = "Event",
			LiteralName = "SPELL_UPDATE_USABLE",
		},
		{
			Name = "SpellsChanged",
			Type = "Event",
			LiteralName = "SPELLS_CHANGED",
		},
		{
			Name = "StartAutorepeatSpell",
			Type = "Event",
			LiteralName = "START_AUTOREPEAT_SPELL",
		},
		{
			Name = "StopAutorepeatSpell",
			Type = "Event",
			LiteralName = "STOP_AUTOREPEAT_SPELL",
		},
		{
			Name = "UnitSpellcastSent",
			Type = "Event",
			LiteralName = "UNIT_SPELLCAST_SENT",
			Payload =
			{
				{ Name = "unit", Type = "string", Nilable = false },
				{ Name = "target", Type = "string", Nilable = false },
				{ Name = "castGUID", Type = "string", Nilable = false },
				{ Name = "spellID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "UpdateShapeshiftCooldown",
			Type = "Event",
			LiteralName = "UPDATE_SHAPESHIFT_COOLDOWN",
		},
		{
			Name = "UpdateShapeshiftForm",
			Type = "Event",
			LiteralName = "UPDATE_SHAPESHIFT_FORM",
		},
		{
			Name = "UpdateShapeshiftForms",
			Type = "Event",
			LiteralName = "UPDATE_SHAPESHIFT_FORMS",
		},
		{
			Name = "UpdateShapeshiftUsable",
			Type = "Event",
			LiteralName = "UPDATE_SHAPESHIFT_USABLE",
		},
	},

	Tables =
	{
		{
			Name = "DeadlyDebuffInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "overrideCriticalTimeRemaining", Type = "number", Nilable = false },
				{ Name = "priority", Type = "number", Nilable = false },
				{ Name = "warningText", Type = "string", Nilable = false },
				{ Name = "soundKitID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "SpellInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "iconID", Type = "number", Nilable = false },
				{ Name = "castTime", Type = "number", Nilable = false },
				{ Name = "minRange", Type = "number", Nilable = false },
				{ Name = "maxRange", Type = "number", Nilable = false },
				{ Name = "spellID", Type = "number", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "StableInfo",
	Type = "System",
	Namespace = "C_StableInfo",

	Functions =
	{
		{
			Name = "GetNumActivePets",
			Type = "Function",

			Returns =
			{
				{ Name = "numActivePets", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetNumStablePets",
			Type = "Function",

			Returns =
			{
				{ Name = "numStablePets", Type = "number", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "PetStableClosed",
			Type = "Event",
			LiteralName = "PET_STABLE_CLOSED",
		},
		{
			Name = "PetStableShow",
			Type = "Event",
			LiteralName = "PET_STABLE_SHOW",
		},
		{
			Name = "PetStableUpdate",
			Type = "Event",
			LiteralName = "PET_STABLE_UPDATE",
		},
		{
			Name = "PetStableUpdatePaperdoll",
			Type = "Event",
			LiteralName = "PET_STABLE_UPDATE_PAPERDOLL",
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "StorePublic",
	Type = "System",
	Namespace = "C_StorePublic",

	Functions =
	{
		{
			Name = "DoesGroupHavePurchaseableProducts",
			Type = "Function",

			Arguments =
			{
				{ Name = "groupID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "hasPurchaseableProducts", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsDisabledByParentalControls",
			Type = "Function",

			Returns =
			{
				{ Name = "disabled", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsEnabled",
			Type = "Function",

			Returns =
			{
				{ Name = "enabled", Type = "bool", Nilable = false },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "SummonInfo",
	Type = "System",
	Namespace = "C_SummonInfo",

	Functions =
	{
		{
			Name = "CancelSummon",
			Type = "Function",
		},
		{
			Name = "ConfirmSummon",
			Type = "Function",
		},
		{
			Name = "GetSummonConfirmAreaName",
			Type = "Function",

			Returns =
			{
				{ Name = "areaName", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetSummonConfirmSummoner",
			Type = "Function",

			Returns =
			{
				{ Name = "summoner", Type = "string", Nilable = true },
			},
		},
		{
			Name = "GetSummonConfirmTimeLeft",
			Type = "Function",

			Returns =
			{
				{ Name = "timeLeft", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetSummonReason",
			Type = "Function",

			Returns =
			{
				{ Name = "summonReason", Type = "number", Nilable = false },
			},
		},
		{
			Name = "IsSummonSkippingStartExperience",
			Type = "Function",

			Returns =
			{
				{ Name = "isSummonSkippingStartExperience", Type = "bool", Nilable = false },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "TTSSettings",
	Type = "System",
	Namespace = "C_TTSSettings",

	Functions =
	{
		{
			Name = "GetChannelEnabled",
			Type = "Function",

			Arguments =
			{
				{ Name = "channelInfo", Type = "ChatChannelInfo", Nilable = false },
			},

			Returns =
			{
				{ Name = "enabled", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetCharacterSettingsSaved",
			Type = "Function",

			Returns =
			{
				{ Name = "settingsBeenSaved", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetChatTypeEnabled",
			Type = "Function",

			Arguments =
			{
				{ Name = "chatName", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "enabled", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetSetting",
			Type = "Function",

			Arguments =
			{
				{ Name = "setting", Type = "TtsBoolSetting", Nilable = false },
			},

			Returns =
			{
				{ Name = "enabled", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetSpeechRate",
			Type = "Function",

			Returns =
			{
				{ Name = "rate", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetSpeechVolume",
			Type = "Function",

			Returns =
			{
				{ Name = "volume", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetVoiceOptionID",
			Type = "Function",

			Arguments =
			{
				{ Name = "voiceType", Type = "TtsVoiceType", Nilable = false },
			},

			Returns =
			{
				{ Name = "voiceID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetVoiceOptionName",
			Type = "Function",

			Arguments =
			{
				{ Name = "voiceType", Type = "TtsVoiceType", Nilable = false },
			},

			Returns =
			{
				{ Name = "voiceName", Type = "string", Nilable = false },
			},
		},
		{
			Name = "MarkCharacterSettingsSaved",
			Type = "Function",
		},
		{
			Name = "SetChannelEnabled",
			Type = "Function",

			Arguments =
			{
				{ Name = "channelInfo", Type = "ChatChannelInfo", Nilable = false },
				{ Name = "newVal", Type = "bool", Nilable = false, Default = false },
			},
		},
		{
			Name = "SetChannelKeyEnabled",
			Type = "Function",

			Arguments =
			{
				{ Name = "channelKey", Type = "string", Nilable = false },
				{ Name = "newVal", Type = "bool", Nilable = false, Default = false },
			},
		},
		{
			Name = "SetChatTypeEnabled",
			Type = "Function",

			Arguments =
			{
				{ Name = "chatName", Type = "string", Nilable = false },
				{ Name = "newVal", Type = "bool", Nilable = false, Default = false },
			},
		},
		{
			Name = "SetDefaultSettings",
			Type = "Function",
		},
		{
			Name = "SetSetting",
			Type = "Function",

			Arguments =
			{
				{ Name = "setting", Type = "TtsBoolSetting", Nilable = false },
				{ Name = "newVal", Type = "bool", Nilable = false, Default = false },
			},
		},
		{
			Name = "SetSpeechRate",
			Type = "Function",

			Arguments =
			{
				{ Name = "newVal", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetSpeechVolume",
			Type = "Function",

			Arguments =
			{
				{ Name = "newVal", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetVoiceOption",
			Type = "Function",

			Arguments =
			{
				{ Name = "voiceType", Type = "TtsVoiceType", Nilable = false },
				{ Name = "voiceID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetVoiceOptionName",
			Type = "Function",

			Arguments =
			{
				{ Name = "voiceType", Type = "TtsVoiceType", Nilable = false },
				{ Name = "voiceName", Type = "string", Nilable = false },
			},
		},
		{
			Name = "ShouldOverrideMessage",
			Type = "Function",

			Arguments =
			{
				{ Name = "language", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "overrideMessage", Type = "bool", Nilable = false },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "TaxiMap",
	Type = "System",
	Namespace = "C_TaxiMap",

	Functions =
	{
		{
			Name = "GetAllTaxiNodes",
			Type = "Function",
			Documentation = { "Returns information on taxi nodes at the current flight master." },

			Arguments =
			{
				{ Name = "uiMapID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "taxiNodes", Type = "table", InnerType = "TaxiNodeInfo", Nilable = false },
			},
		},
		{
			Name = "GetTaxiNodesForMap",
			Type = "Function",
			Documentation = { "Returns information on taxi nodes for a given map, without considering the current flight master." },

			Arguments =
			{
				{ Name = "uiMapID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "mapTaxiNodes", Type = "table", InnerType = "MapTaxiNodeInfo", Nilable = false },
			},
		},
		{
			Name = "ShouldMapShowTaxiNodes",
			Type = "Function",

			Arguments =
			{
				{ Name = "uiMapID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "shouldShowNodes", Type = "bool", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "TaximapClosed",
			Type = "Event",
			LiteralName = "TAXIMAP_CLOSED",
		},
		{
			Name = "TaximapOpened",
			Type = "Event",
			LiteralName = "TAXIMAP_OPENED",
			Payload =
			{
				{ Name = "system", Type = "number", Nilable = false },
			},
		},
	},

	Tables =
	{
		{
			Name = "FlightPathFaction",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 0,
			MaxValue = 2,
			Fields =
			{
				{ Name = "Neutral", Type = "FlightPathFaction", EnumValue = 0 },
				{ Name = "Horde", Type = "FlightPathFaction", EnumValue = 1 },
				{ Name = "Alliance", Type = "FlightPathFaction", EnumValue = 2 },
			},
		},
		{
			Name = "FlightPathState",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 0,
			MaxValue = 2,
			Fields =
			{
				{ Name = "Current", Type = "FlightPathState", EnumValue = 0 },
				{ Name = "Reachable", Type = "FlightPathState", EnumValue = 1 },
				{ Name = "Unreachable", Type = "FlightPathState", EnumValue = 2 },
			},
		},
		{
			Name = "MapTaxiNodeInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "nodeID", Type = "number", Nilable = false },
				{ Name = "position", Type = "table", Mixin = "Vector2DMixin", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "atlasName", Type = "string", Nilable = false },
				{ Name = "faction", Type = "FlightPathFaction", Nilable = false },
				{ Name = "textureKit", Type = "string", Nilable = false },
			},
		},
		{
			Name = "TaxiNodeInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "nodeID", Type = "number", Nilable = false },
				{ Name = "position", Type = "table", Mixin = "Vector2DMixin", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "state", Type = "FlightPathState", Nilable = false },
				{ Name = "slotIndex", Type = "number", Nilable = false },
				{ Name = "textureKit", Type = "string", Nilable = false },
				{ Name = "useSpecialIcon", Type = "bool", Nilable = false },
				{ Name = "specialIconCostString", Type = "string", Nilable = true },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "TextureUtils",
	Type = "System",
	Namespace = "C_Texture",

	Functions =
	{
		{
			Name = "GetAtlasInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "atlas", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "info", Type = "AtlasInfo", Nilable = false },
			},
		},
		{
			Name = "GetFilenameFromFileDataID",
			Type = "Function",

			Arguments =
			{
				{ Name = "fileDataID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "filename", Type = "string", Nilable = false },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
		{
			Name = "AtlasInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "width", Type = "number", Nilable = false },
				{ Name = "height", Type = "number", Nilable = false },
				{ Name = "leftTexCoord", Type = "number", Nilable = false },
				{ Name = "rightTexCoord", Type = "number", Nilable = false },
				{ Name = "topTexCoord", Type = "number", Nilable = false },
				{ Name = "bottomTexCoord", Type = "number", Nilable = false },
				{ Name = "tilesHorizontally", Type = "bool", Nilable = false },
				{ Name = "tilesVertically", Type = "bool", Nilable = false },
				{ Name = "file", Type = "number", Nilable = true },
				{ Name = "filename", Type = "string", Nilable = true },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "Tooltip",
	Type = "System",
	Namespace = "C_Tooltip",

	Functions =
	{
	},

	Events =
	{
	},

	Tables =
	{
		{
			Name = "TooltipSide",
			Type = "Enumeration",
			NumValues = 4,
			MinValue = 0,
			MaxValue = 3,
			Fields =
			{
				{ Name = "Left", Type = "TooltipSide", EnumValue = 0 },
				{ Name = "Right", Type = "TooltipSide", EnumValue = 1 },
				{ Name = "Top", Type = "TooltipSide", EnumValue = 2 },
				{ Name = "Bottom", Type = "TooltipSide", EnumValue = 3 },
			},
		},
		{
			Name = "TooltipTextureAnchor",
			Type = "Enumeration",
			NumValues = 7,
			MinValue = 0,
			MaxValue = 6,
			Fields =
			{
				{ Name = "LeftTop", Type = "TooltipTextureAnchor", EnumValue = 0 },
				{ Name = "LeftCenter", Type = "TooltipTextureAnchor", EnumValue = 1 },
				{ Name = "LeftBottom", Type = "TooltipTextureAnchor", EnumValue = 2 },
				{ Name = "RightTop", Type = "TooltipTextureAnchor", EnumValue = 3 },
				{ Name = "RightCenter", Type = "TooltipTextureAnchor", EnumValue = 4 },
				{ Name = "RightBottom", Type = "TooltipTextureAnchor", EnumValue = 5 },
				{ Name = "All", Type = "TooltipTextureAnchor", EnumValue = 6 },
			},
		},
		{
			Name = "TooltipTextureRelativeRegion",
			Type = "Enumeration",
			NumValues = 2,
			MinValue = 0,
			MaxValue = 1,
			Fields =
			{
				{ Name = "LeftLine", Type = "TooltipTextureRelativeRegion", EnumValue = 0 },
				{ Name = "RightLine", Type = "TooltipTextureRelativeRegion", EnumValue = 1 },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "ToyBoxInfo",
	Type = "System",
	Namespace = "C_ToyBoxInfo",

	Functions =
	{
		{
			Name = "ClearFanfare",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "IsToySourceValid",
			Type = "Function",

			Arguments =
			{
				{ Name = "source", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isToySourceValid", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsUsingDefaultFilters",
			Type = "Function",

			Returns =
			{
				{ Name = "isUsingDefaultFilters", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "NeedsFanfare",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "needsFanfare", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetDefaultFilters",
			Type = "Function",
		},
	},

	Events =
	{
		{
			Name = "NewToyAdded",
			Type = "Event",
			LiteralName = "NEW_TOY_ADDED",
			Payload =
			{
				{ Name = "itemID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ToysUpdated",
			Type = "Event",
			LiteralName = "TOYS_UPDATED",
			Payload =
			{
				{ Name = "itemID", Type = "number", Nilable = true },
				{ Name = "isNew", Type = "bool", Nilable = true },
				{ Name = "hasFanfare", Type = "bool", Nilable = true },
			},
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "TradeInfo",
	Type = "System",
	Namespace = "C_TradeInfo",

	Functions =
	{
	},

	Events =
	{
		{
			Name = "PlayerTradeCurrency",
			Type = "Event",
			LiteralName = "PLAYER_TRADE_CURRENCY",
		},
		{
			Name = "PlayerTradeMoney",
			Type = "Event",
			LiteralName = "PLAYER_TRADE_MONEY",
		},
		{
			Name = "TradeAcceptUpdate",
			Type = "Event",
			LiteralName = "TRADE_ACCEPT_UPDATE",
			Payload =
			{
				{ Name = "playerAccepted", Type = "number", Nilable = false },
				{ Name = "targetAccepted", Type = "number", Nilable = false },
			},
		},
		{
			Name = "TradeClosed",
			Type = "Event",
			LiteralName = "TRADE_CLOSED",
		},
		{
			Name = "TradeCurrencyChanged",
			Type = "Event",
			LiteralName = "TRADE_CURRENCY_CHANGED",
		},
		{
			Name = "TradeMoneyChanged",
			Type = "Event",
			LiteralName = "TRADE_MONEY_CHANGED",
		},
		{
			Name = "TradePlayerItemChanged",
			Type = "Event",
			LiteralName = "TRADE_PLAYER_ITEM_CHANGED",
			Payload =
			{
				{ Name = "tradeSlotIndex", Type = "number", Nilable = false },
			},
		},
		{
			Name = "TradePotentialBindEnchant",
			Type = "Event",
			LiteralName = "TRADE_POTENTIAL_BIND_ENCHANT",
			Payload =
			{
				{ Name = "canBecomeBoundForTrade", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "TradePotentialRemoveTransmog",
			Type = "Event",
			LiteralName = "TRADE_POTENTIAL_REMOVE_TRANSMOG",
			Payload =
			{
				{ Name = "itemLink", Type = "string", Nilable = false },
				{ Name = "tradeSlotIndex", Type = "number", Nilable = false },
			},
		},
		{
			Name = "TradeRequest",
			Type = "Event",
			LiteralName = "TRADE_REQUEST",
			Payload =
			{
				{ Name = "name", Type = "string", Nilable = false },
			},
		},
		{
			Name = "TradeRequestCancel",
			Type = "Event",
			LiteralName = "TRADE_REQUEST_CANCEL",
		},
		{
			Name = "TradeShow",
			Type = "Event",
			LiteralName = "TRADE_SHOW",
		},
		{
			Name = "TradeTargetItemChanged",
			Type = "Event",
			LiteralName = "TRADE_TARGET_ITEM_CHANGED",
			Payload =
			{
				{ Name = "tradeSlotIndex", Type = "number", Nilable = false },
			},
		},
		{
			Name = "TradeUpdate",
			Type = "Event",
			LiteralName = "TRADE_UPDATE",
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "TradeSkillUI",
	Type = "System",
	Namespace = "C_TradeSkillUI",

	Functions =
	{
		{
			Name = "CloseCraftingOrders",
			Type = "Function",
		},
		{
			Name = "CloseCustomerOrders",
			Type = "Function",
		},
		{
			Name = "CloseTradeSkill",
			Type = "Function",
		},
		{
			Name = "ContinueRecast",
			Type = "Function",
		},
		{
			Name = "CraftRecipe",
			Type = "Function",

			Arguments =
			{
				{ Name = "recipeSpellID", Type = "number", Nilable = false },
				{ Name = "numCasts", Type = "number", Nilable = false, Default = 1 },
				{ Name = "craftingReagents", Type = "table", InnerType = "CraftingReagentInfo", Nilable = true },
				{ Name = "recipeLevel", Type = "number", Nilable = true },
			},
		},
		{
			Name = "CraftSalvage",
			Type = "Function",

			Arguments =
			{
				{ Name = "recipeSpellID", Type = "number", Nilable = false },
				{ Name = "numCasts", Type = "number", Nilable = false, Default = 1 },
				{ Name = "itemLocation", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},
		},
		{
			Name = "GetAllProfessionTradeSkillLines",
			Type = "Function",

			Returns =
			{
				{ Name = "skillLineID", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "GetBaseProfessionInfo",
			Type = "Function",

			Returns =
			{
				{ Name = "info", Type = "ProfessionInfo", Nilable = false },
			},
		},
		{
			Name = "GetChildProfessionInfo",
			Type = "Function",

			Returns =
			{
				{ Name = "info", Type = "ProfessionInfo", Nilable = false },
			},
		},
		{
			Name = "GetChildProfessionInfos",
			Type = "Function",

			Returns =
			{
				{ Name = "infos", Type = "table", InnerType = "ProfessionInfo", Nilable = false },
			},
		},
		{
			Name = "GetCraftingOperationInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "recipeID", Type = "number", Nilable = false },
				{ Name = "craftingReagents", Type = "table", InnerType = "CraftingReagentInfo", Nilable = false },
			},

			Returns =
			{
				{ Name = "info", Type = "CraftingOperationInfo", Nilable = true },
			},
		},
		{
			Name = "GetCraftingReagentBonusText",
			Type = "Function",

			Arguments =
			{
				{ Name = "recipeSpellID", Type = "number", Nilable = false },
				{ Name = "craftingReagentIndex", Type = "number", Nilable = false },
				{ Name = "craftingReagents", Type = "table", InnerType = "CraftingReagentInfo", Nilable = false },
			},

			Returns =
			{
				{ Name = "bonusText", Type = "table", InnerType = "string", Nilable = false },
			},
		},
		{
			Name = "GetFactionSpecificOutputItem",
			Type = "Function",

			Arguments =
			{
				{ Name = "recipeSpellID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "itemID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetItemReagentQualityByItemInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemInfo", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "quality", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetProfessionChildSkillLineID",
			Type = "Function",

			Returns =
			{
				{ Name = "skillLineID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetProfessionGearShown",
			Type = "Function",

			Returns =
			{
				{ Name = "shown", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetProfessionInfoBySkillLineID",
			Type = "Function",

			Arguments =
			{
				{ Name = "skillLineID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "info", Type = "ProfessionInfo", Nilable = false },
			},
		},
		{
			Name = "GetProfessionSkillLineID",
			Type = "Function",

			Arguments =
			{
				{ Name = "profession", Type = "Profession", Nilable = false },
			},

			Returns =
			{
				{ Name = "skillLineID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetProfessionSlots",
			Type = "Function",

			Arguments =
			{
				{ Name = "profession", Type = "Profession", Nilable = false },
			},

			Returns =
			{
				{ Name = "slots", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "GetProfessionSpells",
			Type = "Function",

			Arguments =
			{
				{ Name = "professionID", Type = "number", Nilable = false },
				{ Name = "skillLineID", Type = "number", Nilable = true },
			},

			Returns =
			{
				{ Name = "knownSpells", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "GetReagentSlotStatus",
			Type = "Function",

			Arguments =
			{
				{ Name = "mcrSlotID", Type = "number", Nilable = false },
				{ Name = "recipeSpellID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "locked", Type = "bool", Nilable = false },
				{ Name = "lockedReason", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetRecipeFixedReagentItemLink",
			Type = "Function",

			Arguments =
			{
				{ Name = "recipeID", Type = "number", Nilable = false },
				{ Name = "reagentSlotIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "link", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetRecipeInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "recipeSpellID", Type = "number", Nilable = false },
				{ Name = "recipeLevel", Type = "number", Nilable = true },
			},

			Returns =
			{
				{ Name = "recipeInfo", Type = "TradeSkillRecipeInfo", Nilable = true },
			},
		},
		{
			Name = "GetRecipeOutputItemData",
			Type = "Function",

			Arguments =
			{
				{ Name = "recipeSpellID", Type = "number", Nilable = false },
				{ Name = "reagents", Type = "table", InnerType = "CraftingReagentInfo", Nilable = true },
			},

			Returns =
			{
				{ Name = "outputInfo", Type = "CraftingRecipeOutputInfo", Nilable = false },
			},
		},
		{
			Name = "GetRecipeQualityReagentItemLink",
			Type = "Function",

			Arguments =
			{
				{ Name = "recipeID", Type = "number", Nilable = false },
				{ Name = "mcrSlotIndex", Type = "number", Nilable = false },
				{ Name = "qualityIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "link", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetRecipeRepeatCount",
			Type = "Function",

			Returns =
			{
				{ Name = "recastTimes", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetRecipeSchematic",
			Type = "Function",

			Arguments =
			{
				{ Name = "recipeSpellID", Type = "number", Nilable = false },
				{ Name = "recipeLevel", Type = "number", Nilable = true },
			},

			Returns =
			{
				{ Name = "schematic", Type = "CraftingRecipeSchematic", Nilable = false },
			},
		},
		{
			Name = "GetRecipesTracked",
			Type = "Function",

			Returns =
			{
				{ Name = "recipeIDs", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "GetSalvagableItemIDs",
			Type = "Function",

			Arguments =
			{
				{ Name = "recipeID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "itemIDs", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "GetTradeSkillDisplayName",
			Type = "Function",

			Arguments =
			{
				{ Name = "skillLineID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "professionDisplayName", Type = "string", Nilable = false },
			},
		},
		{
			Name = "HasRecipesTracked",
			Type = "Function",

			Returns =
			{
				{ Name = "hasRecipesTracked", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsNPCCrafting",
			Type = "Function",

			Returns =
			{
				{ Name = "result", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsRecipeInSkillLine",
			Type = "Function",

			Arguments =
			{
				{ Name = "recipeID", Type = "number", Nilable = false },
				{ Name = "skillLineID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "result", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsRecipeProfessionLearned",
			Type = "Function",

			Arguments =
			{
				{ Name = "recipeID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "recipeProfessionLearned", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsRecipeTracked",
			Type = "Function",

			Arguments =
			{
				{ Name = "recipeID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "tracked", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsRuneforging",
			Type = "Function",

			Returns =
			{
				{ Name = "result", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "OpenRecipe",
			Type = "Function",

			Arguments =
			{
				{ Name = "recipeID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "OpenTradeSkill",
			Type = "Function",

			Arguments =
			{
				{ Name = "skillLineID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "opened", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetProfessionChildSkillLineID",
			Type = "Function",

			Arguments =
			{
				{ Name = "skillLineID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetProfessionGearShown",
			Type = "Function",

			Arguments =
			{
				{ Name = "shown", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetRecipeTracked",
			Type = "Function",

			Arguments =
			{
				{ Name = "recipeID", Type = "number", Nilable = false },
				{ Name = "tracked", Type = "bool", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "NewRecipeLearned",
			Type = "Event",
			LiteralName = "NEW_RECIPE_LEARNED",
			Payload =
			{
				{ Name = "recipeID", Type = "number", Nilable = false },
				{ Name = "recipeLevel", Type = "number", Nilable = true },
				{ Name = "baseRecipeID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "ObliterumForgeClose",
			Type = "Event",
			LiteralName = "OBLITERUM_FORGE_CLOSE",
		},
		{
			Name = "ObliterumForgePendingItemChanged",
			Type = "Event",
			LiteralName = "OBLITERUM_FORGE_PENDING_ITEM_CHANGED",
		},
		{
			Name = "ObliterumForgeShow",
			Type = "Event",
			LiteralName = "OBLITERUM_FORGE_SHOW",
		},
		{
			Name = "OpenRecipeResponse",
			Type = "Event",
			LiteralName = "OPEN_RECIPE_RESPONSE",
			Payload =
			{
				{ Name = "recipeID", Type = "number", Nilable = false },
				{ Name = "skillLineID", Type = "number", Nilable = false },
				{ Name = "expansionSkillLineID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "TrackedRecipeUpdate",
			Type = "Event",
			LiteralName = "TRACKED_RECIPE_UPDATE",
			Payload =
			{
				{ Name = "recipeID", Type = "number", Nilable = false },
				{ Name = "tracked", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "TradeSkillClose",
			Type = "Event",
			LiteralName = "TRADE_SKILL_CLOSE",
		},
		{
			Name = "TradeSkillCraftingReagentBonusTextUpdated",
			Type = "Event",
			LiteralName = "TRADE_SKILL_CRAFTING_REAGENT_BONUS_TEXT_UPDATED",
			Payload =
			{
				{ Name = "itemID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "TradeSkillDataSourceChanged",
			Type = "Event",
			LiteralName = "TRADE_SKILL_DATA_SOURCE_CHANGED",
		},
		{
			Name = "TradeSkillDataSourceChanging",
			Type = "Event",
			LiteralName = "TRADE_SKILL_DATA_SOURCE_CHANGING",
		},
		{
			Name = "TradeSkillDetailsUpdate",
			Type = "Event",
			LiteralName = "TRADE_SKILL_DETAILS_UPDATE",
		},
		{
			Name = "TradeSkillItemCraftedResult",
			Type = "Event",
			LiteralName = "TRADE_SKILL_ITEM_CRAFTED_RESULT",
			Payload =
			{
				{ Name = "data", Type = "CraftingItemResultData", Nilable = false },
			},
		},
		{
			Name = "TradeSkillListUpdate",
			Type = "Event",
			LiteralName = "TRADE_SKILL_LIST_UPDATE",
		},
		{
			Name = "TradeSkillNameUpdate",
			Type = "Event",
			LiteralName = "TRADE_SKILL_NAME_UPDATE",
		},
		{
			Name = "TradeSkillShow",
			Type = "Event",
			LiteralName = "TRADE_SKILL_SHOW",
		},
		{
			Name = "UpdateTradeskillRecast",
			Type = "Event",
			LiteralName = "UPDATE_TRADESKILL_RECAST",
		},
		{
			Name = "UpdateTradeskillRecastReady",
			Type = "Event",
			LiteralName = "UPDATE_TRADESKILL_RECAST_READY",
		},
	},

	Tables =
	{
		{
			Name = "CraftingReagentItemFlag",
			Type = "Enumeration",
			NumValues = 1,
			MinValue = 0,
			MaxValue = 0,
			Fields =
			{
				{ Name = "TooltipShowsAsStatModifications", Type = "CraftingReagentItemFlag", EnumValue = 0 },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "Trainer",
	Type = "System",
	Namespace = "C_Trainer",

	Functions =
	{
	},

	Events =
	{
		{
			Name = "TrainerClosed",
			Type = "Event",
			LiteralName = "TRAINER_CLOSED",
		},
		{
			Name = "TrainerDescriptionUpdate",
			Type = "Event",
			LiteralName = "TRAINER_DESCRIPTION_UPDATE",
		},
		{
			Name = "TrainerServiceInfoNameUpdate",
			Type = "Event",
			LiteralName = "TRAINER_SERVICE_INFO_NAME_UPDATE",
		},
		{
			Name = "TrainerShow",
			Type = "Event",
			LiteralName = "TRAINER_SHOW",
		},
		{
			Name = "TrainerUpdate",
			Type = "Event",
			LiteralName = "TRAINER_UPDATE",
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "TraitConfig",
	Type = "System",
	Namespace = "C_TraitConfig",

	Functions =
	{
	},

	Events =
	{
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "Tutorial",
	Type = "System",
	Namespace = "C_Tutorial",

	Functions =
	{
		{
			Name = "AbandonTutorialArea",
			Type = "Function",
		},
		{
			Name = "ReturnToTutorialArea",
			Type = "Function",
		},
	},

	Events =
	{
		{
			Name = "LeavingTutorialArea",
			Type = "Event",
			LiteralName = "LEAVING_TUTORIAL_AREA",
		},
		{
			Name = "NpeTutorialUpdate",
			Type = "Event",
			LiteralName = "NPE_TUTORIAL_UPDATE",
		},
		{
			Name = "TutorialHighlightSpell",
			Type = "Event",
			LiteralName = "TUTORIAL_HIGHLIGHT_SPELL",
			Payload =
			{
				{ Name = "spellID", Type = "number", Nilable = false },
				{ Name = "tutorialGlobalStringTag", Type = "string", Nilable = false },
			},
		},
		{
			Name = "TutorialTrigger",
			Type = "Event",
			LiteralName = "TUTORIAL_TRIGGER",
			Payload =
			{
				{ Name = "tutorialIndex", Type = "number", Nilable = false },
				{ Name = "forceShow", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "TutorialUnhighlightSpell",
			Type = "Event",
			LiteralName = "TUTORIAL_UNHIGHLIGHT_SPELL",
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "UIColor",
	Type = "System",
	Namespace = "C_UIColor",

	Functions =
	{
		{
			Name = "GetColors",
			Type = "Function",

			Returns =
			{
				{ Name = "colors", Type = "table", InnerType = "DBColorExport", Nilable = false },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
		{
			Name = "DBColorExport",
			Type = "Structure",
			Fields =
			{
				{ Name = "baseTag", Type = "string", Nilable = false },
				{ Name = "color", Type = "table", Mixin = "ColorMixin", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "UIMacros",
	Type = "System",
	Namespace = "C_Macro",

	Functions =
	{
	},

	Events =
	{
		{
			Name = "ExecuteChatLine",
			Type = "Event",
			LiteralName = "EXECUTE_CHAT_LINE",
			Payload =
			{
				{ Name = "chatLine", Type = "string", Nilable = false },
			},
		},
		{
			Name = "UpdateMacros",
			Type = "Event",
			LiteralName = "UPDATE_MACROS",
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "UI",
	Type = "System",
	Namespace = "C_UI",

	Functions =
	{
		{
			Name = "DoesAnyDisplayHaveNotch",
			Type = "Function",
			Documentation = { "True if any display attached has a notch. This does not mean the current view intersects the notch." },

			Returns =
			{
				{ Name = "notchPresent", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetTopLeftNotchSafeRegion",
			Type = "Function",
			Documentation = { "Region of screen left of screen notch. Zeros if no notch." },

			Returns =
			{
				{ Name = "left", Type = "number", Nilable = false },
				{ Name = "right", Type = "number", Nilable = false },
				{ Name = "top", Type = "number", Nilable = false },
				{ Name = "bottom", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetTopRightNotchSafeRegion",
			Type = "Function",
			Documentation = { "Region of screen right of screen notch. Zeros if no notch." },

			Returns =
			{
				{ Name = "left", Type = "number", Nilable = false },
				{ Name = "right", Type = "number", Nilable = false },
				{ Name = "top", Type = "number", Nilable = false },
				{ Name = "bottom", Type = "number", Nilable = false },
			},
		},
		{
			Name = "Reload",
			Type = "Function",
		},
		{
			Name = "ShouldUIParentAvoidNotch",
			Type = "Function",
			Documentation = { "UIParent will shift down to avoid notch if true. This does not mean there is a notch." },

			Returns =
			{
				{ Name = "willAvoidNotch", Type = "bool", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "NotchedDisplayModeChanged",
			Type = "Event",
			LiteralName = "NOTCHED_DISPLAY_MODE_CHANGED",
		},
		{
			Name = "UiScaleChanged",
			Type = "Event",
			LiteralName = "UI_SCALE_CHANGED",
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "ModelInfo",
	Type = "System",
	Namespace = "C_ModelInfo",

	Functions =
	{
		{
			Name = "AddActiveModelScene",
			Type = "Function",
			Documentation = { "This function does nothing in public clients" },

			Arguments =
			{
				{ Name = "modelSceneFrame", Type = "table", Nilable = false },
				{ Name = "modelSceneID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "AddActiveModelSceneActor",
			Type = "Function",
			Documentation = { "This function does nothing in public clients" },

			Arguments =
			{
				{ Name = "modelSceneFrameActor", Type = "table", Nilable = false },
				{ Name = "modelSceneActorID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ClearActiveModelScene",
			Type = "Function",
			Documentation = { "This function does nothing in public clients" },

			Arguments =
			{
				{ Name = "modelSceneFrame", Type = "table", Nilable = false },
			},
		},
		{
			Name = "ClearActiveModelSceneActor",
			Type = "Function",
			Documentation = { "This function does nothing in public clients" },

			Arguments =
			{
				{ Name = "modelSceneFrameActor", Type = "table", Nilable = false },
			},
		},
		{
			Name = "GetModelSceneActorDisplayInfoByID",
			Type = "Function",

			Arguments =
			{
				{ Name = "modelActorDisplayID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "actorDisplayInfo", Type = "UIModelSceneActorDisplayInfo", Nilable = false },
			},
		},
		{
			Name = "GetModelSceneActorInfoByID",
			Type = "Function",

			Arguments =
			{
				{ Name = "modelActorID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "actorInfo", Type = "UIModelSceneActorInfo", Nilable = false },
			},
		},
		{
			Name = "GetModelSceneCameraInfoByID",
			Type = "Function",

			Arguments =
			{
				{ Name = "modelSceneCameraID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "modelSceneCameraInfo", Type = "UIModelSceneCameraInfo", Nilable = false },
			},
		},
		{
			Name = "GetModelSceneInfoByID",
			Type = "Function",

			Arguments =
			{
				{ Name = "modelSceneID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "modelSceneType", Type = "ModelSceneType", Nilable = false },
				{ Name = "modelCameraIDs", Type = "table", InnerType = "number", Nilable = false },
				{ Name = "modelActorsIDs", Type = "table", InnerType = "number", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "UiModelSceneInfoUpdated",
			Type = "Event",
			LiteralName = "UI_MODEL_SCENE_INFO_UPDATED",
		},
	},

	Tables =
	{
		{
			Name = "ItemTryOnReason",
			Type = "Enumeration",
			NumValues = 4,
			MinValue = 0,
			MaxValue = 3,
			Fields =
			{
				{ Name = "Success", Type = "ItemTryOnReason", EnumValue = 0 },
				{ Name = "WrongRace", Type = "ItemTryOnReason", EnumValue = 1 },
				{ Name = "NotEquippable", Type = "ItemTryOnReason", EnumValue = 2 },
				{ Name = "DataPending", Type = "ItemTryOnReason", EnumValue = 3 },
			},
		},
		{
			Name = "ModelSceneSetting",
			Type = "Enumeration",
			NumValues = 1,
			MinValue = 1,
			MaxValue = 1,
			Fields =
			{
				{ Name = "AlignLightToOrbitDelta", Type = "ModelSceneSetting", EnumValue = 1 },
			},
		},
		{
			Name = "ModelSceneType",
			Type = "Enumeration",
			NumValues = 20,
			MinValue = 0,
			MaxValue = 19,
			Fields =
			{
				{ Name = "MountJournal", Type = "ModelSceneType", EnumValue = 0 },
				{ Name = "PetJournalCard", Type = "ModelSceneType", EnumValue = 1 },
				{ Name = "ShopCard", Type = "ModelSceneType", EnumValue = 2 },
				{ Name = "EncounterJournal", Type = "ModelSceneType", EnumValue = 3 },
				{ Name = "PetJournalLoadout", Type = "ModelSceneType", EnumValue = 4 },
				{ Name = "ArtifactTier2", Type = "ModelSceneType", EnumValue = 5 },
				{ Name = "ArtifactTier2ForgingScene", Type = "ModelSceneType", EnumValue = 6 },
				{ Name = "ArtifactTier2SlamEffect", Type = "ModelSceneType", EnumValue = 7 },
				{ Name = "CommentatorVictoryFanfare", Type = "ModelSceneType", EnumValue = 8 },
				{ Name = "ArtifactRelicTalentEffect", Type = "ModelSceneType", EnumValue = 9 },
				{ Name = "PvPWarModeOrb", Type = "ModelSceneType", EnumValue = 10 },
				{ Name = "PvPWarModeFire", Type = "ModelSceneType", EnumValue = 11 },
				{ Name = "PartyPose", Type = "ModelSceneType", EnumValue = 12 },
				{ Name = "AzeriteItemLevelUpToast", Type = "ModelSceneType", EnumValue = 13 },
				{ Name = "AzeritePowers", Type = "ModelSceneType", EnumValue = 14 },
				{ Name = "AzeriteRewardGlow", Type = "ModelSceneType", EnumValue = 15 },
				{ Name = "HeartOfAzeroth", Type = "ModelSceneType", EnumValue = 16 },
				{ Name = "WorldMapThreat", Type = "ModelSceneType", EnumValue = 17 },
				{ Name = "Soulbinds", Type = "ModelSceneType", EnumValue = 18 },
				{ Name = "JailersTowerAnimaGlow", Type = "ModelSceneType", EnumValue = 19 },
			},
		},
		{
			Name = "UIModelSceneActorDisplayInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "animation", Type = "number", Nilable = false },
				{ Name = "animationVariation", Type = "number", Nilable = false },
				{ Name = "animSpeed", Type = "number", Nilable = false },
				{ Name = "animationKitID", Type = "number", Nilable = true },
				{ Name = "spellVisualKitID", Type = "number", Nilable = true },
				{ Name = "alpha", Type = "number", Nilable = false },
				{ Name = "scale", Type = "number", Nilable = false },
			},
		},
		{
			Name = "UIModelSceneActorInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "modelActorID", Type = "number", Nilable = false },
				{ Name = "scriptTag", Type = "string", Nilable = false },
				{ Name = "position", Type = "table", Mixin = "Vector3DMixin", Nilable = false },
				{ Name = "yaw", Type = "number", Nilable = false },
				{ Name = "pitch", Type = "number", Nilable = false },
				{ Name = "roll", Type = "number", Nilable = false },
				{ Name = "normalizeScaleAggressiveness", Type = "number", Nilable = true },
				{ Name = "useCenterForOriginX", Type = "bool", Nilable = false },
				{ Name = "useCenterForOriginY", Type = "bool", Nilable = false },
				{ Name = "useCenterForOriginZ", Type = "bool", Nilable = false },
				{ Name = "modelActorDisplayID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "UIModelSceneCameraInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "modelSceneCameraID", Type = "number", Nilable = false },
				{ Name = "scriptTag", Type = "string", Nilable = false },
				{ Name = "cameraType", Type = "string", Nilable = false },
				{ Name = "target", Type = "table", Mixin = "Vector3DMixin", Nilable = false },
				{ Name = "yaw", Type = "number", Nilable = false },
				{ Name = "pitch", Type = "number", Nilable = false },
				{ Name = "roll", Type = "number", Nilable = false },
				{ Name = "zoomDistance", Type = "number", Nilable = false },
				{ Name = "minZoomDistance", Type = "number", Nilable = false },
				{ Name = "maxZoomDistance", Type = "number", Nilable = false },
				{ Name = "zoomedTargetOffset", Type = "table", Mixin = "Vector3DMixin", Nilable = false },
				{ Name = "zoomedYawOffset", Type = "number", Nilable = false },
				{ Name = "zoomedPitchOffset", Type = "number", Nilable = false },
				{ Name = "zoomedRollOffset", Type = "number", Nilable = false },
				{ Name = "flags", Type = "ModelSceneSetting", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "UITimer",
	Type = "System",
	Namespace = "C_Timer",

	Functions =
	{
		{
			Name = "After",
			Type = "Function",

			Arguments =
			{
				{ Name = "seconds", Type = "number", Nilable = false },
				{ Name = "callback", Type = "TimerCallback", Nilable = false },
			},
		},
		{
			Name = "NewTicker",
			Type = "Function",

			Arguments =
			{
				{ Name = "seconds", Type = "number", Nilable = false },
				{ Name = "callback", Type = "TickerCallback", Nilable = false },
				{ Name = "iterations", Type = "number", Nilable = true },
			},

			Returns =
			{
				{ Name = "cbObject", Type = "TickerCallback", Nilable = false },
			},
		},
		{
			Name = "NewTimer",
			Type = "Function",

			Arguments =
			{
				{ Name = "seconds", Type = "number", Nilable = false },
				{ Name = "callback", Type = "TickerCallback", Nilable = false },
			},

			Returns =
			{
				{ Name = "cbObject", Type = "TickerCallback", Nilable = false },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
		{
			Name = "TickerCallback",
			Type = "CallbackType",

			Arguments =
			{
				{ Name = "cb", Type = "TimerCallback", Nilable = false },
			},
		},
		{
			Name = "TimerCallback",
			Type = "CallbackType",
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "UIWidgetManager",
	Type = "System",
	Namespace = "C_UIWidgetManager",

	Functions =
	{
		{
			Name = "GetAllWidgetsBySetID",
			Type = "Function",

			Arguments =
			{
				{ Name = "setID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "widgets", Type = "table", InnerType = "UIWidgetInfo", Nilable = false },
			},
		},
		{
			Name = "GetBelowMinimapWidgetSetID",
			Type = "Function",

			Returns =
			{
				{ Name = "setID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetBulletTextListWidgetVisualizationInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "widgetID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "widgetInfo", Type = "BulletTextListWidgetVisualizationInfo", Nilable = true },
			},
		},
		{
			Name = "GetCaptureBarWidgetVisualizationInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "widgetID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "widgetInfo", Type = "CaptureBarWidgetVisualizationInfo", Nilable = true },
			},
		},
		{
			Name = "GetCaptureZoneVisualizationInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "widgetID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "widgetInfo", Type = "CaptureZoneVisualizationInfo", Nilable = true },
			},
		},
		{
			Name = "GetDiscreteProgressStepsVisualizationInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "widgetID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "widgetInfo", Type = "DiscreteProgressStepsVisualizationInfo", Nilable = true },
			},
		},
		{
			Name = "GetDoubleIconAndTextWidgetVisualizationInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "widgetID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "widgetInfo", Type = "DoubleIconAndTextWidgetVisualizationInfo", Nilable = true },
			},
		},
		{
			Name = "GetDoubleStateIconRowVisualizationInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "widgetID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "widgetInfo", Type = "DoubleStateIconRowVisualizationInfo", Nilable = true },
			},
		},
		{
			Name = "GetDoubleStatusBarWidgetVisualizationInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "widgetID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "widgetInfo", Type = "DoubleStatusBarWidgetVisualizationInfo", Nilable = true },
			},
		},
		{
			Name = "GetHorizontalCurrenciesWidgetVisualizationInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "widgetID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "widgetInfo", Type = "HorizontalCurrenciesWidgetVisualizationInfo", Nilable = true },
			},
		},
		{
			Name = "GetIconAndTextWidgetVisualizationInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "widgetID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "widgetInfo", Type = "IconAndTextWidgetVisualizationInfo", Nilable = true },
			},
		},
		{
			Name = "GetIconTextAndBackgroundWidgetVisualizationInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "widgetID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "widgetInfo", Type = "IconTextAndBackgroundWidgetVisualizationInfo", Nilable = true },
			},
		},
		{
			Name = "GetIconTextAndCurrenciesWidgetVisualizationInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "widgetID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "widgetInfo", Type = "IconTextAndCurrenciesWidgetVisualizationInfo", Nilable = true },
			},
		},
		{
			Name = "GetObjectiveTrackerWidgetSetID",
			Type = "Function",

			Returns =
			{
				{ Name = "setID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetPowerBarWidgetSetID",
			Type = "Function",

			Returns =
			{
				{ Name = "setID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetScenarioHeaderCurrenciesAndBackgroundWidgetVisualizationInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "widgetID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "widgetInfo", Type = "ScenarioHeaderCurrenciesAndBackgroundWidgetVisualizationInfo", Nilable = true },
			},
		},
		{
			Name = "GetScenarioHeaderTimerWidgetVisualizationInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "widgetID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "widgetInfo", Type = "ScenarioHeaderTimerWidgetVisualizationInfo", Nilable = true },
			},
		},
		{
			Name = "GetSpacerVisualizationInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "widgetID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "widgetInfo", Type = "SpacerVisualizationInfo", Nilable = true },
			},
		},
		{
			Name = "GetSpellDisplayVisualizationInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "widgetID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "widgetInfo", Type = "SpellDisplayVisualizationInfo", Nilable = true },
			},
		},
		{
			Name = "GetStackedResourceTrackerWidgetVisualizationInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "widgetID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "widgetInfo", Type = "StackedResourceTrackerWidgetVisualizationInfo", Nilable = true },
			},
		},
		{
			Name = "GetStatusBarWidgetVisualizationInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "widgetID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "widgetInfo", Type = "StatusBarWidgetVisualizationInfo", Nilable = true },
			},
		},
		{
			Name = "GetTextColumnRowVisualizationInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "widgetID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "widgetInfo", Type = "TextColumnRowVisualizationInfo", Nilable = true },
			},
		},
		{
			Name = "GetTextWithStateWidgetVisualizationInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "widgetID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "widgetInfo", Type = "TextWithStateWidgetVisualizationInfo", Nilable = true },
			},
		},
		{
			Name = "GetTextureAndTextRowVisualizationInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "widgetID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "widgetInfo", Type = "TextureAndTextRowVisualizationInfo", Nilable = true },
			},
		},
		{
			Name = "GetTextureAndTextVisualizationInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "widgetID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "widgetInfo", Type = "TextureAndTextVisualizationInfo", Nilable = true },
			},
		},
		{
			Name = "GetTextureWithAnimationVisualizationInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "widgetID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "widgetInfo", Type = "TextureWithAnimationVisualizationInfo", Nilable = true },
			},
		},
		{
			Name = "GetTopCenterWidgetSetID",
			Type = "Function",

			Returns =
			{
				{ Name = "setID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetUnitPowerBarWidgetVisualizationInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "widgetID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "widgetInfo", Type = "UnitPowerBarWidgetVisualizationInfo", Nilable = true },
			},
		},
		{
			Name = "GetWidgetSetInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "widgetSetID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "widgetSetInfo", Type = "UIWidgetSetInfo", Nilable = false },
			},
		},
		{
			Name = "GetZoneControlVisualizationInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "widgetID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "widgetInfo", Type = "ZoneControlVisualizationInfo", Nilable = true },
			},
		},
		{
			Name = "RegisterUnitForWidgetUpdates",
			Type = "Function",

			Arguments =
			{
				{ Name = "unitToken", Type = "string", Nilable = false },
				{ Name = "isGuid", Type = "bool", Nilable = false, Default = false },
			},
		},
		{
			Name = "SetProcessingUnit",
			Type = "Function",

			Arguments =
			{
				{ Name = "unit", Type = "string", Nilable = true },
			},
		},
		{
			Name = "SetProcessingUnitGuid",
			Type = "Function",

			Arguments =
			{
				{ Name = "unit", Type = "string", Nilable = true },
			},
		},
		{
			Name = "UnregisterUnitForWidgetUpdates",
			Type = "Function",

			Arguments =
			{
				{ Name = "unitToken", Type = "string", Nilable = false },
				{ Name = "isGuid", Type = "bool", Nilable = false, Default = false },
			},
		},
	},

	Events =
	{
		{
			Name = "UpdateAllUiWidgets",
			Type = "Event",
			LiteralName = "UPDATE_ALL_UI_WIDGETS",
		},
		{
			Name = "UpdateUiWidget",
			Type = "Event",
			LiteralName = "UPDATE_UI_WIDGET",
			Payload =
			{
				{ Name = "widgetInfo", Type = "UIWidgetInfo", Nilable = false },
			},
		},
	},

	Tables =
	{
		{
			Name = "CaptureBarWidgetFillDirectionType",
			Type = "Enumeration",
			NumValues = 2,
			MinValue = 0,
			MaxValue = 1,
			Fields =
			{
				{ Name = "RightToLeft", Type = "CaptureBarWidgetFillDirectionType", EnumValue = 0 },
				{ Name = "LeftToRight", Type = "CaptureBarWidgetFillDirectionType", EnumValue = 1 },
			},
		},
		{
			Name = "CaptureBarWidgetGlowAnimType",
			Type = "Enumeration",
			NumValues = 2,
			MinValue = 0,
			MaxValue = 1,
			Fields =
			{
				{ Name = "None", Type = "CaptureBarWidgetGlowAnimType", EnumValue = 0 },
				{ Name = "Pulse", Type = "CaptureBarWidgetGlowAnimType", EnumValue = 1 },
			},
		},
		{
			Name = "IconAndTextWidgetState",
			Type = "Enumeration",
			NumValues = 4,
			MinValue = 0,
			MaxValue = 3,
			Fields =
			{
				{ Name = "Hidden", Type = "IconAndTextWidgetState", EnumValue = 0 },
				{ Name = "Shown", Type = "IconAndTextWidgetState", EnumValue = 1 },
				{ Name = "ShownWithDynamicIconFlashing", Type = "IconAndTextWidgetState", EnumValue = 2 },
				{ Name = "ShownWithDynamicIconNotFlashing", Type = "IconAndTextWidgetState", EnumValue = 3 },
			},
		},
		{
			Name = "IconState",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 0,
			MaxValue = 2,
			Fields =
			{
				{ Name = "Hidden", Type = "IconState", EnumValue = 0 },
				{ Name = "ShowState1", Type = "IconState", EnumValue = 1 },
				{ Name = "ShowState2", Type = "IconState", EnumValue = 2 },
			},
		},
		{
			Name = "SpellDisplayIconDisplayType",
			Type = "Enumeration",
			NumValues = 4,
			MinValue = 0,
			MaxValue = 3,
			Fields =
			{
				{ Name = "Buff", Type = "SpellDisplayIconDisplayType", EnumValue = 0 },
				{ Name = "Debuff", Type = "SpellDisplayIconDisplayType", EnumValue = 1 },
				{ Name = "Circular", Type = "SpellDisplayIconDisplayType", EnumValue = 2 },
				{ Name = "NoBorder", Type = "SpellDisplayIconDisplayType", EnumValue = 3 },
			},
		},
		{
			Name = "SpellDisplayIconSizeType",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 0,
			MaxValue = 2,
			Fields =
			{
				{ Name = "Small", Type = "SpellDisplayIconSizeType", EnumValue = 0 },
				{ Name = "Medium", Type = "SpellDisplayIconSizeType", EnumValue = 1 },
				{ Name = "Large", Type = "SpellDisplayIconSizeType", EnumValue = 2 },
			},
		},
		{
			Name = "SpellDisplayTextShownStateType",
			Type = "Enumeration",
			NumValues = 2,
			MinValue = 0,
			MaxValue = 1,
			Fields =
			{
				{ Name = "Shown", Type = "SpellDisplayTextShownStateType", EnumValue = 0 },
				{ Name = "Hidden", Type = "SpellDisplayTextShownStateType", EnumValue = 1 },
			},
		},
		{
			Name = "StatusBarColorTintValue",
			Type = "Enumeration",
			NumValues = 9,
			MinValue = 0,
			MaxValue = 8,
			Fields =
			{
				{ Name = "None", Type = "StatusBarColorTintValue", EnumValue = 0 },
				{ Name = "Black", Type = "StatusBarColorTintValue", EnumValue = 1 },
				{ Name = "White", Type = "StatusBarColorTintValue", EnumValue = 2 },
				{ Name = "Red", Type = "StatusBarColorTintValue", EnumValue = 3 },
				{ Name = "Yellow", Type = "StatusBarColorTintValue", EnumValue = 4 },
				{ Name = "Orange", Type = "StatusBarColorTintValue", EnumValue = 5 },
				{ Name = "Purple", Type = "StatusBarColorTintValue", EnumValue = 6 },
				{ Name = "Green", Type = "StatusBarColorTintValue", EnumValue = 7 },
				{ Name = "Blue", Type = "StatusBarColorTintValue", EnumValue = 8 },
			},
		},
		{
			Name = "StatusBarOverrideBarTextShownType",
			Type = "Enumeration",
			NumValues = 4,
			MinValue = 0,
			MaxValue = 3,
			Fields =
			{
				{ Name = "Never", Type = "StatusBarOverrideBarTextShownType", EnumValue = 0 },
				{ Name = "Always", Type = "StatusBarOverrideBarTextShownType", EnumValue = 1 },
				{ Name = "OnlyOnMouseover", Type = "StatusBarOverrideBarTextShownType", EnumValue = 2 },
				{ Name = "OnlyNotOnMouseover", Type = "StatusBarOverrideBarTextShownType", EnumValue = 3 },
			},
		},
		{
			Name = "StatusBarValueTextType",
			Type = "Enumeration",
			NumValues = 7,
			MinValue = 0,
			MaxValue = 6,
			Fields =
			{
				{ Name = "Hidden", Type = "StatusBarValueTextType", EnumValue = 0 },
				{ Name = "Percentage", Type = "StatusBarValueTextType", EnumValue = 1 },
				{ Name = "Value", Type = "StatusBarValueTextType", EnumValue = 2 },
				{ Name = "Time", Type = "StatusBarValueTextType", EnumValue = 3 },
				{ Name = "TimeShowOneLevelOnly", Type = "StatusBarValueTextType", EnumValue = 4 },
				{ Name = "ValueOverMax", Type = "StatusBarValueTextType", EnumValue = 5 },
				{ Name = "ValueOverMaxNormalized", Type = "StatusBarValueTextType", EnumValue = 6 },
			},
		},
		{
			Name = "UIWidgetBlendModeType",
			Type = "Enumeration",
			NumValues = 2,
			MinValue = 0,
			MaxValue = 1,
			Fields =
			{
				{ Name = "Opaque", Type = "UIWidgetBlendModeType", EnumValue = 0 },
				{ Name = "Additive", Type = "UIWidgetBlendModeType", EnumValue = 1 },
			},
		},
		{
			Name = "UIWidgetFlag",
			Type = "Enumeration",
			NumValues = 1,
			MinValue = 1,
			MaxValue = 1,
			Fields =
			{
				{ Name = "UniversalWidget", Type = "UIWidgetFlag", EnumValue = 1 },
			},
		},
		{
			Name = "UIWidgetFontType",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 0,
			MaxValue = 2,
			Fields =
			{
				{ Name = "Normal", Type = "UIWidgetFontType", EnumValue = 0 },
				{ Name = "Shadow", Type = "UIWidgetFontType", EnumValue = 1 },
				{ Name = "Outline", Type = "UIWidgetFontType", EnumValue = 2 },
			},
		},
		{
			Name = "UIWidgetModelSceneLayer",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 0,
			MaxValue = 2,
			Fields =
			{
				{ Name = "None", Type = "UIWidgetModelSceneLayer", EnumValue = 0 },
				{ Name = "Front", Type = "UIWidgetModelSceneLayer", EnumValue = 1 },
				{ Name = "Back", Type = "UIWidgetModelSceneLayer", EnumValue = 2 },
			},
		},
		{
			Name = "UIWidgetMotionType",
			Type = "Enumeration",
			NumValues = 2,
			MinValue = 0,
			MaxValue = 1,
			Fields =
			{
				{ Name = "Instant", Type = "UIWidgetMotionType", EnumValue = 0 },
				{ Name = "Smooth", Type = "UIWidgetMotionType", EnumValue = 1 },
			},
		},
		{
			Name = "UIWidgetTextSizeType",
			Type = "Enumeration",
			NumValues = 5,
			MinValue = 0,
			MaxValue = 4,
			Fields =
			{
				{ Name = "Small", Type = "UIWidgetTextSizeType", EnumValue = 0 },
				{ Name = "Medium", Type = "UIWidgetTextSizeType", EnumValue = 1 },
				{ Name = "Large", Type = "UIWidgetTextSizeType", EnumValue = 2 },
				{ Name = "Huge", Type = "UIWidgetTextSizeType", EnumValue = 3 },
				{ Name = "Standard", Type = "UIWidgetTextSizeType", EnumValue = 4 },
			},
		},
		{
			Name = "UIWidgetTooltipLocation",
			Type = "Enumeration",
			NumValues = 9,
			MinValue = 0,
			MaxValue = 8,
			Fields =
			{
				{ Name = "Default", Type = "UIWidgetTooltipLocation", EnumValue = 0 },
				{ Name = "BottomLeft", Type = "UIWidgetTooltipLocation", EnumValue = 1 },
				{ Name = "Left", Type = "UIWidgetTooltipLocation", EnumValue = 2 },
				{ Name = "TopLeft", Type = "UIWidgetTooltipLocation", EnumValue = 3 },
				{ Name = "Top", Type = "UIWidgetTooltipLocation", EnumValue = 4 },
				{ Name = "TopRight", Type = "UIWidgetTooltipLocation", EnumValue = 5 },
				{ Name = "Right", Type = "UIWidgetTooltipLocation", EnumValue = 6 },
				{ Name = "BottomRight", Type = "UIWidgetTooltipLocation", EnumValue = 7 },
				{ Name = "Bottom", Type = "UIWidgetTooltipLocation", EnumValue = 8 },
			},
		},
		{
			Name = "WidgetAnimationType",
			Type = "Enumeration",
			NumValues = 2,
			MinValue = 0,
			MaxValue = 1,
			Fields =
			{
				{ Name = "None", Type = "WidgetAnimationType", EnumValue = 0 },
				{ Name = "Fade", Type = "WidgetAnimationType", EnumValue = 1 },
			},
		},
		{
			Name = "WidgetCurrencyClass",
			Type = "Enumeration",
			NumValues = 2,
			MinValue = 0,
			MaxValue = 1,
			Fields =
			{
				{ Name = "Currency", Type = "WidgetCurrencyClass", EnumValue = 0 },
				{ Name = "Item", Type = "WidgetCurrencyClass", EnumValue = 1 },
			},
		},
		{
			Name = "WidgetEnabledState",
			Type = "Enumeration",
			NumValues = 7,
			MinValue = 0,
			MaxValue = 6,
			Fields =
			{
				{ Name = "Disabled", Type = "WidgetEnabledState", EnumValue = 0 },
				{ Name = "Enabled", Type = "WidgetEnabledState", EnumValue = 1 },
				{ Name = "Red", Type = "WidgetEnabledState", EnumValue = 2 },
				{ Name = "White", Type = "WidgetEnabledState", EnumValue = 3 },
				{ Name = "Green", Type = "WidgetEnabledState", EnumValue = 4 },
				{ Name = "Gold", Type = "WidgetEnabledState", EnumValue = 5 },
				{ Name = "Black", Type = "WidgetEnabledState", EnumValue = 6 },
			},
		},
		{
			Name = "WidgetShownState",
			Type = "Enumeration",
			NumValues = 2,
			MinValue = 0,
			MaxValue = 1,
			Fields =
			{
				{ Name = "Hidden", Type = "WidgetShownState", EnumValue = 0 },
				{ Name = "Shown", Type = "WidgetShownState", EnumValue = 1 },
			},
		},
		{
			Name = "WidgetTextHorizontalAlignmentType",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 0,
			MaxValue = 2,
			Fields =
			{
				{ Name = "Left", Type = "WidgetTextHorizontalAlignmentType", EnumValue = 0 },
				{ Name = "Center", Type = "WidgetTextHorizontalAlignmentType", EnumValue = 1 },
				{ Name = "Right", Type = "WidgetTextHorizontalAlignmentType", EnumValue = 2 },
			},
		},
		{
			Name = "WidgetUnitPowerBarFlashMomentType",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 0,
			MaxValue = 2,
			Fields =
			{
				{ Name = "FlashWhenMax", Type = "WidgetUnitPowerBarFlashMomentType", EnumValue = 0 },
				{ Name = "FlashWhenMin", Type = "WidgetUnitPowerBarFlashMomentType", EnumValue = 1 },
				{ Name = "NeverFlash", Type = "WidgetUnitPowerBarFlashMomentType", EnumValue = 2 },
			},
		},
		{
			Name = "ZoneControlActiveState",
			Type = "Enumeration",
			NumValues = 2,
			MinValue = 0,
			MaxValue = 1,
			Fields =
			{
				{ Name = "Inactive", Type = "ZoneControlActiveState", EnumValue = 0 },
				{ Name = "Active", Type = "ZoneControlActiveState", EnumValue = 1 },
			},
		},
		{
			Name = "ZoneControlDangerFlashType",
			Type = "Enumeration",
			NumValues = 4,
			MinValue = 0,
			MaxValue = 3,
			Fields =
			{
				{ Name = "ShowOnGoodStates", Type = "ZoneControlDangerFlashType", EnumValue = 0 },
				{ Name = "ShowOnBadStates", Type = "ZoneControlDangerFlashType", EnumValue = 1 },
				{ Name = "ShowOnBoth", Type = "ZoneControlDangerFlashType", EnumValue = 2 },
				{ Name = "ShowOnNeither", Type = "ZoneControlDangerFlashType", EnumValue = 3 },
			},
		},
		{
			Name = "ZoneControlFillType",
			Type = "Enumeration",
			NumValues = 4,
			MinValue = 0,
			MaxValue = 3,
			Fields =
			{
				{ Name = "SingleFillClockwise", Type = "ZoneControlFillType", EnumValue = 0 },
				{ Name = "SingleFillCounterClockwise", Type = "ZoneControlFillType", EnumValue = 1 },
				{ Name = "DoubleFillClockwise", Type = "ZoneControlFillType", EnumValue = 2 },
				{ Name = "DoubleFillCounterClockwise", Type = "ZoneControlFillType", EnumValue = 3 },
			},
		},
		{
			Name = "ZoneControlLeadingEdgeType",
			Type = "Enumeration",
			NumValues = 2,
			MinValue = 0,
			MaxValue = 1,
			Fields =
			{
				{ Name = "NoLeadingEdge", Type = "ZoneControlLeadingEdgeType", EnumValue = 0 },
				{ Name = "UseLeadingEdge", Type = "ZoneControlLeadingEdgeType", EnumValue = 1 },
			},
		},
		{
			Name = "ZoneControlMode",
			Type = "Enumeration",
			NumValues = 4,
			MinValue = 0,
			MaxValue = 3,
			Fields =
			{
				{ Name = "BothStatesAreGood", Type = "ZoneControlMode", EnumValue = 0 },
				{ Name = "State1IsGood", Type = "ZoneControlMode", EnumValue = 1 },
				{ Name = "State2IsGood", Type = "ZoneControlMode", EnumValue = 2 },
				{ Name = "NeitherStateIsGood", Type = "ZoneControlMode", EnumValue = 3 },
			},
		},
		{
			Name = "ZoneControlState",
			Type = "Enumeration",
			NumValues = 2,
			MinValue = 0,
			MaxValue = 1,
			Fields =
			{
				{ Name = "State1", Type = "ZoneControlState", EnumValue = 0 },
				{ Name = "State2", Type = "ZoneControlState", EnumValue = 1 },
			},
		},
		{
			Name = "BulletTextListWidgetVisualizationInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "shownState", Type = "WidgetShownState", Nilable = false },
				{ Name = "enabledState", Type = "WidgetEnabledState", Nilable = false },
				{ Name = "lines", Type = "table", InnerType = "string", Nilable = false },
				{ Name = "widgetSizeSetting", Type = "number", Nilable = false },
				{ Name = "textureKit", Type = "string", Nilable = false },
				{ Name = "frameTextureKit", Type = "string", Nilable = false },
				{ Name = "hasTimer", Type = "bool", Nilable = false },
				{ Name = "orderIndex", Type = "number", Nilable = false },
				{ Name = "widgetTag", Type = "string", Nilable = false },
				{ Name = "inAnimType", Type = "WidgetAnimationType", Nilable = false },
				{ Name = "outAnimType", Type = "WidgetAnimationType", Nilable = false },
				{ Name = "widgetScale", Type = "UIWidgetScale", Nilable = false },
				{ Name = "layoutDirection", Type = "UIWidgetLayoutDirection", Nilable = false },
				{ Name = "modelSceneLayer", Type = "UIWidgetModelSceneLayer", Nilable = false },
				{ Name = "scriptedAnimationEffectID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "CaptureBarWidgetVisualizationInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "shownState", Type = "WidgetShownState", Nilable = false },
				{ Name = "barValue", Type = "number", Nilable = false },
				{ Name = "barMinValue", Type = "number", Nilable = false },
				{ Name = "barMaxValue", Type = "number", Nilable = false },
				{ Name = "neutralZoneSize", Type = "number", Nilable = false },
				{ Name = "neutralZoneCenter", Type = "number", Nilable = false },
				{ Name = "tooltip", Type = "string", Nilable = false },
				{ Name = "glowAnimType", Type = "CaptureBarWidgetGlowAnimType", Nilable = false },
				{ Name = "fillDirectionType", Type = "CaptureBarWidgetFillDirectionType", Nilable = false },
				{ Name = "tooltipLoc", Type = "UIWidgetTooltipLocation", Nilable = false },
				{ Name = "widgetSizeSetting", Type = "number", Nilable = false },
				{ Name = "textureKit", Type = "string", Nilable = false },
				{ Name = "frameTextureKit", Type = "string", Nilable = false },
				{ Name = "hasTimer", Type = "bool", Nilable = false },
				{ Name = "orderIndex", Type = "number", Nilable = false },
				{ Name = "widgetTag", Type = "string", Nilable = false },
				{ Name = "inAnimType", Type = "WidgetAnimationType", Nilable = false },
				{ Name = "outAnimType", Type = "WidgetAnimationType", Nilable = false },
				{ Name = "widgetScale", Type = "UIWidgetScale", Nilable = false },
				{ Name = "layoutDirection", Type = "UIWidgetLayoutDirection", Nilable = false },
				{ Name = "modelSceneLayer", Type = "UIWidgetModelSceneLayer", Nilable = false },
				{ Name = "scriptedAnimationEffectID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "CaptureZoneVisualizationInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "shownState", Type = "WidgetShownState", Nilable = false },
				{ Name = "mode", Type = "ZoneControlMode", Nilable = false },
				{ Name = "leadingEdgeType", Type = "ZoneControlLeadingEdgeType", Nilable = false },
				{ Name = "dangerFlashType", Type = "ZoneControlDangerFlashType", Nilable = false },
				{ Name = "zoneInfo", Type = "ZoneEntry", Nilable = false },
				{ Name = "tooltipLoc", Type = "UIWidgetTooltipLocation", Nilable = false },
				{ Name = "widgetSizeSetting", Type = "number", Nilable = false },
				{ Name = "textureKit", Type = "string", Nilable = false },
				{ Name = "frameTextureKit", Type = "string", Nilable = false },
				{ Name = "hasTimer", Type = "bool", Nilable = false },
				{ Name = "orderIndex", Type = "number", Nilable = false },
				{ Name = "widgetTag", Type = "string", Nilable = false },
				{ Name = "inAnimType", Type = "WidgetAnimationType", Nilable = false },
				{ Name = "outAnimType", Type = "WidgetAnimationType", Nilable = false },
				{ Name = "widgetScale", Type = "UIWidgetScale", Nilable = false },
				{ Name = "layoutDirection", Type = "UIWidgetLayoutDirection", Nilable = false },
				{ Name = "modelSceneLayer", Type = "UIWidgetModelSceneLayer", Nilable = false },
				{ Name = "scriptedAnimationEffectID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "DiscreteProgressStepsVisualizationInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "shownState", Type = "WidgetShownState", Nilable = false },
				{ Name = "tooltip", Type = "string", Nilable = false },
				{ Name = "progressMin", Type = "number", Nilable = false },
				{ Name = "progressMax", Type = "number", Nilable = false },
				{ Name = "progressVal", Type = "number", Nilable = false },
				{ Name = "numSteps", Type = "number", Nilable = false },
				{ Name = "tooltipLoc", Type = "UIWidgetTooltipLocation", Nilable = false },
				{ Name = "widgetSizeSetting", Type = "number", Nilable = false },
				{ Name = "textureKit", Type = "string", Nilable = false },
				{ Name = "frameTextureKit", Type = "string", Nilable = false },
				{ Name = "hasTimer", Type = "bool", Nilable = false },
				{ Name = "orderIndex", Type = "number", Nilable = false },
				{ Name = "widgetTag", Type = "string", Nilable = false },
				{ Name = "inAnimType", Type = "WidgetAnimationType", Nilable = false },
				{ Name = "outAnimType", Type = "WidgetAnimationType", Nilable = false },
				{ Name = "widgetScale", Type = "UIWidgetScale", Nilable = false },
				{ Name = "layoutDirection", Type = "UIWidgetLayoutDirection", Nilable = false },
				{ Name = "modelSceneLayer", Type = "UIWidgetModelSceneLayer", Nilable = false },
				{ Name = "scriptedAnimationEffectID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "DoubleIconAndTextWidgetVisualizationInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "shownState", Type = "WidgetShownState", Nilable = false },
				{ Name = "label", Type = "string", Nilable = false },
				{ Name = "leftText", Type = "string", Nilable = false },
				{ Name = "leftTooltip", Type = "string", Nilable = false },
				{ Name = "rightText", Type = "string", Nilable = false },
				{ Name = "rightTooltip", Type = "string", Nilable = false },
				{ Name = "tooltipLoc", Type = "UIWidgetTooltipLocation", Nilable = false },
				{ Name = "widgetSizeSetting", Type = "number", Nilable = false },
				{ Name = "textureKit", Type = "string", Nilable = false },
				{ Name = "frameTextureKit", Type = "string", Nilable = false },
				{ Name = "hasTimer", Type = "bool", Nilable = false },
				{ Name = "orderIndex", Type = "number", Nilable = false },
				{ Name = "widgetTag", Type = "string", Nilable = false },
				{ Name = "inAnimType", Type = "WidgetAnimationType", Nilable = false },
				{ Name = "outAnimType", Type = "WidgetAnimationType", Nilable = false },
				{ Name = "widgetScale", Type = "UIWidgetScale", Nilable = false },
				{ Name = "layoutDirection", Type = "UIWidgetLayoutDirection", Nilable = false },
				{ Name = "modelSceneLayer", Type = "UIWidgetModelSceneLayer", Nilable = false },
				{ Name = "scriptedAnimationEffectID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "DoubleStateIconRowVisualizationInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "shownState", Type = "WidgetShownState", Nilable = false },
				{ Name = "leftIcons", Type = "table", InnerType = "UIWidgetStateIconInfo", Nilable = false },
				{ Name = "rightIcons", Type = "table", InnerType = "UIWidgetStateIconInfo", Nilable = false },
				{ Name = "tooltipLoc", Type = "UIWidgetTooltipLocation", Nilable = false },
				{ Name = "widgetSizeSetting", Type = "number", Nilable = false },
				{ Name = "textureKit", Type = "string", Nilable = false },
				{ Name = "frameTextureKit", Type = "string", Nilable = false },
				{ Name = "hasTimer", Type = "bool", Nilable = false },
				{ Name = "orderIndex", Type = "number", Nilable = false },
				{ Name = "widgetTag", Type = "string", Nilable = false },
				{ Name = "inAnimType", Type = "WidgetAnimationType", Nilable = false },
				{ Name = "outAnimType", Type = "WidgetAnimationType", Nilable = false },
				{ Name = "widgetScale", Type = "UIWidgetScale", Nilable = false },
				{ Name = "layoutDirection", Type = "UIWidgetLayoutDirection", Nilable = false },
				{ Name = "modelSceneLayer", Type = "UIWidgetModelSceneLayer", Nilable = false },
				{ Name = "scriptedAnimationEffectID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "DoubleStatusBarWidgetVisualizationInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "shownState", Type = "WidgetShownState", Nilable = false },
				{ Name = "leftBarMin", Type = "number", Nilable = false },
				{ Name = "leftBarMax", Type = "number", Nilable = false },
				{ Name = "leftBarValue", Type = "number", Nilable = false },
				{ Name = "leftBarTooltip", Type = "string", Nilable = false },
				{ Name = "rightBarMin", Type = "number", Nilable = false },
				{ Name = "rightBarMax", Type = "number", Nilable = false },
				{ Name = "rightBarValue", Type = "number", Nilable = false },
				{ Name = "rightBarTooltip", Type = "string", Nilable = false },
				{ Name = "barValueTextType", Type = "StatusBarValueTextType", Nilable = false },
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "leftBarTooltipLoc", Type = "UIWidgetTooltipLocation", Nilable = false },
				{ Name = "rightBarTooltipLoc", Type = "UIWidgetTooltipLocation", Nilable = false },
				{ Name = "fillMotionType", Type = "UIWidgetMotionType", Nilable = false },
				{ Name = "widgetSizeSetting", Type = "number", Nilable = false },
				{ Name = "textureKit", Type = "string", Nilable = false },
				{ Name = "frameTextureKit", Type = "string", Nilable = false },
				{ Name = "hasTimer", Type = "bool", Nilable = false },
				{ Name = "orderIndex", Type = "number", Nilable = false },
				{ Name = "widgetTag", Type = "string", Nilable = false },
				{ Name = "inAnimType", Type = "WidgetAnimationType", Nilable = false },
				{ Name = "outAnimType", Type = "WidgetAnimationType", Nilable = false },
				{ Name = "widgetScale", Type = "UIWidgetScale", Nilable = false },
				{ Name = "layoutDirection", Type = "UIWidgetLayoutDirection", Nilable = false },
				{ Name = "modelSceneLayer", Type = "UIWidgetModelSceneLayer", Nilable = false },
				{ Name = "scriptedAnimationEffectID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "HorizontalCurrenciesWidgetVisualizationInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "shownState", Type = "WidgetShownState", Nilable = false },
				{ Name = "currencies", Type = "table", InnerType = "UIWidgetCurrencyInfo", Nilable = false },
				{ Name = "tooltipLoc", Type = "UIWidgetTooltipLocation", Nilable = false },
				{ Name = "widgetSizeSetting", Type = "number", Nilable = false },
				{ Name = "textureKit", Type = "string", Nilable = false },
				{ Name = "frameTextureKit", Type = "string", Nilable = false },
				{ Name = "hasTimer", Type = "bool", Nilable = false },
				{ Name = "orderIndex", Type = "number", Nilable = false },
				{ Name = "widgetTag", Type = "string", Nilable = false },
				{ Name = "inAnimType", Type = "WidgetAnimationType", Nilable = false },
				{ Name = "outAnimType", Type = "WidgetAnimationType", Nilable = false },
				{ Name = "widgetScale", Type = "UIWidgetScale", Nilable = false },
				{ Name = "layoutDirection", Type = "UIWidgetLayoutDirection", Nilable = false },
				{ Name = "modelSceneLayer", Type = "UIWidgetModelSceneLayer", Nilable = false },
				{ Name = "scriptedAnimationEffectID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "IconAndTextWidgetVisualizationInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "state", Type = "IconAndTextWidgetState", Nilable = false },
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "tooltip", Type = "string", Nilable = false },
				{ Name = "dynamicTooltip", Type = "string", Nilable = false },
				{ Name = "tooltipLoc", Type = "UIWidgetTooltipLocation", Nilable = false },
				{ Name = "widgetSizeSetting", Type = "number", Nilable = false },
				{ Name = "textureKit", Type = "string", Nilable = false },
				{ Name = "frameTextureKit", Type = "string", Nilable = false },
				{ Name = "hasTimer", Type = "bool", Nilable = false },
				{ Name = "orderIndex", Type = "number", Nilable = false },
				{ Name = "widgetTag", Type = "string", Nilable = false },
				{ Name = "inAnimType", Type = "WidgetAnimationType", Nilable = false },
				{ Name = "outAnimType", Type = "WidgetAnimationType", Nilable = false },
				{ Name = "widgetScale", Type = "UIWidgetScale", Nilable = false },
				{ Name = "layoutDirection", Type = "UIWidgetLayoutDirection", Nilable = false },
				{ Name = "modelSceneLayer", Type = "UIWidgetModelSceneLayer", Nilable = false },
				{ Name = "scriptedAnimationEffectID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "IconTextAndBackgroundWidgetVisualizationInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "shownState", Type = "WidgetShownState", Nilable = false },
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "widgetSizeSetting", Type = "number", Nilable = false },
				{ Name = "textureKit", Type = "string", Nilable = false },
				{ Name = "frameTextureKit", Type = "string", Nilable = false },
				{ Name = "hasTimer", Type = "bool", Nilable = false },
				{ Name = "orderIndex", Type = "number", Nilable = false },
				{ Name = "widgetTag", Type = "string", Nilable = false },
				{ Name = "inAnimType", Type = "WidgetAnimationType", Nilable = false },
				{ Name = "outAnimType", Type = "WidgetAnimationType", Nilable = false },
				{ Name = "widgetScale", Type = "UIWidgetScale", Nilable = false },
				{ Name = "layoutDirection", Type = "UIWidgetLayoutDirection", Nilable = false },
				{ Name = "modelSceneLayer", Type = "UIWidgetModelSceneLayer", Nilable = false },
				{ Name = "scriptedAnimationEffectID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "IconTextAndCurrenciesWidgetVisualizationInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "shownState", Type = "WidgetShownState", Nilable = false },
				{ Name = "enabledState", Type = "WidgetEnabledState", Nilable = false },
				{ Name = "descriptionShownState", Type = "WidgetShownState", Nilable = false },
				{ Name = "descriptionEnabledState", Type = "WidgetEnabledState", Nilable = false },
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "description", Type = "string", Nilable = false },
				{ Name = "currencies", Type = "table", InnerType = "UIWidgetCurrencyInfo", Nilable = false },
				{ Name = "tooltipLoc", Type = "UIWidgetTooltipLocation", Nilable = false },
				{ Name = "widgetSizeSetting", Type = "number", Nilable = false },
				{ Name = "textureKit", Type = "string", Nilable = false },
				{ Name = "frameTextureKit", Type = "string", Nilable = false },
				{ Name = "hasTimer", Type = "bool", Nilable = false },
				{ Name = "orderIndex", Type = "number", Nilable = false },
				{ Name = "widgetTag", Type = "string", Nilable = false },
				{ Name = "inAnimType", Type = "WidgetAnimationType", Nilable = false },
				{ Name = "outAnimType", Type = "WidgetAnimationType", Nilable = false },
				{ Name = "widgetScale", Type = "UIWidgetScale", Nilable = false },
				{ Name = "layoutDirection", Type = "UIWidgetLayoutDirection", Nilable = false },
				{ Name = "modelSceneLayer", Type = "UIWidgetModelSceneLayer", Nilable = false },
				{ Name = "scriptedAnimationEffectID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ScenarioHeaderCurrenciesAndBackgroundWidgetVisualizationInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "shownState", Type = "WidgetShownState", Nilable = false },
				{ Name = "currencies", Type = "table", InnerType = "UIWidgetCurrencyInfo", Nilable = false },
				{ Name = "headerText", Type = "string", Nilable = false },
				{ Name = "widgetSizeSetting", Type = "number", Nilable = false },
				{ Name = "textureKit", Type = "string", Nilable = false },
				{ Name = "frameTextureKit", Type = "string", Nilable = false },
				{ Name = "hasTimer", Type = "bool", Nilable = false },
				{ Name = "orderIndex", Type = "number", Nilable = false },
				{ Name = "widgetTag", Type = "string", Nilable = false },
				{ Name = "inAnimType", Type = "WidgetAnimationType", Nilable = false },
				{ Name = "outAnimType", Type = "WidgetAnimationType", Nilable = false },
				{ Name = "widgetScale", Type = "UIWidgetScale", Nilable = false },
				{ Name = "layoutDirection", Type = "UIWidgetLayoutDirection", Nilable = false },
				{ Name = "modelSceneLayer", Type = "UIWidgetModelSceneLayer", Nilable = false },
				{ Name = "scriptedAnimationEffectID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ScenarioHeaderTimerWidgetVisualizationInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "shownState", Type = "WidgetShownState", Nilable = false },
				{ Name = "timerMin", Type = "number", Nilable = false },
				{ Name = "timerMax", Type = "number", Nilable = false },
				{ Name = "timerValue", Type = "number", Nilable = false },
				{ Name = "headerText", Type = "string", Nilable = false },
				{ Name = "timerTooltip", Type = "string", Nilable = false },
				{ Name = "widgetSizeSetting", Type = "number", Nilable = false },
				{ Name = "textureKit", Type = "string", Nilable = false },
				{ Name = "frameTextureKit", Type = "string", Nilable = false },
				{ Name = "hasTimer", Type = "bool", Nilable = false },
				{ Name = "orderIndex", Type = "number", Nilable = false },
				{ Name = "widgetTag", Type = "string", Nilable = false },
				{ Name = "inAnimType", Type = "WidgetAnimationType", Nilable = false },
				{ Name = "outAnimType", Type = "WidgetAnimationType", Nilable = false },
				{ Name = "widgetScale", Type = "UIWidgetScale", Nilable = false },
				{ Name = "layoutDirection", Type = "UIWidgetLayoutDirection", Nilable = false },
				{ Name = "modelSceneLayer", Type = "UIWidgetModelSceneLayer", Nilable = false },
				{ Name = "scriptedAnimationEffectID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SpacerVisualizationInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "shownState", Type = "WidgetShownState", Nilable = false },
				{ Name = "widgetWidth", Type = "number", Nilable = false },
				{ Name = "widgetHeight", Type = "number", Nilable = false },
				{ Name = "widgetSizeSetting", Type = "number", Nilable = false },
				{ Name = "textureKit", Type = "string", Nilable = false },
				{ Name = "frameTextureKit", Type = "string", Nilable = false },
				{ Name = "hasTimer", Type = "bool", Nilable = false },
				{ Name = "orderIndex", Type = "number", Nilable = false },
				{ Name = "widgetTag", Type = "string", Nilable = false },
				{ Name = "inAnimType", Type = "WidgetAnimationType", Nilable = false },
				{ Name = "outAnimType", Type = "WidgetAnimationType", Nilable = false },
				{ Name = "widgetScale", Type = "UIWidgetScale", Nilable = false },
				{ Name = "layoutDirection", Type = "UIWidgetLayoutDirection", Nilable = false },
				{ Name = "modelSceneLayer", Type = "UIWidgetModelSceneLayer", Nilable = false },
				{ Name = "scriptedAnimationEffectID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SpellDisplayVisualizationInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "shownState", Type = "WidgetShownState", Nilable = false },
				{ Name = "enabledState", Type = "WidgetEnabledState", Nilable = false },
				{ Name = "spellInfo", Type = "UIWidgetSpellInfo", Nilable = false },
				{ Name = "tooltipLoc", Type = "UIWidgetTooltipLocation", Nilable = false },
				{ Name = "widgetSizeSetting", Type = "number", Nilable = false },
				{ Name = "textureKit", Type = "string", Nilable = false },
				{ Name = "frameTextureKit", Type = "string", Nilable = false },
				{ Name = "hasTimer", Type = "bool", Nilable = false },
				{ Name = "orderIndex", Type = "number", Nilable = false },
				{ Name = "widgetTag", Type = "string", Nilable = false },
				{ Name = "inAnimType", Type = "WidgetAnimationType", Nilable = false },
				{ Name = "outAnimType", Type = "WidgetAnimationType", Nilable = false },
				{ Name = "widgetScale", Type = "UIWidgetScale", Nilable = false },
				{ Name = "layoutDirection", Type = "UIWidgetLayoutDirection", Nilable = false },
				{ Name = "modelSceneLayer", Type = "UIWidgetModelSceneLayer", Nilable = false },
				{ Name = "scriptedAnimationEffectID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "StackedResourceTrackerWidgetVisualizationInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "shownState", Type = "WidgetShownState", Nilable = false },
				{ Name = "resources", Type = "table", InnerType = "UIWidgetCurrencyInfo", Nilable = false },
				{ Name = "tooltipLoc", Type = "UIWidgetTooltipLocation", Nilable = false },
				{ Name = "widgetSizeSetting", Type = "number", Nilable = false },
				{ Name = "textureKit", Type = "string", Nilable = false },
				{ Name = "frameTextureKit", Type = "string", Nilable = false },
				{ Name = "hasTimer", Type = "bool", Nilable = false },
				{ Name = "orderIndex", Type = "number", Nilable = false },
				{ Name = "widgetTag", Type = "string", Nilable = false },
				{ Name = "inAnimType", Type = "WidgetAnimationType", Nilable = false },
				{ Name = "outAnimType", Type = "WidgetAnimationType", Nilable = false },
				{ Name = "widgetScale", Type = "UIWidgetScale", Nilable = false },
				{ Name = "layoutDirection", Type = "UIWidgetLayoutDirection", Nilable = false },
				{ Name = "modelSceneLayer", Type = "UIWidgetModelSceneLayer", Nilable = false },
				{ Name = "scriptedAnimationEffectID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "StatusBarWidgetVisualizationInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "shownState", Type = "WidgetShownState", Nilable = false },
				{ Name = "barMin", Type = "number", Nilable = false },
				{ Name = "barMax", Type = "number", Nilable = false },
				{ Name = "barValue", Type = "number", Nilable = false },
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "tooltip", Type = "string", Nilable = false },
				{ Name = "barValueTextType", Type = "StatusBarValueTextType", Nilable = false },
				{ Name = "overrideBarText", Type = "string", Nilable = false },
				{ Name = "overrideBarTextShownType", Type = "StatusBarOverrideBarTextShownType", Nilable = false },
				{ Name = "colorTint", Type = "StatusBarColorTintValue", Nilable = false },
				{ Name = "partitionValues", Type = "table", InnerType = "number", Nilable = false },
				{ Name = "tooltipLoc", Type = "UIWidgetTooltipLocation", Nilable = false },
				{ Name = "fillMotionType", Type = "UIWidgetMotionType", Nilable = false },
				{ Name = "barTextEnabledState", Type = "WidgetEnabledState", Nilable = false },
				{ Name = "barTextFontType", Type = "UIWidgetFontType", Nilable = false },
				{ Name = "barTextSizeType", Type = "UIWidgetTextSizeType", Nilable = false },
				{ Name = "widgetSizeSetting", Type = "number", Nilable = false },
				{ Name = "textureKit", Type = "string", Nilable = false },
				{ Name = "frameTextureKit", Type = "string", Nilable = false },
				{ Name = "hasTimer", Type = "bool", Nilable = false },
				{ Name = "orderIndex", Type = "number", Nilable = false },
				{ Name = "widgetTag", Type = "string", Nilable = false },
				{ Name = "inAnimType", Type = "WidgetAnimationType", Nilable = false },
				{ Name = "outAnimType", Type = "WidgetAnimationType", Nilable = false },
				{ Name = "widgetScale", Type = "UIWidgetScale", Nilable = false },
				{ Name = "layoutDirection", Type = "UIWidgetLayoutDirection", Nilable = false },
				{ Name = "modelSceneLayer", Type = "UIWidgetModelSceneLayer", Nilable = false },
				{ Name = "scriptedAnimationEffectID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "TextColumnRowEntryInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "enabledState", Type = "WidgetEnabledState", Nilable = false },
				{ Name = "hAlign", Type = "WidgetTextHorizontalAlignmentType", Nilable = false },
				{ Name = "columnWidth", Type = "number", Nilable = false },
			},
		},
		{
			Name = "TextColumnRowVisualizationInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "shownState", Type = "WidgetShownState", Nilable = false },
				{ Name = "entries", Type = "table", InnerType = "TextColumnRowEntryInfo", Nilable = false },
				{ Name = "textSizeType", Type = "UIWidgetTextSizeType", Nilable = false },
				{ Name = "fontType", Type = "UIWidgetFontType", Nilable = false },
				{ Name = "tooltip", Type = "string", Nilable = false },
				{ Name = "tooltipLoc", Type = "UIWidgetTooltipLocation", Nilable = false },
				{ Name = "bottomPadding", Type = "number", Nilable = false },
				{ Name = "widgetSizeSetting", Type = "number", Nilable = false },
				{ Name = "textureKit", Type = "string", Nilable = false },
				{ Name = "frameTextureKit", Type = "string", Nilable = false },
				{ Name = "hasTimer", Type = "bool", Nilable = false },
				{ Name = "orderIndex", Type = "number", Nilable = false },
				{ Name = "widgetTag", Type = "string", Nilable = false },
				{ Name = "inAnimType", Type = "WidgetAnimationType", Nilable = false },
				{ Name = "outAnimType", Type = "WidgetAnimationType", Nilable = false },
				{ Name = "widgetScale", Type = "UIWidgetScale", Nilable = false },
				{ Name = "layoutDirection", Type = "UIWidgetLayoutDirection", Nilable = false },
				{ Name = "modelSceneLayer", Type = "UIWidgetModelSceneLayer", Nilable = false },
				{ Name = "scriptedAnimationEffectID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "TextWithStateWidgetVisualizationInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "shownState", Type = "WidgetShownState", Nilable = false },
				{ Name = "enabledState", Type = "WidgetEnabledState", Nilable = false },
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "tooltip", Type = "string", Nilable = false },
				{ Name = "textSizeType", Type = "UIWidgetTextSizeType", Nilable = false },
				{ Name = "fontType", Type = "UIWidgetFontType", Nilable = false },
				{ Name = "bottomPadding", Type = "number", Nilable = false },
				{ Name = "tooltipLoc", Type = "UIWidgetTooltipLocation", Nilable = false },
				{ Name = "hAlign", Type = "WidgetTextHorizontalAlignmentType", Nilable = false },
				{ Name = "widgetSizeSetting", Type = "number", Nilable = false },
				{ Name = "textureKit", Type = "string", Nilable = false },
				{ Name = "frameTextureKit", Type = "string", Nilable = false },
				{ Name = "hasTimer", Type = "bool", Nilable = false },
				{ Name = "orderIndex", Type = "number", Nilable = false },
				{ Name = "widgetTag", Type = "string", Nilable = false },
				{ Name = "inAnimType", Type = "WidgetAnimationType", Nilable = false },
				{ Name = "outAnimType", Type = "WidgetAnimationType", Nilable = false },
				{ Name = "widgetScale", Type = "UIWidgetScale", Nilable = false },
				{ Name = "layoutDirection", Type = "UIWidgetLayoutDirection", Nilable = false },
				{ Name = "modelSceneLayer", Type = "UIWidgetModelSceneLayer", Nilable = false },
				{ Name = "scriptedAnimationEffectID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "TextureAndTextEntryInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "tooltip", Type = "string", Nilable = false },
			},
		},
		{
			Name = "TextureAndTextRowVisualizationInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "shownState", Type = "WidgetShownState", Nilable = false },
				{ Name = "entries", Type = "table", InnerType = "TextureAndTextEntryInfo", Nilable = false },
				{ Name = "textSizeType", Type = "UIWidgetTextSizeType", Nilable = false },
				{ Name = "fixedWidth", Type = "number", Nilable = true },
				{ Name = "tooltipLoc", Type = "UIWidgetTooltipLocation", Nilable = false },
				{ Name = "widgetSizeSetting", Type = "number", Nilable = false },
				{ Name = "textureKit", Type = "string", Nilable = false },
				{ Name = "frameTextureKit", Type = "string", Nilable = false },
				{ Name = "hasTimer", Type = "bool", Nilable = false },
				{ Name = "orderIndex", Type = "number", Nilable = false },
				{ Name = "widgetTag", Type = "string", Nilable = false },
				{ Name = "inAnimType", Type = "WidgetAnimationType", Nilable = false },
				{ Name = "outAnimType", Type = "WidgetAnimationType", Nilable = false },
				{ Name = "widgetScale", Type = "UIWidgetScale", Nilable = false },
				{ Name = "layoutDirection", Type = "UIWidgetLayoutDirection", Nilable = false },
				{ Name = "modelSceneLayer", Type = "UIWidgetModelSceneLayer", Nilable = false },
				{ Name = "scriptedAnimationEffectID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "TextureAndTextVisualizationInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "shownState", Type = "WidgetShownState", Nilable = false },
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "tooltip", Type = "string", Nilable = false },
				{ Name = "tooltipLoc", Type = "UIWidgetTooltipLocation", Nilable = false },
				{ Name = "widgetSizeSetting", Type = "number", Nilable = false },
				{ Name = "textureKit", Type = "string", Nilable = false },
				{ Name = "frameTextureKit", Type = "string", Nilable = false },
				{ Name = "hasTimer", Type = "bool", Nilable = false },
				{ Name = "orderIndex", Type = "number", Nilable = false },
				{ Name = "widgetTag", Type = "string", Nilable = false },
				{ Name = "inAnimType", Type = "WidgetAnimationType", Nilable = false },
				{ Name = "outAnimType", Type = "WidgetAnimationType", Nilable = false },
				{ Name = "widgetScale", Type = "UIWidgetScale", Nilable = false },
				{ Name = "layoutDirection", Type = "UIWidgetLayoutDirection", Nilable = false },
				{ Name = "modelSceneLayer", Type = "UIWidgetModelSceneLayer", Nilable = false },
				{ Name = "scriptedAnimationEffectID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "TextureWithAnimationVisualizationInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "shownState", Type = "WidgetShownState", Nilable = false },
				{ Name = "tooltip", Type = "string", Nilable = false },
				{ Name = "tooltipLoc", Type = "UIWidgetTooltipLocation", Nilable = false },
				{ Name = "widgetSizeSetting", Type = "number", Nilable = false },
				{ Name = "textureKit", Type = "string", Nilable = false },
				{ Name = "frameTextureKit", Type = "string", Nilable = false },
				{ Name = "hasTimer", Type = "bool", Nilable = false },
				{ Name = "orderIndex", Type = "number", Nilable = false },
				{ Name = "widgetTag", Type = "string", Nilable = false },
				{ Name = "inAnimType", Type = "WidgetAnimationType", Nilable = false },
				{ Name = "outAnimType", Type = "WidgetAnimationType", Nilable = false },
				{ Name = "widgetScale", Type = "UIWidgetScale", Nilable = false },
				{ Name = "layoutDirection", Type = "UIWidgetLayoutDirection", Nilable = false },
				{ Name = "modelSceneLayer", Type = "UIWidgetModelSceneLayer", Nilable = false },
				{ Name = "scriptedAnimationEffectID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "UIWidgetCurrencyInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "iconFileID", Type = "number", Nilable = false },
				{ Name = "leadingText", Type = "string", Nilable = false },
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "tooltip", Type = "string", Nilable = false },
				{ Name = "isCurrencyMaxed", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "UIWidgetInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "widgetID", Type = "number", Nilable = false },
				{ Name = "widgetSetID", Type = "number", Nilable = false },
				{ Name = "widgetType", Type = "UIWidgetVisualizationType", Nilable = false },
				{ Name = "unitToken", Type = "string", Nilable = true },
			},
		},
		{
			Name = "UIWidgetSetInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "layoutDirection", Type = "UIWidgetSetLayoutDirection", Nilable = false },
				{ Name = "verticalPadding", Type = "number", Nilable = false },
			},
		},
		{
			Name = "UIWidgetSpellInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "spellID", Type = "number", Nilable = false },
				{ Name = "tooltip", Type = "string", Nilable = false },
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "stackDisplay", Type = "number", Nilable = false },
				{ Name = "iconSizeType", Type = "SpellDisplayIconSizeType", Nilable = false },
				{ Name = "iconDisplayType", Type = "SpellDisplayIconDisplayType", Nilable = false },
				{ Name = "textShownState", Type = "SpellDisplayTextShownStateType", Nilable = false },
				{ Name = "textFontType", Type = "UIWidgetFontType", Nilable = false },
				{ Name = "textSizeType", Type = "UIWidgetTextSizeType", Nilable = false },
				{ Name = "hAlignType", Type = "WidgetTextHorizontalAlignmentType", Nilable = false },
				{ Name = "isLootObject", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "UIWidgetStateIconInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "iconState", Type = "IconState", Nilable = false },
				{ Name = "state1Tooltip", Type = "string", Nilable = false },
				{ Name = "state2Tooltip", Type = "string", Nilable = false },
			},
		},
		{
			Name = "UnitPowerBarWidgetVisualizationInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "shownState", Type = "WidgetShownState", Nilable = false },
				{ Name = "barMin", Type = "number", Nilable = false },
				{ Name = "barMax", Type = "number", Nilable = false },
				{ Name = "barValue", Type = "number", Nilable = false },
				{ Name = "tooltip", Type = "string", Nilable = false },
				{ Name = "barValueTextType", Type = "StatusBarValueTextType", Nilable = false },
				{ Name = "overrideBarText", Type = "string", Nilable = false },
				{ Name = "overrideBarTextShownType", Type = "StatusBarOverrideBarTextShownType", Nilable = false },
				{ Name = "tooltipLoc", Type = "UIWidgetTooltipLocation", Nilable = false },
				{ Name = "fillMotionType", Type = "UIWidgetMotionType", Nilable = false },
				{ Name = "flashBlendModeType", Type = "UIWidgetBlendModeType", Nilable = false },
				{ Name = "sparkBlendModeType", Type = "UIWidgetBlendModeType", Nilable = false },
				{ Name = "flashMomentType", Type = "WidgetUnitPowerBarFlashMomentType", Nilable = false },
				{ Name = "widgetSizeSetting", Type = "number", Nilable = false },
				{ Name = "textureKit", Type = "string", Nilable = false },
				{ Name = "frameTextureKit", Type = "string", Nilable = false },
				{ Name = "hasTimer", Type = "bool", Nilable = false },
				{ Name = "orderIndex", Type = "number", Nilable = false },
				{ Name = "widgetTag", Type = "string", Nilable = false },
				{ Name = "inAnimType", Type = "WidgetAnimationType", Nilable = false },
				{ Name = "outAnimType", Type = "WidgetAnimationType", Nilable = false },
				{ Name = "widgetScale", Type = "UIWidgetScale", Nilable = false },
				{ Name = "layoutDirection", Type = "UIWidgetLayoutDirection", Nilable = false },
				{ Name = "modelSceneLayer", Type = "UIWidgetModelSceneLayer", Nilable = false },
				{ Name = "scriptedAnimationEffectID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ZoneControlVisualizationInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "shownState", Type = "WidgetShownState", Nilable = false },
				{ Name = "mode", Type = "ZoneControlMode", Nilable = false },
				{ Name = "leadingEdgeType", Type = "ZoneControlLeadingEdgeType", Nilable = false },
				{ Name = "dangerFlashType", Type = "ZoneControlDangerFlashType", Nilable = false },
				{ Name = "zoneEntries", Type = "table", InnerType = "ZoneEntry", Nilable = false },
				{ Name = "tooltipLoc", Type = "UIWidgetTooltipLocation", Nilable = false },
				{ Name = "widgetSizeSetting", Type = "number", Nilable = false },
				{ Name = "textureKit", Type = "string", Nilable = false },
				{ Name = "frameTextureKit", Type = "string", Nilable = false },
				{ Name = "hasTimer", Type = "bool", Nilable = false },
				{ Name = "orderIndex", Type = "number", Nilable = false },
				{ Name = "widgetTag", Type = "string", Nilable = false },
				{ Name = "inAnimType", Type = "WidgetAnimationType", Nilable = false },
				{ Name = "outAnimType", Type = "WidgetAnimationType", Nilable = false },
				{ Name = "widgetScale", Type = "UIWidgetScale", Nilable = false },
				{ Name = "layoutDirection", Type = "UIWidgetLayoutDirection", Nilable = false },
				{ Name = "modelSceneLayer", Type = "UIWidgetModelSceneLayer", Nilable = false },
				{ Name = "scriptedAnimationEffectID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ZoneEntry",
			Type = "Structure",
			Fields =
			{
				{ Name = "state", Type = "ZoneControlState", Nilable = false },
				{ Name = "activeState", Type = "ZoneControlActiveState", Nilable = false },
				{ Name = "fillType", Type = "ZoneControlFillType", Nilable = false },
				{ Name = "min", Type = "number", Nilable = false },
				{ Name = "max", Type = "number", Nilable = false },
				{ Name = "current", Type = "number", Nilable = false },
				{ Name = "capturePoint", Type = "number", Nilable = false },
				{ Name = "tooltip", Type = "string", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "Unit",
	Type = "System",

	Functions =
	{
		{
			Name = "GetEmpowerHoldAtMaxTime",
			Type = "Function",

			Returns =
			{
				{ Name = "holdAtMaxTime", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetEmpowerMinHoldTime",
			Type = "Function",

			Returns =
			{
				{ Name = "minHoldTime", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetEmpowerStageDuration",
			Type = "Function",

			Arguments =
			{
				{ Name = "index", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "duration", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetNegativeCorruptionEffectInfo",
			Type = "Function",

			Returns =
			{
				{ Name = "corruptionEffects", Type = "table", InnerType = "CorruptionEffectInfo", Nilable = false },
			},
		},
		{
			Name = "GetUnitChargedPowerPoints",
			Type = "Function",

			Arguments =
			{
				{ Name = "unit", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "pointIndices", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "GetUnitPowerBarInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "unitToken", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "info", Type = "UnitPowerBarInfo", Nilable = false },
			},
		},
		{
			Name = "GetUnitPowerBarInfoByID",
			Type = "Function",

			Arguments =
			{
				{ Name = "barID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "info", Type = "UnitPowerBarInfo", Nilable = false },
			},
		},
		{
			Name = "GetUnitPowerBarStrings",
			Type = "Function",

			Arguments =
			{
				{ Name = "unitToken", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "name", Type = "string", Nilable = true },
				{ Name = "tooltip", Type = "string", Nilable = true },
				{ Name = "cost", Type = "string", Nilable = true },
			},
		},
		{
			Name = "GetUnitPowerBarStringsByID",
			Type = "Function",

			Arguments =
			{
				{ Name = "barID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "name", Type = "string", Nilable = true },
				{ Name = "tooltip", Type = "string", Nilable = true },
				{ Name = "cost", Type = "string", Nilable = true },
			},
		},
		{
			Name = "GetUnitPowerBarTextureInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "unitToken", Type = "string", Nilable = false },
				{ Name = "textureIndex", Type = "number", Nilable = false },
				{ Name = "timerIndex", Type = "number", Nilable = true },
			},

			Returns =
			{
				{ Name = "texture", Type = "number", Nilable = false },
				{ Name = "colorR", Type = "number", Nilable = false },
				{ Name = "colorG", Type = "number", Nilable = false },
				{ Name = "colorB", Type = "number", Nilable = false },
				{ Name = "colorA", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetUnitPowerBarTextureInfoByID",
			Type = "Function",

			Arguments =
			{
				{ Name = "barID", Type = "number", Nilable = false },
				{ Name = "textureIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "texture", Type = "number", Nilable = false },
				{ Name = "colorR", Type = "number", Nilable = false },
				{ Name = "colorG", Type = "number", Nilable = false },
				{ Name = "colorB", Type = "number", Nilable = false },
				{ Name = "colorA", Type = "number", Nilable = false },
			},
		},
		{
			Name = "IsPlayerInGuildFromGUID",
			Type = "Function",

			Arguments =
			{
				{ Name = "playerGUID", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "IsInGuild", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsUnitModelReadyForUI",
			Type = "Function",

			Arguments =
			{
				{ Name = "unitToken", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "isReady", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "PlayerVehicleHasComboPoints",
			Type = "Function",

			Returns =
			{
				{ Name = "vehicleHasComboPoints", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetPortraitTexture",
			Type = "Function",

			Arguments =
			{
				{ Name = "textureObject", Type = "table", Nilable = false },
				{ Name = "unitToken", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetPortraitTextureFromCreatureDisplayID",
			Type = "Function",

			Arguments =
			{
				{ Name = "textureObject", Type = "table", Nilable = false },
				{ Name = "creatureDisplayID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "UnitAlliedRaceInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "unit", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "isAlliedRace", Type = "bool", Nilable = false },
				{ Name = "hasHeritageArmorUnlocked", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "UnitChromieTimeID",
			Type = "Function",

			Arguments =
			{
				{ Name = "unit", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "ID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "UnitClass",
			Type = "Function",

			Arguments =
			{
				{ Name = "unit", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "className", Type = "string", Nilable = false },
				{ Name = "classFilename", Type = "string", Nilable = false },
				{ Name = "classID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "UnitClassBase",
			Type = "Function",

			Arguments =
			{
				{ Name = "unit", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "classFilename", Type = "string", Nilable = false },
				{ Name = "classID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "UnitInPartyShard",
			Type = "Function",

			Arguments =
			{
				{ Name = "unit", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "inPartyShard", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "UnitIsConnected",
			Type = "Function",

			Arguments =
			{
				{ Name = "unit", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "isConnected", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "UnitIsOwnerOrControllerOfUnit",
			Type = "Function",

			Arguments =
			{
				{ Name = "controllingUnit", Type = "string", Nilable = false },
				{ Name = "controlledUnit", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "unitIsOwnerOrControllerOfUnit", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "UnitNameplateShowsWidgetsOnly",
			Type = "Function",

			Arguments =
			{
				{ Name = "unit", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "nameplateShowsWidgetsOnly", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "UnitPhaseReason",
			Type = "Function",

			Arguments =
			{
				{ Name = "unit", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "reason", Type = "PhaseReason", Nilable = true },
			},
		},
		{
			Name = "UnitPower",
			Type = "Function",

			Arguments =
			{
				{ Name = "unitToken", Type = "string", Nilable = false },
				{ Name = "powerType", Type = "PowerType", Nilable = false, Default = "NumPowerTypes" },
				{ Name = "unmodified", Type = "bool", Nilable = false, Default = false },
			},

			Returns =
			{
				{ Name = "power", Type = "number", Nilable = false },
			},
		},
		{
			Name = "UnitPowerBarID",
			Type = "Function",

			Arguments =
			{
				{ Name = "unitToken", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "barID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "UnitPowerDisplayMod",
			Type = "Function",

			Arguments =
			{
				{ Name = "powerType", Type = "PowerType", Nilable = false },
			},

			Returns =
			{
				{ Name = "displayMod", Type = "number", Nilable = false },
			},
		},
		{
			Name = "UnitPowerMax",
			Type = "Function",

			Arguments =
			{
				{ Name = "unitToken", Type = "string", Nilable = false },
				{ Name = "powerType", Type = "PowerType", Nilable = false, Default = "NumPowerTypes" },
				{ Name = "unmodified", Type = "bool", Nilable = false, Default = false },
			},

			Returns =
			{
				{ Name = "maxPower", Type = "number", Nilable = false },
			},
		},
		{
			Name = "UnitPvpClassification",
			Type = "Function",

			Arguments =
			{
				{ Name = "unit", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "classification", Type = "PvPUnitClassification", Nilable = true },
			},
		},
		{
			Name = "UnitQuestTrivialLevelRange",
			Type = "Function",

			Arguments =
			{
				{ Name = "unit", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "levelRange", Type = "number", Nilable = false },
			},
		},
		{
			Name = "UnitQuestTrivialLevelRangeScaling",
			Type = "Function",

			Arguments =
			{
				{ Name = "unit", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "levelRange", Type = "number", Nilable = false },
			},
		},
		{
			Name = "UnitSex",
			Type = "Function",

			Arguments =
			{
				{ Name = "unit", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "sex", Type = "number", Nilable = true },
			},
		},
		{
			Name = "UnitTreatAsPlayerForDisplay",
			Type = "Function",

			Arguments =
			{
				{ Name = "unit", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "treatAsPlayer", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "UnitWidgetSet",
			Type = "Function",

			Arguments =
			{
				{ Name = "unit", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "uiWidgetSet", Type = "number", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "ActivePlayerSpecializationChanged",
			Type = "Event",
			LiteralName = "ACTIVE_PLAYER_SPECIALIZATION_CHANGED",
		},
		{
			Name = "ArenaCooldownsUpdate",
			Type = "Event",
			LiteralName = "ARENA_COOLDOWNS_UPDATE",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "ArenaCrowdControlSpellUpdate",
			Type = "Event",
			LiteralName = "ARENA_CROWD_CONTROL_SPELL_UPDATE",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
				{ Name = "spellID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "AutofollowBegin",
			Type = "Event",
			LiteralName = "AUTOFOLLOW_BEGIN",
			Payload =
			{
				{ Name = "name", Type = "string", Nilable = false },
			},
		},
		{
			Name = "AutofollowEnd",
			Type = "Event",
			LiteralName = "AUTOFOLLOW_END",
		},
		{
			Name = "CancelSummon",
			Type = "Event",
			LiteralName = "CANCEL_SUMMON",
		},
		{
			Name = "ConfirmBinder",
			Type = "Event",
			LiteralName = "CONFIRM_BINDER",
			Payload =
			{
				{ Name = "areaName", Type = "string", Nilable = false },
			},
		},
		{
			Name = "ConfirmSummon",
			Type = "Event",
			LiteralName = "CONFIRM_SUMMON",
			Payload =
			{
				{ Name = "summonReason", Type = "number", Nilable = false },
				{ Name = "skippingStartExperience", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "HearthstoneBound",
			Type = "Event",
			LiteralName = "HEARTHSTONE_BOUND",
		},
		{
			Name = "HonorXpUpdate",
			Type = "Event",
			LiteralName = "HONOR_XP_UPDATE",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "IncomingResurrectChanged",
			Type = "Event",
			LiteralName = "INCOMING_RESURRECT_CHANGED",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "IncomingSummonChanged",
			Type = "Event",
			LiteralName = "INCOMING_SUMMON_CHANGED",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "KnownTitlesUpdate",
			Type = "Event",
			LiteralName = "KNOWN_TITLES_UPDATE",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "LocalplayerPetRenamed",
			Type = "Event",
			LiteralName = "LOCALPLAYER_PET_RENAMED",
		},
		{
			Name = "MirrorTimerPause",
			Type = "Event",
			LiteralName = "MIRROR_TIMER_PAUSE",
			Payload =
			{
				{ Name = "timerName", Type = "string", Nilable = false },
				{ Name = "paused", Type = "number", Nilable = false },
			},
		},
		{
			Name = "MirrorTimerStart",
			Type = "Event",
			LiteralName = "MIRROR_TIMER_START",
			Payload =
			{
				{ Name = "timerName", Type = "string", Nilable = false },
				{ Name = "value", Type = "number", Nilable = false },
				{ Name = "maxValue", Type = "number", Nilable = false },
				{ Name = "scale", Type = "number", Nilable = false },
				{ Name = "paused", Type = "number", Nilable = false },
				{ Name = "timerLabel", Type = "string", Nilable = false },
			},
		},
		{
			Name = "MirrorTimerStop",
			Type = "Event",
			LiteralName = "MIRROR_TIMER_STOP",
			Payload =
			{
				{ Name = "timerName", Type = "string", Nilable = false },
			},
		},
		{
			Name = "NeutralFactionSelectResult",
			Type = "Event",
			LiteralName = "NEUTRAL_FACTION_SELECT_RESULT",
			Payload =
			{
				{ Name = "success", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ObjectEnteredAOI",
			Type = "Event",
			LiteralName = "OBJECT_ENTERED_AOI",
			Payload =
			{
				{ Name = "guid", Type = "string", Nilable = false },
			},
		},
		{
			Name = "ObjectLeftAOI",
			Type = "Event",
			LiteralName = "OBJECT_LEFT_AOI",
			Payload =
			{
				{ Name = "guid", Type = "string", Nilable = false },
			},
		},
		{
			Name = "PetBarUpdateUsable",
			Type = "Event",
			LiteralName = "PET_BAR_UPDATE_USABLE",
		},
		{
			Name = "PetUiUpdate",
			Type = "Event",
			LiteralName = "PET_UI_UPDATE",
		},
		{
			Name = "PlayerDamageDoneMods",
			Type = "Event",
			LiteralName = "PLAYER_DAMAGE_DONE_MODS",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "PlayerEnterCombat",
			Type = "Event",
			LiteralName = "PLAYER_ENTER_COMBAT",
		},
		{
			Name = "PlayerFarsightFocusChanged",
			Type = "Event",
			LiteralName = "PLAYER_FARSIGHT_FOCUS_CHANGED",
		},
		{
			Name = "PlayerFlagsChanged",
			Type = "Event",
			LiteralName = "PLAYER_FLAGS_CHANGED",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "PlayerFocusChanged",
			Type = "Event",
			LiteralName = "PLAYER_FOCUS_CHANGED",
		},
		{
			Name = "PlayerLeaveCombat",
			Type = "Event",
			LiteralName = "PLAYER_LEAVE_COMBAT",
		},
		{
			Name = "PlayerLevelChanged",
			Type = "Event",
			LiteralName = "PLAYER_LEVEL_CHANGED",
			Payload =
			{
				{ Name = "oldLevel", Type = "number", Nilable = false },
				{ Name = "newLevel", Type = "number", Nilable = false },
				{ Name = "real", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "PlayerLevelUp",
			Type = "Event",
			LiteralName = "PLAYER_LEVEL_UP",
			Payload =
			{
				{ Name = "level", Type = "number", Nilable = false },
				{ Name = "healthDelta", Type = "number", Nilable = false },
				{ Name = "powerDelta", Type = "number", Nilable = false },
				{ Name = "numNewTalents", Type = "number", Nilable = false },
				{ Name = "numNewPvpTalentSlots", Type = "number", Nilable = false },
				{ Name = "strengthDelta", Type = "number", Nilable = false },
				{ Name = "agilityDelta", Type = "number", Nilable = false },
				{ Name = "staminaDelta", Type = "number", Nilable = false },
				{ Name = "intellectDelta", Type = "number", Nilable = false },
			},
		},
		{
			Name = "PlayerMountDisplayChanged",
			Type = "Event",
			LiteralName = "PLAYER_MOUNT_DISPLAY_CHANGED",
		},
		{
			Name = "PlayerPvpKillsChanged",
			Type = "Event",
			LiteralName = "PLAYER_PVP_KILLS_CHANGED",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "PlayerPvpRankChanged",
			Type = "Event",
			LiteralName = "PLAYER_PVP_RANK_CHANGED",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "PlayerRegenDisabled",
			Type = "Event",
			LiteralName = "PLAYER_REGEN_DISABLED",
		},
		{
			Name = "PlayerRegenEnabled",
			Type = "Event",
			LiteralName = "PLAYER_REGEN_ENABLED",
		},
		{
			Name = "PlayerSpecializationChanged",
			Type = "Event",
			LiteralName = "PLAYER_SPECIALIZATION_CHANGED",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "PlayerStartedLooking",
			Type = "Event",
			LiteralName = "PLAYER_STARTED_LOOKING",
		},
		{
			Name = "PlayerStartedMoving",
			Type = "Event",
			LiteralName = "PLAYER_STARTED_MOVING",
		},
		{
			Name = "PlayerStartedTurning",
			Type = "Event",
			LiteralName = "PLAYER_STARTED_TURNING",
		},
		{
			Name = "PlayerStoppedLooking",
			Type = "Event",
			LiteralName = "PLAYER_STOPPED_LOOKING",
		},
		{
			Name = "PlayerStoppedMoving",
			Type = "Event",
			LiteralName = "PLAYER_STOPPED_MOVING",
		},
		{
			Name = "PlayerStoppedTurning",
			Type = "Event",
			LiteralName = "PLAYER_STOPPED_TURNING",
		},
		{
			Name = "PlayerTargetChanged",
			Type = "Event",
			LiteralName = "PLAYER_TARGET_CHANGED",
		},
		{
			Name = "PlayerTrialXpUpdate",
			Type = "Event",
			LiteralName = "PLAYER_TRIAL_XP_UPDATE",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "PlayerUpdateResting",
			Type = "Event",
			LiteralName = "PLAYER_UPDATE_RESTING",
		},
		{
			Name = "PlayerXpUpdate",
			Type = "Event",
			LiteralName = "PLAYER_XP_UPDATE",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "PortraitsUpdated",
			Type = "Event",
			LiteralName = "PORTRAITS_UPDATED",
		},
		{
			Name = "ProvingGroundsScoreUpdate",
			Type = "Event",
			LiteralName = "PROVING_GROUNDS_SCORE_UPDATE",
			Payload =
			{
				{ Name = "points", Type = "number", Nilable = false },
			},
		},
		{
			Name = "PvpTimerUpdate",
			Type = "Event",
			LiteralName = "PVP_TIMER_UPDATE",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "RunePowerUpdate",
			Type = "Event",
			LiteralName = "RUNE_POWER_UPDATE",
			Payload =
			{
				{ Name = "runeIndex", Type = "number", Nilable = false },
				{ Name = "added", Type = "bool", Nilable = true },
			},
		},
		{
			Name = "RuneTypeUpdate",
			Type = "Event",
			LiteralName = "RUNE_TYPE_UPDATE",
			Payload =
			{
				{ Name = "runeIndex", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ShowFactionSelectUi",
			Type = "Event",
			LiteralName = "SHOW_FACTION_SELECT_UI",
		},
		{
			Name = "SpellConfirmationPrompt",
			Type = "Event",
			LiteralName = "SPELL_CONFIRMATION_PROMPT",
			Payload =
			{
				{ Name = "spellID", Type = "number", Nilable = false },
				{ Name = "effectValue", Type = "number", Nilable = false },
				{ Name = "message", Type = "string", Nilable = false },
				{ Name = "duration", Type = "number", Nilable = false },
				{ Name = "currencyTypesID", Type = "number", Nilable = false },
				{ Name = "currencyCost", Type = "number", Nilable = false },
				{ Name = "currentDifficulty", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SpellConfirmationTimeout",
			Type = "Event",
			LiteralName = "SPELL_CONFIRMATION_TIMEOUT",
			Payload =
			{
				{ Name = "spellID", Type = "number", Nilable = false },
				{ Name = "effectValue", Type = "number", Nilable = false },
			},
		},
		{
			Name = "UnitAbsorbAmountChanged",
			Type = "Event",
			LiteralName = "UNIT_ABSORB_AMOUNT_CHANGED",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "UnitAreaChanged",
			Type = "Event",
			LiteralName = "UNIT_AREA_CHANGED",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "UnitAttack",
			Type = "Event",
			LiteralName = "UNIT_ATTACK",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "UnitAttackPower",
			Type = "Event",
			LiteralName = "UNIT_ATTACK_POWER",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "UnitAttackSpeed",
			Type = "Event",
			LiteralName = "UNIT_ATTACK_SPEED",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "UnitCheatToggleEvent",
			Type = "Event",
			LiteralName = "UNIT_CHEAT_TOGGLE_EVENT",
		},
		{
			Name = "UnitClassificationChanged",
			Type = "Event",
			LiteralName = "UNIT_CLASSIFICATION_CHANGED",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "UnitCombat",
			Type = "Event",
			LiteralName = "UNIT_COMBAT",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
				{ Name = "event", Type = "string", Nilable = false },
				{ Name = "flagText", Type = "string", Nilable = false },
				{ Name = "amount", Type = "number", Nilable = false },
				{ Name = "schoolMask", Type = "number", Nilable = false },
			},
		},
		{
			Name = "UnitConnection",
			Type = "Event",
			LiteralName = "UNIT_CONNECTION",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
				{ Name = "isConnected", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "UnitCtrOptions",
			Type = "Event",
			LiteralName = "UNIT_CTR_OPTIONS",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "UnitDamage",
			Type = "Event",
			LiteralName = "UNIT_DAMAGE",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "UnitDefense",
			Type = "Event",
			LiteralName = "UNIT_DEFENSE",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "UnitDisplaypower",
			Type = "Event",
			LiteralName = "UNIT_DISPLAYPOWER",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "UnitFaction",
			Type = "Event",
			LiteralName = "UNIT_FACTION",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "UnitFlags",
			Type = "Event",
			LiteralName = "UNIT_FLAGS",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "UnitHealAbsorbAmountChanged",
			Type = "Event",
			LiteralName = "UNIT_HEAL_ABSORB_AMOUNT_CHANGED",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "UnitHealPrediction",
			Type = "Event",
			LiteralName = "UNIT_HEAL_PREDICTION",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "UnitHealth",
			Type = "Event",
			LiteralName = "UNIT_HEALTH",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "UnitInventoryChanged",
			Type = "Event",
			LiteralName = "UNIT_INVENTORY_CHANGED",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "UnitLevel",
			Type = "Event",
			LiteralName = "UNIT_LEVEL",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "UnitMana",
			Type = "Event",
			LiteralName = "UNIT_MANA",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "UnitMaxhealth",
			Type = "Event",
			LiteralName = "UNIT_MAXHEALTH",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "UnitMaxpower",
			Type = "Event",
			LiteralName = "UNIT_MAXPOWER",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
				{ Name = "powerType", Type = "string", Nilable = false },
			},
		},
		{
			Name = "UnitModelChanged",
			Type = "Event",
			LiteralName = "UNIT_MODEL_CHANGED",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "UnitNameUpdate",
			Type = "Event",
			LiteralName = "UNIT_NAME_UPDATE",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "UnitOtherPartyChanged",
			Type = "Event",
			LiteralName = "UNIT_OTHER_PARTY_CHANGED",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "UnitPet",
			Type = "Event",
			LiteralName = "UNIT_PET",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "UnitPetExperience",
			Type = "Event",
			LiteralName = "UNIT_PET_EXPERIENCE",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "UnitPhase",
			Type = "Event",
			LiteralName = "UNIT_PHASE",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "UnitPortraitUpdate",
			Type = "Event",
			LiteralName = "UNIT_PORTRAIT_UPDATE",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "UnitPowerBarHide",
			Type = "Event",
			LiteralName = "UNIT_POWER_BAR_HIDE",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "UnitPowerBarShow",
			Type = "Event",
			LiteralName = "UNIT_POWER_BAR_SHOW",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "UnitPowerBarTimerUpdate",
			Type = "Event",
			LiteralName = "UNIT_POWER_BAR_TIMER_UPDATE",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "UnitPowerFrequent",
			Type = "Event",
			LiteralName = "UNIT_POWER_FREQUENT",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
				{ Name = "powerType", Type = "string", Nilable = false },
			},
		},
		{
			Name = "UnitPowerPointCharge",
			Type = "Event",
			LiteralName = "UNIT_POWER_POINT_CHARGE",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "UnitPowerUpdate",
			Type = "Event",
			LiteralName = "UNIT_POWER_UPDATE",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
				{ Name = "powerType", Type = "string", Nilable = false },
			},
		},
		{
			Name = "UnitQuestLogChanged",
			Type = "Event",
			LiteralName = "UNIT_QUEST_LOG_CHANGED",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "UnitRangedAttackPower",
			Type = "Event",
			LiteralName = "UNIT_RANGED_ATTACK_POWER",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "UnitRangeddamage",
			Type = "Event",
			LiteralName = "UNIT_RANGEDDAMAGE",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "UnitResistances",
			Type = "Event",
			LiteralName = "UNIT_RESISTANCES",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "UnitSpellHaste",
			Type = "Event",
			LiteralName = "UNIT_SPELL_HASTE",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "UnitSpellcastChannelStart",
			Type = "Event",
			LiteralName = "UNIT_SPELLCAST_CHANNEL_START",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
				{ Name = "castGUID", Type = "string", Nilable = false },
				{ Name = "spellID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "UnitSpellcastChannelStop",
			Type = "Event",
			LiteralName = "UNIT_SPELLCAST_CHANNEL_STOP",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
				{ Name = "castGUID", Type = "string", Nilable = false },
				{ Name = "spellID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "UnitSpellcastChannelUpdate",
			Type = "Event",
			LiteralName = "UNIT_SPELLCAST_CHANNEL_UPDATE",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
				{ Name = "castGUID", Type = "string", Nilable = false },
				{ Name = "spellID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "UnitSpellcastDelayed",
			Type = "Event",
			LiteralName = "UNIT_SPELLCAST_DELAYED",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
				{ Name = "castGUID", Type = "string", Nilable = false },
				{ Name = "spellID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "UnitSpellcastEmpowerStart",
			Type = "Event",
			LiteralName = "UNIT_SPELLCAST_EMPOWER_START",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
				{ Name = "castGUID", Type = "string", Nilable = false },
				{ Name = "spellID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "UnitSpellcastEmpowerStop",
			Type = "Event",
			LiteralName = "UNIT_SPELLCAST_EMPOWER_STOP",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
				{ Name = "castGUID", Type = "string", Nilable = false },
				{ Name = "spellID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "UnitSpellcastEmpowerUpdate",
			Type = "Event",
			LiteralName = "UNIT_SPELLCAST_EMPOWER_UPDATE",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
				{ Name = "castGUID", Type = "string", Nilable = false },
				{ Name = "spellID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "UnitSpellcastFailed",
			Type = "Event",
			LiteralName = "UNIT_SPELLCAST_FAILED",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
				{ Name = "castGUID", Type = "string", Nilable = false },
				{ Name = "spellID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "UnitSpellcastFailedQuiet",
			Type = "Event",
			LiteralName = "UNIT_SPELLCAST_FAILED_QUIET",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
				{ Name = "castGUID", Type = "string", Nilable = false },
				{ Name = "spellID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "UnitSpellcastInterrupted",
			Type = "Event",
			LiteralName = "UNIT_SPELLCAST_INTERRUPTED",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
				{ Name = "castGUID", Type = "string", Nilable = false },
				{ Name = "spellID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "UnitSpellcastInterruptible",
			Type = "Event",
			LiteralName = "UNIT_SPELLCAST_INTERRUPTIBLE",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "UnitSpellcastNotInterruptible",
			Type = "Event",
			LiteralName = "UNIT_SPELLCAST_NOT_INTERRUPTIBLE",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "UnitSpellcastStart",
			Type = "Event",
			LiteralName = "UNIT_SPELLCAST_START",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
				{ Name = "castGUID", Type = "string", Nilable = false },
				{ Name = "spellID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "UnitSpellcastStop",
			Type = "Event",
			LiteralName = "UNIT_SPELLCAST_STOP",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
				{ Name = "castGUID", Type = "string", Nilable = false },
				{ Name = "spellID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "UnitSpellcastSucceeded",
			Type = "Event",
			LiteralName = "UNIT_SPELLCAST_SUCCEEDED",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
				{ Name = "castGUID", Type = "string", Nilable = false },
				{ Name = "spellID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "UnitStats",
			Type = "Event",
			LiteralName = "UNIT_STATS",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "UnitTarget",
			Type = "Event",
			LiteralName = "UNIT_TARGET",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "UnitTargetableChanged",
			Type = "Event",
			LiteralName = "UNIT_TARGETABLE_CHANGED",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "UnitThreatListUpdate",
			Type = "Event",
			LiteralName = "UNIT_THREAT_LIST_UPDATE",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "UnitThreatSituationUpdate",
			Type = "Event",
			LiteralName = "UNIT_THREAT_SITUATION_UPDATE",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "UpdateExhaustion",
			Type = "Event",
			LiteralName = "UPDATE_EXHAUSTION",
		},
		{
			Name = "UpdateMouseoverUnit",
			Type = "Event",
			LiteralName = "UPDATE_MOUSEOVER_UNIT",
		},
		{
			Name = "UpdateStealth",
			Type = "Event",
			LiteralName = "UPDATE_STEALTH",
		},
		{
			Name = "VehicleAngleUpdate",
			Type = "Event",
			LiteralName = "VEHICLE_ANGLE_UPDATE",
			Payload =
			{
				{ Name = "normalizedPitch", Type = "number", Nilable = false },
				{ Name = "radians", Type = "number", Nilable = false },
			},
		},
	},

	Tables =
	{
		{
			Name = "PhaseReason",
			Type = "Enumeration",
			NumValues = 4,
			MinValue = 0,
			MaxValue = 3,
			Fields =
			{
				{ Name = "Phasing", Type = "PhaseReason", EnumValue = 0 },
				{ Name = "Sharding", Type = "PhaseReason", EnumValue = 1 },
				{ Name = "WarMode", Type = "PhaseReason", EnumValue = 2 },
				{ Name = "ChromieTime", Type = "PhaseReason", EnumValue = 3 },
			},
		},
		{
			Name = "PowerType",
			Type = "Enumeration",
			NumValues = 26,
			MinValue = -2,
			MaxValue = 23,
			Fields =
			{
				{ Name = "HealthCost", Type = "PowerType", EnumValue = -2 },
				{ Name = "None", Type = "PowerType", EnumValue = -1 },
				{ Name = "Mana", Type = "PowerType", EnumValue = 0 },
				{ Name = "Rage", Type = "PowerType", EnumValue = 1 },
				{ Name = "Focus", Type = "PowerType", EnumValue = 2 },
				{ Name = "Energy", Type = "PowerType", EnumValue = 3 },
				{ Name = "ComboPoints", Type = "PowerType", EnumValue = 4 },
				{ Name = "Runes", Type = "PowerType", EnumValue = 5 },
				{ Name = "RunicPower", Type = "PowerType", EnumValue = 6 },
				{ Name = "SoulShards", Type = "PowerType", EnumValue = 7 },
				{ Name = "LunarPower", Type = "PowerType", EnumValue = 8 },
				{ Name = "HolyPower", Type = "PowerType", EnumValue = 9 },
				{ Name = "Alternate", Type = "PowerType", EnumValue = 10 },
				{ Name = "Maelstrom", Type = "PowerType", EnumValue = 11 },
				{ Name = "Chi", Type = "PowerType", EnumValue = 12 },
				{ Name = "Insanity", Type = "PowerType", EnumValue = 13 },
				{ Name = "Obsolete", Type = "PowerType", EnumValue = 14 },
				{ Name = "Obsolete2", Type = "PowerType", EnumValue = 15 },
				{ Name = "ArcaneCharges", Type = "PowerType", EnumValue = 16 },
				{ Name = "Fury", Type = "PowerType", EnumValue = 17 },
				{ Name = "Pain", Type = "PowerType", EnumValue = 18 },
				{ Name = "Essence", Type = "PowerType", EnumValue = 19 },
				{ Name = "RuneBlood", Type = "PowerType", EnumValue = 20 },
				{ Name = "RuneFrost", Type = "PowerType", EnumValue = 21 },
				{ Name = "RuneUnholy", Type = "PowerType", EnumValue = 22 },
				{ Name = "NumPowerTypes", Type = "PowerType", EnumValue = 23 },
			},
		},
		{
			Name = "PvPUnitClassification",
			Type = "Enumeration",
			NumValues = 11,
			MinValue = 0,
			MaxValue = 10,
			Fields =
			{
				{ Name = "FlagCarrierHorde", Type = "PvPUnitClassification", EnumValue = 0 },
				{ Name = "FlagCarrierAlliance", Type = "PvPUnitClassification", EnumValue = 1 },
				{ Name = "FlagCarrierNeutral", Type = "PvPUnitClassification", EnumValue = 2 },
				{ Name = "CartRunnerHorde", Type = "PvPUnitClassification", EnumValue = 3 },
				{ Name = "CartRunnerAlliance", Type = "PvPUnitClassification", EnumValue = 4 },
				{ Name = "AssassinHorde", Type = "PvPUnitClassification", EnumValue = 5 },
				{ Name = "AssassinAlliance", Type = "PvPUnitClassification", EnumValue = 6 },
				{ Name = "OrbCarrierBlue", Type = "PvPUnitClassification", EnumValue = 7 },
				{ Name = "OrbCarrierGreen", Type = "PvPUnitClassification", EnumValue = 8 },
				{ Name = "OrbCarrierOrange", Type = "PvPUnitClassification", EnumValue = 9 },
				{ Name = "OrbCarrierPurple", Type = "PvPUnitClassification", EnumValue = 10 },
			},
		},
		{
			Name = "CorruptionEffectInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "description", Type = "string", Nilable = false },
				{ Name = "minCorruption", Type = "number", Nilable = false },
			},
		},
		{
			Name = "UnitPowerBarInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "ID", Type = "number", Nilable = false },
				{ Name = "barType", Type = "number", Nilable = false },
				{ Name = "minPower", Type = "number", Nilable = false },
				{ Name = "startInset", Type = "number", Nilable = false },
				{ Name = "endInset", Type = "number", Nilable = false },
				{ Name = "smooth", Type = "bool", Nilable = false },
				{ Name = "hideFromOthers", Type = "bool", Nilable = false },
				{ Name = "showOnRaid", Type = "bool", Nilable = false },
				{ Name = "opaqueSpark", Type = "bool", Nilable = false },
				{ Name = "opaqueFlash", Type = "bool", Nilable = false },
				{ Name = "anchorTop", Type = "bool", Nilable = false },
				{ Name = "forcePercentage", Type = "bool", Nilable = false },
				{ Name = "sparkUnderFrame", Type = "bool", Nilable = false },
				{ Name = "flashAtMinPower", Type = "bool", Nilable = false },
				{ Name = "fractionalCounter", Type = "bool", Nilable = false },
				{ Name = "animateNumbers", Type = "bool", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "UserFeedback",
	Type = "System",
	Namespace = "C_UserFeedback",

	Functions =
	{
		{
			Name = "SubmitBug",
			Type = "Function",

			Arguments =
			{
				{ Name = "bugInfo", Type = "string", Nilable = false },
				{ Name = "suppressNotification", Type = "bool", Nilable = false, Default = false },
			},

			Returns =
			{
				{ Name = "success", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SubmitSuggestion",
			Type = "Function",

			Arguments =
			{
				{ Name = "suggestion", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "success", Type = "bool", Nilable = false },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "Vehicle",
	Type = "System",
	Namespace = "C_Vehicle",

	Functions =
	{
	},

	Events =
	{
		{
			Name = "PlayerGainsVehicleData",
			Type = "Event",
			LiteralName = "PLAYER_GAINS_VEHICLE_DATA",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
				{ Name = "vehicleUIIndicatorID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "PlayerLosesVehicleData",
			Type = "Event",
			LiteralName = "PLAYER_LOSES_VEHICLE_DATA",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "UnitEnteredVehicle",
			Type = "Event",
			LiteralName = "UNIT_ENTERED_VEHICLE",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
				{ Name = "showVehicleFrame", Type = "bool", Nilable = false },
				{ Name = "isControlSeat", Type = "bool", Nilable = false },
				{ Name = "vehicleUIIndicatorID", Type = "number", Nilable = false },
				{ Name = "vehicleGUID", Type = "string", Nilable = false },
				{ Name = "mayChooseExit", Type = "bool", Nilable = false },
				{ Name = "hasPitch", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "UnitEnteringVehicle",
			Type = "Event",
			LiteralName = "UNIT_ENTERING_VEHICLE",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
				{ Name = "showVehicleFrame", Type = "bool", Nilable = false },
				{ Name = "isControlSeat", Type = "bool", Nilable = false },
				{ Name = "vehicleUIIndicatorID", Type = "number", Nilable = false },
				{ Name = "vehicleGUID", Type = "string", Nilable = false },
				{ Name = "mayChooseExit", Type = "bool", Nilable = false },
				{ Name = "hasPitch", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "UnitExitedVehicle",
			Type = "Event",
			LiteralName = "UNIT_EXITED_VEHICLE",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "UnitExitingVehicle",
			Type = "Event",
			LiteralName = "UNIT_EXITING_VEHICLE",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
			},
		},
		{
			Name = "VehicleAngleShow",
			Type = "Event",
			LiteralName = "VEHICLE_ANGLE_SHOW",
			Payload =
			{
				{ Name = "shouldShow", Type = "number", Nilable = true },
			},
		},
		{
			Name = "VehiclePassengersChanged",
			Type = "Event",
			LiteralName = "VEHICLE_PASSENGERS_CHANGED",
		},
		{
			Name = "VehiclePowerShow",
			Type = "Event",
			LiteralName = "VEHICLE_POWER_SHOW",
			Payload =
			{
				{ Name = "shouldShow", Type = "number", Nilable = true },
			},
		},
		{
			Name = "VehicleUpdate",
			Type = "Event",
			LiteralName = "VEHICLE_UPDATE",
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "Video",
	Type = "System",
	Namespace = "C_VideoOptions",

	Functions =
	{
		{
			Name = "GetCurrentGameWindowSize",
			Type = "Function",

			Returns =
			{
				{ Name = "size", Type = "table", Mixin = "Vector2DMixin", Nilable = false },
			},
		},
		{
			Name = "GetDefaultGameWindowSize",
			Type = "Function",

			Arguments =
			{
				{ Name = "monitor", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "size", Type = "table", Mixin = "Vector2DMixin", Nilable = false },
			},
		},
		{
			Name = "GetGameWindowSizes",
			Type = "Function",

			Arguments =
			{
				{ Name = "monitor", Type = "number", Nilable = false },
				{ Name = "fullscreen", Type = "bool", Nilable = false },
			},

			Returns =
			{
				{ Name = "sizes", Type = "table", InnerType = "table", Nilable = false },
			},
		},
		{
			Name = "GetGxAdapterInfo",
			Type = "Function",

			Returns =
			{
				{ Name = "adapters", Type = "table", InnerType = "GxAdapterInfoDetails", Nilable = false },
			},
		},
		{
			Name = "SetGameWindowSize",
			Type = "Function",

			Arguments =
			{
				{ Name = "x", Type = "number", Nilable = false },
				{ Name = "y", Type = "number", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "AdapterListChanged",
			Type = "Event",
			LiteralName = "ADAPTER_LIST_CHANGED",
		},
		{
			Name = "DisplaySizeChanged",
			Type = "Event",
			LiteralName = "DISPLAY_SIZE_CHANGED",
		},
		{
			Name = "GlueScreenshotFailed",
			Type = "Event",
			LiteralName = "GLUE_SCREENSHOT_FAILED",
		},
		{
			Name = "GxRestarted",
			Type = "Event",
			LiteralName = "GX_RESTARTED",
		},
		{
			Name = "ScreenshotFailed",
			Type = "Event",
			LiteralName = "SCREENSHOT_FAILED",
		},
		{
			Name = "ScreenshotStarted",
			Type = "Event",
			LiteralName = "SCREENSHOT_STARTED",
		},
		{
			Name = "ScreenshotSucceeded",
			Type = "Event",
			LiteralName = "SCREENSHOT_SUCCEEDED",
		},
	},

	Tables =
	{
		{
			Name = "GraphicsValidationResult",
			Type = "Enumeration",
			NumValues = 19,
			MinValue = 0,
			MaxValue = 18,
			Fields =
			{
				{ Name = "Supported", Type = "GraphicsValidationResult", EnumValue = 0 },
				{ Name = "Illegal", Type = "GraphicsValidationResult", EnumValue = 1 },
				{ Name = "Unsupported", Type = "GraphicsValidationResult", EnumValue = 2 },
				{ Name = "Graphics", Type = "GraphicsValidationResult", EnumValue = 3 },
				{ Name = "DualCore", Type = "GraphicsValidationResult", EnumValue = 4 },
				{ Name = "CpuMem_2", Type = "GraphicsValidationResult", EnumValue = 5 },
				{ Name = "CpuMem_4", Type = "GraphicsValidationResult", EnumValue = 6 },
				{ Name = "Needs_5_0", Type = "GraphicsValidationResult", EnumValue = 7 },
				{ Name = "Needs_6_0", Type = "GraphicsValidationResult", EnumValue = 8 },
				{ Name = "NeedsRt", Type = "GraphicsValidationResult", EnumValue = 9 },
				{ Name = "NeedsMacOs_10_13", Type = "GraphicsValidationResult", EnumValue = 10 },
				{ Name = "NeedsMacOs_10_14", Type = "GraphicsValidationResult", EnumValue = 11 },
				{ Name = "NeedsMacOs_10_15", Type = "GraphicsValidationResult", EnumValue = 12 },
				{ Name = "NeedsMacOs_11_0", Type = "GraphicsValidationResult", EnumValue = 13 },
				{ Name = "NeedsWindows_10", Type = "GraphicsValidationResult", EnumValue = 14 },
				{ Name = "MacOsUnsupported", Type = "GraphicsValidationResult", EnumValue = 15 },
				{ Name = "WindowsUnsupported", Type = "GraphicsValidationResult", EnumValue = 16 },
				{ Name = "GpuDriver", Type = "GraphicsValidationResult", EnumValue = 17 },
				{ Name = "Unknown", Type = "GraphicsValidationResult", EnumValue = 18 },
			},
		},
		{
			Name = "GxAdapterInfoDetails",
			Type = "Structure",
			Fields =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "isLowPower", Type = "bool", Nilable = false },
				{ Name = "isExternal", Type = "bool", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "Vignette",
	Type = "System",
	Namespace = "C_VignetteInfo",

	Functions =
	{
		{
			Name = "FindBestUniqueVignette",
			Type = "Function",

			Arguments =
			{
				{ Name = "vignetteGUIDs", Type = "table", InnerType = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "bestUniqueVignetteIndex", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetVignetteInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "vignetteGUID", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "vignetteInfo", Type = "VignetteInfo", Nilable = true },
			},
		},
		{
			Name = "GetVignettePosition",
			Type = "Function",

			Arguments =
			{
				{ Name = "vignetteGUID", Type = "string", Nilable = false },
				{ Name = "uiMapID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "vignettePosition", Type = "table", Mixin = "Vector2DMixin", Nilable = true },
			},
		},
		{
			Name = "GetVignettes",
			Type = "Function",

			Returns =
			{
				{ Name = "vignetteGUIDs", Type = "table", InnerType = "string", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "VignetteMinimapUpdated",
			Type = "Event",
			LiteralName = "VIGNETTE_MINIMAP_UPDATED",
			Payload =
			{
				{ Name = "vignetteGUID", Type = "string", Nilable = false },
				{ Name = "onMinimap", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "VignettesUpdated",
			Type = "Event",
			LiteralName = "VIGNETTES_UPDATED",
		},
	},

	Tables =
	{
		{
			Name = "VignetteInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "vignetteGUID", Type = "string", Nilable = false },
				{ Name = "objectGUID", Type = "string", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "isDead", Type = "bool", Nilable = false },
				{ Name = "onWorldMap", Type = "bool", Nilable = false },
				{ Name = "zoneInfiniteAOI", Type = "bool", Nilable = false },
				{ Name = "onMinimap", Type = "bool", Nilable = false },
				{ Name = "isUnique", Type = "bool", Nilable = false },
				{ Name = "inFogOfWar", Type = "bool", Nilable = false },
				{ Name = "atlasName", Type = "string", Nilable = false },
				{ Name = "hasTooltip", Type = "bool", Nilable = false },
				{ Name = "vignetteID", Type = "number", Nilable = false },
				{ Name = "type", Type = "VignetteType", Nilable = false },
				{ Name = "rewardQuestID", Type = "number", Nilable = false },
				{ Name = "widgetSetID", Type = "number", Nilable = true },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "VoiceChat",
	Type = "System",
	Namespace = "C_VoiceChat",

	Functions =
	{
		{
			Name = "ActivateChannel",
			Type = "Function",

			Arguments =
			{
				{ Name = "channelID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ActivateChannelTranscription",
			Type = "Function",

			Arguments =
			{
				{ Name = "channelID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "BeginLocalCapture",
			Type = "Function",

			Arguments =
			{
				{ Name = "listenToLocalUser", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "CanPlayerUseVoiceChat",
			Type = "Function",

			Returns =
			{
				{ Name = "canUseVoiceChat", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "CreateChannel",
			Type = "Function",

			Arguments =
			{
				{ Name = "channelDisplayName", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "status", Type = "VoiceChatStatusCode", Nilable = false },
			},
		},
		{
			Name = "DeactivateChannel",
			Type = "Function",

			Arguments =
			{
				{ Name = "channelID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "DeactivateChannelTranscription",
			Type = "Function",

			Arguments =
			{
				{ Name = "channelID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "EndLocalCapture",
			Type = "Function",
		},
		{
			Name = "GetActiveChannelID",
			Type = "Function",

			Returns =
			{
				{ Name = "channelID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetActiveChannelType",
			Type = "Function",

			Returns =
			{
				{ Name = "channelType", Type = "ChatChannelType", Nilable = true },
			},
		},
		{
			Name = "GetAvailableInputDevices",
			Type = "Function",

			Returns =
			{
				{ Name = "inputDevices", Type = "table", InnerType = "VoiceAudioDevice", Nilable = true },
			},
		},
		{
			Name = "GetAvailableOutputDevices",
			Type = "Function",

			Returns =
			{
				{ Name = "outputDevices", Type = "table", InnerType = "VoiceAudioDevice", Nilable = true },
			},
		},
		{
			Name = "GetChannel",
			Type = "Function",

			Arguments =
			{
				{ Name = "channelID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "channel", Type = "VoiceChatChannel", Nilable = true },
			},
		},
		{
			Name = "GetChannelForChannelType",
			Type = "Function",

			Arguments =
			{
				{ Name = "channelType", Type = "ChatChannelType", Nilable = false },
			},

			Returns =
			{
				{ Name = "channel", Type = "VoiceChatChannel", Nilable = true },
			},
		},
		{
			Name = "GetChannelForCommunityStream",
			Type = "Function",

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "streamId", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "channel", Type = "VoiceChatChannel", Nilable = true },
			},
		},
		{
			Name = "GetCommunicationMode",
			Type = "Function",

			Returns =
			{
				{ Name = "communicationMode", Type = "CommunicationMode", Nilable = true },
			},
		},
		{
			Name = "GetCurrentVoiceChatConnectionStatusCode",
			Type = "Function",

			Returns =
			{
				{ Name = "statusCode", Type = "VoiceChatStatusCode", Nilable = true },
			},
		},
		{
			Name = "GetInputVolume",
			Type = "Function",

			Returns =
			{
				{ Name = "volume", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetJoinClubVoiceChannelError",
			Type = "Function",

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "errorReason", Type = "VoiceChannelErrorReason", Nilable = true },
			},
		},
		{
			Name = "GetLocalPlayerActiveChannelMemberInfo",
			Type = "Function",

			Returns =
			{
				{ Name = "memberInfo", Type = "VoiceChatMember", Nilable = true },
			},
		},
		{
			Name = "GetLocalPlayerMemberID",
			Type = "Function",

			Arguments =
			{
				{ Name = "channelID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "memberID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetMasterVolumeScale",
			Type = "Function",

			Returns =
			{
				{ Name = "scale", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetMemberGUID",
			Type = "Function",

			Arguments =
			{
				{ Name = "memberID", Type = "number", Nilable = false },
				{ Name = "channelID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "memberGUID", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetMemberID",
			Type = "Function",

			Arguments =
			{
				{ Name = "channelID", Type = "number", Nilable = false },
				{ Name = "memberGUID", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "memberID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetMemberInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "memberID", Type = "number", Nilable = false },
				{ Name = "channelID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "memberInfo", Type = "VoiceChatMember", Nilable = true },
			},
		},
		{
			Name = "GetMemberName",
			Type = "Function",

			Arguments =
			{
				{ Name = "memberID", Type = "number", Nilable = false },
				{ Name = "channelID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "memberName", Type = "string", Nilable = true },
			},
		},
		{
			Name = "GetMemberVolume",
			Type = "Function",

			Arguments =
			{
				{ Name = "playerLocation", Type = "table", Mixin = "PlayerLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "volume", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetOutputVolume",
			Type = "Function",

			Returns =
			{
				{ Name = "volume", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetPTTButtonPressedState",
			Type = "Function",

			Returns =
			{
				{ Name = "isPressed", Type = "bool", Nilable = true },
			},
		},
		{
			Name = "GetProcesses",
			Type = "Function",

			Returns =
			{
				{ Name = "processes", Type = "table", InnerType = "VoiceChatProcess", Nilable = false },
			},
		},
		{
			Name = "GetPushToTalkBinding",
			Type = "Function",

			Returns =
			{
				{ Name = "keys", Type = "table", InnerType = "string", Nilable = true },
			},
		},
		{
			Name = "GetRemoteTtsVoices",
			Type = "Function",

			Returns =
			{
				{ Name = "ttsVoices", Type = "table", InnerType = "VoiceTtsVoiceType", Nilable = false },
			},
		},
		{
			Name = "GetTtsVoices",
			Type = "Function",

			Returns =
			{
				{ Name = "ttsVoices", Type = "table", InnerType = "VoiceTtsVoiceType", Nilable = false },
			},
		},
		{
			Name = "GetVADSensitivity",
			Type = "Function",

			Returns =
			{
				{ Name = "sensitivity", Type = "number", Nilable = true },
			},
		},
		{
			Name = "IsChannelJoinPending",
			Type = "Function",

			Arguments =
			{
				{ Name = "channelType", Type = "ChatChannelType", Nilable = false },
				{ Name = "clubId", Type = "string", Nilable = true },
				{ Name = "streamId", Type = "string", Nilable = true },
			},

			Returns =
			{
				{ Name = "isPending", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsDeafened",
			Type = "Function",

			Returns =
			{
				{ Name = "isDeafened", Type = "bool", Nilable = true },
			},
		},
		{
			Name = "IsEnabled",
			Type = "Function",

			Returns =
			{
				{ Name = "isEnabled", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsLoggedIn",
			Type = "Function",

			Returns =
			{
				{ Name = "isLoggedIn", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsMemberLocalPlayer",
			Type = "Function",

			Arguments =
			{
				{ Name = "memberID", Type = "number", Nilable = false },
				{ Name = "channelID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isLocalPlayer", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsMemberMuted",
			Type = "Function",

			Arguments =
			{
				{ Name = "playerLocation", Type = "table", Mixin = "PlayerLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "mutedForMe", Type = "bool", Nilable = true },
			},
		},
		{
			Name = "IsMemberMutedForAll",
			Type = "Function",

			Arguments =
			{
				{ Name = "memberID", Type = "number", Nilable = false },
				{ Name = "channelID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "mutedForAll", Type = "bool", Nilable = true },
			},
		},
		{
			Name = "IsMemberSilenced",
			Type = "Function",

			Arguments =
			{
				{ Name = "memberID", Type = "number", Nilable = false },
				{ Name = "channelID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "silenced", Type = "bool", Nilable = true },
			},
		},
		{
			Name = "IsMuted",
			Type = "Function",

			Returns =
			{
				{ Name = "isMuted", Type = "bool", Nilable = true },
			},
		},
		{
			Name = "IsParentalDisabled",
			Type = "Function",

			Returns =
			{
				{ Name = "isParentalDisabled", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsParentalMuted",
			Type = "Function",

			Returns =
			{
				{ Name = "isParentalMuted", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsPlayerUsingVoice",
			Type = "Function",

			Arguments =
			{
				{ Name = "playerLocation", Type = "table", Mixin = "PlayerLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "isUsingVoice", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsSilenced",
			Type = "Function",

			Returns =
			{
				{ Name = "isSilenced", Type = "bool", Nilable = true },
			},
		},
		{
			Name = "IsSpeakForMeActive",
			Type = "Function",

			Returns =
			{
				{ Name = "isActive", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsSpeakForMeAllowed",
			Type = "Function",

			Returns =
			{
				{ Name = "isAllowed", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsTranscriptionAllowed",
			Type = "Function",

			Returns =
			{
				{ Name = "isAllowed", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsVoiceChatConnected",
			Type = "Function",

			Returns =
			{
				{ Name = "connected", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "LeaveChannel",
			Type = "Function",

			Arguments =
			{
				{ Name = "channelID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "Login",
			Type = "Function",

			Returns =
			{
				{ Name = "status", Type = "VoiceChatStatusCode", Nilable = false },
			},
		},
		{
			Name = "Logout",
			Type = "Function",

			Returns =
			{
				{ Name = "status", Type = "VoiceChatStatusCode", Nilable = false },
			},
		},
		{
			Name = "MarkChannelsDiscovered",
			Type = "Function",
			Documentation = { "Once the UI has enumerated all channels, use this to reset the channel discovery state, it will be updated again if appropriate" },
		},
		{
			Name = "RequestJoinAndActivateCommunityStreamChannel",
			Type = "Function",

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "streamId", Type = "string", Nilable = false },
			},
		},
		{
			Name = "RequestJoinChannelByChannelType",
			Type = "Function",

			Arguments =
			{
				{ Name = "channelType", Type = "ChatChannelType", Nilable = false },
				{ Name = "autoActivate", Type = "bool", Nilable = true },
			},
		},
		{
			Name = "SetCommunicationMode",
			Type = "Function",

			Arguments =
			{
				{ Name = "communicationMode", Type = "CommunicationMode", Nilable = false },
			},
		},
		{
			Name = "SetDeafened",
			Type = "Function",

			Arguments =
			{
				{ Name = "isDeafened", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetInputDevice",
			Type = "Function",

			Arguments =
			{
				{ Name = "deviceID", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetInputVolume",
			Type = "Function",

			Arguments =
			{
				{ Name = "volume", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetMasterVolumeScale",
			Type = "Function",

			Arguments =
			{
				{ Name = "scale", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetMemberMuted",
			Type = "Function",

			Arguments =
			{
				{ Name = "playerLocation", Type = "table", Mixin = "PlayerLocationMixin", Nilable = false },
				{ Name = "muted", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetMemberVolume",
			Type = "Function",
			Documentation = { "Adjusts member volume across all channels" },

			Arguments =
			{
				{ Name = "playerLocation", Type = "table", Mixin = "PlayerLocationMixin", Nilable = false },
				{ Name = "volume", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetMuted",
			Type = "Function",

			Arguments =
			{
				{ Name = "isMuted", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetOutputDevice",
			Type = "Function",

			Arguments =
			{
				{ Name = "deviceID", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetOutputVolume",
			Type = "Function",

			Arguments =
			{
				{ Name = "volume", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetPortraitTexture",
			Type = "Function",

			Arguments =
			{
				{ Name = "textureObject", Type = "table", Nilable = false },
				{ Name = "memberID", Type = "number", Nilable = false },
				{ Name = "channelID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetPushToTalkBinding",
			Type = "Function",

			Arguments =
			{
				{ Name = "keys", Type = "table", InnerType = "string", Nilable = false },
			},
		},
		{
			Name = "SetVADSensitivity",
			Type = "Function",

			Arguments =
			{
				{ Name = "sensitivity", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ShouldDiscoverChannels",
			Type = "Function",
			Documentation = { "Use this while loading to determine if the UI should attempt to rediscover the previously joined/active voice channels" },

			Returns =
			{
				{ Name = "shouldDiscoverChannels", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SpeakRemoteTextSample",
			Type = "Function",

			Arguments =
			{
				{ Name = "text", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SpeakText",
			Type = "Function",

			Arguments =
			{
				{ Name = "voiceID", Type = "number", Nilable = false },
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "destination", Type = "VoiceTtsDestination", Nilable = false },
				{ Name = "rate", Type = "number", Nilable = false },
				{ Name = "volume", Type = "number", Nilable = false },
			},
		},
		{
			Name = "StopSpeakingText",
			Type = "Function",
		},
		{
			Name = "ToggleDeafened",
			Type = "Function",
		},
		{
			Name = "ToggleMemberMuted",
			Type = "Function",

			Arguments =
			{
				{ Name = "playerLocation", Type = "table", Mixin = "PlayerLocationMixin", Nilable = false },
			},
		},
		{
			Name = "ToggleMuted",
			Type = "Function",
		},
	},

	Events =
	{
		{
			Name = "VoiceChatActiveInputDeviceUpdated",
			Type = "Event",
			LiteralName = "VOICE_CHAT_ACTIVE_INPUT_DEVICE_UPDATED",
		},
		{
			Name = "VoiceChatActiveOutputDeviceUpdated",
			Type = "Event",
			LiteralName = "VOICE_CHAT_ACTIVE_OUTPUT_DEVICE_UPDATED",
		},
		{
			Name = "VoiceChatAudioCaptureEnergy",
			Type = "Event",
			LiteralName = "VOICE_CHAT_AUDIO_CAPTURE_ENERGY",
			Payload =
			{
				{ Name = "isSpeaking", Type = "bool", Nilable = false },
				{ Name = "energy", Type = "number", Nilable = false },
			},
		},
		{
			Name = "VoiceChatAudioCaptureStarted",
			Type = "Event",
			LiteralName = "VOICE_CHAT_AUDIO_CAPTURE_STARTED",
		},
		{
			Name = "VoiceChatAudioCaptureStopped",
			Type = "Event",
			LiteralName = "VOICE_CHAT_AUDIO_CAPTURE_STOPPED",
		},
		{
			Name = "VoiceChatChannelActivated",
			Type = "Event",
			LiteralName = "VOICE_CHAT_CHANNEL_ACTIVATED",
			Payload =
			{
				{ Name = "channelID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "VoiceChatChannelDeactivated",
			Type = "Event",
			LiteralName = "VOICE_CHAT_CHANNEL_DEACTIVATED",
			Payload =
			{
				{ Name = "channelID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "VoiceChatChannelDisplayNameChanged",
			Type = "Event",
			LiteralName = "VOICE_CHAT_CHANNEL_DISPLAY_NAME_CHANGED",
			Payload =
			{
				{ Name = "channelID", Type = "number", Nilable = false },
				{ Name = "channelDisplayName", Type = "string", Nilable = false },
			},
		},
		{
			Name = "VoiceChatChannelJoined",
			Type = "Event",
			LiteralName = "VOICE_CHAT_CHANNEL_JOINED",
			Payload =
			{
				{ Name = "status", Type = "VoiceChatStatusCode", Nilable = false },
				{ Name = "channelID", Type = "number", Nilable = false },
				{ Name = "channelType", Type = "ChatChannelType", Nilable = false },
				{ Name = "clubId", Type = "string", Nilable = true },
				{ Name = "streamId", Type = "string", Nilable = true },
			},
		},
		{
			Name = "VoiceChatChannelMemberActiveStateChanged",
			Type = "Event",
			LiteralName = "VOICE_CHAT_CHANNEL_MEMBER_ACTIVE_STATE_CHANGED",
			Payload =
			{
				{ Name = "memberID", Type = "number", Nilable = false },
				{ Name = "channelID", Type = "number", Nilable = false },
				{ Name = "isActive", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "VoiceChatChannelMemberAdded",
			Type = "Event",
			LiteralName = "VOICE_CHAT_CHANNEL_MEMBER_ADDED",
			Payload =
			{
				{ Name = "memberID", Type = "number", Nilable = false },
				{ Name = "channelID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "VoiceChatChannelMemberEnergyChanged",
			Type = "Event",
			LiteralName = "VOICE_CHAT_CHANNEL_MEMBER_ENERGY_CHANGED",
			Payload =
			{
				{ Name = "memberID", Type = "number", Nilable = false },
				{ Name = "channelID", Type = "number", Nilable = false },
				{ Name = "speakingEnergy", Type = "number", Nilable = false },
			},
		},
		{
			Name = "VoiceChatChannelMemberGuidUpdated",
			Type = "Event",
			LiteralName = "VOICE_CHAT_CHANNEL_MEMBER_GUID_UPDATED",
			Payload =
			{
				{ Name = "memberID", Type = "number", Nilable = false },
				{ Name = "channelID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "VoiceChatChannelMemberMuteForAllChanged",
			Type = "Event",
			LiteralName = "VOICE_CHAT_CHANNEL_MEMBER_MUTE_FOR_ALL_CHANGED",
			Payload =
			{
				{ Name = "memberID", Type = "number", Nilable = false },
				{ Name = "channelID", Type = "number", Nilable = false },
				{ Name = "isMutedForAll", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "VoiceChatChannelMemberMuteForMeChanged",
			Type = "Event",
			LiteralName = "VOICE_CHAT_CHANNEL_MEMBER_MUTE_FOR_ME_CHANGED",
			Payload =
			{
				{ Name = "memberID", Type = "number", Nilable = false },
				{ Name = "channelID", Type = "number", Nilable = false },
				{ Name = "isMutedForMe", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "VoiceChatChannelMemberRemoved",
			Type = "Event",
			LiteralName = "VOICE_CHAT_CHANNEL_MEMBER_REMOVED",
			Payload =
			{
				{ Name = "memberID", Type = "number", Nilable = false },
				{ Name = "channelID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "VoiceChatChannelMemberSilencedChanged",
			Type = "Event",
			LiteralName = "VOICE_CHAT_CHANNEL_MEMBER_SILENCED_CHANGED",
			Payload =
			{
				{ Name = "memberID", Type = "number", Nilable = false },
				{ Name = "channelID", Type = "number", Nilable = false },
				{ Name = "isSilenced", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "VoiceChatChannelMemberSpeakingStateChanged",
			Type = "Event",
			LiteralName = "VOICE_CHAT_CHANNEL_MEMBER_SPEAKING_STATE_CHANGED",
			Payload =
			{
				{ Name = "memberID", Type = "number", Nilable = false },
				{ Name = "channelID", Type = "number", Nilable = false },
				{ Name = "isSpeaking", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "VoiceChatChannelMemberSttMessage",
			Type = "Event",
			LiteralName = "VOICE_CHAT_CHANNEL_MEMBER_STT_MESSAGE",
			Payload =
			{
				{ Name = "memberID", Type = "number", Nilable = false },
				{ Name = "channelID", Type = "number", Nilable = false },
				{ Name = "message", Type = "string", Nilable = false },
				{ Name = "language", Type = "string", Nilable = false },
			},
		},
		{
			Name = "VoiceChatChannelMemberVolumeChanged",
			Type = "Event",
			LiteralName = "VOICE_CHAT_CHANNEL_MEMBER_VOLUME_CHANGED",
			Payload =
			{
				{ Name = "memberID", Type = "number", Nilable = false },
				{ Name = "channelID", Type = "number", Nilable = false },
				{ Name = "volume", Type = "number", Nilable = false },
			},
		},
		{
			Name = "VoiceChatChannelMuteStateChanged",
			Type = "Event",
			LiteralName = "VOICE_CHAT_CHANNEL_MUTE_STATE_CHANGED",
			Payload =
			{
				{ Name = "channelID", Type = "number", Nilable = false },
				{ Name = "isMuted", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "VoiceChatChannelPttChanged",
			Type = "Event",
			LiteralName = "VOICE_CHAT_CHANNEL_PTT_CHANGED",
			Payload =
			{
				{ Name = "channelID", Type = "number", Nilable = false },
				{ Name = "pushToTalkSetting", Type = "string", Nilable = false },
			},
		},
		{
			Name = "VoiceChatChannelRemoved",
			Type = "Event",
			LiteralName = "VOICE_CHAT_CHANNEL_REMOVED",
			Payload =
			{
				{ Name = "channelID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "VoiceChatChannelTranscribingChanged",
			Type = "Event",
			LiteralName = "VOICE_CHAT_CHANNEL_TRANSCRIBING_CHANGED",
			Payload =
			{
				{ Name = "channelID", Type = "number", Nilable = false },
				{ Name = "isTranscribing", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "VoiceChatChannelTransmitChanged",
			Type = "Event",
			LiteralName = "VOICE_CHAT_CHANNEL_TRANSMIT_CHANGED",
			Payload =
			{
				{ Name = "channelID", Type = "number", Nilable = false },
				{ Name = "isTransmitting", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "VoiceChatChannelVolumeChanged",
			Type = "Event",
			LiteralName = "VOICE_CHAT_CHANNEL_VOLUME_CHANGED",
			Payload =
			{
				{ Name = "channelID", Type = "number", Nilable = false },
				{ Name = "volume", Type = "number", Nilable = false },
			},
		},
		{
			Name = "VoiceChatCommunicationModeChanged",
			Type = "Event",
			LiteralName = "VOICE_CHAT_COMMUNICATION_MODE_CHANGED",
			Payload =
			{
				{ Name = "communicationMode", Type = "CommunicationMode", Nilable = false },
			},
		},
		{
			Name = "VoiceChatConnectionSuccess",
			Type = "Event",
			LiteralName = "VOICE_CHAT_CONNECTION_SUCCESS",
		},
		{
			Name = "VoiceChatDeafenedChanged",
			Type = "Event",
			LiteralName = "VOICE_CHAT_DEAFENED_CHANGED",
			Payload =
			{
				{ Name = "isDeafened", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "VoiceChatError",
			Type = "Event",
			LiteralName = "VOICE_CHAT_ERROR",
			Payload =
			{
				{ Name = "platformCode", Type = "number", Nilable = false },
				{ Name = "statusCode", Type = "VoiceChatStatusCode", Nilable = false },
			},
		},
		{
			Name = "VoiceChatInputDevicesUpdated",
			Type = "Event",
			LiteralName = "VOICE_CHAT_INPUT_DEVICES_UPDATED",
		},
		{
			Name = "VoiceChatLogin",
			Type = "Event",
			LiteralName = "VOICE_CHAT_LOGIN",
			Payload =
			{
				{ Name = "status", Type = "VoiceChatStatusCode", Nilable = false },
			},
		},
		{
			Name = "VoiceChatLogout",
			Type = "Event",
			LiteralName = "VOICE_CHAT_LOGOUT",
			Payload =
			{
				{ Name = "status", Type = "VoiceChatStatusCode", Nilable = false },
			},
		},
		{
			Name = "VoiceChatMutedChanged",
			Type = "Event",
			LiteralName = "VOICE_CHAT_MUTED_CHANGED",
			Payload =
			{
				{ Name = "isMuted", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "VoiceChatOutputDevicesUpdated",
			Type = "Event",
			LiteralName = "VOICE_CHAT_OUTPUT_DEVICES_UPDATED",
		},
		{
			Name = "VoiceChatPendingChannelJoinState",
			Type = "Event",
			LiteralName = "VOICE_CHAT_PENDING_CHANNEL_JOIN_STATE",
			Payload =
			{
				{ Name = "channelType", Type = "ChatChannelType", Nilable = false },
				{ Name = "clubId", Type = "string", Nilable = true },
				{ Name = "streamId", Type = "string", Nilable = true },
				{ Name = "pendingJoin", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "VoiceChatPttButtonPressedStateChanged",
			Type = "Event",
			LiteralName = "VOICE_CHAT_PTT_BUTTON_PRESSED_STATE_CHANGED",
			Payload =
			{
				{ Name = "isPressed", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "VoiceChatSilencedChanged",
			Type = "Event",
			LiteralName = "VOICE_CHAT_SILENCED_CHANGED",
			Payload =
			{
				{ Name = "isSilenced", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "VoiceChatSpeakForMeActiveStatusUpdated",
			Type = "Event",
			LiteralName = "VOICE_CHAT_SPEAK_FOR_ME_ACTIVE_STATUS_UPDATED",
		},
		{
			Name = "VoiceChatSpeakForMeFeatureStatusUpdated",
			Type = "Event",
			LiteralName = "VOICE_CHAT_SPEAK_FOR_ME_FEATURE_STATUS_UPDATED",
		},
		{
			Name = "VoiceChatTtsPlaybackFailed",
			Type = "Event",
			LiteralName = "VOICE_CHAT_TTS_PLAYBACK_FAILED",
			Payload =
			{
				{ Name = "status", Type = "VoiceTtsStatusCode", Nilable = false },
				{ Name = "utteranceID", Type = "number", Nilable = false },
				{ Name = "destination", Type = "VoiceTtsDestination", Nilable = false },
			},
		},
		{
			Name = "VoiceChatTtsPlaybackFinished",
			Type = "Event",
			LiteralName = "VOICE_CHAT_TTS_PLAYBACK_FINISHED",
			Payload =
			{
				{ Name = "numConsumers", Type = "number", Nilable = false },
				{ Name = "utteranceID", Type = "number", Nilable = false },
				{ Name = "destination", Type = "VoiceTtsDestination", Nilable = false },
			},
		},
		{
			Name = "VoiceChatTtsPlaybackStarted",
			Type = "Event",
			LiteralName = "VOICE_CHAT_TTS_PLAYBACK_STARTED",
			Payload =
			{
				{ Name = "numConsumers", Type = "number", Nilable = false },
				{ Name = "utteranceID", Type = "number", Nilable = false },
				{ Name = "durationMS", Type = "number", Nilable = false },
				{ Name = "destination", Type = "VoiceTtsDestination", Nilable = false },
			},
		},
		{
			Name = "VoiceChatTtsSpeakTextUpdate",
			Type = "Event",
			LiteralName = "VOICE_CHAT_TTS_SPEAK_TEXT_UPDATE",
			Payload =
			{
				{ Name = "status", Type = "VoiceTtsStatusCode", Nilable = false },
				{ Name = "utteranceID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "VoiceChatTtsVoicesUpdate",
			Type = "Event",
			LiteralName = "VOICE_CHAT_TTS_VOICES_UPDATE",
		},
		{
			Name = "VoiceChatVadSettingsUpdated",
			Type = "Event",
			LiteralName = "VOICE_CHAT_VAD_SETTINGS_UPDATED",
		},
	},

	Tables =
	{
		{
			Name = "CommunicationMode",
			Type = "Enumeration",
			NumValues = 2,
			MinValue = 0,
			MaxValue = 1,
			Fields =
			{
				{ Name = "PushToTalk", Type = "CommunicationMode", EnumValue = 0 },
				{ Name = "OpenMic", Type = "CommunicationMode", EnumValue = 1 },
			},
		},
		{
			Name = "VoiceChannelErrorReason",
			Type = "Enumeration",
			NumValues = 2,
			MinValue = 0,
			MaxValue = 1,
			Fields =
			{
				{ Name = "Unknown", Type = "VoiceChannelErrorReason", EnumValue = 0 },
				{ Name = "IsBattleNetChannel", Type = "VoiceChannelErrorReason", EnumValue = 1 },
			},
		},
		{
			Name = "VoiceChatStatusCode",
			Type = "Enumeration",
			NumValues = 25,
			MinValue = 0,
			MaxValue = 24,
			Fields =
			{
				{ Name = "Success", Type = "VoiceChatStatusCode", EnumValue = 0 },
				{ Name = "OperationPending", Type = "VoiceChatStatusCode", EnumValue = 1 },
				{ Name = "TooManyRequests", Type = "VoiceChatStatusCode", EnumValue = 2 },
				{ Name = "LoginProhibited", Type = "VoiceChatStatusCode", EnumValue = 3 },
				{ Name = "ClientNotInitialized", Type = "VoiceChatStatusCode", EnumValue = 4 },
				{ Name = "ClientNotLoggedIn", Type = "VoiceChatStatusCode", EnumValue = 5 },
				{ Name = "ClientAlreadyLoggedIn", Type = "VoiceChatStatusCode", EnumValue = 6 },
				{ Name = "ChannelNameTooShort", Type = "VoiceChatStatusCode", EnumValue = 7 },
				{ Name = "ChannelNameTooLong", Type = "VoiceChatStatusCode", EnumValue = 8 },
				{ Name = "ChannelAlreadyExists", Type = "VoiceChatStatusCode", EnumValue = 9 },
				{ Name = "AlreadyInChannel", Type = "VoiceChatStatusCode", EnumValue = 10 },
				{ Name = "TargetNotFound", Type = "VoiceChatStatusCode", EnumValue = 11 },
				{ Name = "Failure", Type = "VoiceChatStatusCode", EnumValue = 12 },
				{ Name = "ServiceLost", Type = "VoiceChatStatusCode", EnumValue = 13 },
				{ Name = "UnableToLaunchProxy", Type = "VoiceChatStatusCode", EnumValue = 14 },
				{ Name = "ProxyConnectionTimeOut", Type = "VoiceChatStatusCode", EnumValue = 15 },
				{ Name = "ProxyConnectionUnableToConnect", Type = "VoiceChatStatusCode", EnumValue = 16 },
				{ Name = "ProxyConnectionUnexpectedDisconnect", Type = "VoiceChatStatusCode", EnumValue = 17 },
				{ Name = "Disabled", Type = "VoiceChatStatusCode", EnumValue = 18 },
				{ Name = "UnsupportedChatChannelType", Type = "VoiceChatStatusCode", EnumValue = 19 },
				{ Name = "InvalidCommunityStream", Type = "VoiceChatStatusCode", EnumValue = 20 },
				{ Name = "PlayerSilenced", Type = "VoiceChatStatusCode", EnumValue = 21 },
				{ Name = "PlayerVoiceChatParentalDisabled", Type = "VoiceChatStatusCode", EnumValue = 22 },
				{ Name = "InvalidInputDevice", Type = "VoiceChatStatusCode", EnumValue = 23 },
				{ Name = "InvalidOutputDevice", Type = "VoiceChatStatusCode", EnumValue = 24 },
			},
		},
		{
			Name = "VoiceTtsDestination",
			Type = "Enumeration",
			NumValues = 7,
			MinValue = 0,
			MaxValue = 6,
			Fields =
			{
				{ Name = "RemoteTransmission", Type = "VoiceTtsDestination", EnumValue = 0 },
				{ Name = "LocalPlayback", Type = "VoiceTtsDestination", EnumValue = 1 },
				{ Name = "RemoteTransmissionWithLocalPlayback", Type = "VoiceTtsDestination", EnumValue = 2 },
				{ Name = "QueuedRemoteTransmission", Type = "VoiceTtsDestination", EnumValue = 3 },
				{ Name = "QueuedLocalPlayback", Type = "VoiceTtsDestination", EnumValue = 4 },
				{ Name = "QueuedRemoteTransmissionWithLocalPlayback", Type = "VoiceTtsDestination", EnumValue = 5 },
				{ Name = "ScreenReader", Type = "VoiceTtsDestination", EnumValue = 6 },
			},
		},
		{
			Name = "VoiceTtsStatusCode",
			Type = "Enumeration",
			NumValues = 14,
			MinValue = 0,
			MaxValue = 13,
			Fields =
			{
				{ Name = "Success", Type = "VoiceTtsStatusCode", EnumValue = 0 },
				{ Name = "InvalidEngineType", Type = "VoiceTtsStatusCode", EnumValue = 1 },
				{ Name = "EngineAllocationFailed", Type = "VoiceTtsStatusCode", EnumValue = 2 },
				{ Name = "NotSupported", Type = "VoiceTtsStatusCode", EnumValue = 3 },
				{ Name = "MaxCharactersExceeded", Type = "VoiceTtsStatusCode", EnumValue = 4 },
				{ Name = "UtteranceBelowMinimumDuration", Type = "VoiceTtsStatusCode", EnumValue = 5 },
				{ Name = "InputTextEnqueued", Type = "VoiceTtsStatusCode", EnumValue = 6 },
				{ Name = "SdkNotInitialized", Type = "VoiceTtsStatusCode", EnumValue = 7 },
				{ Name = "DestinationQueueFull", Type = "VoiceTtsStatusCode", EnumValue = 8 },
				{ Name = "EnqueueNotNecessary", Type = "VoiceTtsStatusCode", EnumValue = 9 },
				{ Name = "UtteranceNotFound", Type = "VoiceTtsStatusCode", EnumValue = 10 },
				{ Name = "ManagerNotFound", Type = "VoiceTtsStatusCode", EnumValue = 11 },
				{ Name = "InvalidArgument", Type = "VoiceTtsStatusCode", EnumValue = 12 },
				{ Name = "InternalError", Type = "VoiceTtsStatusCode", EnumValue = 13 },
			},
		},
		{
			Name = "VoiceAudioDevice",
			Type = "Structure",
			Fields =
			{
				{ Name = "deviceID", Type = "string", Nilable = false },
				{ Name = "displayName", Type = "string", Nilable = false },
				{ Name = "isActive", Type = "bool", Nilable = false },
				{ Name = "isSystemDefault", Type = "bool", Nilable = false },
				{ Name = "isCommsDefault", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "VoiceChatChannel",
			Type = "Structure",
			Fields =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "channelID", Type = "number", Nilable = false },
				{ Name = "channelType", Type = "ChatChannelType", Nilable = false },
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "streamId", Type = "string", Nilable = false },
				{ Name = "volume", Type = "number", Nilable = false },
				{ Name = "isActive", Type = "bool", Nilable = false },
				{ Name = "isMuted", Type = "bool", Nilable = false },
				{ Name = "isTransmitting", Type = "bool", Nilable = false },
				{ Name = "isTranscribing", Type = "bool", Nilable = false },
				{ Name = "members", Type = "table", InnerType = "VoiceChatMember", Nilable = false },
			},
		},
		{
			Name = "VoiceChatMember",
			Type = "Structure",
			Fields =
			{
				{ Name = "energy", Type = "number", Nilable = false },
				{ Name = "memberID", Type = "number", Nilable = false },
				{ Name = "isActive", Type = "bool", Nilable = false },
				{ Name = "isSpeaking", Type = "bool", Nilable = false },
				{ Name = "isMutedForAll", Type = "bool", Nilable = false },
				{ Name = "isSilenced", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "VoiceChatProcess",
			Type = "Structure",
			Fields =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "channels", Type = "table", InnerType = "VoiceChatChannel", Nilable = false },
			},
		},
		{
			Name = "VoiceTtsVoiceType",
			Type = "Structure",
			Fields =
			{
				{ Name = "voiceID", Type = "number", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "VoidStorageInfo",
	Type = "System",
	Namespace = "C_VoidStorageInfo",

	Functions =
	{
	},

	Events =
	{
		{
			Name = "VoidDepositWarning",
			Type = "Event",
			LiteralName = "VOID_DEPOSIT_WARNING",
			Payload =
			{
				{ Name = "slot", Type = "number", Nilable = false },
				{ Name = "link", Type = "string", Nilable = false },
			},
		},
		{
			Name = "VoidStorageClose",
			Type = "Event",
			LiteralName = "VOID_STORAGE_CLOSE",
		},
		{
			Name = "VoidStorageContentsUpdate",
			Type = "Event",
			LiteralName = "VOID_STORAGE_CONTENTS_UPDATE",
		},
		{
			Name = "VoidStorageDepositUpdate",
			Type = "Event",
			LiteralName = "VOID_STORAGE_DEPOSIT_UPDATE",
			Payload =
			{
				{ Name = "slot", Type = "number", Nilable = false },
			},
		},
		{
			Name = "VoidStorageOpen",
			Type = "Event",
			LiteralName = "VOID_STORAGE_OPEN",
		},
		{
			Name = "VoidStorageUpdate",
			Type = "Event",
			LiteralName = "VOID_STORAGE_UPDATE",
		},
		{
			Name = "VoidTransferDone",
			Type = "Event",
			LiteralName = "VOID_TRANSFER_DONE",
		},
		{
			Name = "VoidTransferSuccess",
			Type = "Event",
			LiteralName = "VOID_TRANSFER_SUCCESS",
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "WorldStateInfo",
	Type = "System",
	Namespace = "C_WorldStateInfo",

	Functions =
	{
	},

	Events =
	{
		{
			Name = "StartTimer",
			Type = "Event",
			LiteralName = "START_TIMER",
			Payload =
			{
				{ Name = "timerType", Type = "number", Nilable = false },
				{ Name = "timeRemaining", Type = "number", Nilable = false },
				{ Name = "totalTime", Type = "number", Nilable = false },
			},
		},
		{
			Name = "WorldStateTimerStart",
			Type = "Event",
			LiteralName = "WORLD_STATE_TIMER_START",
			Payload =
			{
				{ Name = "timerID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "WorldStateTimerStop",
			Type = "Event",
			LiteralName = "WORLD_STATE_TIMER_STOP",
			Payload =
			{
				{ Name = "timerID", Type = "number", Nilable = false },
			},
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "WowEntitlementInfo",
	Type = "System",
	Namespace = "C_WowEntitlementInfo",

	Functions =
	{
	},

	Events =
	{
		{
			Name = "EntitlementDelivered",
			Type = "Event",
			LiteralName = "ENTITLEMENT_DELIVERED",
			Payload =
			{
				{ Name = "entitlementType", Type = "WoWEntitlementType", Nilable = false },
				{ Name = "textureID", Type = "number", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "payloadID", Type = "number", Nilable = true },
				{ Name = "showFancyToast", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "RafEntitlementDelivered",
			Type = "Event",
			LiteralName = "RAF_ENTITLEMENT_DELIVERED",
			Payload =
			{
				{ Name = "entitlementType", Type = "WoWEntitlementType", Nilable = false },
				{ Name = "textureID", Type = "number", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "payloadID", Type = "number", Nilable = true },
				{ Name = "showFancyToast", Type = "bool", Nilable = false },
			},
		},
	},

	Tables =
	{
		{
			Name = "WoWEntitlementType",
			Type = "Enumeration",
			NumValues = 10,
			MinValue = 0,
			MaxValue = 9,
			Fields =
			{
				{ Name = "Item", Type = "WoWEntitlementType", EnumValue = 0 },
				{ Name = "Mount", Type = "WoWEntitlementType", EnumValue = 1 },
				{ Name = "Battlepet", Type = "WoWEntitlementType", EnumValue = 2 },
				{ Name = "Toy", Type = "WoWEntitlementType", EnumValue = 3 },
				{ Name = "Appearance", Type = "WoWEntitlementType", EnumValue = 4 },
				{ Name = "AppearanceSet", Type = "WoWEntitlementType", EnumValue = 5 },
				{ Name = "GameTime", Type = "WoWEntitlementType", EnumValue = 6 },
				{ Name = "Title", Type = "WoWEntitlementType", EnumValue = 7 },
				{ Name = "Illusion", Type = "WoWEntitlementType", EnumValue = 8 },
				{ Name = "Invalid", Type = "WoWEntitlementType", EnumValue = 9 },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "WowTokenUI",
	Type = "System",
	Namespace = "C_WowTokenUI",

	Functions =
	{
		{
			Name = "StartTokenSell",
			Type = "Function",

			Arguments =
			{
				{ Name = "tokenGUID", Type = "string", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "TokenAuctionSold",
			Type = "Event",
			LiteralName = "TOKEN_AUCTION_SOLD",
		},
		{
			Name = "TokenBuyConfirmRequired",
			Type = "Event",
			LiteralName = "TOKEN_BUY_CONFIRM_REQUIRED",
		},
		{
			Name = "TokenBuyResult",
			Type = "Event",
			LiteralName = "TOKEN_BUY_RESULT",
			Payload =
			{
				{ Name = "result", Type = "number", Nilable = false },
			},
		},
		{
			Name = "TokenCanVeteranBuyUpdate",
			Type = "Event",
			LiteralName = "TOKEN_CAN_VETERAN_BUY_UPDATE",
			Payload =
			{
				{ Name = "result", Type = "number", Nilable = false },
			},
		},
		{
			Name = "TokenDistributionsUpdated",
			Type = "Event",
			LiteralName = "TOKEN_DISTRIBUTIONS_UPDATED",
			Payload =
			{
				{ Name = "result", Type = "number", Nilable = false },
			},
		},
		{
			Name = "TokenMarketPriceUpdated",
			Type = "Event",
			LiteralName = "TOKEN_MARKET_PRICE_UPDATED",
			Payload =
			{
				{ Name = "result", Type = "number", Nilable = false },
			},
		},
		{
			Name = "TokenRedeemBalanceUpdated",
			Type = "Event",
			LiteralName = "TOKEN_REDEEM_BALANCE_UPDATED",
		},
		{
			Name = "TokenRedeemConfirmRequired",
			Type = "Event",
			LiteralName = "TOKEN_REDEEM_CONFIRM_REQUIRED",
			Payload =
			{
				{ Name = "choiceType", Type = "number", Nilable = false },
			},
		},
		{
			Name = "TokenRedeemFrameShow",
			Type = "Event",
			LiteralName = "TOKEN_REDEEM_FRAME_SHOW",
		},
		{
			Name = "TokenRedeemGameTimeUpdated",
			Type = "Event",
			LiteralName = "TOKEN_REDEEM_GAME_TIME_UPDATED",
		},
		{
			Name = "TokenRedeemResult",
			Type = "Event",
			LiteralName = "TOKEN_REDEEM_RESULT",
			Payload =
			{
				{ Name = "result", Type = "number", Nilable = false },
				{ Name = "choiceType", Type = "number", Nilable = false },
			},
		},
		{
			Name = "TokenSellConfirmRequired",
			Type = "Event",
			LiteralName = "TOKEN_SELL_CONFIRM_REQUIRED",
		},
		{
			Name = "TokenSellConfirmed",
			Type = "Event",
			LiteralName = "TOKEN_SELL_CONFIRMED",
		},
		{
			Name = "TokenSellResult",
			Type = "Event",
			LiteralName = "TOKEN_SELL_RESULT",
			Payload =
			{
				{ Name = "result", Type = "number", Nilable = false },
			},
		},
		{
			Name = "TokenStatusChanged",
			Type = "Event",
			LiteralName = "TOKEN_STATUS_CHANGED",
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "XMLUtil",
	Type = "System",
	Namespace = "C_XMLUtil",

	Functions =
	{
		{
			Name = "GetTemplateInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "name", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "info", Type = "XMLTemplateInfo", Nilable = false },
			},
		},
		{
			Name = "GetTemplates",
			Type = "Function",

			Returns =
			{
				{ Name = "templates", Type = "table", InnerType = "XMLTemplateListInfo", Nilable = false },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
		{
			Name = "XMLTemplateInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "type", Type = "string", Nilable = false },
				{ Name = "width", Type = "number", Nilable = false },
				{ Name = "height", Type = "number", Nilable = false },
				{ Name = "keyValues", Type = "table", InnerType = "XMLTemplateKeyValue", Nilable = false },
				{ Name = "inherits", Type = "string", Nilable = true },
			},
		},
		{
			Name = "XMLTemplateKeyValue",
			Type = "Structure",
			Fields =
			{
				{ Name = "key", Type = "string", Nilable = false },
				{ Name = "keyType", Type = "string", Nilable = false },
				{ Name = "type", Type = "string", Nilable = false },
				{ Name = "value", Type = "string", Nilable = false },
			},
		},
		{
			Name = "XMLTemplateListInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "type", Type = "string", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "AlliedRaces",
	Type = "System",
	Namespace = "C_AlliedRaces",

	Functions =
	{
		{
			Name = "ClearAlliedRaceDetailsGiver",
			Type = "Function",
		},
		{
			Name = "GetAllRacialAbilitiesFromID",
			Type = "Function",

			Arguments =
			{
				{ Name = "raceID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "allDisplayInfo", Type = "table", InnerType = "AlliedRaceRacialAbility", Nilable = false },
			},
		},
		{
			Name = "GetRaceInfoByID",
			Type = "Function",

			Arguments =
			{
				{ Name = "raceID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "info", Type = "AlliedRaceInfo", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "AlliedRaceClose",
			Type = "Event",
			LiteralName = "ALLIED_RACE_CLOSE",
		},
		{
			Name = "AlliedRaceOpen",
			Type = "Event",
			LiteralName = "ALLIED_RACE_OPEN",
			Payload =
			{
				{ Name = "raceID", Type = "number", Nilable = false },
			},
		},
	},

	Tables =
	{
		{
			Name = "AlliedRaceInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "raceID", Type = "number", Nilable = false },
				{ Name = "maleModelID", Type = "number", Nilable = false },
				{ Name = "femaleModelID", Type = "number", Nilable = false },
				{ Name = "achievementIds", Type = "table", InnerType = "number", Nilable = false },
				{ Name = "maleName", Type = "string", Nilable = false },
				{ Name = "femaleName", Type = "string", Nilable = false },
				{ Name = "description", Type = "string", Nilable = false },
				{ Name = "raceFileString", Type = "string", Nilable = false },
				{ Name = "crestAtlas", Type = "string", Nilable = false },
				{ Name = "modelBackgroundAtlas", Type = "string", Nilable = false },
				{ Name = "bannerColor", Type = "table", Mixin = "ColorMixin", Nilable = false },
			},
		},
		{
			Name = "AlliedRaceRacialAbility",
			Type = "Structure",
			Fields =
			{
				{ Name = "description", Type = "string", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "icon", Type = "number", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "AnimaDiversionInfo",
	Type = "System",
	Namespace = "C_AnimaDiversion",

	Functions =
	{
		{
			Name = "CloseUI",
			Type = "Function",
		},
		{
			Name = "GetAnimaDiversionNodes",
			Type = "Function",

			Returns =
			{
				{ Name = "animaNodes", Type = "table", InnerType = "AnimaDiversionNodeInfo", Nilable = false },
			},
		},
		{
			Name = "GetOriginPosition",
			Type = "Function",

			Returns =
			{
				{ Name = "normalizedPosition", Type = "table", Mixin = "Vector2DMixin", Nilable = true },
			},
		},
		{
			Name = "GetReinforceProgress",
			Type = "Function",

			Returns =
			{
				{ Name = "progress", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetTextureKit",
			Type = "Function",

			Returns =
			{
				{ Name = "textureKit", Type = "string", Nilable = false },
			},
		},
		{
			Name = "OpenAnimaDiversionUI",
			Type = "Function",
		},
		{
			Name = "SelectAnimaNode",
			Type = "Function",

			Arguments =
			{
				{ Name = "talentID", Type = "number", Nilable = false },
				{ Name = "temporary", Type = "bool", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "AnimaDiversionClose",
			Type = "Event",
			LiteralName = "ANIMA_DIVERSION_CLOSE",
		},
		{
			Name = "AnimaDiversionOpen",
			Type = "Event",
			LiteralName = "ANIMA_DIVERSION_OPEN",
			Payload =
			{
				{ Name = "info", Type = "AnimaDiversionFrameInfo", Nilable = false },
			},
		},
		{
			Name = "AnimaDiversionTalentUpdated",
			Type = "Event",
			LiteralName = "ANIMA_DIVERSION_TALENT_UPDATED",
		},
	},

	Tables =
	{
		{
			Name = "AnimaDiversionNodeState",
			Type = "Enumeration",
			NumValues = 5,
			MinValue = 0,
			MaxValue = 4,
			Fields =
			{
				{ Name = "Unavailable", Type = "AnimaDiversionNodeState", EnumValue = 0 },
				{ Name = "Available", Type = "AnimaDiversionNodeState", EnumValue = 1 },
				{ Name = "SelectedTemporary", Type = "AnimaDiversionNodeState", EnumValue = 2 },
				{ Name = "SelectedPermanent", Type = "AnimaDiversionNodeState", EnumValue = 3 },
				{ Name = "Cooldown", Type = "AnimaDiversionNodeState", EnumValue = 4 },
			},
		},
		{
			Name = "AnimaDiversionCostInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "currencyID", Type = "number", Nilable = false },
				{ Name = "quantity", Type = "number", Nilable = false },
			},
		},
		{
			Name = "AnimaDiversionFrameInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "textureKit", Type = "string", Nilable = false },
				{ Name = "title", Type = "string", Nilable = false },
				{ Name = "mapID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "AnimaDiversionNodeInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "talentID", Type = "number", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "description", Type = "string", Nilable = false },
				{ Name = "costs", Type = "table", InnerType = "AnimaDiversionCostInfo", Nilable = false },
				{ Name = "currencyID", Type = "number", Nilable = false },
				{ Name = "icon", Type = "number", Nilable = false },
				{ Name = "normalizedPosition", Type = "table", Mixin = "Vector2DMixin", Nilable = false },
				{ Name = "state", Type = "AnimaDiversionNodeState", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "ArdenwealdGardening",
	Type = "System",
	Namespace = "C_ArdenwealdGardening",

	Functions =
	{
		{
			Name = "GetGardenData",
			Type = "Function",

			Returns =
			{
				{ Name = "data", Type = "ArdenwealdGardenData", Nilable = false },
			},
		},
		{
			Name = "IsGardenAccessible",
			Type = "Function",

			Returns =
			{
				{ Name = "accessible", Type = "bool", Nilable = false },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
		{
			Name = "ArdenwealdGardenData",
			Type = "Structure",
			Fields =
			{
				{ Name = "active", Type = "number", Nilable = false },
				{ Name = "ready", Type = "number", Nilable = false },
				{ Name = "remainingSeconds", Type = "number", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "ArtifactUI",
	Type = "System",
	Namespace = "C_ArtifactUI",

	Functions =
	{
		{
			Name = "AddPower",
			Type = "Function",

			Arguments =
			{
				{ Name = "powerID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "success", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ApplyCursorRelicToSlot",
			Type = "Function",

			Arguments =
			{
				{ Name = "relicSlotIndex", Type = "number", Nilable = false },
			},
		},
		{
			Name = "CanApplyArtifactRelic",
			Type = "Function",

			Arguments =
			{
				{ Name = "relicItemID", Type = "number", Nilable = false },
				{ Name = "onlyUnlocked", Type = "bool", Nilable = false },
			},

			Returns =
			{
				{ Name = "canApply", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "CanApplyCursorRelicToSlot",
			Type = "Function",

			Arguments =
			{
				{ Name = "relicSlotIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "canApply", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "CanApplyRelicItemIDToEquippedArtifactSlot",
			Type = "Function",

			Arguments =
			{
				{ Name = "relicItemID", Type = "number", Nilable = false },
				{ Name = "relicSlotIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "canApply", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "CanApplyRelicItemIDToSlot",
			Type = "Function",

			Arguments =
			{
				{ Name = "relicItemID", Type = "number", Nilable = false },
				{ Name = "relicSlotIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "canApply", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "CheckRespecNPC",
			Type = "Function",

			Returns =
			{
				{ Name = "canRespec", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "Clear",
			Type = "Function",
		},
		{
			Name = "ClearForgeCamera",
			Type = "Function",
		},
		{
			Name = "ConfirmRespec",
			Type = "Function",
		},
		{
			Name = "DoesEquippedArtifactHaveAnyRelicsSlotted",
			Type = "Function",

			Returns =
			{
				{ Name = "hasAnyRelicsSlotted", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetAppearanceInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "appearanceSetIndex", Type = "number", Nilable = false },
				{ Name = "appearanceIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "artifactAppearanceID", Type = "number", Nilable = false },
				{ Name = "appearanceName", Type = "string", Nilable = false },
				{ Name = "displayIndex", Type = "number", Nilable = false },
				{ Name = "unlocked", Type = "bool", Nilable = false },
				{ Name = "failureDescription", Type = "string", Nilable = true },
				{ Name = "uiCameraID", Type = "number", Nilable = false },
				{ Name = "altHandCameraID", Type = "number", Nilable = true },
				{ Name = "swatchColorR", Type = "number", Nilable = false },
				{ Name = "swatchColorG", Type = "number", Nilable = false },
				{ Name = "swatchColorB", Type = "number", Nilable = false },
				{ Name = "modelOpacity", Type = "number", Nilable = false },
				{ Name = "modelSaturation", Type = "number", Nilable = false },
				{ Name = "obtainable", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetAppearanceInfoByID",
			Type = "Function",

			Arguments =
			{
				{ Name = "artifactAppearanceID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "artifactAppearanceSetID", Type = "number", Nilable = false },
				{ Name = "artifactAppearanceID", Type = "number", Nilable = false },
				{ Name = "appearanceName", Type = "string", Nilable = false },
				{ Name = "displayIndex", Type = "number", Nilable = false },
				{ Name = "unlocked", Type = "bool", Nilable = false },
				{ Name = "failureDescription", Type = "string", Nilable = true },
				{ Name = "uiCameraID", Type = "number", Nilable = false },
				{ Name = "altHandCameraID", Type = "number", Nilable = true },
				{ Name = "swatchColorR", Type = "number", Nilable = false },
				{ Name = "swatchColorG", Type = "number", Nilable = false },
				{ Name = "swatchColorB", Type = "number", Nilable = false },
				{ Name = "modelOpacity", Type = "number", Nilable = false },
				{ Name = "modelSaturation", Type = "number", Nilable = false },
				{ Name = "obtainable", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetAppearanceSetInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "appearanceSetIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "artifactAppearanceSetID", Type = "number", Nilable = false },
				{ Name = "appearanceSetName", Type = "string", Nilable = false },
				{ Name = "appearanceSetDescription", Type = "string", Nilable = false },
				{ Name = "numAppearances", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetArtifactArtInfo",
			Type = "Function",

			Returns =
			{
				{ Name = "artifactArtInfo", Type = "ArtifactArtInfo", Nilable = false },
			},
		},
		{
			Name = "GetArtifactInfo",
			Type = "Function",

			Returns =
			{
				{ Name = "itemID", Type = "number", Nilable = false },
				{ Name = "altItemID", Type = "number", Nilable = true },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "icon", Type = "number", Nilable = false },
				{ Name = "xp", Type = "number", Nilable = false },
				{ Name = "pointsSpent", Type = "number", Nilable = false },
				{ Name = "quality", Type = "number", Nilable = false },
				{ Name = "artifactAppearanceID", Type = "number", Nilable = false },
				{ Name = "appearanceModID", Type = "number", Nilable = false },
				{ Name = "itemAppearanceID", Type = "number", Nilable = true },
				{ Name = "altItemAppearanceID", Type = "number", Nilable = true },
				{ Name = "altOnTop", Type = "bool", Nilable = false },
				{ Name = "tier", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetArtifactItemID",
			Type = "Function",

			Returns =
			{
				{ Name = "itemID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetArtifactTier",
			Type = "Function",

			Returns =
			{
				{ Name = "tier", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetArtifactXPRewardTargetInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "artifactCategoryID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "icon", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetCostForPointAtRank",
			Type = "Function",

			Arguments =
			{
				{ Name = "rank", Type = "number", Nilable = false },
				{ Name = "tier", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "cost", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetEquippedArtifactArtInfo",
			Type = "Function",

			Returns =
			{
				{ Name = "artifactArtInfo", Type = "ArtifactArtInfo", Nilable = false },
			},
		},
		{
			Name = "GetEquippedArtifactInfo",
			Type = "Function",

			Returns =
			{
				{ Name = "itemID", Type = "number", Nilable = false },
				{ Name = "altItemID", Type = "number", Nilable = true },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "icon", Type = "number", Nilable = false },
				{ Name = "xp", Type = "number", Nilable = false },
				{ Name = "pointsSpent", Type = "number", Nilable = false },
				{ Name = "quality", Type = "number", Nilable = false },
				{ Name = "artifactAppearanceID", Type = "number", Nilable = false },
				{ Name = "appearanceModID", Type = "number", Nilable = false },
				{ Name = "itemAppearanceID", Type = "number", Nilable = true },
				{ Name = "altItemAppearanceID", Type = "number", Nilable = true },
				{ Name = "altOnTop", Type = "bool", Nilable = false },
				{ Name = "tier", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetEquippedArtifactItemID",
			Type = "Function",

			Returns =
			{
				{ Name = "itemID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetEquippedArtifactNumRelicSlots",
			Type = "Function",

			Arguments =
			{
				{ Name = "onlyUnlocked", Type = "bool", Nilable = false, Default = false, Documentation = { "If true then only the relic slots that are unlocked will be considered." } },
			},

			Returns =
			{
				{ Name = "numRelicSlots", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetEquippedArtifactRelicInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "relicSlotIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "icon", Type = "number", Nilable = false },
				{ Name = "slotTypeName", Type = "string", Nilable = false, Documentation = { "Matches the socket identifiers used in the socketing system." } },
				{ Name = "link", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetEquippedRelicLockedReason",
			Type = "Function",

			Arguments =
			{
				{ Name = "relicSlotIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "lockedReason", Type = "string", Nilable = true },
			},
		},
		{
			Name = "GetForgeRotation",
			Type = "Function",

			Returns =
			{
				{ Name = "forgeRotationX", Type = "number", Nilable = false },
				{ Name = "forgeRotationY", Type = "number", Nilable = false },
				{ Name = "forgeRotationZ", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetItemLevelIncreaseProvidedByRelic",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemLinkOrID", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "itemIevelIncrease", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetMetaPowerInfo",
			Type = "Function",

			Returns =
			{
				{ Name = "spellID", Type = "number", Nilable = false, StrideIndex = 1 },
				{ Name = "powerCost", Type = "number", Nilable = false, StrideIndex = 2 },
				{ Name = "currentRank", Type = "number", Nilable = false, StrideIndex = 3 },
			},
		},
		{
			Name = "GetNumAppearanceSets",
			Type = "Function",

			Returns =
			{
				{ Name = "numAppearanceSets", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetNumObtainedArtifacts",
			Type = "Function",

			Returns =
			{
				{ Name = "numObtainedArtifacts", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetNumRelicSlots",
			Type = "Function",

			Arguments =
			{
				{ Name = "onlyUnlocked", Type = "bool", Nilable = false, Default = false, Documentation = { "If true then only the relic slots that are unlocked will be considered." } },
			},

			Returns =
			{
				{ Name = "numRelicSlots", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetPointsRemaining",
			Type = "Function",

			Returns =
			{
				{ Name = "pointsRemaining", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetPowerHyperlink",
			Type = "Function",

			Arguments =
			{
				{ Name = "powerID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "link", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetPowerInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "powerID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "powerInfo", Type = "ArtifactPowerInfo", Nilable = false },
			},
		},
		{
			Name = "GetPowerLinks",
			Type = "Function",

			Arguments =
			{
				{ Name = "powerID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "linkingPowerID", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "GetPowers",
			Type = "Function",

			Returns =
			{
				{ Name = "powerID", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "GetPowersAffectedByRelic",
			Type = "Function",

			Arguments =
			{
				{ Name = "relicSlotIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "powerIDs", Type = "number", Nilable = false, StrideIndex = 1 },
			},
		},
		{
			Name = "GetPowersAffectedByRelicItemLink",
			Type = "Function",

			Arguments =
			{
				{ Name = "relicItemInfo", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "powerIDs", Type = "number", Nilable = false, StrideIndex = 1 },
			},
		},
		{
			Name = "GetPreviewAppearance",
			Type = "Function",

			Returns =
			{
				{ Name = "artifactAppearanceID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetRelicInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "relicSlotIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "icon", Type = "number", Nilable = false },
				{ Name = "slotTypeName", Type = "string", Nilable = false, Documentation = { "Matches the socket identifiers used in the socketing system." } },
				{ Name = "link", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetRelicInfoByItemID",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "icon", Type = "number", Nilable = false },
				{ Name = "slotTypeName", Type = "string", Nilable = false, Documentation = { "Matches the socket identifiers used in the socketing system." } },
				{ Name = "link", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetRelicLockedReason",
			Type = "Function",

			Arguments =
			{
				{ Name = "relicSlotIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "lockedReason", Type = "string", Nilable = true },
			},
		},
		{
			Name = "GetRelicSlotType",
			Type = "Function",

			Arguments =
			{
				{ Name = "relicSlotIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "slotTypeName", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetRespecArtifactArtInfo",
			Type = "Function",

			Returns =
			{
				{ Name = "artifactArtInfo", Type = "ArtifactArtInfo", Nilable = false },
			},
		},
		{
			Name = "GetRespecArtifactInfo",
			Type = "Function",

			Returns =
			{
				{ Name = "itemID", Type = "number", Nilable = false },
				{ Name = "altItemID", Type = "number", Nilable = true },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "icon", Type = "number", Nilable = false },
				{ Name = "xp", Type = "number", Nilable = false },
				{ Name = "pointsSpent", Type = "number", Nilable = false },
				{ Name = "quality", Type = "number", Nilable = false },
				{ Name = "artifactAppearanceID", Type = "number", Nilable = false },
				{ Name = "appearanceModID", Type = "number", Nilable = false },
				{ Name = "itemAppearanceID", Type = "number", Nilable = true },
				{ Name = "altItemAppearanceID", Type = "number", Nilable = true },
				{ Name = "altOnTop", Type = "bool", Nilable = false },
				{ Name = "tier", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetRespecCost",
			Type = "Function",

			Returns =
			{
				{ Name = "cost", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetTotalPowerCost",
			Type = "Function",

			Arguments =
			{
				{ Name = "startingTrait", Type = "number", Nilable = false },
				{ Name = "numTraits", Type = "number", Nilable = false },
				{ Name = "artifactTier", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "totalArtifactPowerCost", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetTotalPurchasedRanks",
			Type = "Function",

			Returns =
			{
				{ Name = "totalPurchasedRanks", Type = "number", Nilable = false },
			},
		},
		{
			Name = "IsArtifactDisabled",
			Type = "Function",

			Returns =
			{
				{ Name = "artifactDisabled", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsAtForge",
			Type = "Function",

			Returns =
			{
				{ Name = "isAtForge", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsEquippedArtifactDisabled",
			Type = "Function",

			Returns =
			{
				{ Name = "artifactDisabled", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsEquippedArtifactMaxed",
			Type = "Function",

			Returns =
			{
				{ Name = "artifactMaxed", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsMaxedByRulesOrEffect",
			Type = "Function",

			Returns =
			{
				{ Name = "isEffectivelyMaxed", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsPowerKnown",
			Type = "Function",

			Arguments =
			{
				{ Name = "powerID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "known", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsViewedArtifactEquipped",
			Type = "Function",

			Returns =
			{
				{ Name = "isViewedArtifactEquipped", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetAppearance",
			Type = "Function",

			Arguments =
			{
				{ Name = "artifactAppearanceID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetForgeCamera",
			Type = "Function",
		},
		{
			Name = "SetForgeRotation",
			Type = "Function",

			Arguments =
			{
				{ Name = "forgeRotationX", Type = "number", Nilable = false },
				{ Name = "forgeRotationY", Type = "number", Nilable = false },
				{ Name = "forgeRotationZ", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetPreviewAppearance",
			Type = "Function",
			Documentation = { "Call without an argument to clear the preview." },

			Arguments =
			{
				{ Name = "artifactAppearanceID", Type = "number", Nilable = false, Default = 0 },
			},
		},
		{
			Name = "ShouldSuppressForgeRotation",
			Type = "Function",

			Returns =
			{
				{ Name = "shouldSuppressForgeRotation", Type = "bool", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "ArtifactClose",
			Type = "Event",
			LiteralName = "ARTIFACT_CLOSE",
		},
		{
			Name = "ArtifactEndgameRefund",
			Type = "Event",
			LiteralName = "ARTIFACT_ENDGAME_REFUND",
			Payload =
			{
				{ Name = "numRefundedPowers", Type = "number", Nilable = false },
				{ Name = "refundedTier", Type = "number", Nilable = false },
				{ Name = "bagOrSlotIndex", Type = "number", Nilable = false },
				{ Name = "slotIndex", Type = "number", Nilable = true },
			},
		},
		{
			Name = "ArtifactRelicForgeClose",
			Type = "Event",
			LiteralName = "ARTIFACT_RELIC_FORGE_CLOSE",
		},
		{
			Name = "ArtifactRelicForgePreviewRelicChanged",
			Type = "Event",
			LiteralName = "ARTIFACT_RELIC_FORGE_PREVIEW_RELIC_CHANGED",
		},
		{
			Name = "ArtifactRelicForgeUpdate",
			Type = "Event",
			LiteralName = "ARTIFACT_RELIC_FORGE_UPDATE",
		},
		{
			Name = "ArtifactRelicInfoReceived",
			Type = "Event",
			LiteralName = "ARTIFACT_RELIC_INFO_RECEIVED",
		},
		{
			Name = "ArtifactRespecPrompt",
			Type = "Event",
			LiteralName = "ARTIFACT_RESPEC_PROMPT",
		},
		{
			Name = "ArtifactTierChanged",
			Type = "Event",
			LiteralName = "ARTIFACT_TIER_CHANGED",
			Payload =
			{
				{ Name = "newTier", Type = "number", Nilable = false },
				{ Name = "bagOrSlotIndex", Type = "number", Nilable = false },
				{ Name = "slotIndex", Type = "number", Nilable = true },
			},
		},
		{
			Name = "ArtifactUpdate",
			Type = "Event",
			LiteralName = "ARTIFACT_UPDATE",
			Payload =
			{
				{ Name = "newItem", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ArtifactXpUpdate",
			Type = "Event",
			LiteralName = "ARTIFACT_XP_UPDATE",
		},
	},

	Tables =
	{
		{
			Name = "ArtifactArtInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "textureKit", Type = "string", Nilable = false },
				{ Name = "titleName", Type = "string", Nilable = false },
				{ Name = "titleColor", Type = "table", Mixin = "ColorMixin", Nilable = false },
				{ Name = "barConnectedColor", Type = "table", Mixin = "ColorMixin", Nilable = false },
				{ Name = "barDisconnectedColor", Type = "table", Mixin = "ColorMixin", Nilable = false },
				{ Name = "uiModelSceneID", Type = "number", Nilable = false },
				{ Name = "spellVisualKitID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ArtifactPowerInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "spellID", Type = "number", Nilable = false },
				{ Name = "cost", Type = "number", Nilable = false },
				{ Name = "currentRank", Type = "number", Nilable = false },
				{ Name = "maxRank", Type = "number", Nilable = false },
				{ Name = "bonusRanks", Type = "number", Nilable = false },
				{ Name = "numMaxRankBonusFromTier", Type = "number", Nilable = false },
				{ Name = "prereqsMet", Type = "bool", Nilable = false },
				{ Name = "isStart", Type = "bool", Nilable = false },
				{ Name = "isGoldMedal", Type = "bool", Nilable = false },
				{ Name = "isFinal", Type = "bool", Nilable = false },
				{ Name = "tier", Type = "number", Nilable = false },
				{ Name = "position", Type = "table", Mixin = "Vector2DMixin", Nilable = false },
				{ Name = "offset", Type = "table", Mixin = "Vector2DMixin", Nilable = true },
				{ Name = "linearIndex", Type = "number", Nilable = true },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "BattleNet",
	Type = "System",
	Namespace = "C_BattleNet",

	Functions =
	{
		{
			Name = "GetAccountInfoByGUID",
			Type = "Function",

			Arguments =
			{
				{ Name = "guid", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "accountInfo", Type = "BNetAccountInfo", Nilable = true },
			},
		},
		{
			Name = "GetAccountInfoByID",
			Type = "Function",

			Arguments =
			{
				{ Name = "id", Type = "number", Nilable = false },
				{ Name = "wowAccountGUID", Type = "string", Nilable = true },
			},

			Returns =
			{
				{ Name = "accountInfo", Type = "BNetAccountInfo", Nilable = true },
			},
		},
		{
			Name = "GetFriendAccountInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "friendIndex", Type = "number", Nilable = false },
				{ Name = "wowAccountGUID", Type = "string", Nilable = true },
			},

			Returns =
			{
				{ Name = "accountInfo", Type = "BNetAccountInfo", Nilable = true },
			},
		},
		{
			Name = "GetFriendGameAccountInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "friendIndex", Type = "number", Nilable = false },
				{ Name = "accountIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "gameAccountInfo", Type = "BNetGameAccountInfo", Nilable = true },
			},
		},
		{
			Name = "GetFriendNumGameAccounts",
			Type = "Function",

			Arguments =
			{
				{ Name = "friendIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "numGameAccounts", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetGameAccountInfoByGUID",
			Type = "Function",

			Arguments =
			{
				{ Name = "guid", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "gameAccountInfo", Type = "BNetGameAccountInfo", Nilable = true },
			},
		},
		{
			Name = "GetGameAccountInfoByID",
			Type = "Function",

			Arguments =
			{
				{ Name = "id", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "gameAccountInfo", Type = "BNetGameAccountInfo", Nilable = true },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
		{
			Name = "BNetAccountInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "bnetAccountID", Type = "number", Nilable = false },
				{ Name = "accountName", Type = "string", Nilable = false },
				{ Name = "battleTag", Type = "string", Nilable = false },
				{ Name = "isFriend", Type = "bool", Nilable = false },
				{ Name = "isBattleTagFriend", Type = "bool", Nilable = false },
				{ Name = "lastOnlineTime", Type = "number", Nilable = false },
				{ Name = "isAFK", Type = "bool", Nilable = false },
				{ Name = "isDND", Type = "bool", Nilable = false },
				{ Name = "isFavorite", Type = "bool", Nilable = false },
				{ Name = "appearOffline", Type = "bool", Nilable = false },
				{ Name = "customMessage", Type = "string", Nilable = false },
				{ Name = "customMessageTime", Type = "number", Nilable = false },
				{ Name = "note", Type = "string", Nilable = false },
				{ Name = "rafLinkType", Type = "RafLinkType", Nilable = false },
				{ Name = "gameAccountInfo", Type = "BNetGameAccountInfo", Nilable = false },
			},
		},
		{
			Name = "BNetGameAccountInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "gameAccountID", Type = "number", Nilable = true },
				{ Name = "clientProgram", Type = "string", Nilable = false },
				{ Name = "isOnline", Type = "bool", Nilable = false },
				{ Name = "isGameBusy", Type = "bool", Nilable = false },
				{ Name = "isGameAFK", Type = "bool", Nilable = false },
				{ Name = "wowProjectID", Type = "number", Nilable = true },
				{ Name = "characterName", Type = "string", Nilable = true },
				{ Name = "realmName", Type = "string", Nilable = true },
				{ Name = "realmDisplayName", Type = "string", Nilable = true },
				{ Name = "realmID", Type = "number", Nilable = true },
				{ Name = "factionName", Type = "string", Nilable = true },
				{ Name = "raceName", Type = "string", Nilable = true },
				{ Name = "className", Type = "string", Nilable = true },
				{ Name = "areaName", Type = "string", Nilable = true },
				{ Name = "characterLevel", Type = "number", Nilable = true },
				{ Name = "richPresence", Type = "string", Nilable = true },
				{ Name = "playerGuid", Type = "string", Nilable = true },
				{ Name = "isWowMobile", Type = "bool", Nilable = false },
				{ Name = "canSummon", Type = "bool", Nilable = false },
				{ Name = "hasFocus", Type = "bool", Nilable = false },
				{ Name = "regionID", Type = "number", Nilable = false },
				{ Name = "isInCurrentRegion", Type = "bool", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "CVarScripts",
	Type = "System",
	Namespace = "C_CVar",

	Functions =
	{
		{
			Name = "GetCVar",
			Type = "Function",

			Arguments =
			{
				{ Name = "name", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "value", Type = "string", Nilable = true },
			},
		},
		{
			Name = "GetCVarBitfield",
			Type = "Function",

			Arguments =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "index", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "value", Type = "bool", Nilable = true },
			},
		},
		{
			Name = "GetCVarBool",
			Type = "Function",

			Arguments =
			{
				{ Name = "name", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "value", Type = "bool", Nilable = true },
			},
		},
		{
			Name = "GetCVarDefault",
			Type = "Function",

			Arguments =
			{
				{ Name = "name", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "defaultValue", Type = "string", Nilable = true },
			},
		},
		{
			Name = "RegisterCVar",
			Type = "Function",

			Arguments =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "value", Type = "string", Nilable = true },
			},
		},
		{
			Name = "ResetTestCVars",
			Type = "Function",
		},
		{
			Name = "SetCVar",
			Type = "Function",

			Arguments =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "value", Type = "string", Nilable = true },
			},

			Returns =
			{
				{ Name = "success", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetCVarBitfield",
			Type = "Function",

			Arguments =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "index", Type = "number", Nilable = false },
				{ Name = "value", Type = "bool", Nilable = false },
			},

			Returns =
			{
				{ Name = "success", Type = "bool", Nilable = false },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "Camera",
	Type = "System",
	Namespace = "C_CameraDefaults",

	Functions =
	{
		{
			Name = "GetCameraFOVDefaults",
			Type = "Function",

			Returns =
			{
				{ Name = "fieldOfViewDegreesDefault", Type = "number", Nilable = false },
				{ Name = "fieldOfViewDegreesPlayerMin", Type = "number", Nilable = false },
				{ Name = "fieldOfViewDegreesPlayerMax", Type = "number", Nilable = false },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "ChallengeModeInfo",
	Type = "System",
	Namespace = "C_ChallengeMode",

	Functions =
	{
		{
			Name = "CanUseKeystoneInCurrentMap",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemLocation", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "canUse", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ClearKeystone",
			Type = "Function",
		},
		{
			Name = "CloseKeystoneFrame",
			Type = "Function",
		},
		{
			Name = "GetActiveChallengeMapID",
			Type = "Function",

			Returns =
			{
				{ Name = "mapChallengeModeID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetActiveKeystoneInfo",
			Type = "Function",

			Returns =
			{
				{ Name = "activeKeystoneLevel", Type = "number", Nilable = false },
				{ Name = "activeAffixIDs", Type = "table", InnerType = "number", Nilable = false },
				{ Name = "wasActiveKeystoneCharged", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetAffixInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "affixID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "description", Type = "string", Nilable = false },
				{ Name = "filedataid", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetCompletionInfo",
			Type = "Function",

			Returns =
			{
				{ Name = "mapChallengeModeID", Type = "number", Nilable = false },
				{ Name = "level", Type = "number", Nilable = false },
				{ Name = "time", Type = "number", Nilable = false },
				{ Name = "onTime", Type = "bool", Nilable = false },
				{ Name = "keystoneUpgradeLevels", Type = "number", Nilable = false },
				{ Name = "practiceRun", Type = "bool", Nilable = false },
				{ Name = "oldOverallDungeonScore", Type = "number", Nilable = true },
				{ Name = "newOverallDungeonScore", Type = "number", Nilable = true },
				{ Name = "IsMapRecord", Type = "bool", Nilable = false },
				{ Name = "IsAffixRecord", Type = "bool", Nilable = false },
				{ Name = "PrimaryAffix", Type = "number", Nilable = false },
				{ Name = "isEligibleForScore", Type = "bool", Nilable = false },
				{ Name = "members", Type = "table", InnerType = "ChallengeModeCompletionMemberInfo", Nilable = false },
			},
		},
		{
			Name = "GetDeathCount",
			Type = "Function",

			Returns =
			{
				{ Name = "numDeaths", Type = "number", Nilable = false },
				{ Name = "timeLost", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetDungeonScoreRarityColor",
			Type = "Function",
			Documentation = { "Returns a color value from the passed in overall season M+ rating." },

			Arguments =
			{
				{ Name = "dungeonScore", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "scoreColor", Type = "table", Mixin = "ColorMixin", Nilable = false },
			},
		},
		{
			Name = "GetGuildLeaders",
			Type = "Function",

			Returns =
			{
				{ Name = "topAttempt", Type = "table", InnerType = "ChallengeModeGuildTopAttempt", Nilable = false },
			},
		},
		{
			Name = "GetKeystoneLevelRarityColor",
			Type = "Function",
			Documentation = { "Returns a color value from the passed in keystone level." },

			Arguments =
			{
				{ Name = "level", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "levelScore", Type = "table", Mixin = "ColorMixin", Nilable = false },
			},
		},
		{
			Name = "GetMapScoreInfo",
			Type = "Function",

			Returns =
			{
				{ Name = "displayScores", Type = "table", InnerType = "MythicPlusRatingLinkInfo", Nilable = false },
			},
		},
		{
			Name = "GetMapTable",
			Type = "Function",

			Returns =
			{
				{ Name = "mapChallengeModeIDs", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "GetMapUIInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "mapChallengeModeID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "id", Type = "number", Nilable = false },
				{ Name = "timeLimit", Type = "number", Nilable = false },
				{ Name = "texture", Type = "number", Nilable = true },
				{ Name = "backgroundTexture", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetOverallDungeonScore",
			Type = "Function",
			Documentation = { "Gets the overall season mythic+ rating for the player." },

			Returns =
			{
				{ Name = "overallDungeonScore", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetPowerLevelDamageHealthMod",
			Type = "Function",

			Arguments =
			{
				{ Name = "powerLevel", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "damageMod", Type = "number", Nilable = false },
				{ Name = "healthMod", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetSlottedKeystoneInfo",
			Type = "Function",

			Returns =
			{
				{ Name = "mapChallengeModeID", Type = "number", Nilable = false },
				{ Name = "affixIDs", Type = "table", InnerType = "number", Nilable = false },
				{ Name = "keystoneLevel", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetSpecificDungeonOverallScoreRarityColor",
			Type = "Function",
			Documentation = { "Returns a color value from the passed in mythic+ rating from the combined affix scores for a specific dungeon" },

			Arguments =
			{
				{ Name = "specificDungeonOverallScore", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "specificDungeonOverallScoreColor", Type = "table", Mixin = "ColorMixin", Nilable = false },
			},
		},
		{
			Name = "GetSpecificDungeonScoreRarityColor",
			Type = "Function",
			Documentation = { "Returns a color value from the passed in mythic+ rating for a specific dungeon." },

			Arguments =
			{
				{ Name = "specificDungeonScore", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "specificDungeonScoreColor", Type = "table", Mixin = "ColorMixin", Nilable = false },
			},
		},
		{
			Name = "HasSlottedKeystone",
			Type = "Function",

			Returns =
			{
				{ Name = "hasSlottedKeystone", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsChallengeModeActive",
			Type = "Function",

			Returns =
			{
				{ Name = "challengeModeActive", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "RemoveKeystone",
			Type = "Function",

			Returns =
			{
				{ Name = "removalSuccessful", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "RequestLeaders",
			Type = "Function",

			Arguments =
			{
				{ Name = "mapChallengeModeID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "Reset",
			Type = "Function",
		},
		{
			Name = "SetKeystoneTooltip",
			Type = "Function",
		},
		{
			Name = "SlotKeystone",
			Type = "Function",
		},
		{
			Name = "StartChallengeMode",
			Type = "Function",

			Returns =
			{
				{ Name = "success", Type = "bool", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "ChallengeModeCompleted",
			Type = "Event",
			LiteralName = "CHALLENGE_MODE_COMPLETED",
		},
		{
			Name = "ChallengeModeDeathCountUpdated",
			Type = "Event",
			LiteralName = "CHALLENGE_MODE_DEATH_COUNT_UPDATED",
		},
		{
			Name = "ChallengeModeKeystoneReceptableOpen",
			Type = "Event",
			LiteralName = "CHALLENGE_MODE_KEYSTONE_RECEPTABLE_OPEN",
		},
		{
			Name = "ChallengeModeKeystoneSlotted",
			Type = "Event",
			LiteralName = "CHALLENGE_MODE_KEYSTONE_SLOTTED",
			Payload =
			{
				{ Name = "keystoneID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ChallengeModeLeadersUpdate",
			Type = "Event",
			LiteralName = "CHALLENGE_MODE_LEADERS_UPDATE",
		},
		{
			Name = "ChallengeModeMapsUpdate",
			Type = "Event",
			LiteralName = "CHALLENGE_MODE_MAPS_UPDATE",
		},
		{
			Name = "ChallengeModeMemberInfoUpdated",
			Type = "Event",
			LiteralName = "CHALLENGE_MODE_MEMBER_INFO_UPDATED",
		},
		{
			Name = "ChallengeModeReset",
			Type = "Event",
			LiteralName = "CHALLENGE_MODE_RESET",
			Payload =
			{
				{ Name = "mapID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ChallengeModeStart",
			Type = "Event",
			LiteralName = "CHALLENGE_MODE_START",
			Payload =
			{
				{ Name = "mapID", Type = "number", Nilable = false },
			},
		},
	},

	Tables =
	{
		{
			Name = "ChallengeModeCompletionMemberInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "memberGUID", Type = "string", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
			},
		},
		{
			Name = "ChallengeModeGuildAttemptMember",
			Type = "Structure",
			Fields =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "classFileName", Type = "string", Nilable = false },
			},
		},
		{
			Name = "ChallengeModeGuildTopAttempt",
			Type = "Structure",
			Fields =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "classFileName", Type = "string", Nilable = false },
				{ Name = "keystoneLevel", Type = "number", Nilable = false },
				{ Name = "mapChallengeModeID", Type = "number", Nilable = false },
				{ Name = "isYou", Type = "bool", Nilable = false },
				{ Name = "members", Type = "table", InnerType = "ChallengeModeGuildAttemptMember", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "ChromieTimeInfo",
	Type = "System",
	Namespace = "C_ChromieTime",

	Functions =
	{
		{
			Name = "CloseUI",
			Type = "Function",
		},
		{
			Name = "GetChromieTimeExpansionOption",
			Type = "Function",

			Arguments =
			{
				{ Name = "expansionRecID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "info", Type = "ChromieTimeExpansionInfo", Nilable = true },
			},
		},
		{
			Name = "GetChromieTimeExpansionOptions",
			Type = "Function",

			Returns =
			{
				{ Name = "expansionOptions", Type = "table", InnerType = "ChromieTimeExpansionInfo", Nilable = false },
			},
		},
		{
			Name = "SelectChromieTimeOption",
			Type = "Function",

			Arguments =
			{
				{ Name = "chromieTimeExpansionInfoId", Type = "number", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "ChromieTimeClose",
			Type = "Event",
			LiteralName = "CHROMIE_TIME_CLOSE",
		},
		{
			Name = "ChromieTimeOpen",
			Type = "Event",
			LiteralName = "CHROMIE_TIME_OPEN",
		},
	},

	Tables =
	{
		{
			Name = "ChromieTimeExpansionInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "id", Type = "number", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "description", Type = "string", Nilable = false },
				{ Name = "mapAtlas", Type = "string", Nilable = false },
				{ Name = "previewAtlas", Type = "string", Nilable = false },
				{ Name = "completed", Type = "bool", Nilable = false },
				{ Name = "alreadyOn", Type = "bool", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "ClassColor",
	Type = "System",
	Namespace = "C_ClassColor",

	Functions =
	{
		{
			Name = "GetClassColor",
			Type = "Function",

			Arguments =
			{
				{ Name = "className", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "classColor", Type = "table", Mixin = "ColorMixin", Nilable = false },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "ClassTalents",
	Type = "System",
	Namespace = "C_ClassTalents",

	Functions =
	{
		{
			Name = "CanChangeTalents",
			Type = "Function",

			Returns =
			{
				{ Name = "canChange", Type = "bool", Nilable = false },
				{ Name = "canAdd", Type = "bool", Nilable = false },
				{ Name = "changeError", Type = "string", Nilable = false },
			},
		},
		{
			Name = "CommitConfig",
			Type = "Function",

			Arguments =
			{
				{ Name = "savedConfigID", Type = "number", Nilable = true },
			},

			Returns =
			{
				{ Name = "success", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetActiveConfigID",
			Type = "Function",

			Returns =
			{
				{ Name = "activeConfigID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetConfigIDsBySpecID",
			Type = "Function",

			Arguments =
			{
				{ Name = "specID", Type = "number", Nilable = true },
			},

			Returns =
			{
				{ Name = "configIDs", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "LoadConfig",
			Type = "Function",

			Arguments =
			{
				{ Name = "configID", Type = "number", Nilable = false },
				{ Name = "autoApply", Type = "bool", Nilable = false },
			},

			Returns =
			{
				{ Name = "result", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "RequestNewConfig",
			Type = "Function",

			Arguments =
			{
				{ Name = "name", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "success", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SaveConfig",
			Type = "Function",

			Arguments =
			{
				{ Name = "configID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "success", Type = "bool", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "ActiveCombatConfigChanged",
			Type = "Event",
			LiteralName = "ACTIVE_COMBAT_CONFIG_CHANGED",
			Payload =
			{
				{ Name = "configID", Type = "number", Nilable = false },
			},
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "ClickBindings",
	Type = "System",
	Namespace = "C_ClickBindings",

	Functions =
	{
		{
			Name = "CanSpellBeClickBound",
			Type = "Function",

			Arguments =
			{
				{ Name = "spellID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "canBeBound", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ExecuteBinding",
			Type = "Function",

			Arguments =
			{
				{ Name = "targetToken", Type = "string", Nilable = false },
				{ Name = "button", Type = "string", Nilable = false },
				{ Name = "modifiers", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetBindingType",
			Type = "Function",

			Arguments =
			{
				{ Name = "button", Type = "string", Nilable = false },
				{ Name = "modifiers", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "type", Type = "ClickBindingType", Nilable = false },
			},
		},
		{
			Name = "GetEffectiveInteractionButton",
			Type = "Function",

			Arguments =
			{
				{ Name = "button", Type = "string", Nilable = false },
				{ Name = "modifiers", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "effectiveButton", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetProfileInfo",
			Type = "Function",

			Returns =
			{
				{ Name = "infoVec", Type = "table", InnerType = "ClickBindingInfo", Nilable = false },
			},
		},
		{
			Name = "GetStringFromModifiers",
			Type = "Function",

			Arguments =
			{
				{ Name = "modifiers", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "modifierString", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetTutorialShown",
			Type = "Function",

			Returns =
			{
				{ Name = "tutorialShown", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "MakeModifiers",
			Type = "Function",

			Returns =
			{
				{ Name = "modifiers", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ResetCurrentProfile",
			Type = "Function",
		},
		{
			Name = "SetProfileByInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "infoVec", Type = "table", InnerType = "ClickBindingInfo", Nilable = false },
			},
		},
		{
			Name = "SetTutorialShown",
			Type = "Function",
		},
	},

	Events =
	{
		{
			Name = "ClickbindingsSetHighlightsShown",
			Type = "Event",
			LiteralName = "CLICKBINDINGS_SET_HIGHLIGHTS_SHOWN",
			Payload =
			{
				{ Name = "showHighlights", Type = "bool", Nilable = false },
			},
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "Club",
	Type = "System",
	Namespace = "C_Club",

	Functions =
	{
		{
			Name = "AcceptInvitation",
			Type = "Function",

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
			},
		},
		{
			Name = "AddClubStreamChatChannel",
			Type = "Function",

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "streamId", Type = "string", Nilable = false },
			},
		},
		{
			Name = "AdvanceStreamViewMarker",
			Type = "Function",

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "streamId", Type = "string", Nilable = false },
			},
		},
		{
			Name = "AssignMemberRole",
			Type = "Function",

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "memberId", Type = "number", Nilable = false },
				{ Name = "roleId", Type = "ClubRoleIdentifier", Nilable = false },
			},
		},
		{
			Name = "CanResolvePlayerLocationFromClubMessageData",
			Type = "Function",

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "streamId", Type = "string", Nilable = false },
				{ Name = "epoch", Type = "number", Nilable = false },
				{ Name = "position", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "canResolve", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ClearAutoAdvanceStreamViewMarker",
			Type = "Function",
		},
		{
			Name = "ClearClubPresenceSubscription",
			Type = "Function",
		},
		{
			Name = "CompareBattleNetDisplayName",
			Type = "Function",

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "lhsMemberId", Type = "number", Nilable = false },
				{ Name = "rhsMemberId", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "comparison", Type = "number", Nilable = false },
			},
		},
		{
			Name = "CreateClub",
			Type = "Function",

			Arguments =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "shortName", Type = "string", Nilable = true },
				{ Name = "description", Type = "string", Nilable = false },
				{ Name = "clubType", Type = "ClubType", Nilable = false, Documentation = { "Valid types are BattleNet or Character" } },
				{ Name = "avatarId", Type = "number", Nilable = false },
				{ Name = "isCrossFaction", Type = "bool", Nilable = true },
			},
		},
		{
			Name = "CreateStream",
			Type = "Function",
			Documentation = { "Check the canCreateStream privilege." },

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "subject", Type = "string", Nilable = false },
				{ Name = "leadersAndModeratorsOnly", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "CreateTicket",
			Type = "Function",
			Documentation = { "Check canCreateTicket privilege." },

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "allowedRedeemCount", Type = "number", Nilable = true, Documentation = { "Number of uses. nil means unlimited" } },
				{ Name = "duration", Type = "number", Nilable = true, Documentation = { "Duration in seconds. nil never expires" } },
				{ Name = "defaultStreamId", Type = "string", Nilable = true },
				{ Name = "isCrossFaction", Type = "bool", Nilable = true },
			},
		},
		{
			Name = "DeclineInvitation",
			Type = "Function",

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
			},
		},
		{
			Name = "DestroyClub",
			Type = "Function",
			Documentation = { "Check the canDestroy privilege." },

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
			},
		},
		{
			Name = "DestroyMessage",
			Type = "Function",

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "streamId", Type = "string", Nilable = false },
				{ Name = "messageId", Type = "ClubMessageIdentifier", Nilable = false },
			},
		},
		{
			Name = "DestroyStream",
			Type = "Function",
			Documentation = { "Check canDestroyStream privilege." },

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "streamId", Type = "string", Nilable = false },
			},
		},
		{
			Name = "DestroyTicket",
			Type = "Function",
			Documentation = { "Check canDestroyTicket privilege." },

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "ticketId", Type = "string", Nilable = false },
			},
		},
		{
			Name = "DoesCommunityHaveMembersOfTheOppositeFaction",
			Type = "Function",

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "hasMembersOfOppositeFaction", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "EditClub",
			Type = "Function",
			Documentation = { "nil arguments will not change existing club data" },

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "name", Type = "string", Nilable = true },
				{ Name = "shortName", Type = "string", Nilable = true },
				{ Name = "description", Type = "string", Nilable = true },
				{ Name = "avatarId", Type = "number", Nilable = true },
				{ Name = "broadcast", Type = "string", Nilable = true },
				{ Name = "crossFaction", Type = "bool", Nilable = true },
			},
		},
		{
			Name = "EditMessage",
			Type = "Function",

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "streamId", Type = "string", Nilable = false },
				{ Name = "messageId", Type = "ClubMessageIdentifier", Nilable = false },
				{ Name = "message", Type = "string", Nilable = false },
			},
		},
		{
			Name = "EditStream",
			Type = "Function",
			Documentation = { "Check the canSetStreamName, canSetStreamSubject, canSetStreamAccess privileges. nil arguments will not change existing stream data." },

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "streamId", Type = "string", Nilable = false },
				{ Name = "name", Type = "string", Nilable = true },
				{ Name = "subject", Type = "string", Nilable = true },
				{ Name = "leadersAndModeratorsOnly", Type = "bool", Nilable = true },
			},
		},
		{
			Name = "Flush",
			Type = "Function",
		},
		{
			Name = "FocusCommunityStreams",
			Type = "Function",
		},
		{
			Name = "FocusStream",
			Type = "Function",

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "streamId", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "focused", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetAssignableRoles",
			Type = "Function",

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "memberId", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "assignableRoles", Type = "table", InnerType = "ClubRoleIdentifier", Nilable = false },
			},
		},
		{
			Name = "GetAvatarIdList",
			Type = "Function",
			Documentation = { "listen for AVATAR_LIST_UPDATED event. This can happen if we haven't downloaded the battle.net avatar list yet" },

			Arguments =
			{
				{ Name = "clubType", Type = "ClubType", Nilable = false },
			},

			Returns =
			{
				{ Name = "avatarIds", Type = "table", InnerType = "number", Nilable = true },
			},
		},
		{
			Name = "GetClubCapacity",
			Type = "Function",

			Returns =
			{
				{ Name = "capacity", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetClubInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "info", Type = "ClubInfo", Nilable = true },
			},
		},
		{
			Name = "GetClubLimits",
			Type = "Function",

			Arguments =
			{
				{ Name = "clubType", Type = "ClubType", Nilable = false },
			},

			Returns =
			{
				{ Name = "clubLimits", Type = "ClubLimits", Nilable = false },
			},
		},
		{
			Name = "GetClubMembers",
			Type = "Function",

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "streamId", Type = "string", Nilable = true },
			},

			Returns =
			{
				{ Name = "members", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "GetClubPrivileges",
			Type = "Function",
			Documentation = { "The privileges for the logged in user for this club" },

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "privilegeInfo", Type = "ClubPrivilegeInfo", Nilable = false },
			},
		},
		{
			Name = "GetClubStreamNotificationSettings",
			Type = "Function",

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "settings", Type = "table", InnerType = "ClubStreamNotificationSetting", Nilable = false },
			},
		},
		{
			Name = "GetCommunityNameResultText",
			Type = "Function",

			Arguments =
			{
				{ Name = "result", Type = "ValidateNameResult", Nilable = false },
			},

			Returns =
			{
				{ Name = "errorCode", Type = "string", Nilable = true },
			},
		},
		{
			Name = "GetGuildClubId",
			Type = "Function",

			Returns =
			{
				{ Name = "guildClubId", Type = "string", Nilable = true },
			},
		},
		{
			Name = "GetInfoFromLastCommunityChatLine",
			Type = "Function",

			Returns =
			{
				{ Name = "messageInfo", Type = "ClubMessageInfo", Nilable = false },
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "streamId", Type = "string", Nilable = false },
				{ Name = "clubType", Type = "ClubType", Nilable = false },
			},
		},
		{
			Name = "GetInvitationCandidates",
			Type = "Function",
			Documentation = { "Returns a list of players that you can send a request to a Battle.net club. Returns an empty list for Character based clubs" },

			Arguments =
			{
				{ Name = "filter", Type = "string", Nilable = true },
				{ Name = "maxResults", Type = "number", Nilable = true },
				{ Name = "cursorPosition", Type = "number", Nilable = true },
				{ Name = "allowFullMatch", Type = "bool", Nilable = true },
				{ Name = "clubId", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "candidates", Type = "table", InnerType = "ClubInvitationCandidateInfo", Nilable = false },
			},
		},
		{
			Name = "GetInvitationInfo",
			Type = "Function",
			Documentation = { "Get info about a specific club the active player has been invited to." },

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "invitation", Type = "ClubSelfInvitationInfo", Nilable = true },
			},
		},
		{
			Name = "GetInvitationsForClub",
			Type = "Function",
			Documentation = { "Get the pending invitations for this club. Call RequestInvitationsForClub() to retrieve invitations from server." },

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "invitations", Type = "table", InnerType = "ClubInvitationInfo", Nilable = false },
			},
		},
		{
			Name = "GetInvitationsForSelf",
			Type = "Function",
			Documentation = { "These are the clubs the active player has been invited to." },

			Returns =
			{
				{ Name = "invitations", Type = "table", InnerType = "ClubSelfInvitationInfo", Nilable = false },
			},
		},
		{
			Name = "GetLastTicketResponse",
			Type = "Function",

			Arguments =
			{
				{ Name = "ticket", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "error", Type = "ClubErrorType", Nilable = false },
				{ Name = "info", Type = "ClubInfo", Nilable = true },
				{ Name = "showError", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetMemberInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "memberId", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "info", Type = "ClubMemberInfo", Nilable = true },
			},
		},
		{
			Name = "GetMemberInfoForSelf",
			Type = "Function",
			Documentation = { "Info for the logged in user for this club" },

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "info", Type = "ClubMemberInfo", Nilable = true },
			},
		},
		{
			Name = "GetMessageInfo",
			Type = "Function",
			Documentation = { "Get info about a particular message." },

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "streamId", Type = "string", Nilable = false },
				{ Name = "messageId", Type = "ClubMessageIdentifier", Nilable = false },
			},

			Returns =
			{
				{ Name = "message", Type = "ClubMessageInfo", Nilable = true },
			},
		},
		{
			Name = "GetMessageRanges",
			Type = "Function",
			Documentation = { "Get the ranges of the messages currently downloaded." },

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "streamId", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "ranges", Type = "table", InnerType = "ClubMessageRange", Nilable = false },
			},
		},
		{
			Name = "GetMessagesBefore",
			Type = "Function",
			Documentation = { "Get downloaded messages before (and including) the specified messageId limited by count. These are filtered by ignored players" },

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "streamId", Type = "string", Nilable = false },
				{ Name = "newest", Type = "ClubMessageIdentifier", Nilable = false },
				{ Name = "count", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "messages", Type = "table", InnerType = "ClubMessageInfo", Nilable = false },
			},
		},
		{
			Name = "GetMessagesInRange",
			Type = "Function",
			Documentation = { "Get downloaded messages in the given range. These are filtered by ignored players" },

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "streamId", Type = "string", Nilable = false },
				{ Name = "oldest", Type = "ClubMessageIdentifier", Nilable = false },
				{ Name = "newest", Type = "ClubMessageIdentifier", Nilable = false },
			},

			Returns =
			{
				{ Name = "messages", Type = "table", InnerType = "ClubMessageInfo", Nilable = false },
			},
		},
		{
			Name = "GetStreamInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "streamId", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "streamInfo", Type = "ClubStreamInfo", Nilable = true },
			},
		},
		{
			Name = "GetStreamViewMarker",
			Type = "Function",

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "streamId", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "lastReadTime", Type = "number", Nilable = true, Documentation = { "nil if stream view is at current" } },
			},
		},
		{
			Name = "GetStreams",
			Type = "Function",

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "streams", Type = "table", InnerType = "ClubStreamInfo", Nilable = false },
			},
		},
		{
			Name = "GetSubscribedClubs",
			Type = "Function",

			Returns =
			{
				{ Name = "clubs", Type = "table", InnerType = "ClubInfo", Nilable = false },
			},
		},
		{
			Name = "GetTickets",
			Type = "Function",
			Documentation = { "Get the existing tickets for this club. Call RequestTickets() to retrieve tickets from server." },

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "tickets", Type = "table", InnerType = "ClubTicketInfo", Nilable = false },
			},
		},
		{
			Name = "IsAccountMuted",
			Type = "Function",

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "accountMuted", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsBeginningOfStream",
			Type = "Function",
			Documentation = { "Returns whether the given message is the first message in the stream, taking into account ignored messages" },

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "streamId", Type = "string", Nilable = false },
				{ Name = "messageId", Type = "ClubMessageIdentifier", Nilable = false },
			},

			Returns =
			{
				{ Name = "isBeginningOfStream", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsEnabled",
			Type = "Function",

			Returns =
			{
				{ Name = "clubsEnabled", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsRestricted",
			Type = "Function",

			Returns =
			{
				{ Name = "restrictionReason", Type = "ClubRestrictionReason", Nilable = false },
			},
		},
		{
			Name = "IsSubscribedToStream",
			Type = "Function",

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "streamId", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "subscribed", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "KickMember",
			Type = "Function",
			Documentation = { "Check kickableRoleIds privilege." },

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "memberId", Type = "number", Nilable = false },
			},
		},
		{
			Name = "LeaveClub",
			Type = "Function",

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
			},
		},
		{
			Name = "RedeemTicket",
			Type = "Function",

			Arguments =
			{
				{ Name = "ticketId", Type = "string", Nilable = false },
			},
		},
		{
			Name = "RequestInvitationsForClub",
			Type = "Function",
			Documentation = { "Request invitations for this club from server. Check canGetInvitation privilege." },

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
			},
		},
		{
			Name = "RequestMoreMessagesBefore",
			Type = "Function",
			Documentation = { "Call this when the user scrolls near the top of the message view, and more need to be displayed. The history will be downloaded backwards (newest to oldest)." },

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "streamId", Type = "string", Nilable = false },
				{ Name = "messageId", Type = "ClubMessageIdentifier", Nilable = true },
				{ Name = "count", Type = "number", Nilable = true },
			},

			Returns =
			{
				{ Name = "alreadyHasMessages", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "RequestTicket",
			Type = "Function",

			Arguments =
			{
				{ Name = "ticketId", Type = "string", Nilable = false },
			},
		},
		{
			Name = "RequestTickets",
			Type = "Function",
			Documentation = { "Request tickets from server. Check canGetTicket privilege." },

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
			},
		},
		{
			Name = "RevokeInvitation",
			Type = "Function",
			Documentation = { "Check canRevokeOwnInvitation or canRevokeOtherInvitation" },

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "memberId", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SendBattleTagFriendRequest",
			Type = "Function",

			Arguments =
			{
				{ Name = "guildClubId", Type = "string", Nilable = false },
				{ Name = "memberId", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SendCharacterInvitation",
			Type = "Function",

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "character", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SendInvitation",
			Type = "Function",
			Documentation = { "Check the canSendInvitation privilege." },

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "memberId", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SendMessage",
			Type = "Function",

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "streamId", Type = "string", Nilable = false },
				{ Name = "message", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetAutoAdvanceStreamViewMarker",
			Type = "Function",
			Documentation = { "Only one stream can be set for auto-advance at a time. Focused streams will have their view times advanced automatically." },

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "streamId", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetAvatarTexture",
			Type = "Function",

			Arguments =
			{
				{ Name = "texture", Type = "table", Nilable = false },
				{ Name = "avatarId", Type = "number", Nilable = false },
				{ Name = "clubType", Type = "ClubType", Nilable = false },
			},
		},
		{
			Name = "SetClubMemberNote",
			Type = "Function",
			Documentation = { "Check the canSetOwnMemberNote and canSetOtherMemberNote privileges." },

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "memberId", Type = "number", Nilable = false },
				{ Name = "note", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetClubPresenceSubscription",
			Type = "Function",
			Documentation = { "You can only be subscribed to 0 or 1 clubs for presence.  Subscribing to a new club automatically unsuscribes you to existing subscription." },

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetClubStreamNotificationSettings",
			Type = "Function",

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "settings", Type = "table", InnerType = "ClubStreamNotificationSetting", Nilable = false },
			},
		},
		{
			Name = "SetFavorite",
			Type = "Function",

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "isFavorite", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetSocialQueueingEnabled",
			Type = "Function",

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "enabled", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ShouldAllowClubType",
			Type = "Function",

			Arguments =
			{
				{ Name = "clubType", Type = "ClubType", Nilable = false },
			},

			Returns =
			{
				{ Name = "clubTypeIsAllowed", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "UnfocusAllStreams",
			Type = "Function",

			Arguments =
			{
				{ Name = "unsubscribe", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "UnfocusStream",
			Type = "Function",

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "streamId", Type = "string", Nilable = false },
			},
		},
		{
			Name = "ValidateText",
			Type = "Function",

			Arguments =
			{
				{ Name = "clubType", Type = "ClubType", Nilable = false },
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "clubFieldType", Type = "ClubFieldType", Nilable = false },
			},

			Returns =
			{
				{ Name = "result", Type = "ValidateNameResult", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "AvatarListUpdated",
			Type = "Event",
			LiteralName = "AVATAR_LIST_UPDATED",
			Payload =
			{
				{ Name = "clubType", Type = "ClubType", Nilable = false },
			},
		},
		{
			Name = "ClubAdded",
			Type = "Event",
			LiteralName = "CLUB_ADDED",
			Payload =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
			},
		},
		{
			Name = "ClubError",
			Type = "Event",
			LiteralName = "CLUB_ERROR",
			Payload =
			{
				{ Name = "action", Type = "ClubActionType", Nilable = false },
				{ Name = "error", Type = "ClubErrorType", Nilable = false },
				{ Name = "clubType", Type = "ClubType", Nilable = false },
			},
		},
		{
			Name = "ClubInvitationAddedForSelf",
			Type = "Event",
			LiteralName = "CLUB_INVITATION_ADDED_FOR_SELF",
			Payload =
			{
				{ Name = "invitation", Type = "ClubSelfInvitationInfo", Nilable = false },
			},
		},
		{
			Name = "ClubInvitationRemovedForSelf",
			Type = "Event",
			LiteralName = "CLUB_INVITATION_REMOVED_FOR_SELF",
			Payload =
			{
				{ Name = "invitationId", Type = "string", Nilable = false },
			},
		},
		{
			Name = "ClubInvitationsReceivedForClub",
			Type = "Event",
			LiteralName = "CLUB_INVITATIONS_RECEIVED_FOR_CLUB",
			Payload =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
			},
		},
		{
			Name = "ClubMemberAdded",
			Type = "Event",
			LiteralName = "CLUB_MEMBER_ADDED",
			Payload =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "memberId", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ClubMemberPresenceUpdated",
			Type = "Event",
			LiteralName = "CLUB_MEMBER_PRESENCE_UPDATED",
			Payload =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "memberId", Type = "number", Nilable = false },
				{ Name = "presence", Type = "ClubMemberPresence", Nilable = false },
			},
		},
		{
			Name = "ClubMemberRemoved",
			Type = "Event",
			LiteralName = "CLUB_MEMBER_REMOVED",
			Payload =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "memberId", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ClubMemberRoleUpdated",
			Type = "Event",
			LiteralName = "CLUB_MEMBER_ROLE_UPDATED",
			Payload =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "memberId", Type = "number", Nilable = false },
				{ Name = "roleId", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ClubMemberUpdated",
			Type = "Event",
			LiteralName = "CLUB_MEMBER_UPDATED",
			Payload =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "memberId", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ClubMessageAdded",
			Type = "Event",
			LiteralName = "CLUB_MESSAGE_ADDED",
			Payload =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "streamId", Type = "string", Nilable = false },
				{ Name = "messageId", Type = "ClubMessageIdentifier", Nilable = false },
			},
		},
		{
			Name = "ClubMessageHistoryReceived",
			Type = "Event",
			LiteralName = "CLUB_MESSAGE_HISTORY_RECEIVED",
			Payload =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "streamId", Type = "string", Nilable = false },
				{ Name = "downloadedRange", Type = "ClubMessageRange", Nilable = false, Documentation = { "Range of history messages received." } },
				{ Name = "contiguousRange", Type = "ClubMessageRange", Nilable = false, Documentation = { "Range of contiguous messages that the received messages are in." } },
			},
		},
		{
			Name = "ClubMessageUpdated",
			Type = "Event",
			LiteralName = "CLUB_MESSAGE_UPDATED",
			Payload =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "streamId", Type = "string", Nilable = false },
				{ Name = "messageId", Type = "ClubMessageIdentifier", Nilable = false },
			},
		},
		{
			Name = "ClubRemoved",
			Type = "Event",
			LiteralName = "CLUB_REMOVED",
			Payload =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
			},
		},
		{
			Name = "ClubRemovedMessage",
			Type = "Event",
			LiteralName = "CLUB_REMOVED_MESSAGE",
			Payload =
			{
				{ Name = "clubName", Type = "string", Nilable = false },
				{ Name = "clubRemovedReason", Type = "ClubRemovedReason", Nilable = false },
			},
		},
		{
			Name = "ClubSelfMemberRoleUpdated",
			Type = "Event",
			LiteralName = "CLUB_SELF_MEMBER_ROLE_UPDATED",
			Payload =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "roleId", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ClubStreamAdded",
			Type = "Event",
			LiteralName = "CLUB_STREAM_ADDED",
			Payload =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "streamId", Type = "string", Nilable = false },
			},
		},
		{
			Name = "ClubStreamRemoved",
			Type = "Event",
			LiteralName = "CLUB_STREAM_REMOVED",
			Payload =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "streamId", Type = "string", Nilable = false },
			},
		},
		{
			Name = "ClubStreamSubscribed",
			Type = "Event",
			LiteralName = "CLUB_STREAM_SUBSCRIBED",
			Payload =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "streamId", Type = "string", Nilable = false },
			},
		},
		{
			Name = "ClubStreamUnsubscribed",
			Type = "Event",
			LiteralName = "CLUB_STREAM_UNSUBSCRIBED",
			Payload =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "streamId", Type = "string", Nilable = false },
			},
		},
		{
			Name = "ClubStreamUpdated",
			Type = "Event",
			LiteralName = "CLUB_STREAM_UPDATED",
			Payload =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "streamId", Type = "string", Nilable = false },
			},
		},
		{
			Name = "ClubStreamsLoaded",
			Type = "Event",
			LiteralName = "CLUB_STREAMS_LOADED",
			Payload =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
			},
		},
		{
			Name = "ClubTicketCreated",
			Type = "Event",
			LiteralName = "CLUB_TICKET_CREATED",
			Payload =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "ticketInfo", Type = "ClubTicketInfo", Nilable = false },
			},
		},
		{
			Name = "ClubTicketReceived",
			Type = "Event",
			LiteralName = "CLUB_TICKET_RECEIVED",
			Payload =
			{
				{ Name = "ticket", Type = "string", Nilable = false },
			},
		},
		{
			Name = "ClubTicketsReceived",
			Type = "Event",
			LiteralName = "CLUB_TICKETS_RECEIVED",
			Payload =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
			},
		},
		{
			Name = "ClubUpdated",
			Type = "Event",
			LiteralName = "CLUB_UPDATED",
			Payload =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
			},
		},
		{
			Name = "InitialClubsLoaded",
			Type = "Event",
			LiteralName = "INITIAL_CLUBS_LOADED",
		},
		{
			Name = "StreamViewMarkerUpdated",
			Type = "Event",
			LiteralName = "STREAM_VIEW_MARKER_UPDATED",
			Payload =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "streamId", Type = "string", Nilable = false },
				{ Name = "lastReadTime", Type = "number", Nilable = true, Documentation = { "nil if stream view is at current" } },
			},
		},
	},

	Tables =
	{
		{
			Name = "ClubActionType",
			Type = "Enumeration",
			NumValues = 27,
			MinValue = 0,
			MaxValue = 26,
			Fields =
			{
				{ Name = "ErrorClubActionSubscribe", Type = "ClubActionType", EnumValue = 0 },
				{ Name = "ErrorClubActionCreate", Type = "ClubActionType", EnumValue = 1 },
				{ Name = "ErrorClubActionEdit", Type = "ClubActionType", EnumValue = 2 },
				{ Name = "ErrorClubActionDestroy", Type = "ClubActionType", EnumValue = 3 },
				{ Name = "ErrorClubActionLeave", Type = "ClubActionType", EnumValue = 4 },
				{ Name = "ErrorClubActionCreateTicket", Type = "ClubActionType", EnumValue = 5 },
				{ Name = "ErrorClubActionDestroyTicket", Type = "ClubActionType", EnumValue = 6 },
				{ Name = "ErrorClubActionRedeemTicket", Type = "ClubActionType", EnumValue = 7 },
				{ Name = "ErrorClubActionGetTicket", Type = "ClubActionType", EnumValue = 8 },
				{ Name = "ErrorClubActionGetTickets", Type = "ClubActionType", EnumValue = 9 },
				{ Name = "ErrorClubActionGetBans", Type = "ClubActionType", EnumValue = 10 },
				{ Name = "ErrorClubActionGetInvitations", Type = "ClubActionType", EnumValue = 11 },
				{ Name = "ErrorClubActionRevokeInvitation", Type = "ClubActionType", EnumValue = 12 },
				{ Name = "ErrorClubActionAcceptInvitation", Type = "ClubActionType", EnumValue = 13 },
				{ Name = "ErrorClubActionDeclineInvitation", Type = "ClubActionType", EnumValue = 14 },
				{ Name = "ErrorClubActionCreateStream", Type = "ClubActionType", EnumValue = 15 },
				{ Name = "ErrorClubActionEditStream", Type = "ClubActionType", EnumValue = 16 },
				{ Name = "ErrorClubActionDestroyStream", Type = "ClubActionType", EnumValue = 17 },
				{ Name = "ErrorClubActionInviteMember", Type = "ClubActionType", EnumValue = 18 },
				{ Name = "ErrorClubActionEditMember", Type = "ClubActionType", EnumValue = 19 },
				{ Name = "ErrorClubActionEditMemberNote", Type = "ClubActionType", EnumValue = 20 },
				{ Name = "ErrorClubActionKickMember", Type = "ClubActionType", EnumValue = 21 },
				{ Name = "ErrorClubActionAddBan", Type = "ClubActionType", EnumValue = 22 },
				{ Name = "ErrorClubActionRemoveBan", Type = "ClubActionType", EnumValue = 23 },
				{ Name = "ErrorClubActionCreateMessage", Type = "ClubActionType", EnumValue = 24 },
				{ Name = "ErrorClubActionEditMessage", Type = "ClubActionType", EnumValue = 25 },
				{ Name = "ErrorClubActionDestroyMessage", Type = "ClubActionType", EnumValue = 26 },
			},
		},
		{
			Name = "ClubErrorType",
			Type = "Enumeration",
			NumValues = 42,
			MinValue = 0,
			MaxValue = 41,
			Fields =
			{
				{ Name = "ErrorCommunitiesNone", Type = "ClubErrorType", EnumValue = 0 },
				{ Name = "ErrorCommunitiesUnknown", Type = "ClubErrorType", EnumValue = 1 },
				{ Name = "ErrorCommunitiesNeutralFaction", Type = "ClubErrorType", EnumValue = 2 },
				{ Name = "ErrorCommunitiesUnknownRealm", Type = "ClubErrorType", EnumValue = 3 },
				{ Name = "ErrorCommunitiesBadTarget", Type = "ClubErrorType", EnumValue = 4 },
				{ Name = "ErrorCommunitiesWrongFaction", Type = "ClubErrorType", EnumValue = 5 },
				{ Name = "ErrorCommunitiesRestricted", Type = "ClubErrorType", EnumValue = 6 },
				{ Name = "ErrorCommunitiesIgnored", Type = "ClubErrorType", EnumValue = 7 },
				{ Name = "ErrorCommunitiesGuild", Type = "ClubErrorType", EnumValue = 8 },
				{ Name = "ErrorCommunitiesWrongRegion", Type = "ClubErrorType", EnumValue = 9 },
				{ Name = "ErrorCommunitiesUnknownTicket", Type = "ClubErrorType", EnumValue = 10 },
				{ Name = "ErrorCommunitiesMissingShortName", Type = "ClubErrorType", EnumValue = 11 },
				{ Name = "ErrorCommunitiesProfanity", Type = "ClubErrorType", EnumValue = 12 },
				{ Name = "ErrorCommunitiesTrial", Type = "ClubErrorType", EnumValue = 13 },
				{ Name = "ErrorCommunitiesVeteranTrial", Type = "ClubErrorType", EnumValue = 14 },
				{ Name = "ErrorCommunitiesChatMute", Type = "ClubErrorType", EnumValue = 15 },
				{ Name = "ErrorClubFull", Type = "ClubErrorType", EnumValue = 16 },
				{ Name = "ErrorClubNoClub", Type = "ClubErrorType", EnumValue = 17 },
				{ Name = "ErrorClubNotMember", Type = "ClubErrorType", EnumValue = 18 },
				{ Name = "ErrorClubAlreadyMember", Type = "ClubErrorType", EnumValue = 19 },
				{ Name = "ErrorClubNoSuchMember", Type = "ClubErrorType", EnumValue = 20 },
				{ Name = "ErrorClubNoSuchInvitation", Type = "ClubErrorType", EnumValue = 21 },
				{ Name = "ErrorClubInvitationAlreadyExists", Type = "ClubErrorType", EnumValue = 22 },
				{ Name = "ErrorClubInvalidRoleID", Type = "ClubErrorType", EnumValue = 23 },
				{ Name = "ErrorClubInsufficientPrivileges", Type = "ClubErrorType", EnumValue = 24 },
				{ Name = "ErrorClubTooManyClubsJoined", Type = "ClubErrorType", EnumValue = 25 },
				{ Name = "ErrorClubVoiceFull", Type = "ClubErrorType", EnumValue = 26 },
				{ Name = "ErrorClubStreamNoStream", Type = "ClubErrorType", EnumValue = 27 },
				{ Name = "ErrorClubStreamInvalidName", Type = "ClubErrorType", EnumValue = 28 },
				{ Name = "ErrorClubStreamCountAtMin", Type = "ClubErrorType", EnumValue = 29 },
				{ Name = "ErrorClubStreamCountAtMax", Type = "ClubErrorType", EnumValue = 30 },
				{ Name = "ErrorClubMemberHasRequiredRole", Type = "ClubErrorType", EnumValue = 31 },
				{ Name = "ErrorClubSentInvitationCountAtMax", Type = "ClubErrorType", EnumValue = 32 },
				{ Name = "ErrorClubReceivedInvitationCountAtMax", Type = "ClubErrorType", EnumValue = 33 },
				{ Name = "ErrorClubTargetIsBanned", Type = "ClubErrorType", EnumValue = 34 },
				{ Name = "ErrorClubBanAlreadyExists", Type = "ClubErrorType", EnumValue = 35 },
				{ Name = "ErrorClubBanCountAtMax", Type = "ClubErrorType", EnumValue = 36 },
				{ Name = "ErrorClubTicketCountAtMax", Type = "ClubErrorType", EnumValue = 37 },
				{ Name = "ErrorClubTicketNoSuchTicket", Type = "ClubErrorType", EnumValue = 38 },
				{ Name = "ErrorClubTicketHasConsumedAllowedRedeemCount", Type = "ClubErrorType", EnumValue = 39 },
				{ Name = "ErrorClubDoesntAllowCrossFaction", Type = "ClubErrorType", EnumValue = 40 },
				{ Name = "ErrorClubEditHasCrossFactionMembers", Type = "ClubErrorType", EnumValue = 41 },
			},
		},
		{
			Name = "ClubFieldType",
			Type = "Enumeration",
			NumValues = 7,
			MinValue = 0,
			MaxValue = 6,
			Fields =
			{
				{ Name = "ClubName", Type = "ClubFieldType", EnumValue = 0 },
				{ Name = "ClubShortName", Type = "ClubFieldType", EnumValue = 1 },
				{ Name = "ClubDescription", Type = "ClubFieldType", EnumValue = 2 },
				{ Name = "ClubBroadcast", Type = "ClubFieldType", EnumValue = 3 },
				{ Name = "ClubStreamName", Type = "ClubFieldType", EnumValue = 4 },
				{ Name = "ClubStreamSubject", Type = "ClubFieldType", EnumValue = 5 },
				{ Name = "NumTypes", Type = "ClubFieldType", EnumValue = 6 },
			},
		},
		{
			Name = "ClubInvitationCandidateStatus",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 0,
			MaxValue = 2,
			Fields =
			{
				{ Name = "Available", Type = "ClubInvitationCandidateStatus", EnumValue = 0 },
				{ Name = "InvitePending", Type = "ClubInvitationCandidateStatus", EnumValue = 1 },
				{ Name = "AlreadyMember", Type = "ClubInvitationCandidateStatus", EnumValue = 2 },
			},
		},
		{
			Name = "ClubMemberPresence",
			Type = "Enumeration",
			NumValues = 6,
			MinValue = 0,
			MaxValue = 5,
			Fields =
			{
				{ Name = "Unknown", Type = "ClubMemberPresence", EnumValue = 0 },
				{ Name = "Online", Type = "ClubMemberPresence", EnumValue = 1 },
				{ Name = "OnlineMobile", Type = "ClubMemberPresence", EnumValue = 2 },
				{ Name = "Offline", Type = "ClubMemberPresence", EnumValue = 3 },
				{ Name = "Away", Type = "ClubMemberPresence", EnumValue = 4 },
				{ Name = "Busy", Type = "ClubMemberPresence", EnumValue = 5 },
			},
		},
		{
			Name = "ClubRemovedReason",
			Type = "Enumeration",
			NumValues = 4,
			MinValue = 0,
			MaxValue = 3,
			Fields =
			{
				{ Name = "None", Type = "ClubRemovedReason", EnumValue = 0 },
				{ Name = "Banned", Type = "ClubRemovedReason", EnumValue = 1 },
				{ Name = "Removed", Type = "ClubRemovedReason", EnumValue = 2 },
				{ Name = "ClubDestroyed", Type = "ClubRemovedReason", EnumValue = 3 },
			},
		},
		{
			Name = "ClubRestrictionReason",
			Type = "Enumeration",
			NumValues = 2,
			MinValue = 0,
			MaxValue = 1,
			Fields =
			{
				{ Name = "None", Type = "ClubRestrictionReason", EnumValue = 0 },
				{ Name = "Unavailable", Type = "ClubRestrictionReason", EnumValue = 1 },
			},
		},
		{
			Name = "ClubRoleIdentifier",
			Type = "Enumeration",
			NumValues = 4,
			MinValue = 1,
			MaxValue = 4,
			Fields =
			{
				{ Name = "Owner", Type = "ClubRoleIdentifier", EnumValue = 1 },
				{ Name = "Leader", Type = "ClubRoleIdentifier", EnumValue = 2 },
				{ Name = "Moderator", Type = "ClubRoleIdentifier", EnumValue = 3 },
				{ Name = "Member", Type = "ClubRoleIdentifier", EnumValue = 4 },
			},
		},
		{
			Name = "ClubStreamNotificationFilter",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 0,
			MaxValue = 2,
			Fields =
			{
				{ Name = "None", Type = "ClubStreamNotificationFilter", EnumValue = 0 },
				{ Name = "Mention", Type = "ClubStreamNotificationFilter", EnumValue = 1 },
				{ Name = "All", Type = "ClubStreamNotificationFilter", EnumValue = 2 },
			},
		},
		{
			Name = "ClubStreamType",
			Type = "Enumeration",
			NumValues = 4,
			MinValue = 0,
			MaxValue = 3,
			Fields =
			{
				{ Name = "General", Type = "ClubStreamType", EnumValue = 0 },
				{ Name = "Guild", Type = "ClubStreamType", EnumValue = 1 },
				{ Name = "Officer", Type = "ClubStreamType", EnumValue = 2 },
				{ Name = "Other", Type = "ClubStreamType", EnumValue = 3 },
			},
		},
		{
			Name = "ClubType",
			Type = "Enumeration",
			NumValues = 4,
			MinValue = 0,
			MaxValue = 3,
			Fields =
			{
				{ Name = "BattleNet", Type = "ClubType", EnumValue = 0 },
				{ Name = "Character", Type = "ClubType", EnumValue = 1 },
				{ Name = "Guild", Type = "ClubType", EnumValue = 2 },
				{ Name = "Other", Type = "ClubType", EnumValue = 3 },
			},
		},
		{
			Name = "ValidateNameResult",
			Type = "Enumeration",
			NumValues = 18,
			MinValue = 0,
			MaxValue = 17,
			Fields =
			{
				{ Name = "NameSuccess", Type = "ValidateNameResult", EnumValue = 0 },
				{ Name = "NameFailure", Type = "ValidateNameResult", EnumValue = 1 },
				{ Name = "NameNoName", Type = "ValidateNameResult", EnumValue = 2 },
				{ Name = "NameTooShort", Type = "ValidateNameResult", EnumValue = 3 },
				{ Name = "NameTooLong", Type = "ValidateNameResult", EnumValue = 4 },
				{ Name = "NameInvalidCharacter", Type = "ValidateNameResult", EnumValue = 5 },
				{ Name = "NameMixedLanguages", Type = "ValidateNameResult", EnumValue = 6 },
				{ Name = "NameProfane", Type = "ValidateNameResult", EnumValue = 7 },
				{ Name = "NameReserved", Type = "ValidateNameResult", EnumValue = 8 },
				{ Name = "NameInvalidApostrophe", Type = "ValidateNameResult", EnumValue = 9 },
				{ Name = "NameMultipleApostrophes", Type = "ValidateNameResult", EnumValue = 10 },
				{ Name = "NameThreeConsecutive", Type = "ValidateNameResult", EnumValue = 11 },
				{ Name = "NameInvalidSpace", Type = "ValidateNameResult", EnumValue = 12 },
				{ Name = "NameConsecutiveSpaces", Type = "ValidateNameResult", EnumValue = 13 },
				{ Name = "NameRussianConsecutiveSilentCharacters", Type = "ValidateNameResult", EnumValue = 14 },
				{ Name = "NameRussianSilentCharacterAtBeginningOrEnd", Type = "ValidateNameResult", EnumValue = 15 },
				{ Name = "NameDeclensionDoesntMatchBaseName", Type = "ValidateNameResult", EnumValue = 16 },
				{ Name = "NameSpacesDisallowed", Type = "ValidateNameResult", EnumValue = 17 },
			},
		},
		{
			Name = "ClubInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "shortName", Type = "string", Nilable = true },
				{ Name = "description", Type = "string", Nilable = false },
				{ Name = "broadcast", Type = "string", Nilable = false },
				{ Name = "clubType", Type = "ClubType", Nilable = false },
				{ Name = "avatarId", Type = "number", Nilable = false },
				{ Name = "memberCount", Type = "number", Nilable = true },
				{ Name = "favoriteTimeStamp", Type = "number", Nilable = true },
				{ Name = "joinTime", Type = "number", Nilable = true },
				{ Name = "socialQueueingEnabled", Type = "bool", Nilable = true },
				{ Name = "crossFaction", Type = "bool", Nilable = true },
			},
		},
		{
			Name = "ClubInvitationCandidateInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "memberId", Type = "number", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "priority", Type = "number", Nilable = false },
				{ Name = "status", Type = "ClubInvitationCandidateStatus", Nilable = false },
			},
		},
		{
			Name = "ClubInvitationInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "invitationId", Type = "string", Nilable = false },
				{ Name = "isMyInvitation", Type = "bool", Nilable = false },
				{ Name = "invitee", Type = "ClubMemberInfo", Nilable = false },
			},
		},
		{
			Name = "ClubLimits",
			Type = "Structure",
			Fields =
			{
				{ Name = "maximumNumberOfStreams", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ClubMemberInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "isSelf", Type = "bool", Nilable = false },
				{ Name = "memberId", Type = "number", Nilable = false },
				{ Name = "name", Type = "string", Nilable = true, Documentation = { "name may be encoded as a Kstring" } },
				{ Name = "role", Type = "ClubRoleIdentifier", Nilable = true },
				{ Name = "presence", Type = "ClubMemberPresence", Nilable = false },
				{ Name = "clubType", Type = "ClubType", Nilable = true },
				{ Name = "guid", Type = "string", Nilable = true },
				{ Name = "bnetAccountId", Type = "number", Nilable = true },
				{ Name = "memberNote", Type = "string", Nilable = true },
				{ Name = "officerNote", Type = "string", Nilable = true },
				{ Name = "classID", Type = "number", Nilable = true },
				{ Name = "race", Type = "number", Nilable = true },
				{ Name = "level", Type = "number", Nilable = true },
				{ Name = "zone", Type = "string", Nilable = true },
				{ Name = "achievementPoints", Type = "number", Nilable = true },
				{ Name = "profession1ID", Type = "number", Nilable = true },
				{ Name = "profession1Rank", Type = "number", Nilable = true },
				{ Name = "profession1Name", Type = "string", Nilable = true },
				{ Name = "profession2ID", Type = "number", Nilable = true },
				{ Name = "profession2Rank", Type = "number", Nilable = true },
				{ Name = "profession2Name", Type = "string", Nilable = true },
				{ Name = "lastOnlineYear", Type = "number", Nilable = true },
				{ Name = "lastOnlineMonth", Type = "number", Nilable = true },
				{ Name = "lastOnlineDay", Type = "number", Nilable = true },
				{ Name = "lastOnlineHour", Type = "number", Nilable = true },
				{ Name = "guildRank", Type = "string", Nilable = true },
				{ Name = "guildRankOrder", Type = "number", Nilable = true },
				{ Name = "isRemoteChat", Type = "bool", Nilable = true },
				{ Name = "overallDungeonScore", Type = "number", Nilable = true },
				{ Name = "faction", Type = "PvPFaction", Nilable = true },
			},
		},
		{
			Name = "ClubMessageIdentifier",
			Type = "Structure",
			Fields =
			{
				{ Name = "epoch", Type = "number", Nilable = false, Documentation = { "number of microseconds since the UNIX epoch." } },
				{ Name = "position", Type = "number", Nilable = false, Documentation = { "sort order for messages at the same time" } },
			},
		},
		{
			Name = "ClubMessageInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "messageId", Type = "ClubMessageIdentifier", Nilable = false },
				{ Name = "content", Type = "string", Nilable = false },
				{ Name = "author", Type = "ClubMemberInfo", Nilable = false },
				{ Name = "destroyer", Type = "ClubMemberInfo", Nilable = true, Documentation = { "May be nil even if the message has been destroyed" } },
				{ Name = "destroyed", Type = "bool", Nilable = false },
				{ Name = "edited", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ClubMessageRange",
			Type = "Structure",
			Fields =
			{
				{ Name = "oldestMessageId", Type = "ClubMessageIdentifier", Nilable = false },
				{ Name = "newestMessageId", Type = "ClubMessageIdentifier", Nilable = false },
			},
		},
		{
			Name = "ClubPrivilegeInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "canDestroy", Type = "bool", Nilable = false },
				{ Name = "canSetAttribute", Type = "bool", Nilable = false },
				{ Name = "canSetName", Type = "bool", Nilable = false },
				{ Name = "canSetDescription", Type = "bool", Nilable = false },
				{ Name = "canSetAvatar", Type = "bool", Nilable = false },
				{ Name = "canSetBroadcast", Type = "bool", Nilable = false },
				{ Name = "canSetPrivacyLevel", Type = "bool", Nilable = false },
				{ Name = "canSetOwnMemberAttribute", Type = "bool", Nilable = false },
				{ Name = "canSetOtherMemberAttribute", Type = "bool", Nilable = false },
				{ Name = "canSetOwnMemberNote", Type = "bool", Nilable = false },
				{ Name = "canSetOtherMemberNote", Type = "bool", Nilable = false },
				{ Name = "canSetOwnVoiceState", Type = "bool", Nilable = false },
				{ Name = "canSetOwnPresenceLevel", Type = "bool", Nilable = false },
				{ Name = "canUseVoice", Type = "bool", Nilable = false },
				{ Name = "canVoiceMuteMemberForAll", Type = "bool", Nilable = false },
				{ Name = "canGetInvitation", Type = "bool", Nilable = false },
				{ Name = "canSendInvitation", Type = "bool", Nilable = false },
				{ Name = "canSendGuestInvitation", Type = "bool", Nilable = false },
				{ Name = "canRevokeOwnInvitation", Type = "bool", Nilable = false },
				{ Name = "canRevokeOtherInvitation", Type = "bool", Nilable = false },
				{ Name = "canGetBan", Type = "bool", Nilable = false },
				{ Name = "canGetSuggestion", Type = "bool", Nilable = false },
				{ Name = "canSuggestMember", Type = "bool", Nilable = false },
				{ Name = "canGetTicket", Type = "bool", Nilable = false },
				{ Name = "canCreateTicket", Type = "bool", Nilable = false },
				{ Name = "canDestroyTicket", Type = "bool", Nilable = false },
				{ Name = "canAddBan", Type = "bool", Nilable = false },
				{ Name = "canRemoveBan", Type = "bool", Nilable = false },
				{ Name = "canCreateStream", Type = "bool", Nilable = false },
				{ Name = "canDestroyStream", Type = "bool", Nilable = false },
				{ Name = "canSetStreamPosition", Type = "bool", Nilable = false },
				{ Name = "canSetStreamAttribute", Type = "bool", Nilable = false },
				{ Name = "canSetStreamName", Type = "bool", Nilable = false },
				{ Name = "canSetStreamSubject", Type = "bool", Nilable = false },
				{ Name = "canSetStreamAccess", Type = "bool", Nilable = false },
				{ Name = "canSetStreamVoiceLevel", Type = "bool", Nilable = false },
				{ Name = "canCreateMessage", Type = "bool", Nilable = false },
				{ Name = "canDestroyOwnMessage", Type = "bool", Nilable = false },
				{ Name = "canDestroyOtherMessage", Type = "bool", Nilable = false },
				{ Name = "canEditOwnMessage", Type = "bool", Nilable = false },
				{ Name = "canPinMessage", Type = "bool", Nilable = false },
				{ Name = "kickableRoleIds", Type = "table", InnerType = "number", Nilable = false, Documentation = { "Roles that can be kicked and banned" } },
			},
		},
		{
			Name = "ClubSelfInvitationInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "invitationId", Type = "string", Nilable = false },
				{ Name = "club", Type = "ClubInfo", Nilable = false },
				{ Name = "inviter", Type = "ClubMemberInfo", Nilable = false },
				{ Name = "leaders", Type = "table", InnerType = "ClubMemberInfo", Nilable = false },
			},
		},
		{
			Name = "ClubStreamInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "streamId", Type = "string", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "subject", Type = "string", Nilable = false },
				{ Name = "leadersAndModeratorsOnly", Type = "bool", Nilable = false },
				{ Name = "streamType", Type = "ClubStreamType", Nilable = false },
				{ Name = "creationTime", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ClubStreamNotificationSetting",
			Type = "Structure",
			Fields =
			{
				{ Name = "streamId", Type = "string", Nilable = false },
				{ Name = "filter", Type = "ClubStreamNotificationFilter", Nilable = false },
			},
		},
		{
			Name = "ClubTicketInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "ticketId", Type = "string", Nilable = false },
				{ Name = "allowedRedeemCount", Type = "number", Nilable = false },
				{ Name = "currentRedeemCount", Type = "number", Nilable = false },
				{ Name = "creationTime", Type = "number", Nilable = false, Documentation = { "Creation time in microseconds since the UNIX epoch." } },
				{ Name = "expirationTime", Type = "number", Nilable = false, Documentation = { "Expiration time in microseconds since the UNIX epoch." } },
				{ Name = "defaultStreamId", Type = "string", Nilable = true },
				{ Name = "creator", Type = "ClubMemberInfo", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "ClubFinderInfo",
	Type = "System",
	Namespace = "C_ClubFinder",

	Functions =
	{
		{
			Name = "ApplicantAcceptClubInvite",
			Type = "Function",

			Arguments =
			{
				{ Name = "clubFinderGUID", Type = "string", Nilable = false },
			},
		},
		{
			Name = "ApplicantDeclineClubInvite",
			Type = "Function",

			Arguments =
			{
				{ Name = "clubFinderGUID", Type = "string", Nilable = false },
			},
		},
		{
			Name = "CancelMembershipRequest",
			Type = "Function",

			Arguments =
			{
				{ Name = "clubFinderGUID", Type = "string", Nilable = false },
			},
		},
		{
			Name = "CheckAllPlayerApplicantSettings",
			Type = "Function",
		},
		{
			Name = "ClearAllFinderCache",
			Type = "Function",
		},
		{
			Name = "ClearClubApplicantsCache",
			Type = "Function",
		},
		{
			Name = "ClearClubFinderPostingsCache",
			Type = "Function",
		},
		{
			Name = "DoesPlayerBelongToClubFromClubGUID",
			Type = "Function",

			Arguments =
			{
				{ Name = "clubFinderGUID", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "belongsToClub", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetClubFinderDisableReason",
			Type = "Function",

			Returns =
			{
				{ Name = "disableReason", Type = "ClubFinderDisableReason", Nilable = true },
			},
		},
		{
			Name = "GetClubRecruitmentSettings",
			Type = "Function",

			Returns =
			{
				{ Name = "settings", Type = "ClubSettingsInfo", Nilable = false },
			},
		},
		{
			Name = "GetClubTypeFromFinderGUID",
			Type = "Function",

			Arguments =
			{
				{ Name = "clubFinderGUID", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "clubType", Type = "ClubFinderRequestType", Nilable = false },
			},
		},
		{
			Name = "GetFocusIndexFromFlag",
			Type = "Function",

			Arguments =
			{
				{ Name = "flags", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "index", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetPlayerApplicantLocaleFlags",
			Type = "Function",

			Returns =
			{
				{ Name = "localeFlags", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetPlayerApplicantSettings",
			Type = "Function",

			Returns =
			{
				{ Name = "settings", Type = "ClubSettingsInfo", Nilable = false },
			},
		},
		{
			Name = "GetPlayerClubApplicationStatus",
			Type = "Function",

			Arguments =
			{
				{ Name = "clubFinderGUID", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "clubStatus", Type = "PlayerClubRequestStatus", Nilable = false },
			},
		},
		{
			Name = "GetPlayerSettingsFocusFlagsSelectedCount",
			Type = "Function",

			Returns =
			{
				{ Name = "focusCount", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetPostingIDFromClubFinderGUID",
			Type = "Function",

			Arguments =
			{
				{ Name = "clubFinderGUID", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "postingID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetRecruitingClubInfoFromClubID",
			Type = "Function",

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "clubInfo", Type = "RecruitingClubInfo", Nilable = true },
			},
		},
		{
			Name = "GetRecruitingClubInfoFromFinderGUID",
			Type = "Function",

			Arguments =
			{
				{ Name = "clubFinderGUID", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "clubInfo", Type = "RecruitingClubInfo", Nilable = false },
			},
		},
		{
			Name = "GetStatusOfPostingFromClubId",
			Type = "Function",

			Arguments =
			{
				{ Name = "postingID", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "postingFlags", Type = "table", InnerType = "ClubFinderClubPostingStatusFlags", Nilable = false },
			},
		},
		{
			Name = "GetTotalMatchingCommunityListSize",
			Type = "Function",

			Returns =
			{
				{ Name = "totalSize", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetTotalMatchingGuildListSize",
			Type = "Function",

			Returns =
			{
				{ Name = "totalSize", Type = "number", Nilable = false },
			},
		},
		{
			Name = "HasAlreadyAppliedToLinkedPosting",
			Type = "Function",

			Arguments =
			{
				{ Name = "clubFinderGUID", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "hasAlreadyApplied", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "HasPostingBeenDelisted",
			Type = "Function",

			Arguments =
			{
				{ Name = "postingID", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "postingDelisted", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsEnabled",
			Type = "Function",

			Returns =
			{
				{ Name = "isEnabled", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsListingEnabledFromFlags",
			Type = "Function",

			Arguments =
			{
				{ Name = "flags", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isListed", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsPostingBanned",
			Type = "Function",

			Arguments =
			{
				{ Name = "postingID", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "postingBanned", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "LookupClubPostingFromClubFinderGUID",
			Type = "Function",

			Arguments =
			{
				{ Name = "clubFinderGUID", Type = "string", Nilable = false },
				{ Name = "isLinkedPosting", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "PlayerGetClubInvitationList",
			Type = "Function",

			Returns =
			{
				{ Name = "inviteList", Type = "table", InnerType = "RecruitingClubInfo", Nilable = false },
			},
		},
		{
			Name = "PlayerRequestPendingClubsList",
			Type = "Function",

			Arguments =
			{
				{ Name = "type", Type = "ClubFinderRequestType", Nilable = false },
			},
		},
		{
			Name = "PlayerReturnPendingCommunitiesList",
			Type = "Function",

			Returns =
			{
				{ Name = "info", Type = "table", InnerType = "RecruitingClubInfo", Nilable = false },
			},
		},
		{
			Name = "PlayerReturnPendingGuildsList",
			Type = "Function",

			Returns =
			{
				{ Name = "info", Type = "table", InnerType = "RecruitingClubInfo", Nilable = false },
			},
		},
		{
			Name = "PostClub",
			Type = "Function",

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "itemLevelRequirement", Type = "number", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "description", Type = "string", Nilable = false },
				{ Name = "avatarId", Type = "number", Nilable = false },
				{ Name = "specs", Type = "table", InnerType = "number", Nilable = false },
				{ Name = "type", Type = "ClubFinderRequestType", Nilable = false },
				{ Name = "crossFaction", Type = "bool", Nilable = false, Default = false },
			},

			Returns =
			{
				{ Name = "succesful", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "RequestApplicantList",
			Type = "Function",

			Arguments =
			{
				{ Name = "type", Type = "ClubFinderRequestType", Nilable = false },
			},
		},
		{
			Name = "RequestClubsList",
			Type = "Function",

			Arguments =
			{
				{ Name = "guildListRequested", Type = "bool", Nilable = false },
				{ Name = "searchString", Type = "string", Nilable = false },
				{ Name = "specIDs", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "RequestMembershipToClub",
			Type = "Function",

			Arguments =
			{
				{ Name = "clubFinderGUID", Type = "string", Nilable = false },
				{ Name = "comment", Type = "string", Nilable = false },
				{ Name = "specIDs", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "RequestNextCommunityPage",
			Type = "Function",

			Arguments =
			{
				{ Name = "startingIndex", Type = "number", Nilable = false },
				{ Name = "pageSize", Type = "number", Nilable = false },
			},
		},
		{
			Name = "RequestNextGuildPage",
			Type = "Function",

			Arguments =
			{
				{ Name = "startingIndex", Type = "number", Nilable = false },
				{ Name = "pageSize", Type = "number", Nilable = false },
			},
		},
		{
			Name = "RequestPostingInformationFromClubId",
			Type = "Function",

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "success", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "RequestSubscribedClubPostingIDs",
			Type = "Function",
		},
		{
			Name = "ResetClubPostingMapCache",
			Type = "Function",
		},
		{
			Name = "RespondToApplicant",
			Type = "Function",

			Arguments =
			{
				{ Name = "clubFinderGUID", Type = "string", Nilable = false },
				{ Name = "playerGUID", Type = "string", Nilable = false },
				{ Name = "shouldAccept", Type = "bool", Nilable = false },
				{ Name = "requestType", Type = "ClubFinderRequestType", Nilable = false },
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "forceAccept", Type = "bool", Nilable = false },
				{ Name = "reported", Type = "bool", Nilable = true },
			},
		},
		{
			Name = "ReturnClubApplicantList",
			Type = "Function",

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "info", Type = "table", InnerType = "ClubFinderApplicantInfo", Nilable = false },
			},
		},
		{
			Name = "ReturnMatchingCommunityList",
			Type = "Function",

			Returns =
			{
				{ Name = "recruitingClubs", Type = "table", InnerType = "RecruitingClubInfo", Nilable = false },
			},
		},
		{
			Name = "ReturnMatchingGuildList",
			Type = "Function",

			Returns =
			{
				{ Name = "recruitingClubs", Type = "table", InnerType = "RecruitingClubInfo", Nilable = false },
			},
		},
		{
			Name = "ReturnPendingClubApplicantList",
			Type = "Function",

			Arguments =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "info", Type = "table", InnerType = "ClubFinderApplicantInfo", Nilable = false },
			},
		},
		{
			Name = "SendChatWhisper",
			Type = "Function",

			Arguments =
			{
				{ Name = "clubFinderGUID", Type = "string", Nilable = false },
				{ Name = "playerGUID", Type = "string", Nilable = false },
				{ Name = "applicantType", Type = "ClubFinderRequestType", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetAllRecruitmentSettings",
			Type = "Function",

			Arguments =
			{
				{ Name = "value", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetPlayerApplicantLocaleFlags",
			Type = "Function",

			Arguments =
			{
				{ Name = "localeFlags", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetPlayerApplicantSettings",
			Type = "Function",

			Arguments =
			{
				{ Name = "index", Type = "number", Nilable = false },
				{ Name = "checked", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetRecruitmentLocale",
			Type = "Function",

			Arguments =
			{
				{ Name = "locale", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetRecruitmentSettings",
			Type = "Function",

			Arguments =
			{
				{ Name = "index", Type = "number", Nilable = false },
				{ Name = "checked", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ShouldShowClubFinder",
			Type = "Function",

			Returns =
			{
				{ Name = "shouldShow", Type = "bool", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "ClubFinderApplicantInviteRecieved",
			Type = "Event",
			LiteralName = "CLUB_FINDER_APPLICANT_INVITE_RECIEVED",
			Payload =
			{
				{ Name = "clubFinderGUIDs", Type = "table", InnerType = "string", Nilable = false },
			},
		},
		{
			Name = "ClubFinderApplicationsUpdated",
			Type = "Event",
			LiteralName = "CLUB_FINDER_APPLICATIONS_UPDATED",
			Payload =
			{
				{ Name = "type", Type = "ClubFinderRequestType", Nilable = false },
				{ Name = "clubFinderGUIDs", Type = "table", InnerType = "string", Nilable = false },
			},
		},
		{
			Name = "ClubFinderCanWhisperApplicant",
			Type = "Event",
			LiteralName = "CLUB_FINDER_CAN_WHISPER_APPLICANT",
			Payload =
			{
				{ Name = "applicant", Type = "string", Nilable = false },
			},
		},
		{
			Name = "ClubFinderClubListReturned",
			Type = "Event",
			LiteralName = "CLUB_FINDER_CLUB_LIST_RETURNED",
			Documentation = { "Signals when we recieve club data that can be used" },
			Payload =
			{
				{ Name = "type", Type = "ClubFinderRequestType", Nilable = false },
			},
		},
		{
			Name = "ClubFinderClubReported",
			Type = "Event",
			LiteralName = "CLUB_FINDER_CLUB_REPORTED",
			Documentation = { "Sends an update to the UI about a reported guild or community." },
			Payload =
			{
				{ Name = "type", Type = "ClubFinderRequestType", Nilable = false },
				{ Name = "clubFinderGUID", Type = "string", Nilable = false },
			},
		},
		{
			Name = "ClubFinderCommunityOfflineJoin",
			Type = "Event",
			LiteralName = "CLUB_FINDER_COMMUNITY_OFFLINE_JOIN",
			Documentation = { "Signals to the UI that you (the player) have joined a community offline." },
			Payload =
			{
				{ Name = "clubId", Type = "string", Nilable = false },
			},
		},
		{
			Name = "ClubFinderEnabledOrDisabled",
			Type = "Event",
			LiteralName = "CLUB_FINDER_ENABLED_OR_DISABLED",
			Documentation = { "Sends an update to the UI that the club finder feature has been enabled or disabled." },
		},
		{
			Name = "ClubFinderLinkedClubReturned",
			Type = "Event",
			LiteralName = "CLUB_FINDER_LINKED_CLUB_RETURNED",
			Documentation = { "When a player clicks a club link, this returns that information back about the club they clicked on" },
			Payload =
			{
				{ Name = "clubInfo", Type = "RecruitingClubInfo", Nilable = false },
			},
		},
		{
			Name = "ClubFinderMembershipListChanged",
			Type = "Event",
			LiteralName = "CLUB_FINDER_MEMBERSHIP_LIST_CHANGED",
		},
		{
			Name = "ClubFinderPlayerPendingListRecieved",
			Type = "Event",
			LiteralName = "CLUB_FINDER_PLAYER_PENDING_LIST_RECIEVED",
			Payload =
			{
				{ Name = "type", Type = "ClubFinderRequestType", Nilable = false },
			},
		},
		{
			Name = "ClubFinderPostUpdated",
			Type = "Event",
			LiteralName = "CLUB_FINDER_POST_UPDATED",
			Payload =
			{
				{ Name = "clubFinderGUIDs", Type = "table", InnerType = "string", Nilable = false },
			},
		},
		{
			Name = "ClubFinderRecruitListChanged",
			Type = "Event",
			LiteralName = "CLUB_FINDER_RECRUIT_LIST_CHANGED",
		},
		{
			Name = "ClubFinderRecruitmentPostReturned",
			Type = "Event",
			LiteralName = "CLUB_FINDER_RECRUITMENT_POST_RETURNED",
			Documentation = { "Signals when our recruitment post we just requested is returned back to us" },
			Payload =
			{
				{ Name = "type", Type = "ClubFinderRequestType", Nilable = false },
			},
		},
		{
			Name = "ClubFinderRecruitsUpdated",
			Type = "Event",
			LiteralName = "CLUB_FINDER_RECRUITS_UPDATED",
			Documentation = { "Signals when we recieve the recruits list" },
			Payload =
			{
				{ Name = "type", Type = "ClubFinderRequestType", Nilable = false },
			},
		},
	},

	Tables =
	{
		{
			Name = "ClubFinderApplicationUpdateType",
			Type = "Enumeration",
			NumValues = 4,
			MinValue = 0,
			MaxValue = 3,
			Fields =
			{
				{ Name = "None", Type = "ClubFinderApplicationUpdateType", EnumValue = 0 },
				{ Name = "AcceptInvite", Type = "ClubFinderApplicationUpdateType", EnumValue = 1 },
				{ Name = "DeclineInvite", Type = "ClubFinderApplicationUpdateType", EnumValue = 2 },
				{ Name = "Cancel", Type = "ClubFinderApplicationUpdateType", EnumValue = 3 },
			},
		},
		{
			Name = "ClubFinderClubPostingStatusFlags",
			Type = "Enumeration",
			NumValues = 9,
			MinValue = 0,
			MaxValue = 8,
			Fields =
			{
				{ Name = "None", Type = "ClubFinderClubPostingStatusFlags", EnumValue = 0 },
				{ Name = "NeedsCacheUpdate", Type = "ClubFinderClubPostingStatusFlags", EnumValue = 1 },
				{ Name = "ForceDescriptionChange", Type = "ClubFinderClubPostingStatusFlags", EnumValue = 2 },
				{ Name = "ForceNameChange", Type = "ClubFinderClubPostingStatusFlags", EnumValue = 3 },
				{ Name = "UnderReview", Type = "ClubFinderClubPostingStatusFlags", EnumValue = 4 },
				{ Name = "Banned", Type = "ClubFinderClubPostingStatusFlags", EnumValue = 5 },
				{ Name = "FakePost", Type = "ClubFinderClubPostingStatusFlags", EnumValue = 6 },
				{ Name = "PendingDelete", Type = "ClubFinderClubPostingStatusFlags", EnumValue = 7 },
				{ Name = "PostDelisted", Type = "ClubFinderClubPostingStatusFlags", EnumValue = 8 },
			},
		},
		{
			Name = "ClubFinderDisableReason",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 0,
			MaxValue = 2,
			Fields =
			{
				{ Name = "Muted", Type = "ClubFinderDisableReason", EnumValue = 0 },
				{ Name = "Silenced", Type = "ClubFinderDisableReason", EnumValue = 1 },
				{ Name = "VeteranTrial", Type = "ClubFinderDisableReason", EnumValue = 2 },
			},
		},
		{
			Name = "ClubFinderPostingReportType",
			Type = "Enumeration",
			NumValues = 5,
			MinValue = 0,
			MaxValue = 4,
			Fields =
			{
				{ Name = "PostersName", Type = "ClubFinderPostingReportType", EnumValue = 0 },
				{ Name = "ClubName", Type = "ClubFinderPostingReportType", EnumValue = 1 },
				{ Name = "PostingDescription", Type = "ClubFinderPostingReportType", EnumValue = 2 },
				{ Name = "ApplicantsName", Type = "ClubFinderPostingReportType", EnumValue = 3 },
				{ Name = "JoinNote", Type = "ClubFinderPostingReportType", EnumValue = 4 },
			},
		},
		{
			Name = "ClubFinderRequestType",
			Type = "Enumeration",
			NumValues = 4,
			MinValue = 0,
			MaxValue = 3,
			Fields =
			{
				{ Name = "None", Type = "ClubFinderRequestType", EnumValue = 0 },
				{ Name = "Guild", Type = "ClubFinderRequestType", EnumValue = 1 },
				{ Name = "Community", Type = "ClubFinderRequestType", EnumValue = 2 },
				{ Name = "All", Type = "ClubFinderRequestType", EnumValue = 3 },
			},
		},
		{
			Name = "ClubFinderSettingFlags",
			Type = "Enumeration",
			NumValues = 26,
			MinValue = 0,
			MaxValue = 25,
			Fields =
			{
				{ Name = "None", Type = "ClubFinderSettingFlags", EnumValue = 0 },
				{ Name = "Dungeons", Type = "ClubFinderSettingFlags", EnumValue = 1 },
				{ Name = "Raids", Type = "ClubFinderSettingFlags", EnumValue = 2 },
				{ Name = "PvP", Type = "ClubFinderSettingFlags", EnumValue = 3 },
				{ Name = "RP", Type = "ClubFinderSettingFlags", EnumValue = 4 },
				{ Name = "Social", Type = "ClubFinderSettingFlags", EnumValue = 5 },
				{ Name = "Small", Type = "ClubFinderSettingFlags", EnumValue = 6 },
				{ Name = "Medium", Type = "ClubFinderSettingFlags", EnumValue = 7 },
				{ Name = "Large", Type = "ClubFinderSettingFlags", EnumValue = 8 },
				{ Name = "Tank", Type = "ClubFinderSettingFlags", EnumValue = 9 },
				{ Name = "Healer", Type = "ClubFinderSettingFlags", EnumValue = 10 },
				{ Name = "Damage", Type = "ClubFinderSettingFlags", EnumValue = 11 },
				{ Name = "EnableListing", Type = "ClubFinderSettingFlags", EnumValue = 12 },
				{ Name = "MaxLevelOnly", Type = "ClubFinderSettingFlags", EnumValue = 13 },
				{ Name = "AutoAccept", Type = "ClubFinderSettingFlags", EnumValue = 14 },
				{ Name = "FactionHorde", Type = "ClubFinderSettingFlags", EnumValue = 15 },
				{ Name = "FactionAlliance", Type = "ClubFinderSettingFlags", EnumValue = 16 },
				{ Name = "FactionNeutral", Type = "ClubFinderSettingFlags", EnumValue = 17 },
				{ Name = "SortRelevance", Type = "ClubFinderSettingFlags", EnumValue = 18 },
				{ Name = "SortMemberCount", Type = "ClubFinderSettingFlags", EnumValue = 19 },
				{ Name = "SortNewest", Type = "ClubFinderSettingFlags", EnumValue = 20 },
				{ Name = "LanguageReserved1", Type = "ClubFinderSettingFlags", EnumValue = 21 },
				{ Name = "LanguageReserved2", Type = "ClubFinderSettingFlags", EnumValue = 22 },
				{ Name = "LanguageReserved3", Type = "ClubFinderSettingFlags", EnumValue = 23 },
				{ Name = "LanguageReserved4", Type = "ClubFinderSettingFlags", EnumValue = 24 },
				{ Name = "LanguageReserved5", Type = "ClubFinderSettingFlags", EnumValue = 25 },
			},
		},
		{
			Name = "PlayerClubRequestStatus",
			Type = "Enumeration",
			NumValues = 8,
			MinValue = 0,
			MaxValue = 7,
			Fields =
			{
				{ Name = "None", Type = "PlayerClubRequestStatus", EnumValue = 0 },
				{ Name = "Pending", Type = "PlayerClubRequestStatus", EnumValue = 1 },
				{ Name = "AutoApproved", Type = "PlayerClubRequestStatus", EnumValue = 2 },
				{ Name = "Declined", Type = "PlayerClubRequestStatus", EnumValue = 3 },
				{ Name = "Approved", Type = "PlayerClubRequestStatus", EnumValue = 4 },
				{ Name = "Joined", Type = "PlayerClubRequestStatus", EnumValue = 5 },
				{ Name = "JoinedAnother", Type = "PlayerClubRequestStatus", EnumValue = 6 },
				{ Name = "Canceled", Type = "PlayerClubRequestStatus", EnumValue = 7 },
			},
		},
		{
			Name = "ClubFinderApplicantInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "clubFinderGUID", Type = "string", Nilable = false },
				{ Name = "playerGUID", Type = "string", Nilable = false },
				{ Name = "closed", Type = "number", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "message", Type = "string", Nilable = false },
				{ Name = "level", Type = "number", Nilable = false },
				{ Name = "classID", Type = "number", Nilable = false },
				{ Name = "ilvl", Type = "number", Nilable = false },
				{ Name = "specIds", Type = "table", InnerType = "number", Nilable = false },
				{ Name = "requestStatus", Type = "PlayerClubRequestStatus", Nilable = false },
				{ Name = "lookupSuccess", Type = "bool", Nilable = false },
				{ Name = "lastUpdatedTime", Type = "number", Nilable = false },
				{ Name = "faction", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ClubSettingsInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "playStyleDungeon", Type = "bool", Nilable = false },
				{ Name = "playStyleRaids", Type = "bool", Nilable = false },
				{ Name = "playStylePvp", Type = "bool", Nilable = false },
				{ Name = "playStyleRP", Type = "bool", Nilable = false },
				{ Name = "playStyleSocial", Type = "bool", Nilable = false },
				{ Name = "roleTank", Type = "bool", Nilable = false },
				{ Name = "roleHealer", Type = "bool", Nilable = false },
				{ Name = "roleDps", Type = "bool", Nilable = false },
				{ Name = "sizeSmall", Type = "bool", Nilable = false },
				{ Name = "sizeMedium", Type = "bool", Nilable = false },
				{ Name = "sizeLarge", Type = "bool", Nilable = false },
				{ Name = "maxLevelOnly", Type = "bool", Nilable = false },
				{ Name = "enableListing", Type = "bool", Nilable = false },
				{ Name = "sortRelevance", Type = "bool", Nilable = false },
				{ Name = "sortMembers", Type = "bool", Nilable = false },
				{ Name = "sortNewest", Type = "bool", Nilable = false },
				{ Name = "autoAccept", Type = "bool", Nilable = false },
				{ Name = "crossFaction", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "RecruitingClubInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "clubFinderGUID", Type = "string", Nilable = false },
				{ Name = "numActiveMembers", Type = "number", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "comment", Type = "string", Nilable = false },
				{ Name = "guildLeader", Type = "string", Nilable = false },
				{ Name = "isGuild", Type = "bool", Nilable = false },
				{ Name = "emblemInfo", Type = "number", Nilable = false },
				{ Name = "tabardInfo", Type = "GuildTabardInfo", Nilable = true },
				{ Name = "recruitingSpecIds", Type = "table", InnerType = "number", Nilable = false },
				{ Name = "recruitmentFlags", Type = "number", Nilable = false },
				{ Name = "localeSet", Type = "bool", Nilable = false },
				{ Name = "recruitmentLocale", Type = "number", Nilable = false },
				{ Name = "minILvl", Type = "number", Nilable = false },
				{ Name = "cached", Type = "number", Nilable = false },
				{ Name = "cacheRequested", Type = "number", Nilable = false },
				{ Name = "lastPosterGUID", Type = "string", Nilable = false },
				{ Name = "clubId", Type = "string", Nilable = false },
				{ Name = "lastUpdatedTime", Type = "number", Nilable = false },
				{ Name = "isCrossFaction", Type = "bool", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "CommentatorFrame",
	Type = "System",
	Namespace = "C_Commentator",

	Functions =
	{
		{
			Name = "AddPlayerOverrideName",
			Type = "Function",

			Arguments =
			{
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "overrideName", Type = "string", Nilable = false },
			},
		},
		{
			Name = "AddTrackedDefensiveAuras",
			Type = "Function",

			Arguments =
			{
				{ Name = "spellIDs", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "AddTrackedOffensiveAuras",
			Type = "Function",

			Arguments =
			{
				{ Name = "spellIDs", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "AreTeamsSwapped",
			Type = "Function",

			Returns =
			{
				{ Name = "teamsAreSwapped", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "AssignPlayerToTeam",
			Type = "Function",

			Arguments =
			{
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "teamName", Type = "string", Nilable = false },
			},
		},
		{
			Name = "AssignPlayersToTeam",
			Type = "Function",

			Arguments =
			{
				{ Name = "playerName", Type = "table", InnerType = "string", Nilable = false },
				{ Name = "teamName", Type = "string", Nilable = false },
			},
		},
		{
			Name = "AssignPlayersToTeamInCurrentInstance",
			Type = "Function",

			Arguments =
			{
				{ Name = "teamIndex", Type = "number", Nilable = false },
				{ Name = "teamName", Type = "string", Nilable = false },
			},
		},
		{
			Name = "CanUseCommentatorCheats",
			Type = "Function",

			Returns =
			{
				{ Name = "canUseCommentatorCheats", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ClearCameraTarget",
			Type = "Function",
		},
		{
			Name = "ClearFollowTarget",
			Type = "Function",
		},
		{
			Name = "ClearLookAtTarget",
			Type = "Function",

			Arguments =
			{
				{ Name = "lookAtIndex", Type = "number", Nilable = true },
			},
		},
		{
			Name = "EnterInstance",
			Type = "Function",
		},
		{
			Name = "ExitInstance",
			Type = "Function",
		},
		{
			Name = "FindSpectatedUnit",
			Type = "Function",

			Arguments =
			{
				{ Name = "unitToken", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "playerIndex", Type = "number", Nilable = false },
				{ Name = "teamIndex", Type = "number", Nilable = false },
				{ Name = "isPet", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "FindTeamNameInCurrentInstance",
			Type = "Function",

			Arguments =
			{
				{ Name = "teamIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "teamName", Type = "string", Nilable = true },
			},
		},
		{
			Name = "FindTeamNameInDirectory",
			Type = "Function",

			Arguments =
			{
				{ Name = "playerNames", Type = "table", InnerType = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "teamName", Type = "string", Nilable = true },
			},
		},
		{
			Name = "FlushCommentatorHistory",
			Type = "Function",
		},
		{
			Name = "FollowPlayer",
			Type = "Function",

			Arguments =
			{
				{ Name = "factionIndex", Type = "number", Nilable = false },
				{ Name = "playerIndex", Type = "number", Nilable = false },
				{ Name = "forceInstantTransition", Type = "bool", Nilable = true },
			},
		},
		{
			Name = "FollowUnit",
			Type = "Function",

			Arguments =
			{
				{ Name = "token", Type = "string", Nilable = false },
			},
		},
		{
			Name = "ForceFollowTransition",
			Type = "Function",
		},
		{
			Name = "GetAdditionalCameraWeight",
			Type = "Function",

			Returns =
			{
				{ Name = "teamIndex", Type = "number", Nilable = false },
				{ Name = "playerIndex", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetAdditionalCameraWeightByToken",
			Type = "Function",

			Arguments =
			{
				{ Name = "unitToken", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "weight", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetAllPlayerOverrideNames",
			Type = "Function",

			Returns =
			{
				{ Name = "nameEntries", Type = "table", InnerType = "NameOverrideEntry", Nilable = false },
			},
		},
		{
			Name = "GetCamera",
			Type = "Function",

			Returns =
			{
				{ Name = "xPos", Type = "number", Nilable = false },
				{ Name = "yPos", Type = "number", Nilable = false },
				{ Name = "zPos", Type = "number", Nilable = false },
				{ Name = "yaw", Type = "number", Nilable = false },
				{ Name = "pitch", Type = "number", Nilable = false },
				{ Name = "roll", Type = "number", Nilable = false },
				{ Name = "fov", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetCameraCollision",
			Type = "Function",

			Returns =
			{
				{ Name = "isColliding", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetCameraPosition",
			Type = "Function",

			Returns =
			{
				{ Name = "xPos", Type = "number", Nilable = false },
				{ Name = "yPos", Type = "number", Nilable = false },
				{ Name = "zPos", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetCommentatorHistory",
			Type = "Function",

			Returns =
			{
				{ Name = "history", Type = "CommentatorHistory", Nilable = false },
			},
		},
		{
			Name = "GetCurrentMapID",
			Type = "Function",

			Returns =
			{
				{ Name = "mapID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetDampeningPercent",
			Type = "Function",

			Returns =
			{
				{ Name = "percentage", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetDistanceBeforeForcedHorizontalConvergence",
			Type = "Function",

			Returns =
			{
				{ Name = "distance", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetDurationToForceHorizontalConvergence",
			Type = "Function",

			Returns =
			{
				{ Name = "ms", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetExcludeDistance",
			Type = "Function",

			Returns =
			{
				{ Name = "excludeDistance", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetHardlockWeight",
			Type = "Function",

			Returns =
			{
				{ Name = "weight", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetHorizontalAngleThresholdToSmooth",
			Type = "Function",

			Returns =
			{
				{ Name = "angle", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetIndirectSpellID",
			Type = "Function",

			Arguments =
			{
				{ Name = "trackedSpellID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "indirectSpellID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetInstanceInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "mapIndex", Type = "number", Nilable = false },
				{ Name = "instanceIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "mapID", Type = "number", Nilable = false },
				{ Name = "mapName", Type = "string", Nilable = true },
				{ Name = "status", Type = "number", Nilable = false },
				{ Name = "instanceIDLow", Type = "number", Nilable = false },
				{ Name = "instanceIDHigh", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetLookAtLerpAmount",
			Type = "Function",

			Returns =
			{
				{ Name = "amount", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetMapInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "mapIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "teamSize", Type = "number", Nilable = false },
				{ Name = "minLevel", Type = "number", Nilable = false },
				{ Name = "maxLevel", Type = "number", Nilable = false },
				{ Name = "numInstances", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetMatchDuration",
			Type = "Function",

			Returns =
			{
				{ Name = "seconds", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetMaxNumPlayersPerTeam",
			Type = "Function",

			Returns =
			{
				{ Name = "maxNumPlayersPerTeam", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetMaxNumTeams",
			Type = "Function",

			Returns =
			{
				{ Name = "maxNumTeams", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetMode",
			Type = "Function",

			Returns =
			{
				{ Name = "commentatorMode", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetMsToHoldForHorizontalMovement",
			Type = "Function",

			Returns =
			{
				{ Name = "ms", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetMsToHoldForVerticalMovement",
			Type = "Function",

			Returns =
			{
				{ Name = "ms", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetMsToSmoothHorizontalChange",
			Type = "Function",

			Returns =
			{
				{ Name = "ms", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetMsToSmoothVerticalChange",
			Type = "Function",

			Returns =
			{
				{ Name = "ms", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetNumMaps",
			Type = "Function",

			Returns =
			{
				{ Name = "numMaps", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetNumPlayers",
			Type = "Function",

			Arguments =
			{
				{ Name = "factionIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "numPlayers", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetOrCreateSeries",
			Type = "Function",

			Arguments =
			{
				{ Name = "teamName1", Type = "string", Nilable = false },
				{ Name = "teamName2", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "data", Type = "CommentatorSeries", Nilable = false },
			},
		},
		{
			Name = "GetPlayerAuraInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "teamIndex", Type = "number", Nilable = false },
				{ Name = "playerIndex", Type = "number", Nilable = false },
				{ Name = "spellID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "startTime", Type = "number", Nilable = false },
				{ Name = "duration", Type = "number", Nilable = false },
				{ Name = "enable", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetPlayerAuraInfoByUnit",
			Type = "Function",

			Arguments =
			{
				{ Name = "token", Type = "string", Nilable = false },
				{ Name = "spellID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "startTime", Type = "number", Nilable = false },
				{ Name = "duration", Type = "number", Nilable = false },
				{ Name = "enable", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetPlayerCooldownInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "teamIndex", Type = "number", Nilable = false },
				{ Name = "playerIndex", Type = "number", Nilable = false },
				{ Name = "spellID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "startTime", Type = "number", Nilable = false },
				{ Name = "duration", Type = "number", Nilable = false },
				{ Name = "enable", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetPlayerCooldownInfoByUnit",
			Type = "Function",

			Arguments =
			{
				{ Name = "unitToken", Type = "string", Nilable = false },
				{ Name = "spellID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "startTime", Type = "number", Nilable = false },
				{ Name = "duration", Type = "number", Nilable = false },
				{ Name = "enable", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetPlayerCrowdControlInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "teamIndex", Type = "number", Nilable = false },
				{ Name = "playerIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "spellID", Type = "number", Nilable = false },
				{ Name = "expiration", Type = "number", Nilable = false },
				{ Name = "duration", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetPlayerCrowdControlInfoByUnit",
			Type = "Function",

			Arguments =
			{
				{ Name = "token", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "spellID", Type = "number", Nilable = false },
				{ Name = "expiration", Type = "number", Nilable = false },
				{ Name = "duration", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetPlayerData",
			Type = "Function",

			Arguments =
			{
				{ Name = "teamIndex", Type = "number", Nilable = false },
				{ Name = "playerIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "info", Type = "CommentatorPlayerData", Nilable = true },
			},
		},
		{
			Name = "GetPlayerFlagInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "teamIndex", Type = "number", Nilable = false },
				{ Name = "playerIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "hasFlag", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetPlayerFlagInfoByUnit",
			Type = "Function",

			Arguments =
			{
				{ Name = "unitToken", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "hasFlag", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetPlayerOverrideName",
			Type = "Function",

			Arguments =
			{
				{ Name = "originalName", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "overrideName", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetPlayerSpellCharges",
			Type = "Function",

			Arguments =
			{
				{ Name = "teamIndex", Type = "number", Nilable = false },
				{ Name = "playerIndex", Type = "number", Nilable = false },
				{ Name = "spellID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "charges", Type = "number", Nilable = false },
				{ Name = "maxCharges", Type = "number", Nilable = false },
				{ Name = "startTime", Type = "number", Nilable = false },
				{ Name = "duration", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetPlayerSpellChargesByUnit",
			Type = "Function",

			Arguments =
			{
				{ Name = "unitToken", Type = "string", Nilable = false },
				{ Name = "spellID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "charges", Type = "number", Nilable = false },
				{ Name = "maxCharges", Type = "number", Nilable = false },
				{ Name = "startTime", Type = "number", Nilable = false },
				{ Name = "duration", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetPositionLerpAmount",
			Type = "Function",

			Returns =
			{
				{ Name = "amount", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetSmoothFollowTransitioning",
			Type = "Function",

			Returns =
			{
				{ Name = "enabled", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetSoftlockWeight",
			Type = "Function",

			Returns =
			{
				{ Name = "weight", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetSpeedFactor",
			Type = "Function",

			Returns =
			{
				{ Name = "factor", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetStartLocation",
			Type = "Function",

			Arguments =
			{
				{ Name = "mapID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "pos", Type = "table", Mixin = "Vector3DMixin", Nilable = false },
			},
		},
		{
			Name = "GetTeamColor",
			Type = "Function",

			Arguments =
			{
				{ Name = "teamIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "color", Type = "table", Mixin = "ColorMixin", Nilable = false },
			},
		},
		{
			Name = "GetTeamColorByUnit",
			Type = "Function",

			Arguments =
			{
				{ Name = "unitToken", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "color", Type = "table", Mixin = "ColorMixin", Nilable = false },
			},
		},
		{
			Name = "GetTimeLeftInMatch",
			Type = "Function",

			Returns =
			{
				{ Name = "timeLeft", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetTrackedSpellID",
			Type = "Function",

			Arguments =
			{
				{ Name = "indirectSpellID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "trackedSpellID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetTrackedSpells",
			Type = "Function",

			Arguments =
			{
				{ Name = "teamIndex", Type = "number", Nilable = false },
				{ Name = "playerIndex", Type = "number", Nilable = false },
				{ Name = "category", Type = "TrackedSpellCategory", Nilable = false },
			},

			Returns =
			{
				{ Name = "spells", Type = "table", InnerType = "number", Nilable = true },
			},
		},
		{
			Name = "GetTrackedSpellsByUnit",
			Type = "Function",

			Arguments =
			{
				{ Name = "unitToken", Type = "string", Nilable = false },
				{ Name = "category", Type = "TrackedSpellCategory", Nilable = false },
			},

			Returns =
			{
				{ Name = "spells", Type = "table", InnerType = "number", Nilable = true },
			},
		},
		{
			Name = "GetUnitData",
			Type = "Function",

			Arguments =
			{
				{ Name = "unitToken", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "data", Type = "CommentatorUnitData", Nilable = false },
			},
		},
		{
			Name = "GetWargameInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "listID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "minPlayers", Type = "number", Nilable = false },
				{ Name = "maxPlayers", Type = "number", Nilable = false },
				{ Name = "isArena", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "HasTrackedAuras",
			Type = "Function",

			Arguments =
			{
				{ Name = "token", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "hasOffensiveAura", Type = "bool", Nilable = false },
				{ Name = "hasDefensiveAura", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsSmartCameraLocked",
			Type = "Function",

			Returns =
			{
				{ Name = "isSmartCameraLocked", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsSpectating",
			Type = "Function",

			Returns =
			{
				{ Name = "isSpectating", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsTrackedDefensiveAura",
			Type = "Function",

			Arguments =
			{
				{ Name = "spellID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isDefensiveTrigger", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsTrackedOffensiveAura",
			Type = "Function",

			Arguments =
			{
				{ Name = "spellID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isOffensiveTrigger", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsTrackedSpell",
			Type = "Function",

			Arguments =
			{
				{ Name = "teamIndex", Type = "number", Nilable = false },
				{ Name = "playerIndex", Type = "number", Nilable = false },
				{ Name = "spellID", Type = "number", Nilable = false },
				{ Name = "category", Type = "TrackedSpellCategory", Nilable = false },
			},

			Returns =
			{
				{ Name = "isTracked", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsTrackedSpellByUnit",
			Type = "Function",

			Arguments =
			{
				{ Name = "unitToken", Type = "string", Nilable = false },
				{ Name = "spellID", Type = "number", Nilable = false },
				{ Name = "category", Type = "TrackedSpellCategory", Nilable = false },
			},

			Returns =
			{
				{ Name = "isTracked", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsUsingSmartCamera",
			Type = "Function",

			Returns =
			{
				{ Name = "isUsingSmartCamera", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "LookAtPlayer",
			Type = "Function",

			Arguments =
			{
				{ Name = "factionIndex", Type = "number", Nilable = false },
				{ Name = "playerIndex", Type = "number", Nilable = false },
				{ Name = "lookAtIndex", Type = "number", Nilable = true },
			},
		},
		{
			Name = "RemoveAllOverrideNames",
			Type = "Function",
		},
		{
			Name = "RemovePlayerOverrideName",
			Type = "Function",

			Arguments =
			{
				{ Name = "originalPlayerName", Type = "string", Nilable = false },
			},
		},
		{
			Name = "RequestPlayerCooldownInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "teamIndex", Type = "number", Nilable = false },
				{ Name = "playerIndex", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ResetFoVTarget",
			Type = "Function",
		},
		{
			Name = "ResetSeriesScores",
			Type = "Function",

			Arguments =
			{
				{ Name = "teamName1", Type = "string", Nilable = false },
				{ Name = "teamName2", Type = "string", Nilable = false },
			},
		},
		{
			Name = "ResetSettings",
			Type = "Function",
		},
		{
			Name = "ResetTrackedAuras",
			Type = "Function",
		},
		{
			Name = "SetAdditionalCameraWeight",
			Type = "Function",

			Arguments =
			{
				{ Name = "teamIndex", Type = "number", Nilable = false },
				{ Name = "playerIndex", Type = "number", Nilable = false },
				{ Name = "weight", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetAdditionalCameraWeightByToken",
			Type = "Function",

			Arguments =
			{
				{ Name = "unitToken", Type = "string", Nilable = false },
				{ Name = "weight", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetBlocklistedAuras",
			Type = "Function",

			Arguments =
			{
				{ Name = "spellIDs", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "SetBlocklistedCooldowns",
			Type = "Function",

			Arguments =
			{
				{ Name = "specID", Type = "number", Nilable = false },
				{ Name = "spellIDs", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "SetCamera",
			Type = "Function",

			Arguments =
			{
				{ Name = "xPos", Type = "number", Nilable = false },
				{ Name = "yPos", Type = "number", Nilable = false },
				{ Name = "zPos", Type = "number", Nilable = false },
				{ Name = "yaw", Type = "number", Nilable = false },
				{ Name = "pitch", Type = "number", Nilable = false },
				{ Name = "roll", Type = "number", Nilable = false },
				{ Name = "fov", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetCameraCollision",
			Type = "Function",

			Arguments =
			{
				{ Name = "collide", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetCameraPosition",
			Type = "Function",

			Arguments =
			{
				{ Name = "xPos", Type = "number", Nilable = false },
				{ Name = "yPos", Type = "number", Nilable = false },
				{ Name = "zPos", Type = "number", Nilable = false },
				{ Name = "snapToLocation", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetCheatsEnabled",
			Type = "Function",

			Arguments =
			{
				{ Name = "enableCheats", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetCommentatorHistory",
			Type = "Function",

			Arguments =
			{
				{ Name = "history", Type = "CommentatorHistory", Nilable = false },
			},
		},
		{
			Name = "SetDistanceBeforeForcedHorizontalConvergence",
			Type = "Function",

			Arguments =
			{
				{ Name = "distance", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetDurationToForceHorizontalConvergence",
			Type = "Function",

			Arguments =
			{
				{ Name = "ms", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetExcludeDistance",
			Type = "Function",

			Arguments =
			{
				{ Name = "excludeDistance", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetFollowCameraSpeeds",
			Type = "Function",

			Arguments =
			{
				{ Name = "elasticSpeed", Type = "number", Nilable = false },
				{ Name = "minSpeed", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetHardlockWeight",
			Type = "Function",

			Arguments =
			{
				{ Name = "weight", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetHorizontalAngleThresholdToSmooth",
			Type = "Function",

			Arguments =
			{
				{ Name = "angle", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetLookAtLerpAmount",
			Type = "Function",

			Arguments =
			{
				{ Name = "amount", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetMapAndInstanceIndex",
			Type = "Function",

			Arguments =
			{
				{ Name = "mapIndex", Type = "number", Nilable = false },
				{ Name = "instanceIndex", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetMouseDisabled",
			Type = "Function",

			Arguments =
			{
				{ Name = "disabled", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetMoveSpeed",
			Type = "Function",

			Arguments =
			{
				{ Name = "newSpeed", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetMsToHoldForHorizontalMovement",
			Type = "Function",

			Arguments =
			{
				{ Name = "ms", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetMsToHoldForVerticalMovement",
			Type = "Function",

			Arguments =
			{
				{ Name = "ms", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetMsToSmoothHorizontalChange",
			Type = "Function",

			Arguments =
			{
				{ Name = "ms", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetMsToSmoothVerticalChange",
			Type = "Function",

			Arguments =
			{
				{ Name = "ms", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetPositionLerpAmount",
			Type = "Function",

			Arguments =
			{
				{ Name = "amount", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetRequestedDebuffCooldowns",
			Type = "Function",

			Arguments =
			{
				{ Name = "specID", Type = "number", Nilable = false },
				{ Name = "spellIDs", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "SetRequestedDefensiveCooldowns",
			Type = "Function",

			Arguments =
			{
				{ Name = "specID", Type = "number", Nilable = false },
				{ Name = "spellIDs", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "SetRequestedOffensiveCooldowns",
			Type = "Function",

			Arguments =
			{
				{ Name = "specID", Type = "number", Nilable = false },
				{ Name = "spellIDs", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "SetSeriesScore",
			Type = "Function",

			Arguments =
			{
				{ Name = "teamName1", Type = "string", Nilable = false },
				{ Name = "teamName2", Type = "string", Nilable = false },
				{ Name = "scoringTeamName", Type = "string", Nilable = false },
				{ Name = "score", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetSeriesScores",
			Type = "Function",

			Arguments =
			{
				{ Name = "teamName1", Type = "string", Nilable = false },
				{ Name = "teamName2", Type = "string", Nilable = false },
				{ Name = "score1", Type = "number", Nilable = false },
				{ Name = "score2", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetSmartCameraLocked",
			Type = "Function",

			Arguments =
			{
				{ Name = "locked", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetSmoothFollowTransitioning",
			Type = "Function",

			Arguments =
			{
				{ Name = "enabled", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetSoftlockWeight",
			Type = "Function",

			Arguments =
			{
				{ Name = "weight", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetSpeedFactor",
			Type = "Function",

			Arguments =
			{
				{ Name = "factor", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetTargetHeightOffset",
			Type = "Function",

			Arguments =
			{
				{ Name = "offset", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetUseSmartCamera",
			Type = "Function",

			Arguments =
			{
				{ Name = "useSmartCamera", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SnapCameraLookAtPoint",
			Type = "Function",
		},
		{
			Name = "StartWargame",
			Type = "Function",

			Arguments =
			{
				{ Name = "listID", Type = "number", Nilable = false },
				{ Name = "teamSize", Type = "number", Nilable = false },
				{ Name = "tournamentRules", Type = "bool", Nilable = false },
				{ Name = "teamOneCaptain", Type = "string", Nilable = false },
				{ Name = "teamTwoCaptain", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SwapTeamSides",
			Type = "Function",
		},
		{
			Name = "ToggleCheats",
			Type = "Function",
		},
		{
			Name = "UpdateMapInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "targetPlayer", Type = "string", Nilable = true },
			},
		},
		{
			Name = "UpdatePlayerInfo",
			Type = "Function",
		},
		{
			Name = "ZoomIn",
			Type = "Function",
		},
		{
			Name = "ZoomOut",
			Type = "Function",
		},
	},

	Events =
	{
		{
			Name = "CommentatorEnterWorld",
			Type = "Event",
			LiteralName = "COMMENTATOR_ENTER_WORLD",
		},
		{
			Name = "CommentatorHistoryFlushed",
			Type = "Event",
			LiteralName = "COMMENTATOR_HISTORY_FLUSHED",
		},
		{
			Name = "CommentatorImmediateFovUpdate",
			Type = "Event",
			LiteralName = "COMMENTATOR_IMMEDIATE_FOV_UPDATE",
			Payload =
			{
				{ Name = "fov", Type = "number", Nilable = false },
			},
		},
		{
			Name = "CommentatorMapUpdate",
			Type = "Event",
			LiteralName = "COMMENTATOR_MAP_UPDATE",
		},
		{
			Name = "CommentatorPlayerNameOverrideUpdate",
			Type = "Event",
			LiteralName = "COMMENTATOR_PLAYER_NAME_OVERRIDE_UPDATE",
			Payload =
			{
				{ Name = "nameToOverride", Type = "string", Nilable = false },
				{ Name = "overrideName", Type = "string", Nilable = true },
			},
		},
		{
			Name = "CommentatorPlayerUpdate",
			Type = "Event",
			LiteralName = "COMMENTATOR_PLAYER_UPDATE",
		},
		{
			Name = "CommentatorResetSettings",
			Type = "Event",
			LiteralName = "COMMENTATOR_RESET_SETTINGS",
		},
		{
			Name = "CommentatorTeamNameUpdate",
			Type = "Event",
			LiteralName = "COMMENTATOR_TEAM_NAME_UPDATE",
			Payload =
			{
				{ Name = "teamName", Type = "string", Nilable = false },
			},
		},
		{
			Name = "CommentatorTeamsSwapped",
			Type = "Event",
			LiteralName = "COMMENTATOR_TEAMS_SWAPPED",
			Payload =
			{
				{ Name = "swapped", Type = "bool", Nilable = false },
			},
		},
	},

	Tables =
	{
		{
			Name = "TrackedSpellCategory",
			Type = "Enumeration",
			NumValues = 4,
			MinValue = 0,
			MaxValue = 3,
			Fields =
			{
				{ Name = "Offensive", Type = "TrackedSpellCategory", EnumValue = 0 },
				{ Name = "Defensive", Type = "TrackedSpellCategory", EnumValue = 1 },
				{ Name = "Debuff", Type = "TrackedSpellCategory", EnumValue = 2 },
				{ Name = "Count", Type = "TrackedSpellCategory", EnumValue = 3 },
			},
		},
		{
			Name = "CommentatorHistory",
			Type = "Structure",
			Fields =
			{
				{ Name = "series", Type = "table", InnerType = "CommentatorSeries", Nilable = false },
				{ Name = "teamDirectory", Type = "table", InnerType = "CommentatorTeamDirectoryEntry", Nilable = false },
				{ Name = "overrideNameDirectory", Type = "table", InnerType = "CommentatorOverrideNameEntry", Nilable = false },
			},
		},
		{
			Name = "CommentatorOverrideNameEntry",
			Type = "Structure",
			Fields =
			{
				{ Name = "originalName", Type = "string", Nilable = false },
				{ Name = "newName", Type = "string", Nilable = false },
			},
		},
		{
			Name = "CommentatorPlayerData",
			Type = "Structure",
			Fields =
			{
				{ Name = "unitToken", Type = "string", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "faction", Type = "number", Nilable = false },
				{ Name = "specialization", Type = "number", Nilable = false },
				{ Name = "damageDone", Type = "number", Nilable = false },
				{ Name = "damageTaken", Type = "number", Nilable = false },
				{ Name = "healingDone", Type = "number", Nilable = false },
				{ Name = "healingTaken", Type = "number", Nilable = false },
				{ Name = "kills", Type = "number", Nilable = false },
				{ Name = "deaths", Type = "number", Nilable = false },
				{ Name = "soloShuffleRoundWins", Type = "number", Nilable = false },
				{ Name = "soloShuffleRoundLosses", Type = "number", Nilable = false },
			},
		},
		{
			Name = "CommentatorSeries",
			Type = "Structure",
			Fields =
			{
				{ Name = "teams", Type = "table", InnerType = "CommentatorSeriesTeam", Nilable = false },
			},
		},
		{
			Name = "CommentatorSeriesTeam",
			Type = "Structure",
			Fields =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "score", Type = "number", Nilable = false },
			},
		},
		{
			Name = "CommentatorTeamDirectoryEntry",
			Type = "Structure",
			Fields =
			{
				{ Name = "playerName", Type = "string", Nilable = false },
				{ Name = "teamName", Type = "string", Nilable = false },
			},
		},
		{
			Name = "CommentatorUnitData",
			Type = "Structure",
			Fields =
			{
				{ Name = "healthMax", Type = "number", Nilable = false },
				{ Name = "health", Type = "number", Nilable = false },
				{ Name = "absorbTotal", Type = "number", Nilable = false },
				{ Name = "isDeadOrGhost", Type = "bool", Nilable = false },
				{ Name = "isFeignDeath", Type = "bool", Nilable = false },
				{ Name = "powerTypeToken", Type = "string", Nilable = false },
				{ Name = "power", Type = "number", Nilable = false },
				{ Name = "powerMax", Type = "number", Nilable = false },
			},
		},
		{
			Name = "NameOverrideEntry",
			Type = "Structure",
			Fields =
			{
				{ Name = "originalName", Type = "string", Nilable = false },
				{ Name = "overrideName", Type = "string", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "CovenantCallings",
	Type = "System",
	Namespace = "C_CovenantCallings",

	Functions =
	{
		{
			Name = "AreCallingsUnlocked",
			Type = "Function",

			Returns =
			{
				{ Name = "unlocked", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "RequestCallings",
			Type = "Function",
		},
	},

	Events =
	{
		{
			Name = "CovenantCallingsUpdated",
			Type = "Event",
			LiteralName = "COVENANT_CALLINGS_UPDATED",
			Payload =
			{
				{ Name = "callings", Type = "table", InnerType = "BountyInfo", Nilable = false },
			},
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "CovenantPreview",
	Type = "System",
	Namespace = "C_CovenantPreview",

	Functions =
	{
		{
			Name = "CloseFromUI",
			Type = "Function",
		},
		{
			Name = "GetCovenantInfoForPlayerChoiceResponseID",
			Type = "Function",

			Arguments =
			{
				{ Name = "playerChoiceResponseID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "previewInfo", Type = "CovenantPreviewInfo", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "CovenantPreviewClose",
			Type = "Event",
			LiteralName = "COVENANT_PREVIEW_CLOSE",
		},
		{
			Name = "CovenantPreviewOpen",
			Type = "Event",
			LiteralName = "COVENANT_PREVIEW_OPEN",
			Payload =
			{
				{ Name = "previewInfo", Type = "CovenantPreviewInfo", Nilable = false },
			},
		},
	},

	Tables =
	{
		{
			Name = "CovenantAbilityType",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 0,
			MaxValue = 2,
			Fields =
			{
				{ Name = "Class", Type = "CovenantAbilityType", EnumValue = 0 },
				{ Name = "Signature", Type = "CovenantAbilityType", EnumValue = 1 },
				{ Name = "Soulbind", Type = "CovenantAbilityType", EnumValue = 2 },
			},
		},
		{
			Name = "CovenantAbilityInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "spellID", Type = "number", Nilable = false },
				{ Name = "type", Type = "CovenantAbilityType", Nilable = false },
			},
		},
		{
			Name = "CovenantFeatureInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "description", Type = "string", Nilable = false },
				{ Name = "texture", Type = "number", Nilable = false },
			},
		},
		{
			Name = "CovenantPreviewInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "textureKit", Type = "string", Nilable = false },
				{ Name = "transmogSetID", Type = "number", Nilable = false },
				{ Name = "mountID", Type = "number", Nilable = false },
				{ Name = "covenantName", Type = "string", Nilable = false },
				{ Name = "covenantZone", Type = "string", Nilable = false },
				{ Name = "description", Type = "string", Nilable = false },
				{ Name = "covenantCrest", Type = "string", Nilable = false },
				{ Name = "covenantAbilities", Type = "table", InnerType = "CovenantAbilityInfo", Nilable = false },
				{ Name = "fromPlayerChoice", Type = "bool", Nilable = false },
				{ Name = "covenantSoulbinds", Type = "table", InnerType = "CovenantSoulbindInfo", Nilable = false },
				{ Name = "featureInfo", Type = "CovenantFeatureInfo", Nilable = false },
			},
		},
		{
			Name = "CovenantSoulbindInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "spellID", Type = "number", Nilable = false },
				{ Name = "uiTextureKit", Type = "string", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "description", Type = "string", Nilable = false },
				{ Name = "sortOrder", Type = "number", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "CovenantSanctumUI",
	Type = "System",
	Namespace = "C_CovenantSanctumUI",

	Functions =
	{
		{
			Name = "CanAccessReservoir",
			Type = "Function",

			Returns =
			{
				{ Name = "canAccess", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "CanDepositAnima",
			Type = "Function",

			Returns =
			{
				{ Name = "canDeposit", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "DepositAnima",
			Type = "Function",
		},
		{
			Name = "EndInteraction",
			Type = "Function",
		},
		{
			Name = "GetAnimaInfo",
			Type = "Function",

			Returns =
			{
				{ Name = "currencyID", Type = "number", Nilable = false },
				{ Name = "maxDisplayableValue", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetCurrentTalentTreeID",
			Type = "Function",

			Returns =
			{
				{ Name = "currentTalentTreeID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetFeatures",
			Type = "Function",

			Returns =
			{
				{ Name = "features", Type = "table", InnerType = "CovenantSanctumFeatureInfo", Nilable = false },
			},
		},
		{
			Name = "GetRenownLevel",
			Type = "Function",

			Returns =
			{
				{ Name = "level", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetRenownLevels",
			Type = "Function",

			Arguments =
			{
				{ Name = "covenantID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "levels", Type = "table", InnerType = "CovenantSanctumRenownLevelInfo", Nilable = false },
			},
		},
		{
			Name = "GetRenownRewardsForLevel",
			Type = "Function",

			Arguments =
			{
				{ Name = "covenantID", Type = "number", Nilable = false },
				{ Name = "renownLevel", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "rewards", Type = "table", InnerType = "CovenantSanctumRenownRewardInfo", Nilable = false },
			},
		},
		{
			Name = "GetSanctumType",
			Type = "Function",

			Returns =
			{
				{ Name = "sanctumType", Type = "GarrTalentFeatureSubtype", Nilable = true },
			},
		},
		{
			Name = "GetSoulCurrencies",
			Type = "Function",

			Returns =
			{
				{ Name = "currencyIDs", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "HasMaximumRenown",
			Type = "Function",

			Returns =
			{
				{ Name = "hasMaxRenown", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsPlayerInRenownCatchUpMode",
			Type = "Function",

			Returns =
			{
				{ Name = "isInCatchUpMode", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsWeeklyRenownCapped",
			Type = "Function",

			Returns =
			{
				{ Name = "isWeeklyCapped", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "RequestCatchUpState",
			Type = "Function",
		},
	},

	Events =
	{
		{
			Name = "CovenantRenownCatchUpStateUpdate",
			Type = "Event",
			LiteralName = "COVENANT_RENOWN_CATCH_UP_STATE_UPDATE",
		},
		{
			Name = "CovenantRenownInteractionEnded",
			Type = "Event",
			LiteralName = "COVENANT_RENOWN_INTERACTION_ENDED",
		},
		{
			Name = "CovenantRenownInteractionStarted",
			Type = "Event",
			LiteralName = "COVENANT_RENOWN_INTERACTION_STARTED",
		},
		{
			Name = "CovenantSanctumInteractionEnded",
			Type = "Event",
			LiteralName = "COVENANT_SANCTUM_INTERACTION_ENDED",
		},
		{
			Name = "CovenantSanctumInteractionStarted",
			Type = "Event",
			LiteralName = "COVENANT_SANCTUM_INTERACTION_STARTED",
		},
		{
			Name = "CovenantSanctumRenownLevelChanged",
			Type = "Event",
			LiteralName = "COVENANT_SANCTUM_RENOWN_LEVEL_CHANGED",
			Payload =
			{
				{ Name = "newRenownLevel", Type = "number", Nilable = false },
				{ Name = "oldRenownLevel", Type = "number", Nilable = false },
			},
		},
	},

	Tables =
	{
		{
			Name = "CovenantSanctumFeatureInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "garrTalentTreeID", Type = "number", Nilable = false },
				{ Name = "featureType", Type = "number", Nilable = false },
				{ Name = "uiOrder", Type = "number", Nilable = false },
			},
		},
		{
			Name = "CovenantSanctumRenownLevelInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "level", Type = "number", Nilable = false },
				{ Name = "locked", Type = "bool", Nilable = false },
				{ Name = "isMilestone", Type = "bool", Nilable = false },
				{ Name = "isCapstone", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "CovenantSanctumRenownRewardInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "uiOrder", Type = "number", Nilable = false },
				{ Name = "itemID", Type = "number", Nilable = true },
				{ Name = "spellID", Type = "number", Nilable = true },
				{ Name = "mountID", Type = "number", Nilable = true },
				{ Name = "transmogID", Type = "number", Nilable = true },
				{ Name = "transmogSetID", Type = "number", Nilable = true },
				{ Name = "titleMaskID", Type = "number", Nilable = true },
				{ Name = "garrFollowerID", Type = "number", Nilable = true },
				{ Name = "transmogIllusionSourceID", Type = "number", Nilable = true },
				{ Name = "icon", Type = "number", Nilable = true },
				{ Name = "name", Type = "string", Nilable = true },
				{ Name = "description", Type = "string", Nilable = true },
				{ Name = "toastDescription", Type = "string", Nilable = true },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "Covenant",
	Type = "System",
	Namespace = "C_Covenants",

	Functions =
	{
		{
			Name = "GetActiveCovenantID",
			Type = "Function",

			Returns =
			{
				{ Name = "covenantID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetCovenantData",
			Type = "Function",

			Arguments =
			{
				{ Name = "covenantID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "data", Type = "CovenantData", Nilable = true },
			},
		},
		{
			Name = "GetCovenantIDs",
			Type = "Function",

			Returns =
			{
				{ Name = "covenantID", Type = "table", InnerType = "number", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "CovenantChosen",
			Type = "Event",
			LiteralName = "COVENANT_CHOSEN",
			Payload =
			{
				{ Name = "covenantID", Type = "number", Nilable = false },
			},
		},
	},

	Tables =
	{
		{
			Name = "CovenantData",
			Type = "Structure",
			Fields =
			{
				{ Name = "ID", Type = "number", Nilable = false },
				{ Name = "textureKit", Type = "string", Nilable = false },
				{ Name = "celebrationSoundKit", Type = "number", Nilable = false },
				{ Name = "animaChannelSelectSoundKit", Type = "number", Nilable = false },
				{ Name = "animaChannelActiveSoundKit", Type = "number", Nilable = false },
				{ Name = "animaGemsFullSoundKit", Type = "number", Nilable = false },
				{ Name = "animaNewGemSoundKit", Type = "number", Nilable = false },
				{ Name = "animaReinforceSelectSoundKit", Type = "number", Nilable = false },
				{ Name = "upgradeTabSelectSoundKitID", Type = "number", Nilable = false },
				{ Name = "reservoirFullSoundKitID", Type = "number", Nilable = false },
				{ Name = "beginResearchSoundKitID", Type = "number", Nilable = false },
				{ Name = "renownFanfareSoundKitID", Type = "number", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "soulbindIDs", Type = "table", InnerType = "number", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "CraftingOrderUI",
	Type = "System",
	Namespace = "C_CraftingOrders",

	Functions =
	{
		{
			Name = "CloseCustomerCraftingOrders",
			Type = "Function",
		},
		{
			Name = "GetCustomerCategories",
			Type = "Function",

			Returns =
			{
				{ Name = "categories", Type = "table", InnerType = "CraftingOrderCustomerCategory", Nilable = false },
			},
		},
		{
			Name = "GetCustomerOptions",
			Type = "Function",

			Arguments =
			{
				{ Name = "params", Type = "CraftingOrderCustomerSearchParams", Nilable = false },
			},

			Returns =
			{
				{ Name = "results", Type = "CraftingOrderCustomerSearchResults", Nilable = false },
			},
		},
		{
			Name = "ParseCustomerOptions",
			Type = "Function",
		},
		{
			Name = "TEST_SignalHideCrafter",
			Type = "Function",
		},
		{
			Name = "TEST_SignalHideCustomer",
			Type = "Function",
		},
		{
			Name = "TEST_SignalShowCrafter",
			Type = "Function",
		},
		{
			Name = "TEST_SignalShowCustomer",
			Type = "Function",
		},
	},

	Events =
	{
		{
			Name = "CraftingordersCustomerOptionsParsed",
			Type = "Event",
			LiteralName = "CRAFTINGORDERS_CUSTOMER_OPTIONS_PARSED",
		},
		{
			Name = "CraftingordersHideCrafter",
			Type = "Event",
			LiteralName = "CRAFTINGORDERS_HIDE_CRAFTER",
		},
		{
			Name = "CraftingordersHideCustomer",
			Type = "Event",
			LiteralName = "CRAFTINGORDERS_HIDE_CUSTOMER",
		},
		{
			Name = "CraftingordersShowCrafter",
			Type = "Event",
			LiteralName = "CRAFTINGORDERS_SHOW_CRAFTER",
		},
		{
			Name = "CraftingordersShowCustomer",
			Type = "Event",
			LiteralName = "CRAFTINGORDERS_SHOW_CUSTOMER",
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "DateAndTime",
	Type = "System",
	Namespace = "C_DateAndTime",

	Functions =
	{
		{
			Name = "AdjustTimeByDays",
			Type = "Function",

			Arguments =
			{
				{ Name = "date", Type = "CalendarTime", Nilable = false },
				{ Name = "days", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "newDate", Type = "CalendarTime", Nilable = false },
			},
		},
		{
			Name = "AdjustTimeByMinutes",
			Type = "Function",

			Arguments =
			{
				{ Name = "date", Type = "CalendarTime", Nilable = false },
				{ Name = "minutes", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "newDate", Type = "CalendarTime", Nilable = false },
			},
		},
		{
			Name = "CompareCalendarTime",
			Type = "Function",

			Arguments =
			{
				{ Name = "lhsCalendarTime", Type = "CalendarTime", Nilable = false },
				{ Name = "rhsCalendarTime", Type = "CalendarTime", Nilable = false },
			},

			Returns =
			{
				{ Name = "comparison", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetCalendarTimeFromEpoch",
			Type = "Function",

			Arguments =
			{
				{ Name = "epoch", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "date", Type = "CalendarTime", Nilable = false },
			},
		},
		{
			Name = "GetCurrentCalendarTime",
			Type = "Function",

			Returns =
			{
				{ Name = "date", Type = "CalendarTime", Nilable = false },
			},
		},
		{
			Name = "GetSecondsUntilDailyReset",
			Type = "Function",

			Returns =
			{
				{ Name = "seconds", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetSecondsUntilWeeklyReset",
			Type = "Function",

			Returns =
			{
				{ Name = "seconds", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetServerTimeLocal",
			Type = "Function",

			Returns =
			{
				{ Name = "serverTimeLocal", Type = "number", Nilable = false },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "EncounterJournal",
	Type = "System",
	Namespace = "C_EncounterJournal",

	Functions =
	{
		{
			Name = "GetDungeonEntrancesForMap",
			Type = "Function",

			Arguments =
			{
				{ Name = "uiMapID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "dungeonEntrances", Type = "table", InnerType = "DungeonEntranceMapInfo", Nilable = false },
			},
		},
		{
			Name = "GetEncountersOnMap",
			Type = "Function",

			Arguments =
			{
				{ Name = "uiMapID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "encounters", Type = "table", InnerType = "EncounterJournalMapEncounterInfo", Nilable = false },
			},
		},
		{
			Name = "GetLootInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "id", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "itemInfo", Type = "EncounterJournalItemInfo", Nilable = false },
			},
		},
		{
			Name = "GetLootInfoByIndex",
			Type = "Function",

			Arguments =
			{
				{ Name = "index", Type = "number", Nilable = false },
				{ Name = "encounterIndex", Type = "number", Nilable = true },
			},

			Returns =
			{
				{ Name = "itemInfo", Type = "EncounterJournalItemInfo", Nilable = false },
			},
		},
		{
			Name = "GetSectionIconFlags",
			Type = "Function",
			Documentation = { "Represents the icon indices for this EJ section.  An icon index can be used to arrive at texture coordinates for specific encounter types, e.g.: EncounterJournal_SetFlagIcon" },

			Arguments =
			{
				{ Name = "sectionID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "iconFlags", Type = "table", InnerType = "number", Nilable = true },
			},
		},
		{
			Name = "GetSectionInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "sectionID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "info", Type = "EncounterJournalSectionInfo", Nilable = false },
			},
		},
		{
			Name = "GetSlotFilter",
			Type = "Function",

			Returns =
			{
				{ Name = "filter", Type = "ItemSlotFilterType", Nilable = false },
			},
		},
		{
			Name = "InstanceHasLoot",
			Type = "Function",

			Arguments =
			{
				{ Name = "instanceID", Type = "number", Nilable = true },
			},

			Returns =
			{
				{ Name = "hasLoot", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsEncounterComplete",
			Type = "Function",

			Arguments =
			{
				{ Name = "journalEncounterID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isEncounterComplete", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ResetSlotFilter",
			Type = "Function",
		},
		{
			Name = "SetPreviewMythicPlusLevel",
			Type = "Function",

			Arguments =
			{
				{ Name = "level", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetPreviewPvpTier",
			Type = "Function",

			Arguments =
			{
				{ Name = "tier", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetSlotFilter",
			Type = "Function",

			Arguments =
			{
				{ Name = "filterSlot", Type = "ItemSlotFilterType", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "EjDifficultyUpdate",
			Type = "Event",
			LiteralName = "EJ_DIFFICULTY_UPDATE",
			Payload =
			{
				{ Name = "difficultyID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "EjLootDataRecieved",
			Type = "Event",
			LiteralName = "EJ_LOOT_DATA_RECIEVED",
			Payload =
			{
				{ Name = "itemID", Type = "number", Nilable = true },
			},
		},
	},

	Tables =
	{
		{
			Name = "ItemSlotFilterType",
			Type = "Enumeration",
			NumValues = 16,
			MinValue = 0,
			MaxValue = 15,
			Fields =
			{
				{ Name = "Head", Type = "ItemSlotFilterType", EnumValue = 0 },
				{ Name = "Neck", Type = "ItemSlotFilterType", EnumValue = 1 },
				{ Name = "Shoulder", Type = "ItemSlotFilterType", EnumValue = 2 },
				{ Name = "Cloak", Type = "ItemSlotFilterType", EnumValue = 3 },
				{ Name = "Chest", Type = "ItemSlotFilterType", EnumValue = 4 },
				{ Name = "Wrist", Type = "ItemSlotFilterType", EnumValue = 5 },
				{ Name = "Hand", Type = "ItemSlotFilterType", EnumValue = 6 },
				{ Name = "Waist", Type = "ItemSlotFilterType", EnumValue = 7 },
				{ Name = "Legs", Type = "ItemSlotFilterType", EnumValue = 8 },
				{ Name = "Feet", Type = "ItemSlotFilterType", EnumValue = 9 },
				{ Name = "MainHand", Type = "ItemSlotFilterType", EnumValue = 10 },
				{ Name = "OffHand", Type = "ItemSlotFilterType", EnumValue = 11 },
				{ Name = "Finger", Type = "ItemSlotFilterType", EnumValue = 12 },
				{ Name = "Trinket", Type = "ItemSlotFilterType", EnumValue = 13 },
				{ Name = "Other", Type = "ItemSlotFilterType", EnumValue = 14 },
				{ Name = "NoFilter", Type = "ItemSlotFilterType", EnumValue = 15 },
			},
		},
		{
			Name = "DungeonEntranceMapInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "areaPoiID", Type = "number", Nilable = false },
				{ Name = "position", Type = "table", Mixin = "Vector2DMixin", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "description", Type = "string", Nilable = false },
				{ Name = "atlasName", Type = "string", Nilable = false },
				{ Name = "journalInstanceID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "EncounterJournalItemInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "itemID", Type = "number", Nilable = false },
				{ Name = "encounterID", Type = "number", Nilable = true },
				{ Name = "name", Type = "string", Nilable = true },
				{ Name = "itemQuality", Type = "string", Nilable = true },
				{ Name = "filterType", Type = "ItemSlotFilterType", Nilable = true },
				{ Name = "icon", Type = "number", Nilable = true },
				{ Name = "slot", Type = "string", Nilable = true },
				{ Name = "armorType", Type = "string", Nilable = true },
				{ Name = "link", Type = "string", Nilable = true },
				{ Name = "handError", Type = "bool", Nilable = true },
				{ Name = "weaponTypeError", Type = "bool", Nilable = true },
				{ Name = "displayAsPerPlayerLoot", Type = "bool", Nilable = true },
			},
		},
		{
			Name = "EncounterJournalMapEncounterInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "encounterID", Type = "number", Nilable = false },
				{ Name = "mapX", Type = "number", Nilable = false },
				{ Name = "mapY", Type = "number", Nilable = false },
			},
		},
		{
			Name = "EncounterJournalSectionInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "spellID", Type = "number", Nilable = false },
				{ Name = "title", Type = "string", Nilable = false },
				{ Name = "description", Type = "string", Nilable = true },
				{ Name = "headerType", Type = "number", Nilable = false },
				{ Name = "abilityIcon", Type = "number", Nilable = false },
				{ Name = "creatureDisplayID", Type = "number", Nilable = false },
				{ Name = "uiModelSceneID", Type = "number", Nilable = false },
				{ Name = "siblingSectionID", Type = "number", Nilable = true },
				{ Name = "firstChildSectionID", Type = "number", Nilable = true },
				{ Name = "filteredByDifficulty", Type = "bool", Nilable = false },
				{ Name = "link", Type = "string", Nilable = false },
				{ Name = "startsOpen", Type = "bool", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "FriendList",
	Type = "System",
	Namespace = "C_FriendList",

	Functions =
	{
		{
			Name = "AddFriend",
			Type = "Function",

			Arguments =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "notes", Type = "string", Nilable = true },
			},
		},
		{
			Name = "AddIgnore",
			Type = "Function",

			Arguments =
			{
				{ Name = "name", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "added", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "AddOrDelIgnore",
			Type = "Function",

			Arguments =
			{
				{ Name = "name", Type = "string", Nilable = false },
			},
		},
		{
			Name = "AddOrRemoveFriend",
			Type = "Function",

			Arguments =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "notes", Type = "string", Nilable = false },
			},
		},
		{
			Name = "DelIgnore",
			Type = "Function",

			Arguments =
			{
				{ Name = "name", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "removed", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "DelIgnoreByIndex",
			Type = "Function",

			Arguments =
			{
				{ Name = "index", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetFriendInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "name", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "info", Type = "FriendInfo", Nilable = false },
			},
		},
		{
			Name = "GetFriendInfoByIndex",
			Type = "Function",

			Arguments =
			{
				{ Name = "index", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "info", Type = "FriendInfo", Nilable = false },
			},
		},
		{
			Name = "GetIgnoreName",
			Type = "Function",

			Arguments =
			{
				{ Name = "index", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "name", Type = "string", Nilable = true },
			},
		},
		{
			Name = "GetNumFriends",
			Type = "Function",

			Returns =
			{
				{ Name = "numFriends", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetNumIgnores",
			Type = "Function",

			Returns =
			{
				{ Name = "numIgnores", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetNumOnlineFriends",
			Type = "Function",

			Returns =
			{
				{ Name = "numOnline", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetNumWhoResults",
			Type = "Function",

			Returns =
			{
				{ Name = "numWhos", Type = "number", Nilable = false },
				{ Name = "totalNumWhos", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetSelectedFriend",
			Type = "Function",

			Returns =
			{
				{ Name = "index", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetSelectedIgnore",
			Type = "Function",

			Returns =
			{
				{ Name = "index", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetWhoInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "index", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "info", Type = "WhoInfo", Nilable = false },
			},
		},
		{
			Name = "IsFriend",
			Type = "Function",

			Arguments =
			{
				{ Name = "guid", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "isFriend", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsIgnored",
			Type = "Function",

			Arguments =
			{
				{ Name = "token", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "isIgnored", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsIgnoredByGuid",
			Type = "Function",

			Arguments =
			{
				{ Name = "guid", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "isIgnored", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsOnIgnoredList",
			Type = "Function",

			Arguments =
			{
				{ Name = "token", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "isIgnored", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "RemoveFriend",
			Type = "Function",

			Arguments =
			{
				{ Name = "name", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "removed", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "RemoveFriendByIndex",
			Type = "Function",

			Arguments =
			{
				{ Name = "index", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SendWho",
			Type = "Function",

			Arguments =
			{
				{ Name = "filter", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetFriendNotes",
			Type = "Function",

			Arguments =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "notes", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "found", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetFriendNotesByIndex",
			Type = "Function",

			Arguments =
			{
				{ Name = "index", Type = "number", Nilable = false },
				{ Name = "notes", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetSelectedFriend",
			Type = "Function",

			Arguments =
			{
				{ Name = "index", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetSelectedIgnore",
			Type = "Function",

			Arguments =
			{
				{ Name = "index", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetWhoToUi",
			Type = "Function",

			Arguments =
			{
				{ Name = "whoToUi", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ShowFriends",
			Type = "Function",
		},
		{
			Name = "SortWho",
			Type = "Function",

			Arguments =
			{
				{ Name = "sorting", Type = "string", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "BattletagInviteShow",
			Type = "Event",
			LiteralName = "BATTLETAG_INVITE_SHOW",
			Payload =
			{
				{ Name = "name", Type = "string", Nilable = false },
			},
		},
		{
			Name = "BnBlockFailedTooMany",
			Type = "Event",
			LiteralName = "BN_BLOCK_FAILED_TOO_MANY",
			Payload =
			{
				{ Name = "blockType", Type = "string", Nilable = false },
			},
		},
		{
			Name = "BnBlockListUpdated",
			Type = "Event",
			LiteralName = "BN_BLOCK_LIST_UPDATED",
		},
		{
			Name = "BnChatWhisperUndeliverable",
			Type = "Event",
			LiteralName = "BN_CHAT_WHISPER_UNDELIVERABLE",
			Payload =
			{
				{ Name = "senderID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "BnConnected",
			Type = "Event",
			LiteralName = "BN_CONNECTED",
			Payload =
			{
				{ Name = "suppressNotification", Type = "bool", Nilable = false, Default = false },
			},
		},
		{
			Name = "BnCustomMessageChanged",
			Type = "Event",
			LiteralName = "BN_CUSTOM_MESSAGE_CHANGED",
			Payload =
			{
				{ Name = "id", Type = "number", Nilable = true },
			},
		},
		{
			Name = "BnCustomMessageLoaded",
			Type = "Event",
			LiteralName = "BN_CUSTOM_MESSAGE_LOADED",
		},
		{
			Name = "BnDisconnected",
			Type = "Event",
			LiteralName = "BN_DISCONNECTED",
			Payload =
			{
				{ Name = "result", Type = "bool", Nilable = false },
				{ Name = "suppressNotification", Type = "bool", Nilable = false, Default = false },
			},
		},
		{
			Name = "BnFriendAccountOffline",
			Type = "Event",
			LiteralName = "BN_FRIEND_ACCOUNT_OFFLINE",
			Payload =
			{
				{ Name = "friendId", Type = "number", Nilable = false },
				{ Name = "isCompanionApp", Type = "bool", Nilable = false, Default = false },
			},
		},
		{
			Name = "BnFriendAccountOnline",
			Type = "Event",
			LiteralName = "BN_FRIEND_ACCOUNT_ONLINE",
			Payload =
			{
				{ Name = "friendId", Type = "number", Nilable = false },
				{ Name = "isCompanionApp", Type = "bool", Nilable = false, Default = false },
			},
		},
		{
			Name = "BnFriendInfoChanged",
			Type = "Event",
			LiteralName = "BN_FRIEND_INFO_CHANGED",
			Payload =
			{
				{ Name = "friendIndex", Type = "number", Nilable = true },
			},
		},
		{
			Name = "BnFriendInviteAdded",
			Type = "Event",
			LiteralName = "BN_FRIEND_INVITE_ADDED",
			Payload =
			{
				{ Name = "accountID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "BnFriendInviteListInitialized",
			Type = "Event",
			LiteralName = "BN_FRIEND_INVITE_LIST_INITIALIZED",
			Payload =
			{
				{ Name = "listSize", Type = "number", Nilable = false },
			},
		},
		{
			Name = "BnFriendInviteRemoved",
			Type = "Event",
			LiteralName = "BN_FRIEND_INVITE_REMOVED",
		},
		{
			Name = "BnFriendListSizeChanged",
			Type = "Event",
			LiteralName = "BN_FRIEND_LIST_SIZE_CHANGED",
			Payload =
			{
				{ Name = "accountID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "BnInfoChanged",
			Type = "Event",
			LiteralName = "BN_INFO_CHANGED",
		},
		{
			Name = "BnRequestFofSucceeded",
			Type = "Event",
			LiteralName = "BN_REQUEST_FOF_SUCCEEDED",
		},
		{
			Name = "FriendlistUpdate",
			Type = "Event",
			LiteralName = "FRIENDLIST_UPDATE",
		},
		{
			Name = "IgnorelistUpdate",
			Type = "Event",
			LiteralName = "IGNORELIST_UPDATE",
		},
		{
			Name = "MutelistUpdate",
			Type = "Event",
			LiteralName = "MUTELIST_UPDATE",
		},
		{
			Name = "WhoListUpdate",
			Type = "Event",
			LiteralName = "WHO_LIST_UPDATE",
		},
	},

	Tables =
	{
		{
			Name = "FriendInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "connected", Type = "bool", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "className", Type = "string", Nilable = true },
				{ Name = "area", Type = "string", Nilable = true },
				{ Name = "notes", Type = "string", Nilable = true },
				{ Name = "guid", Type = "string", Nilable = false },
				{ Name = "level", Type = "number", Nilable = false },
				{ Name = "dnd", Type = "bool", Nilable = false },
				{ Name = "afk", Type = "bool", Nilable = false },
				{ Name = "rafLinkType", Type = "RafLinkType", Nilable = false },
				{ Name = "mobile", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "WhoInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "fullName", Type = "string", Nilable = false },
				{ Name = "fullGuildName", Type = "string", Nilable = false },
				{ Name = "level", Type = "number", Nilable = false },
				{ Name = "raceStr", Type = "string", Nilable = false },
				{ Name = "classStr", Type = "string", Nilable = false },
				{ Name = "area", Type = "string", Nilable = false },
				{ Name = "filename", Type = "string", Nilable = true },
				{ Name = "gender", Type = "number", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "GarrisonInfo",
	Type = "System",
	Namespace = "C_Garrison",

	Functions =
	{
		{
			Name = "AddFollowerToMission",
			Type = "Function",

			Arguments =
			{
				{ Name = "missionID", Type = "number", Nilable = false },
				{ Name = "followerID", Type = "string", Nilable = false },
				{ Name = "boardIndex", Type = "number", Nilable = true },
			},

			Returns =
			{
				{ Name = "followerAdded", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetAutoCombatDamageClassValues",
			Type = "Function",

			Returns =
			{
				{ Name = "damageClassStrings", Type = "table", InnerType = "AutoCombatDamageClassString", Nilable = false },
			},
		},
		{
			Name = "GetAutoMissionBoardState",
			Type = "Function",

			Arguments =
			{
				{ Name = "missionID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "targetInfo", Type = "table", InnerType = "AutoMissionTargetingInfo", Nilable = false },
			},
		},
		{
			Name = "GetAutoMissionEnvironmentEffect",
			Type = "Function",

			Arguments =
			{
				{ Name = "missionID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "autoMissionEnvEffect", Type = "AutoMissionEnvironmentEffect", Nilable = true },
			},
		},
		{
			Name = "GetAutoMissionTargetingInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "missionID", Type = "number", Nilable = false },
				{ Name = "followerID", Type = "string", Nilable = false },
				{ Name = "casterBoardIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "targetInfo", Type = "table", InnerType = "AutoMissionTargetingInfo", Nilable = false },
			},
		},
		{
			Name = "GetAutoMissionTargetingInfoForSpell",
			Type = "Function",

			Arguments =
			{
				{ Name = "missionID", Type = "number", Nilable = false },
				{ Name = "autoCombatSpellID", Type = "number", Nilable = false },
				{ Name = "casterBoardIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "targetInfo", Type = "table", InnerType = "AutoMissionTargetingInfo", Nilable = false },
			},
		},
		{
			Name = "GetAutoTroops",
			Type = "Function",

			Arguments =
			{
				{ Name = "followerType", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "autoTroopInfo", Type = "table", InnerType = "AutoCombatTroopInfo", Nilable = false },
			},
		},
		{
			Name = "GetCombatLogSpellInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "autoCombatSpellID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "spellInfo", Type = "AutoCombatSpellInfo", Nilable = true },
			},
		},
		{
			Name = "GetCurrentCypherEquipmentLevel",
			Type = "Function",

			Returns =
			{
				{ Name = "equipmentLevel", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetCurrentGarrTalentTreeFriendshipFactionID",
			Type = "Function",

			Returns =
			{
				{ Name = "currentGarrTalentTreeFriendshipFactionID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetCurrentGarrTalentTreeID",
			Type = "Function",

			Returns =
			{
				{ Name = "currentGarrTalentTreeID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetCyphersToNextEquipmentLevel",
			Type = "Function",

			Returns =
			{
				{ Name = "cyphersToNext", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetFollowerAutoCombatSpells",
			Type = "Function",

			Arguments =
			{
				{ Name = "garrFollowerID", Type = "string", Nilable = false },
				{ Name = "followerLevel", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "autoCombatSpells", Type = "table", InnerType = "AutoCombatSpellInfo", Nilable = false },
				{ Name = "autoCombatAutoAttack", Type = "AutoCombatSpellInfo", Nilable = true },
			},
		},
		{
			Name = "GetFollowerAutoCombatStats",
			Type = "Function",

			Arguments =
			{
				{ Name = "garrFollowerID", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "autoCombatInfo", Type = "FollowerAutoCombatStatsInfo", Nilable = true },
			},
		},
		{
			Name = "GetFollowerMissionCompleteInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "followerID", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "followerMissionCompleteInfo", Type = "FollowerMissionCompleteInfo", Nilable = false },
			},
		},
		{
			Name = "GetGarrisonPlotsInstancesForMap",
			Type = "Function",

			Arguments =
			{
				{ Name = "uiMapID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "garrisonPlotInstances", Type = "table", InnerType = "GarrisonPlotInstanceMapInfo", Nilable = false },
			},
		},
		{
			Name = "GetGarrisonTalentTreeCurrencyTypes",
			Type = "Function",

			Arguments =
			{
				{ Name = "garrTalentTreeID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "garrTalentTreeCurrencyType", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetGarrisonTalentTreeType",
			Type = "Function",

			Arguments =
			{
				{ Name = "garrTalentTreeID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "garrTalentTreeType", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetMaxCypherEquipmentLevel",
			Type = "Function",

			Returns =
			{
				{ Name = "maxEquipmentLevel", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetMissionCompleteEncounters",
			Type = "Function",

			Arguments =
			{
				{ Name = "missionID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "encounters", Type = "table", InnerType = "GarrisonEnemyEncounterInfo", Nilable = false },
			},
		},
		{
			Name = "GetMissionDeploymentInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "missionID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "missionDeploymentInfo", Type = "MissionDeploymentInfo", Nilable = false },
			},
		},
		{
			Name = "GetMissionEncounterIconInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "missionID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "missionEncounterIconInfo", Type = "MissionEncounterIconInfo", Nilable = false },
			},
		},
		{
			Name = "GetTalentInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "talentID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "info", Type = "GarrisonTalentInfo", Nilable = false },
			},
		},
		{
			Name = "GetTalentPointsSpentInTalentTree",
			Type = "Function",

			Arguments =
			{
				{ Name = "garrTalentTreeID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "talentPoints", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetTalentTreeIDsByClassID",
			Type = "Function",

			Arguments =
			{
				{ Name = "garrType", Type = "number", Nilable = false },
				{ Name = "classID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "treeIDs", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "GetTalentTreeInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "treeID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "info", Type = "GarrisonTalentTreeInfo", Nilable = false },
			},
		},
		{
			Name = "GetTalentTreeResetInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "garrTalentTreeID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "goldCost", Type = "number", Nilable = false },
				{ Name = "currencyCosts", Type = "table", InnerType = "GarrisonTalentCurrencyCostInfo", Nilable = false },
			},
		},
		{
			Name = "GetTalentTreeTalentPointResearchInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "garrTalentID", Type = "number", Nilable = false },
				{ Name = "researchRank", Type = "number", Nilable = false },
				{ Name = "garrTalentTreeID", Type = "number", Nilable = false },
				{ Name = "talentPointIndex", Type = "number", Nilable = false },
				{ Name = "isRespec", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "goldCost", Type = "number", Nilable = false },
				{ Name = "currencyCosts", Type = "table", InnerType = "GarrisonTalentCurrencyCostInfo", Nilable = false },
				{ Name = "durationSecs", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetTalentUnlockWorldQuest",
			Type = "Function",

			Arguments =
			{
				{ Name = "talentID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "worldQuestID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "HasAdventures",
			Type = "Function",

			Returns =
			{
				{ Name = "hasAdventures", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsAtGarrisonMissionNPC",
			Type = "Function",

			Returns =
			{
				{ Name = "atGarrisonMissionNPC", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsEnvironmentCountered",
			Type = "Function",

			Arguments =
			{
				{ Name = "missionID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "environmentCountered", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsFollowerOnCompletedMission",
			Type = "Function",

			Arguments =
			{
				{ Name = "followerID", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "followerOnCompletedMission", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsTalentConditionMet",
			Type = "Function",

			Arguments =
			{
				{ Name = "talentID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isMet", Type = "bool", Nilable = false },
				{ Name = "failureString", Type = "string", Nilable = true },
			},
		},
		{
			Name = "RegenerateCombatLog",
			Type = "Function",

			Arguments =
			{
				{ Name = "missionID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "success", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "RemoveFollowerFromMission",
			Type = "Function",

			Arguments =
			{
				{ Name = "missionID", Type = "number", Nilable = false },
				{ Name = "followerID", Type = "string", Nilable = false },
				{ Name = "boardIndex", Type = "number", Nilable = true },
			},
		},
		{
			Name = "RushHealAllFollowers",
			Type = "Function",

			Arguments =
			{
				{ Name = "followerType", Type = "number", Nilable = false },
			},
		},
		{
			Name = "RushHealFollower",
			Type = "Function",

			Arguments =
			{
				{ Name = "garrFollowerID", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetAutoCombatSpellFastForward",
			Type = "Function",

			Arguments =
			{
				{ Name = "state", Type = "bool", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "GarrisonArchitectClosed",
			Type = "Event",
			LiteralName = "GARRISON_ARCHITECT_CLOSED",
		},
		{
			Name = "GarrisonArchitectOpened",
			Type = "Event",
			LiteralName = "GARRISON_ARCHITECT_OPENED",
			Payload =
			{
				{ Name = "followerTypeID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GarrisonBuildingActivatable",
			Type = "Event",
			LiteralName = "GARRISON_BUILDING_ACTIVATABLE",
			Payload =
			{
				{ Name = "buildingName", Type = "string", Nilable = false },
				{ Name = "garrisonType", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GarrisonBuildingActivated",
			Type = "Event",
			LiteralName = "GARRISON_BUILDING_ACTIVATED",
			Payload =
			{
				{ Name = "garrisonPlotInstanceID", Type = "number", Nilable = false },
				{ Name = "garrisonBuildingID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GarrisonBuildingError",
			Type = "Event",
			LiteralName = "GARRISON_BUILDING_ERROR",
		},
		{
			Name = "GarrisonBuildingListUpdate",
			Type = "Event",
			LiteralName = "GARRISON_BUILDING_LIST_UPDATE",
			Payload =
			{
				{ Name = "categoryID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GarrisonBuildingPlaced",
			Type = "Event",
			LiteralName = "GARRISON_BUILDING_PLACED",
			Payload =
			{
				{ Name = "garrisonPlotInstanceID", Type = "number", Nilable = false },
				{ Name = "newPlacement", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GarrisonBuildingRemoved",
			Type = "Event",
			LiteralName = "GARRISON_BUILDING_REMOVED",
			Payload =
			{
				{ Name = "garrPlotInstanceID", Type = "number", Nilable = false },
				{ Name = "garrBuildingID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GarrisonBuildingUpdate",
			Type = "Event",
			LiteralName = "GARRISON_BUILDING_UPDATE",
			Payload =
			{
				{ Name = "garrisonBuildingID", Type = "number", Nilable = false },
				{ Name = "garrPlotInstanceID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GarrisonFollowerAdded",
			Type = "Event",
			LiteralName = "GARRISON_FOLLOWER_ADDED",
			Payload =
			{
				{ Name = "followerDbID", Type = "string", Nilable = false },
				{ Name = "followerName", Type = "string", Nilable = false },
				{ Name = "followerClassName", Type = "string", Nilable = false },
				{ Name = "followerLevel", Type = "number", Nilable = false },
				{ Name = "followerQuality", Type = "number", Nilable = false },
				{ Name = "isUpgraded", Type = "bool", Nilable = false },
				{ Name = "textureKit", Type = "string", Nilable = false },
				{ Name = "followerTypeID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GarrisonFollowerCategoriesUpdated",
			Type = "Event",
			LiteralName = "GARRISON_FOLLOWER_CATEGORIES_UPDATED",
		},
		{
			Name = "GarrisonFollowerDurabilityChanged",
			Type = "Event",
			LiteralName = "GARRISON_FOLLOWER_DURABILITY_CHANGED",
			Payload =
			{
				{ Name = "garrFollowerTypeID", Type = "number", Nilable = false },
				{ Name = "followerDbID", Type = "string", Nilable = false },
				{ Name = "followerDurability", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GarrisonFollowerHealed",
			Type = "Event",
			LiteralName = "GARRISON_FOLLOWER_HEALED",
			Payload =
			{
				{ Name = "followerID", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GarrisonFollowerListUpdate",
			Type = "Event",
			LiteralName = "GARRISON_FOLLOWER_LIST_UPDATE",
			Payload =
			{
				{ Name = "followerTypeID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GarrisonFollowerRemoved",
			Type = "Event",
			LiteralName = "GARRISON_FOLLOWER_REMOVED",
			Payload =
			{
				{ Name = "followerTypeID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GarrisonFollowerUpgraded",
			Type = "Event",
			LiteralName = "GARRISON_FOLLOWER_UPGRADED",
			Payload =
			{
				{ Name = "followerDbID", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GarrisonFollowerXpChanged",
			Type = "Event",
			LiteralName = "GARRISON_FOLLOWER_XP_CHANGED",
			Payload =
			{
				{ Name = "garrFollowerTypeID", Type = "number", Nilable = false },
				{ Name = "followerDbID", Type = "string", Nilable = false },
				{ Name = "xpChange", Type = "number", Nilable = false },
				{ Name = "oldFollowerXp", Type = "number", Nilable = false },
				{ Name = "oldFollowerLevel", Type = "number", Nilable = false },
				{ Name = "oldFollowerQuality", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GarrisonHideLandingPage",
			Type = "Event",
			LiteralName = "GARRISON_HIDE_LANDING_PAGE",
		},
		{
			Name = "GarrisonInvasionAvailable",
			Type = "Event",
			LiteralName = "GARRISON_INVASION_AVAILABLE",
		},
		{
			Name = "GarrisonInvasionUnavailable",
			Type = "Event",
			LiteralName = "GARRISON_INVASION_UNAVAILABLE",
		},
		{
			Name = "GarrisonLandingpageShipments",
			Type = "Event",
			LiteralName = "GARRISON_LANDINGPAGE_SHIPMENTS",
		},
		{
			Name = "GarrisonMissionAreaBonusAdded",
			Type = "Event",
			LiteralName = "GARRISON_MISSION_AREA_BONUS_ADDED",
			Payload =
			{
				{ Name = "garrisonMissonBonusAbilityID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GarrisonMissionBonusRollComplete",
			Type = "Event",
			LiteralName = "GARRISON_MISSION_BONUS_ROLL_COMPLETE",
			Payload =
			{
				{ Name = "missionID", Type = "number", Nilable = false },
				{ Name = "success", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GarrisonMissionCompleteResponse",
			Type = "Event",
			LiteralName = "GARRISON_MISSION_COMPLETE_RESPONSE",
			Payload =
			{
				{ Name = "missionID", Type = "number", Nilable = false },
				{ Name = "canComplete", Type = "bool", Nilable = false },
				{ Name = "success", Type = "bool", Nilable = false },
				{ Name = "bonusRollSuccess", Type = "bool", Nilable = false },
				{ Name = "followerDeaths", Type = "table", InnerType = "GarrisonFollowerDeathInfo", Nilable = false },
				{ Name = "autoCombatResult", Type = "AutoCombatResult", Nilable = true },
			},
		},
		{
			Name = "GarrisonMissionFinished",
			Type = "Event",
			LiteralName = "GARRISON_MISSION_FINISHED",
			Payload =
			{
				{ Name = "followerTypeID", Type = "number", Nilable = false },
				{ Name = "missionID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GarrisonMissionListUpdate",
			Type = "Event",
			LiteralName = "GARRISON_MISSION_LIST_UPDATE",
			Payload =
			{
				{ Name = "garrFollowerTypeID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GarrisonMissionNpcClosed",
			Type = "Event",
			LiteralName = "GARRISON_MISSION_NPC_CLOSED",
		},
		{
			Name = "GarrisonMissionNpcOpened",
			Type = "Event",
			LiteralName = "GARRISON_MISSION_NPC_OPENED",
			Payload =
			{
				{ Name = "followerTypeID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GarrisonMissionRewardInfo",
			Type = "Event",
			LiteralName = "GARRISON_MISSION_REWARD_INFO",
			Payload =
			{
				{ Name = "missionID", Type = "number", Nilable = false },
				{ Name = "followerDbID", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GarrisonMissionStarted",
			Type = "Event",
			LiteralName = "GARRISON_MISSION_STARTED",
			Payload =
			{
				{ Name = "garrFollowerTypeID", Type = "number", Nilable = false },
				{ Name = "missionID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GarrisonMonumentCloseUi",
			Type = "Event",
			LiteralName = "GARRISON_MONUMENT_CLOSE_UI",
		},
		{
			Name = "GarrisonMonumentListLoaded",
			Type = "Event",
			LiteralName = "GARRISON_MONUMENT_LIST_LOADED",
			Payload =
			{
				{ Name = "success", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GarrisonMonumentReplaced",
			Type = "Event",
			LiteralName = "GARRISON_MONUMENT_REPLACED",
			Payload =
			{
				{ Name = "success", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GarrisonMonumentSelectedTrophyIdLoaded",
			Type = "Event",
			LiteralName = "GARRISON_MONUMENT_SELECTED_TROPHY_ID_LOADED",
			Payload =
			{
				{ Name = "success", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GarrisonMonumentShowUi",
			Type = "Event",
			LiteralName = "GARRISON_MONUMENT_SHOW_UI",
		},
		{
			Name = "GarrisonRandomMissionAdded",
			Type = "Event",
			LiteralName = "GARRISON_RANDOM_MISSION_ADDED",
			Payload =
			{
				{ Name = "followerTypeID", Type = "number", Nilable = false },
				{ Name = "missionID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GarrisonRecallPortalLastUsedTime",
			Type = "Event",
			LiteralName = "GARRISON_RECALL_PORTAL_LAST_USED_TIME",
			Payload =
			{
				{ Name = "success", Type = "bool", Nilable = false },
				{ Name = "recallPortalLastUsedTime", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GarrisonRecallPortalUsed",
			Type = "Event",
			LiteralName = "GARRISON_RECALL_PORTAL_USED",
			Payload =
			{
				{ Name = "success", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GarrisonRecruitFollowerResult",
			Type = "Event",
			LiteralName = "GARRISON_RECRUIT_FOLLOWER_RESULT",
		},
		{
			Name = "GarrisonRecruitmentFollowersGenerated",
			Type = "Event",
			LiteralName = "GARRISON_RECRUITMENT_FOLLOWERS_GENERATED",
		},
		{
			Name = "GarrisonRecruitmentNpcClosed",
			Type = "Event",
			LiteralName = "GARRISON_RECRUITMENT_NPC_CLOSED",
		},
		{
			Name = "GarrisonRecruitmentNpcOpened",
			Type = "Event",
			LiteralName = "GARRISON_RECRUITMENT_NPC_OPENED",
			Payload =
			{
				{ Name = "followerTypeID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GarrisonRecruitmentReady",
			Type = "Event",
			LiteralName = "GARRISON_RECRUITMENT_READY",
		},
		{
			Name = "GarrisonShipmentReceived",
			Type = "Event",
			LiteralName = "GARRISON_SHIPMENT_RECEIVED",
		},
		{
			Name = "GarrisonShipyardNpcClosed",
			Type = "Event",
			LiteralName = "GARRISON_SHIPYARD_NPC_CLOSED",
		},
		{
			Name = "GarrisonShipyardNpcOpened",
			Type = "Event",
			LiteralName = "GARRISON_SHIPYARD_NPC_OPENED",
			Payload =
			{
				{ Name = "followerTypeID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GarrisonShowLandingPage",
			Type = "Event",
			LiteralName = "GARRISON_SHOW_LANDING_PAGE",
		},
		{
			Name = "GarrisonSpecGroupUpdated",
			Type = "Event",
			LiteralName = "GARRISON_SPEC_GROUP_UPDATED",
			Payload =
			{
				{ Name = "garrTypeID", Type = "number", Nilable = false },
				{ Name = "specID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GarrisonSpecGroupsCleared",
			Type = "Event",
			LiteralName = "GARRISON_SPEC_GROUPS_CLEARED",
			Payload =
			{
				{ Name = "garrTypeID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GarrisonTalentComplete",
			Type = "Event",
			LiteralName = "GARRISON_TALENT_COMPLETE",
			Payload =
			{
				{ Name = "garrTypeID", Type = "number", Nilable = false },
				{ Name = "doAlert", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GarrisonTalentEventUpdate",
			Type = "Event",
			LiteralName = "GARRISON_TALENT_EVENT_UPDATE",
			Payload =
			{
				{ Name = "eventType", Type = "number", Nilable = false },
				{ Name = "eventID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GarrisonTalentNpcClosed",
			Type = "Event",
			LiteralName = "GARRISON_TALENT_NPC_CLOSED",
		},
		{
			Name = "GarrisonTalentNpcOpened",
			Type = "Event",
			LiteralName = "GARRISON_TALENT_NPC_OPENED",
			Payload =
			{
				{ Name = "garrisonTypeID", Type = "number", Nilable = false },
				{ Name = "garrisonTalentTreeID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GarrisonTalentResearchStarted",
			Type = "Event",
			LiteralName = "GARRISON_TALENT_RESEARCH_STARTED",
			Payload =
			{
				{ Name = "garrTypeID", Type = "number", Nilable = false },
				{ Name = "garrisonTalentTreeID", Type = "number", Nilable = false },
				{ Name = "garrTalentID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GarrisonTalentUnlocksResult",
			Type = "Event",
			LiteralName = "GARRISON_TALENT_UNLOCKS_RESULT",
		},
		{
			Name = "GarrisonTalentUpdate",
			Type = "Event",
			LiteralName = "GARRISON_TALENT_UPDATE",
			Payload =
			{
				{ Name = "garrTypeID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GarrisonTradeskillNpcClosed",
			Type = "Event",
			LiteralName = "GARRISON_TRADESKILL_NPC_CLOSED",
		},
		{
			Name = "GarrisonUpdate",
			Type = "Event",
			LiteralName = "GARRISON_UPDATE",
		},
		{
			Name = "GarrisonUpgradeableResult",
			Type = "Event",
			LiteralName = "GARRISON_UPGRADEABLE_RESULT",
			Payload =
			{
				{ Name = "garrisonUpgradeable", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GarrisonUsePartyGarrisonChanged",
			Type = "Event",
			LiteralName = "GARRISON_USE_PARTY_GARRISON_CHANGED",
		},
		{
			Name = "ShipmentCrafterClosed",
			Type = "Event",
			LiteralName = "SHIPMENT_CRAFTER_CLOSED",
		},
		{
			Name = "ShipmentCrafterInfo",
			Type = "Event",
			LiteralName = "SHIPMENT_CRAFTER_INFO",
			Payload =
			{
				{ Name = "success", Type = "number", Nilable = false },
				{ Name = "shipmentCount", Type = "number", Nilable = false },
				{ Name = "maxShipments", Type = "number", Nilable = false },
				{ Name = "ownedShipments", Type = "number", Nilable = false },
				{ Name = "plotInstanceID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ShipmentCrafterOpened",
			Type = "Event",
			LiteralName = "SHIPMENT_CRAFTER_OPENED",
			Payload =
			{
				{ Name = "charShipmentContainerID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ShipmentCrafterReagentUpdate",
			Type = "Event",
			LiteralName = "SHIPMENT_CRAFTER_REAGENT_UPDATE",
		},
		{
			Name = "ShipmentUpdate",
			Type = "Event",
			LiteralName = "SHIPMENT_UPDATE",
			Payload =
			{
				{ Name = "shipmentStarted", Type = "bool", Nilable = true },
				{ Name = "hasAttachedFollower", Type = "bool", Nilable = true },
			},
		},
	},

	Tables =
	{
		{
			Name = "AutoCombatDamageClassString",
			Type = "Structure",
			Fields =
			{
				{ Name = "damageClassValue", Type = "number", Nilable = false },
				{ Name = "locString", Type = "string", Nilable = false },
			},
		},
		{
			Name = "AutoCombatResult",
			Type = "Structure",
			Fields =
			{
				{ Name = "winner", Type = "bool", Nilable = false },
				{ Name = "combatLog", Type = "table", InnerType = "AutoMissionRound", Nilable = false },
			},
		},
		{
			Name = "AutoCombatSpellInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "autoCombatSpellID", Type = "number", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "description", Type = "string", Nilable = false },
				{ Name = "cooldown", Type = "number", Nilable = false },
				{ Name = "duration", Type = "number", Nilable = false },
				{ Name = "schoolMask", Type = "number", Nilable = false },
				{ Name = "previewMask", Type = "number", Nilable = false },
				{ Name = "icon", Type = "number", Nilable = false },
				{ Name = "spellTutorialFlag", Type = "number", Nilable = false },
				{ Name = "hasThornsEffect", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "AutoCombatTroopInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "followerID", Type = "string", Nilable = false },
				{ Name = "garrFollowerID", Type = "string", Nilable = false },
				{ Name = "followerTypeID", Type = "number", Nilable = false },
				{ Name = "displayIDs", Type = "table", InnerType = "FollowerDisplayID", Nilable = false },
				{ Name = "level", Type = "number", Nilable = false },
				{ Name = "quality", Type = "number", Nilable = false },
				{ Name = "levelXP", Type = "number", Nilable = false },
				{ Name = "maxXP", Type = "number", Nilable = false },
				{ Name = "height", Type = "number", Nilable = false },
				{ Name = "scale", Type = "number", Nilable = false },
				{ Name = "displayScale", Type = "number", Nilable = true },
				{ Name = "displayHeight", Type = "number", Nilable = true },
				{ Name = "classSpec", Type = "number", Nilable = true },
				{ Name = "className", Type = "string", Nilable = true },
				{ Name = "flavorText", Type = "string", Nilable = true },
				{ Name = "classAtlas", Type = "string", Nilable = false },
				{ Name = "portraitIconID", Type = "number", Nilable = false },
				{ Name = "textureKit", Type = "string", Nilable = false },
				{ Name = "isTroop", Type = "bool", Nilable = false },
				{ Name = "raceID", Type = "number", Nilable = false },
				{ Name = "health", Type = "number", Nilable = false },
				{ Name = "maxHealth", Type = "number", Nilable = false },
				{ Name = "role", Type = "number", Nilable = false },
				{ Name = "isAutoTroop", Type = "bool", Nilable = false },
				{ Name = "isSoulbind", Type = "bool", Nilable = false },
				{ Name = "isCollected", Type = "bool", Nilable = false },
				{ Name = "autoCombatStats", Type = "FollowerAutoCombatStatsInfo", Nilable = false },
			},
		},
		{
			Name = "AutoMissionCombatEventInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "boardIndex", Type = "number", Nilable = false },
				{ Name = "oldHealth", Type = "number", Nilable = false },
				{ Name = "newHealth", Type = "number", Nilable = false },
				{ Name = "maxHealth", Type = "number", Nilable = false },
				{ Name = "points", Type = "number", Nilable = true },
			},
		},
		{
			Name = "AutoMissionEnvironmentEffect",
			Type = "Structure",
			Fields =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "autoCombatSpellInfo", Type = "AutoCombatSpellInfo", Nilable = false },
			},
		},
		{
			Name = "AutoMissionEvent",
			Type = "Structure",
			Fields =
			{
				{ Name = "type", Type = "number", Nilable = false },
				{ Name = "spellID", Type = "number", Nilable = false },
				{ Name = "schoolMask", Type = "number", Nilable = false },
				{ Name = "effectIndex", Type = "number", Nilable = false },
				{ Name = "casterBoardIndex", Type = "number", Nilable = false },
				{ Name = "auraType", Type = "number", Nilable = false },
				{ Name = "targetInfo", Type = "table", InnerType = "AutoMissionCombatEventInfo", Nilable = false },
			},
		},
		{
			Name = "AutoMissionRound",
			Type = "Structure",
			Fields =
			{
				{ Name = "events", Type = "table", InnerType = "AutoMissionEvent", Nilable = false },
			},
		},
		{
			Name = "AutoMissionTargetingInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "targetIndex", Type = "number", Nilable = false },
				{ Name = "previewType", Type = "number", Nilable = false },
				{ Name = "spellID", Type = "number", Nilable = false },
				{ Name = "effectIndex", Type = "number", Nilable = false },
			},
		},
		{
			Name = "FollowerAutoCombatStatsInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "currentHealth", Type = "number", Nilable = false },
				{ Name = "maxHealth", Type = "number", Nilable = false },
				{ Name = "attack", Type = "number", Nilable = false },
				{ Name = "healingTimestamp", Type = "number", Nilable = false },
				{ Name = "healCost", Type = "number", Nilable = false },
				{ Name = "minutesHealingRemaining", Type = "number", Nilable = false },
			},
		},
		{
			Name = "FollowerDisplayID",
			Type = "Structure",
			Fields =
			{
				{ Name = "id", Type = "number", Nilable = false },
				{ Name = "followerPageScale", Type = "number", Nilable = false },
				{ Name = "showWeapon", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "FollowerMissionCompleteInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "displayIDs", Type = "table", InnerType = "FollowerDisplayID", Nilable = false },
				{ Name = "level", Type = "number", Nilable = false },
				{ Name = "quality", Type = "number", Nilable = false },
				{ Name = "currentXP", Type = "number", Nilable = false },
				{ Name = "maxXP", Type = "number", Nilable = false },
				{ Name = "height", Type = "number", Nilable = false },
				{ Name = "scale", Type = "number", Nilable = false },
				{ Name = "movementType", Type = "number", Nilable = true },
				{ Name = "impactDelay", Type = "number", Nilable = true },
				{ Name = "castID", Type = "number", Nilable = true },
				{ Name = "castSoundID", Type = "number", Nilable = true },
				{ Name = "impactID", Type = "number", Nilable = true },
				{ Name = "impactSoundID", Type = "number", Nilable = true },
				{ Name = "targetImpactID", Type = "number", Nilable = true },
				{ Name = "targetImpactSoundID", Type = "number", Nilable = true },
				{ Name = "className", Type = "string", Nilable = true },
				{ Name = "classAtlas", Type = "string", Nilable = false },
				{ Name = "portraitIconID", Type = "number", Nilable = false },
				{ Name = "textureKit", Type = "string", Nilable = false },
				{ Name = "isTroop", Type = "bool", Nilable = false },
				{ Name = "boardIndex", Type = "number", Nilable = false },
				{ Name = "health", Type = "number", Nilable = false },
				{ Name = "maxHealth", Type = "number", Nilable = false },
				{ Name = "role", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GarrisonAbilityCounterInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "id", Type = "number", Nilable = false },
				{ Name = "icon", Type = "number", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "factor", Type = "number", Nilable = false },
				{ Name = "description", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GarrisonAbilityInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "id", Type = "number", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "description", Type = "string", Nilable = false },
				{ Name = "icon", Type = "number", Nilable = false },
				{ Name = "isTrait", Type = "bool", Nilable = false },
				{ Name = "isSpecialization", Type = "bool", Nilable = false },
				{ Name = "temporary", Type = "bool", Nilable = false },
				{ Name = "category", Type = "string", Nilable = true },
				{ Name = "counters", Type = "table", InnerType = "GarrisonAbilityCounterInfo", Nilable = false },
				{ Name = "isEmptySlot", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GarrisonEnemyEncounterInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "displayID", Type = "number", Nilable = false },
				{ Name = "portraitFileDataID", Type = "number", Nilable = false },
				{ Name = "textureKit", Type = "string", Nilable = false },
				{ Name = "scale", Type = "number", Nilable = false },
				{ Name = "height", Type = "number", Nilable = false },
				{ Name = "mechanics", Type = "table", InnerType = "GarrisonMechanicInfo", Nilable = false },
				{ Name = "autoCombatSpells", Type = "table", InnerType = "AutoCombatSpellInfo", Nilable = false },
				{ Name = "autoCombatAutoAttack", Type = "AutoCombatSpellInfo", Nilable = true },
				{ Name = "role", Type = "number", Nilable = false },
				{ Name = "health", Type = "number", Nilable = false },
				{ Name = "maxHealth", Type = "number", Nilable = false },
				{ Name = "attack", Type = "number", Nilable = false },
				{ Name = "boardIndex", Type = "number", Nilable = false },
				{ Name = "isElite", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GarrisonFollowerDeathInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "followerID", Type = "string", Nilable = false },
				{ Name = "state", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GarrisonMechanicInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "mechanicTypeID", Type = "number", Nilable = false },
				{ Name = "icon", Type = "number", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "factor", Type = "number", Nilable = false },
				{ Name = "description", Type = "string", Nilable = false },
				{ Name = "ability", Type = "GarrisonAbilityInfo", Nilable = true },
			},
		},
		{
			Name = "GarrisonPlotInstanceMapInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "buildingPlotInstanceID", Type = "number", Nilable = false },
				{ Name = "position", Type = "table", Mixin = "Vector2DMixin", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "atlasName", Type = "string", Nilable = false },
			},
		},
		{
			Name = "MissionDeploymentInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "location", Type = "string", Nilable = false },
				{ Name = "xp", Type = "number", Nilable = false },
				{ Name = "environment", Type = "string", Nilable = true },
				{ Name = "environmentDesc", Type = "string", Nilable = true },
				{ Name = "environmentTexture", Type = "number", Nilable = false },
				{ Name = "locTextureKit", Type = "string", Nilable = false },
				{ Name = "isExhausting", Type = "bool", Nilable = false },
				{ Name = "enemies", Type = "table", InnerType = "GarrisonEnemyEncounterInfo", Nilable = false },
			},
		},
		{
			Name = "MissionEncounterIconInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "portraitFileDataID", Type = "number", Nilable = false },
				{ Name = "missionScalar", Type = "number", Nilable = false },
				{ Name = "isElite", Type = "bool", Nilable = false },
				{ Name = "isRare", Type = "bool", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "InGameNavigation",
	Type = "System",
	Namespace = "C_Navigation",

	Functions =
	{
		{
			Name = "GetDistance",
			Type = "Function",

			Returns =
			{
				{ Name = "distance", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetFrame",
			Type = "Function",

			Returns =
			{
				{ Name = "frame", Type = "table", Nilable = true },
			},
		},
		{
			Name = "GetTargetState",
			Type = "Function",

			Returns =
			{
				{ Name = "state", Type = "NavigationState", Nilable = false },
			},
		},
		{
			Name = "HasValidScreenPosition",
			Type = "Function",

			Returns =
			{
				{ Name = "hasValidScreenPosition", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "WasClampedToScreen",
			Type = "Function",

			Returns =
			{
				{ Name = "wasClamped", Type = "bool", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "NavigationFrameCreated",
			Type = "Event",
			LiteralName = "NAVIGATION_FRAME_CREATED",
			Payload =
			{
				{ Name = "region", Type = "table", Nilable = false },
			},
		},
		{
			Name = "NavigationFrameDestroyed",
			Type = "Event",
			LiteralName = "NAVIGATION_FRAME_DESTROYED",
		},
	},

	Tables =
	{
		{
			Name = "NavigationState",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 0,
			MaxValue = 2,
			Fields =
			{
				{ Name = "Invalid", Type = "NavigationState", EnumValue = 0 },
				{ Name = "Occluded", Type = "NavigationState", EnumValue = 1 },
				{ Name = "InRange", Type = "NavigationState", EnumValue = 2 },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "IncomingSummon",
	Type = "System",
	Namespace = "C_IncomingSummon",

	Functions =
	{
		{
			Name = "HasIncomingSummon",
			Type = "Function",

			Arguments =
			{
				{ Name = "unit", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "summon", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IncomingSummonStatus",
			Type = "Function",

			Arguments =
			{
				{ Name = "unit", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "status", Type = "SummonStatus", Nilable = false },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
		{
			Name = "SummonStatus",
			Type = "Enumeration",
			NumValues = 4,
			MinValue = 0,
			MaxValue = 3,
			Fields =
			{
				{ Name = "None", Type = "SummonStatus", EnumValue = 0 },
				{ Name = "Pending", Type = "SummonStatus", EnumValue = 1 },
				{ Name = "Accepted", Type = "SummonStatus", EnumValue = 2 },
				{ Name = "Declined", Type = "SummonStatus", EnumValue = 3 },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "InvasionInfo",
	Type = "System",
	Namespace = "C_InvasionInfo",

	Functions =
	{
		{
			Name = "AreInvasionsAvailable",
			Type = "Function",
			Documentation = { "Returns true if invasions are active in the same physical area as the player." },

			Returns =
			{
				{ Name = "areInvasionsAvailable", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetInvasionForUiMapID",
			Type = "Function",

			Arguments =
			{
				{ Name = "uiMapID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "invasionID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetInvasionInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "invasionID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "invasionInfo", Type = "InvasionMapInfo", Nilable = false },
			},
		},
		{
			Name = "GetInvasionTimeLeft",
			Type = "Function",

			Arguments =
			{
				{ Name = "invasionID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "timeLeftMinutes", Type = "number", Nilable = true },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
		{
			Name = "InvasionMapInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "invasionID", Type = "number", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "position", Type = "table", Mixin = "Vector2DMixin", Nilable = false },
				{ Name = "atlasName", Type = "string", Nilable = false },
				{ Name = "rewardQuestID", Type = "number", Nilable = true },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "IslandsInfo",
	Type = "System",
	Namespace = "C_IslandsInfo",

	Functions =
	{
	},

	Events =
	{
		{
			Name = "IslandAzeriteGain",
			Type = "Event",
			LiteralName = "ISLAND_AZERITE_GAIN",
			Payload =
			{
				{ Name = "amount", Type = "number", Nilable = false },
				{ Name = "gainedByPlayer", Type = "bool", Nilable = false },
				{ Name = "factionIndex", Type = "number", Nilable = false },
				{ Name = "gainedBy", Type = "string", Nilable = false },
				{ Name = "gainedFrom", Type = "string", Nilable = false },
			},
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "IslandsQueue",
	Type = "System",
	Namespace = "C_IslandsQueue",

	Functions =
	{
		{
			Name = "CloseIslandsQueueScreen",
			Type = "Function",
		},
		{
			Name = "GetIslandDifficultyInfo",
			Type = "Function",

			Returns =
			{
				{ Name = "islandDifficultyInfo", Type = "table", InnerType = "IslandsQueueDifficultyInfo", Nilable = false },
			},
		},
		{
			Name = "GetIslandsMaxGroupSize",
			Type = "Function",

			Returns =
			{
				{ Name = "maxGroupSize", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetIslandsWeeklyQuestID",
			Type = "Function",

			Returns =
			{
				{ Name = "questID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "QueueForIsland",
			Type = "Function",

			Arguments =
			{
				{ Name = "difficultyID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "RequestPreloadRewardData",
			Type = "Function",

			Arguments =
			{
				{ Name = "questId", Type = "number", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "IslandsQueueClose",
			Type = "Event",
			LiteralName = "ISLANDS_QUEUE_CLOSE",
		},
		{
			Name = "IslandsQueueOpen",
			Type = "Event",
			LiteralName = "ISLANDS_QUEUE_OPEN",
		},
	},

	Tables =
	{
		{
			Name = "IslandsQueueDifficultyInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "difficultyId", Type = "number", Nilable = false },
				{ Name = "previewRewardQuestId", Type = "number", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "ItemInteractionUI",
	Type = "System",
	Namespace = "C_ItemInteraction",

	Functions =
	{
		{
			Name = "ClearPendingItem",
			Type = "Function",
		},
		{
			Name = "CloseUI",
			Type = "Function",
		},
		{
			Name = "GetChargeInfo",
			Type = "Function",

			Returns =
			{
				{ Name = "chargeInfo", Type = "ItemInteractionChargeInfo", Nilable = false },
			},
		},
		{
			Name = "GetItemConversionCurrencyCost",
			Type = "Function",

			Arguments =
			{
				{ Name = "item", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "conversionCost", Type = "ConversionCurrencyCost", Nilable = false },
			},
		},
		{
			Name = "GetItemInteractionInfo",
			Type = "Function",

			Returns =
			{
				{ Name = "info", Type = "ItemInteractionFrameInfo", Nilable = true },
			},
		},
		{
			Name = "GetItemInteractionSpellId",
			Type = "Function",

			Returns =
			{
				{ Name = "spellId", Type = "number", Nilable = false },
			},
		},
		{
			Name = "InitializeFrame",
			Type = "Function",
		},
		{
			Name = "PerformItemInteraction",
			Type = "Function",
		},
		{
			Name = "Reset",
			Type = "Function",
		},
		{
			Name = "SetCorruptionReforgerItemTooltip",
			Type = "Function",
		},
		{
			Name = "SetItemConversionOutputTooltip",
			Type = "Function",
		},
		{
			Name = "SetPendingItem",
			Type = "Function",

			Arguments =
			{
				{ Name = "item", Type = "table", Mixin = "ItemLocationMixin", Nilable = true },
			},

			Returns =
			{
				{ Name = "success", Type = "bool", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "ItemInteractionChargeInfoUpdated",
			Type = "Event",
			LiteralName = "ITEM_INTERACTION_CHARGE_INFO_UPDATED",
		},
		{
			Name = "ItemInteractionClose",
			Type = "Event",
			LiteralName = "ITEM_INTERACTION_CLOSE",
		},
		{
			Name = "ItemInteractionItemSelectionUpdated",
			Type = "Event",
			LiteralName = "ITEM_INTERACTION_ITEM_SELECTION_UPDATED",
			Payload =
			{
				{ Name = "itemLocation", Type = "table", Mixin = "ItemLocationMixin", Nilable = true },
			},
		},
		{
			Name = "ItemInteractionOpen",
			Type = "Event",
			LiteralName = "ITEM_INTERACTION_OPEN",
		},
	},

	Tables =
	{
		{
			Name = "ConversionCurrencyCost",
			Type = "Structure",
			Fields =
			{
				{ Name = "currencyID", Type = "number", Nilable = false },
				{ Name = "amount", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ItemInteractionChargeInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "newChargeAmount", Type = "number", Nilable = false },
				{ Name = "rechargeRate", Type = "number", Nilable = false },
				{ Name = "timeToNextCharge", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ItemInteractionFrameInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "textureKit", Type = "string", Nilable = false },
				{ Name = "openSoundKitID", Type = "number", Nilable = false },
				{ Name = "closeSoundKitID", Type = "number", Nilable = false },
				{ Name = "titleText", Type = "string", Nilable = false },
				{ Name = "tutorialText", Type = "string", Nilable = false },
				{ Name = "buttonText", Type = "string", Nilable = false },
				{ Name = "interactionType", Type = "UIItemInteractionType", Nilable = false },
				{ Name = "flags", Type = "number", Nilable = false },
				{ Name = "description", Type = "string", Nilable = true },
				{ Name = "buttonTooltip", Type = "string", Nilable = true },
				{ Name = "confirmationDescription", Type = "string", Nilable = true },
				{ Name = "cost", Type = "number", Nilable = true },
				{ Name = "currencyTypeId", Type = "number", Nilable = true },
				{ Name = "dropInSlotSoundKitId", Type = "number", Nilable = true },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "LegendaryCrafting",
	Type = "System",
	Namespace = "C_LegendaryCrafting",

	Functions =
	{
		{
			Name = "CloseRuneforgeInteraction",
			Type = "Function",
		},
		{
			Name = "CraftRuneforgeLegendary",
			Type = "Function",

			Arguments =
			{
				{ Name = "description", Type = "RuneforgeLegendaryCraftDescription", Nilable = false },
			},
		},
		{
			Name = "GetRuneforgeItemPreviewInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "baseItem", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
				{ Name = "runeforgePowerID", Type = "number", Nilable = true },
				{ Name = "modifiers", Type = "table", InnerType = "number", Nilable = true },
			},

			Returns =
			{
				{ Name = "info", Type = "RuneforgeItemPreviewInfo", Nilable = true },
			},
		},
		{
			Name = "GetRuneforgeLegendaryComponentInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "runeforgeLegendary", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "componentInfo", Type = "RuneforgeLegendaryComponentInfo", Nilable = false },
			},
		},
		{
			Name = "GetRuneforgeLegendaryCost",
			Type = "Function",

			Arguments =
			{
				{ Name = "baseItem", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "cost", Type = "table", InnerType = "CurrencyCost", Nilable = false },
			},
		},
		{
			Name = "GetRuneforgeLegendaryCraftSpellID",
			Type = "Function",

			Returns =
			{
				{ Name = "spellID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetRuneforgeLegendaryCurrencies",
			Type = "Function",

			Returns =
			{
				{ Name = "currencies", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "GetRuneforgeLegendaryUpgradeCost",
			Type = "Function",

			Arguments =
			{
				{ Name = "runeforgeLegendary", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
				{ Name = "upgradeItem", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "cost", Type = "table", InnerType = "CurrencyCost", Nilable = false },
			},
		},
		{
			Name = "GetRuneforgeModifierInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "baseItem", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
				{ Name = "powerID", Type = "number", Nilable = true },
				{ Name = "addedModifierIndex", Type = "number", Nilable = false },
				{ Name = "modifiers", Type = "table", InnerType = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "description", Type = "table", InnerType = "string", Nilable = false },
			},
		},
		{
			Name = "GetRuneforgeModifiers",
			Type = "Function",

			Returns =
			{
				{ Name = "modifiedReagentItemIDs", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "GetRuneforgePowerInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "runeforgePowerID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "power", Type = "RuneforgePower", Nilable = false },
			},
		},
		{
			Name = "GetRuneforgePowerSlots",
			Type = "Function",

			Arguments =
			{
				{ Name = "runeforgePowerID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "slotNames", Type = "table", InnerType = "string", Nilable = false },
			},
		},
		{
			Name = "GetRuneforgePowers",
			Type = "Function",

			Arguments =
			{
				{ Name = "baseItem", Type = "table", Mixin = "ItemLocationMixin", Nilable = true },
				{ Name = "filter", Type = "RuneforgePowerFilter", Nilable = true },
			},

			Returns =
			{
				{ Name = "primaryRuneforgePowerIDs", Type = "table", InnerType = "number", Nilable = false },
				{ Name = "otherRuneforgePowerIDs", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "GetRuneforgePowersByClassSpecAndCovenant",
			Type = "Function",

			Arguments =
			{
				{ Name = "classID", Type = "number", Nilable = true },
				{ Name = "specID", Type = "number", Nilable = true },
				{ Name = "covenantID", Type = "number", Nilable = true },
				{ Name = "filter", Type = "RuneforgePowerFilter", Nilable = true },
			},

			Returns =
			{
				{ Name = "runeforgePowerIDs", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "IsRuneforgeLegendary",
			Type = "Function",

			Arguments =
			{
				{ Name = "item", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "isRuneforgeLegendary", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsRuneforgeLegendaryMaxLevel",
			Type = "Function",

			Arguments =
			{
				{ Name = "runeforgeLegendary", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "isMaxLevel", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsUpgradeItemValidForRuneforgeLegendary",
			Type = "Function",

			Arguments =
			{
				{ Name = "runeforgeLegendary", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
				{ Name = "upgradeItem", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "isValid", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsValidRuneforgeBaseItem",
			Type = "Function",

			Arguments =
			{
				{ Name = "baseItem", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "isValid", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "MakeRuneforgeCraftDescription",
			Type = "Function",

			Arguments =
			{
				{ Name = "baseItem", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
				{ Name = "runeforgePowerID", Type = "number", Nilable = false },
				{ Name = "modifiers", Type = "table", InnerType = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "description", Type = "RuneforgeLegendaryCraftDescription", Nilable = false },
			},
		},
		{
			Name = "UpgradeRuneforgeLegendary",
			Type = "Function",

			Arguments =
			{
				{ Name = "runeforgeLegendary", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
				{ Name = "upgradeItem", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "NewRuneforgePowerAdded",
			Type = "Event",
			LiteralName = "NEW_RUNEFORGE_POWER_ADDED",
			Payload =
			{
				{ Name = "powerID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "RuneforgeLegendaryCraftingClosed",
			Type = "Event",
			LiteralName = "RUNEFORGE_LEGENDARY_CRAFTING_CLOSED",
		},
		{
			Name = "RuneforgeLegendaryCraftingOpened",
			Type = "Event",
			LiteralName = "RUNEFORGE_LEGENDARY_CRAFTING_OPENED",
			Payload =
			{
				{ Name = "isUpgrade", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "RuneforgePowerInfoUpdated",
			Type = "Event",
			LiteralName = "RUNEFORGE_POWER_INFO_UPDATED",
			Payload =
			{
				{ Name = "powerID", Type = "number", Nilable = false },
			},
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "LevelLink",
	Type = "System",
	Namespace = "C_LevelLink",

	Functions =
	{
		{
			Name = "IsActionLocked",
			Type = "Function",

			Arguments =
			{
				{ Name = "actionID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isLocked", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsSpellLocked",
			Type = "Function",

			Arguments =
			{
				{ Name = "spellID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isLocked", Type = "bool", Nilable = false },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "LevelSquish",
	Type = "System",
	Namespace = "C_LevelSquish",

	Functions =
	{
		{
			Name = "ConvertFollowerLevel",
			Type = "Function",

			Arguments =
			{
				{ Name = "level", Type = "number", Nilable = false },
				{ Name = "maxFollowerLevel", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "squishedLevel", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ConvertPlayerLevel",
			Type = "Function",

			Arguments =
			{
				{ Name = "level", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "squishedLevel", Type = "number", Nilable = false },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "LootJournal",
	Type = "System",
	Namespace = "C_LootJournal",

	Functions =
	{
		{
			Name = "GetItemSetItems",
			Type = "Function",

			Arguments =
			{
				{ Name = "setID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "items", Type = "table", InnerType = "LootJournalItemInfo", Nilable = false },
			},
		},
		{
			Name = "GetItemSets",
			Type = "Function",

			Arguments =
			{
				{ Name = "classID", Type = "number", Nilable = true },
				{ Name = "specID", Type = "number", Nilable = true },
			},

			Returns =
			{
				{ Name = "itemSets", Type = "table", InnerType = "LootJournalItemSetInfo", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "LootJournalItemUpdate",
			Type = "Event",
			LiteralName = "LOOT_JOURNAL_ITEM_UPDATE",
		},
	},

	Tables =
	{
		{
			Name = "LootJournalItemInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "itemID", Type = "number", Nilable = false },
				{ Name = "icon", Type = "number", Nilable = false },
				{ Name = "invType", Type = "number", Nilable = false },
			},
		},
		{
			Name = "LootJournalItemSetInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "setID", Type = "number", Nilable = false },
				{ Name = "itemLevel", Type = "number", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "LoreText",
	Type = "System",
	Namespace = "C_LoreText",

	Functions =
	{
		{
			Name = "RequestLoreTextForCampaignID",
			Type = "Function",

			Arguments =
			{
				{ Name = "campaignID", Type = "number", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "LoreTextUpdatedCampaign",
			Type = "Event",
			LiteralName = "LORE_TEXT_UPDATED_CAMPAIGN",
			Payload =
			{
				{ Name = "campaignID", Type = "number", Nilable = false },
				{ Name = "textEntries", Type = "table", InnerType = "LoreTextEntry", Nilable = false },
			},
		},
	},

	Tables =
	{
		{
			Name = "LoreTextEntry",
			Type = "Structure",
			Fields =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "isHeader", Type = "bool", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "MapUI",
	Type = "System",
	Namespace = "C_Map",

	Functions =
	{
		{
			Name = "CanSetUserWaypointOnMap",
			Type = "Function",

			Arguments =
			{
				{ Name = "uiMapID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "canSet", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ClearUserWaypoint",
			Type = "Function",
		},
		{
			Name = "CloseWorldMapInteraction",
			Type = "Function",
		},
		{
			Name = "GetAreaInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "areaID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "name", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetBestMapForUnit",
			Type = "Function",
			Documentation = { "Only works for the player and party members." },

			Arguments =
			{
				{ Name = "unitToken", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "uiMapID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetBountySetMaps",
			Type = "Function",

			Arguments =
			{
				{ Name = "bountySetID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "mapIDs", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "GetFallbackWorldMapID",
			Type = "Function",

			Returns =
			{
				{ Name = "uiMapID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetMapArtBackgroundAtlas",
			Type = "Function",

			Arguments =
			{
				{ Name = "uiMapID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "atlasName", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetMapArtHelpTextPosition",
			Type = "Function",

			Arguments =
			{
				{ Name = "uiMapID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "position", Type = "MapCanvasPosition", Nilable = false },
			},
		},
		{
			Name = "GetMapArtID",
			Type = "Function",

			Arguments =
			{
				{ Name = "uiMapID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "uiMapArtID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetMapArtLayerTextures",
			Type = "Function",

			Arguments =
			{
				{ Name = "uiMapID", Type = "number", Nilable = false },
				{ Name = "layerIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "textures", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "GetMapArtLayers",
			Type = "Function",

			Arguments =
			{
				{ Name = "uiMapID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "layerInfo", Type = "table", InnerType = "UiMapLayerInfo", Nilable = false },
			},
		},
		{
			Name = "GetMapBannersForMap",
			Type = "Function",

			Arguments =
			{
				{ Name = "uiMapID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "mapBanners", Type = "table", InnerType = "MapBannerInfo", Nilable = false },
			},
		},
		{
			Name = "GetMapChildrenInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "uiMapID", Type = "number", Nilable = false },
				{ Name = "mapType", Type = "UIMapType", Nilable = true },
				{ Name = "allDescendants", Type = "bool", Nilable = true },
			},

			Returns =
			{
				{ Name = "info", Type = "table", InnerType = "UiMapDetails", Nilable = false },
			},
		},
		{
			Name = "GetMapDisplayInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "uiMapID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "hideIcons", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetMapGroupID",
			Type = "Function",

			Arguments =
			{
				{ Name = "uiMapID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "uiMapGroupID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetMapGroupMembersInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "uiMapGroupID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "info", Type = "table", InnerType = "UiMapGroupMemberInfo", Nilable = false },
			},
		},
		{
			Name = "GetMapHighlightInfoAtPosition",
			Type = "Function",

			Arguments =
			{
				{ Name = "uiMapID", Type = "number", Nilable = false },
				{ Name = "x", Type = "number", Nilable = false },
				{ Name = "y", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "fileDataID", Type = "number", Nilable = false },
				{ Name = "atlasID", Type = "string", Nilable = false },
				{ Name = "texturePercentageX", Type = "number", Nilable = false },
				{ Name = "texturePercentageY", Type = "number", Nilable = false },
				{ Name = "textureX", Type = "number", Nilable = false },
				{ Name = "textureY", Type = "number", Nilable = false },
				{ Name = "scrollChildX", Type = "number", Nilable = false },
				{ Name = "scrollChildY", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetMapInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "uiMapID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "info", Type = "UiMapDetails", Nilable = false },
			},
		},
		{
			Name = "GetMapInfoAtPosition",
			Type = "Function",

			Arguments =
			{
				{ Name = "uiMapID", Type = "number", Nilable = false },
				{ Name = "x", Type = "number", Nilable = false },
				{ Name = "y", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "info", Type = "UiMapDetails", Nilable = false },
			},
		},
		{
			Name = "GetMapLevels",
			Type = "Function",

			Arguments =
			{
				{ Name = "uiMapID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "playerMinLevel", Type = "number", Nilable = false },
				{ Name = "playerMaxLevel", Type = "number", Nilable = false },
				{ Name = "petMinLevel", Type = "number", Nilable = false, Default = 0 },
				{ Name = "petMaxLevel", Type = "number", Nilable = false, Default = 0 },
			},
		},
		{
			Name = "GetMapLinksForMap",
			Type = "Function",

			Arguments =
			{
				{ Name = "uiMapID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "mapLinks", Type = "table", InnerType = "MapLinkInfo", Nilable = false },
			},
		},
		{
			Name = "GetMapPosFromWorldPos",
			Type = "Function",

			Arguments =
			{
				{ Name = "continentID", Type = "number", Nilable = false },
				{ Name = "worldPosition", Type = "table", Mixin = "Vector2DMixin", Nilable = false },
				{ Name = "overrideUiMapID", Type = "number", Nilable = true },
			},

			Returns =
			{
				{ Name = "uiMapID", Type = "number", Nilable = false },
				{ Name = "mapPosition", Type = "table", Mixin = "Vector2DMixin", Nilable = false },
			},
		},
		{
			Name = "GetMapRectOnMap",
			Type = "Function",

			Arguments =
			{
				{ Name = "uiMapID", Type = "number", Nilable = false },
				{ Name = "topUiMapID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "minX", Type = "number", Nilable = false },
				{ Name = "maxX", Type = "number", Nilable = false },
				{ Name = "minY", Type = "number", Nilable = false },
				{ Name = "maxY", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetMapWorldSize",
			Type = "Function",
			Documentation = { "Returns the size in yards of the area represented by the map." },

			Arguments =
			{
				{ Name = "uiMapID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "width", Type = "number", Nilable = false },
				{ Name = "height", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetPlayerMapPosition",
			Type = "Function",
			Documentation = { "Only works for the player and party members." },

			Arguments =
			{
				{ Name = "uiMapID", Type = "number", Nilable = false },
				{ Name = "unitToken", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "position", Type = "table", Mixin = "Vector2DMixin", Nilable = true },
			},
		},
		{
			Name = "GetUserWaypoint",
			Type = "Function",

			Returns =
			{
				{ Name = "point", Type = "table", Nilable = false },
			},
		},
		{
			Name = "GetUserWaypointFromHyperlink",
			Type = "Function",

			Arguments =
			{
				{ Name = "hyperlink", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "point", Type = "table", Nilable = false },
			},
		},
		{
			Name = "GetUserWaypointHyperlink",
			Type = "Function",

			Returns =
			{
				{ Name = "hyperlink", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetUserWaypointPositionForMap",
			Type = "Function",

			Arguments =
			{
				{ Name = "uiMapID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "mapPosition", Type = "table", Mixin = "Vector2DMixin", Nilable = false },
			},
		},
		{
			Name = "GetWorldPosFromMapPos",
			Type = "Function",

			Arguments =
			{
				{ Name = "uiMapID", Type = "number", Nilable = false },
				{ Name = "mapPosition", Type = "table", Mixin = "Vector2DMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "continentID", Type = "number", Nilable = false },
				{ Name = "worldPosition", Type = "table", Mixin = "Vector2DMixin", Nilable = false },
			},
		},
		{
			Name = "HasUserWaypoint",
			Type = "Function",

			Returns =
			{
				{ Name = "hasUserWaypoint", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsMapValidForNavBarDropDown",
			Type = "Function",

			Arguments =
			{
				{ Name = "uiMapID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isValid", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "MapHasArt",
			Type = "Function",

			Arguments =
			{
				{ Name = "uiMapID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "hasArt", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "RequestPreloadMap",
			Type = "Function",

			Arguments =
			{
				{ Name = "uiMapID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetUserWaypoint",
			Type = "Function",

			Arguments =
			{
				{ Name = "point", Type = "table", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "NewWmoChunk",
			Type = "Event",
			LiteralName = "NEW_WMO_CHUNK",
		},
		{
			Name = "UserWaypointUpdated",
			Type = "Event",
			LiteralName = "USER_WAYPOINT_UPDATED",
		},
		{
			Name = "WorldMapClose",
			Type = "Event",
			LiteralName = "WORLD_MAP_CLOSE",
		},
		{
			Name = "WorldMapOpen",
			Type = "Event",
			LiteralName = "WORLD_MAP_OPEN",
			Payload =
			{
				{ Name = "uiMapID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ZoneChanged",
			Type = "Event",
			LiteralName = "ZONE_CHANGED",
		},
		{
			Name = "ZoneChangedIndoors",
			Type = "Event",
			LiteralName = "ZONE_CHANGED_INDOORS",
		},
		{
			Name = "ZoneChangedNewArea",
			Type = "Event",
			LiteralName = "ZONE_CHANGED_NEW_AREA",
		},
	},

	Tables =
	{
		{
			Name = "MapCanvasPosition",
			Type = "Enumeration",
			NumValues = 5,
			MinValue = 0,
			MaxValue = 4,
			Fields =
			{
				{ Name = "None", Type = "MapCanvasPosition", EnumValue = 0 },
				{ Name = "BottomLeft", Type = "MapCanvasPosition", EnumValue = 1 },
				{ Name = "BottomRight", Type = "MapCanvasPosition", EnumValue = 2 },
				{ Name = "TopLeft", Type = "MapCanvasPosition", EnumValue = 3 },
				{ Name = "TopRight", Type = "MapCanvasPosition", EnumValue = 4 },
			},
		},
		{
			Name = "UIMapFlag",
			Type = "Enumeration",
			NumValues = 17,
			MinValue = 1,
			MaxValue = 65536,
			Fields =
			{
				{ Name = "NoHighlight", Type = "UIMapFlag", EnumValue = 1 },
				{ Name = "ShowOverlays", Type = "UIMapFlag", EnumValue = 2 },
				{ Name = "ShowTaxiNodes", Type = "UIMapFlag", EnumValue = 4 },
				{ Name = "GarrisonMap", Type = "UIMapFlag", EnumValue = 8 },
				{ Name = "FallbackToParentMap", Type = "UIMapFlag", EnumValue = 16 },
				{ Name = "NoHighlightTexture", Type = "UIMapFlag", EnumValue = 32 },
				{ Name = "ShowTaskObjectives", Type = "UIMapFlag", EnumValue = 64 },
				{ Name = "NoWorldPositions", Type = "UIMapFlag", EnumValue = 128 },
				{ Name = "HideArchaeologyDigs", Type = "UIMapFlag", EnumValue = 256 },
				{ Name = "Deprecated", Type = "UIMapFlag", EnumValue = 512 },
				{ Name = "HideIcons", Type = "UIMapFlag", EnumValue = 1024 },
				{ Name = "HideVignettes", Type = "UIMapFlag", EnumValue = 2048 },
				{ Name = "ForceAllOverlayExplored", Type = "UIMapFlag", EnumValue = 4096 },
				{ Name = "FlightMapShowZoomOut", Type = "UIMapFlag", EnumValue = 8192 },
				{ Name = "FlightMapAutoZoom", Type = "UIMapFlag", EnumValue = 16384 },
				{ Name = "ForceOnNavbar", Type = "UIMapFlag", EnumValue = 32768 },
				{ Name = "AlwaysAllowUserWaypoints", Type = "UIMapFlag", EnumValue = 65536 },
			},
		},
		{
			Name = "UIMapSystem",
			Type = "Enumeration",
			NumValues = 4,
			MinValue = 0,
			MaxValue = 3,
			Fields =
			{
				{ Name = "World", Type = "UIMapSystem", EnumValue = 0 },
				{ Name = "Taxi", Type = "UIMapSystem", EnumValue = 1 },
				{ Name = "Adventure", Type = "UIMapSystem", EnumValue = 2 },
				{ Name = "Minimap", Type = "UIMapSystem", EnumValue = 3 },
			},
		},
		{
			Name = "UIMapType",
			Type = "Enumeration",
			NumValues = 7,
			MinValue = 0,
			MaxValue = 6,
			Fields =
			{
				{ Name = "Cosmic", Type = "UIMapType", EnumValue = 0 },
				{ Name = "World", Type = "UIMapType", EnumValue = 1 },
				{ Name = "Continent", Type = "UIMapType", EnumValue = 2 },
				{ Name = "Zone", Type = "UIMapType", EnumValue = 3 },
				{ Name = "Dungeon", Type = "UIMapType", EnumValue = 4 },
				{ Name = "Micro", Type = "UIMapType", EnumValue = 5 },
				{ Name = "Orphan", Type = "UIMapType", EnumValue = 6 },
			},
		},
		{
			Name = "MapBannerInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "areaPoiID", Type = "number", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "atlasName", Type = "string", Nilable = false },
				{ Name = "uiTextureKit", Type = "string", Nilable = true },
			},
		},
		{
			Name = "MapLinkInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "areaPoiID", Type = "number", Nilable = false },
				{ Name = "position", Type = "table", Mixin = "Vector2DMixin", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "atlasName", Type = "string", Nilable = false },
				{ Name = "linkedUiMapID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "UiMapDetails",
			Type = "Structure",
			Fields =
			{
				{ Name = "mapID", Type = "number", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "mapType", Type = "UIMapType", Nilable = false },
				{ Name = "parentMapID", Type = "number", Nilable = false },
				{ Name = "flags", Type = "number", Nilable = false },
			},
		},
		{
			Name = "UiMapGroupMemberInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "mapID", Type = "number", Nilable = false },
				{ Name = "relativeHeightIndex", Type = "number", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
			},
		},
		{
			Name = "UiMapLayerInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "layerWidth", Type = "number", Nilable = false },
				{ Name = "layerHeight", Type = "number", Nilable = false },
				{ Name = "tileWidth", Type = "number", Nilable = false },
				{ Name = "tileHeight", Type = "number", Nilable = false },
				{ Name = "minScale", Type = "number", Nilable = false },
				{ Name = "maxScale", Type = "number", Nilable = false },
				{ Name = "additionalZoomSteps", Type = "number", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "MountJournal",
	Type = "System",
	Namespace = "C_MountJournal",

	Functions =
	{
		{
			Name = "ApplyMountEquipment",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemLocation", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "canContinue", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "AreMountEquipmentEffectsSuppressed",
			Type = "Function",

			Returns =
			{
				{ Name = "areEffectsSuppressed", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ClearFanfare",
			Type = "Function",

			Arguments =
			{
				{ Name = "mountID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ClearRecentFanfares",
			Type = "Function",
		},
		{
			Name = "Dismiss",
			Type = "Function",
		},
		{
			Name = "GetAppliedMountEquipmentID",
			Type = "Function",

			Returns =
			{
				{ Name = "itemID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetCollectedFilterSetting",
			Type = "Function",

			Arguments =
			{
				{ Name = "filterIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isChecked", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetDisplayedMountAllCreatureDisplayInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "mountIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "allDisplayInfo", Type = "table", InnerType = "MountCreatureDisplayInfo", Nilable = false },
			},
		},
		{
			Name = "GetDisplayedMountID",
			Type = "Function",

			Arguments =
			{
				{ Name = "displayIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "mountID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetDisplayedMountInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "displayIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "spellID", Type = "number", Nilable = false },
				{ Name = "icon", Type = "number", Nilable = false },
				{ Name = "isActive", Type = "bool", Nilable = false },
				{ Name = "isUsable", Type = "bool", Nilable = false },
				{ Name = "sourceType", Type = "number", Nilable = false },
				{ Name = "isFavorite", Type = "bool", Nilable = false },
				{ Name = "isFactionSpecific", Type = "bool", Nilable = false },
				{ Name = "faction", Type = "number", Nilable = true },
				{ Name = "shouldHideOnChar", Type = "bool", Nilable = false },
				{ Name = "isCollected", Type = "bool", Nilable = false },
				{ Name = "mountID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetDisplayedMountInfoExtra",
			Type = "Function",

			Arguments =
			{
				{ Name = "mountIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "creatureDisplayInfoID", Type = "number", Nilable = true },
				{ Name = "description", Type = "string", Nilable = false },
				{ Name = "source", Type = "string", Nilable = false },
				{ Name = "isSelfMount", Type = "bool", Nilable = false },
				{ Name = "mountTypeID", Type = "number", Nilable = false },
				{ Name = "uiModelSceneID", Type = "number", Nilable = false },
				{ Name = "animID", Type = "number", Nilable = false },
				{ Name = "spellVisualKitID", Type = "number", Nilable = false },
				{ Name = "disablePlayerMountPreview", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetIsFavorite",
			Type = "Function",

			Arguments =
			{
				{ Name = "mountIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isFavorite", Type = "bool", Nilable = false },
				{ Name = "canSetFavorite", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetMountAllCreatureDisplayInfoByID",
			Type = "Function",

			Arguments =
			{
				{ Name = "mountID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "allDisplayInfo", Type = "table", InnerType = "MountCreatureDisplayInfo", Nilable = false },
			},
		},
		{
			Name = "GetMountEquipmentUnlockLevel",
			Type = "Function",

			Returns =
			{
				{ Name = "level", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetMountFromItem",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "mountID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetMountFromSpell",
			Type = "Function",

			Arguments =
			{
				{ Name = "spellID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "mountID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetMountIDs",
			Type = "Function",

			Returns =
			{
				{ Name = "mountIDs", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "GetMountInfoByID",
			Type = "Function",

			Arguments =
			{
				{ Name = "mountID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "spellID", Type = "number", Nilable = false },
				{ Name = "icon", Type = "number", Nilable = false },
				{ Name = "isActive", Type = "bool", Nilable = false },
				{ Name = "isUsable", Type = "bool", Nilable = false },
				{ Name = "sourceType", Type = "number", Nilable = false },
				{ Name = "isFavorite", Type = "bool", Nilable = false },
				{ Name = "isFactionSpecific", Type = "bool", Nilable = false },
				{ Name = "faction", Type = "number", Nilable = true },
				{ Name = "shouldHideOnChar", Type = "bool", Nilable = false },
				{ Name = "isCollected", Type = "bool", Nilable = false },
				{ Name = "mountID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetMountInfoExtraByID",
			Type = "Function",

			Arguments =
			{
				{ Name = "mountID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "creatureDisplayInfoID", Type = "number", Nilable = true },
				{ Name = "description", Type = "string", Nilable = false },
				{ Name = "source", Type = "string", Nilable = false },
				{ Name = "isSelfMount", Type = "bool", Nilable = false },
				{ Name = "mountTypeID", Type = "number", Nilable = false },
				{ Name = "uiModelSceneID", Type = "number", Nilable = false },
				{ Name = "animID", Type = "number", Nilable = false },
				{ Name = "spellVisualKitID", Type = "number", Nilable = false },
				{ Name = "disablePlayerMountPreview", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetMountUsabilityByID",
			Type = "Function",

			Arguments =
			{
				{ Name = "mountID", Type = "number", Nilable = false },
				{ Name = "checkIndoors", Type = "bool", Nilable = false },
			},

			Returns =
			{
				{ Name = "isUsable", Type = "bool", Nilable = false },
				{ Name = "useError", Type = "string", Nilable = true },
			},
		},
		{
			Name = "GetNumDisplayedMounts",
			Type = "Function",

			Returns =
			{
				{ Name = "numMounts", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetNumMounts",
			Type = "Function",

			Returns =
			{
				{ Name = "numMounts", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetNumMountsNeedingFanfare",
			Type = "Function",

			Returns =
			{
				{ Name = "numMountsNeedingFanfare", Type = "number", Nilable = false },
			},
		},
		{
			Name = "IsItemMountEquipment",
			Type = "Function",
			Documentation = { "Determines if the item is mount equipment based on its class and subclass." },

			Arguments =
			{
				{ Name = "itemLocation", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "isMountEquipment", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsMountEquipmentApplied",
			Type = "Function",

			Returns =
			{
				{ Name = "isApplied", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsSourceChecked",
			Type = "Function",

			Arguments =
			{
				{ Name = "filterIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isChecked", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsTypeChecked",
			Type = "Function",

			Arguments =
			{
				{ Name = "filterIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isChecked", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsUsingDefaultFilters",
			Type = "Function",

			Returns =
			{
				{ Name = "isUsingDefaultFilters", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsValidSourceFilter",
			Type = "Function",

			Arguments =
			{
				{ Name = "filterIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isValid", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsValidTypeFilter",
			Type = "Function",

			Arguments =
			{
				{ Name = "filterIndex", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isValid", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "NeedsFanfare",
			Type = "Function",

			Arguments =
			{
				{ Name = "mountID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "needsFanfare", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "Pickup",
			Type = "Function",

			Arguments =
			{
				{ Name = "displayIndex", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetAllSourceFilters",
			Type = "Function",

			Arguments =
			{
				{ Name = "isChecked", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetAllTypeFilters",
			Type = "Function",

			Arguments =
			{
				{ Name = "isChecked", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetCollectedFilterSetting",
			Type = "Function",

			Arguments =
			{
				{ Name = "filterIndex", Type = "number", Nilable = false },
				{ Name = "isChecked", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetDefaultFilters",
			Type = "Function",
		},
		{
			Name = "SetIsFavorite",
			Type = "Function",

			Arguments =
			{
				{ Name = "mountIndex", Type = "number", Nilable = false },
				{ Name = "isFavorite", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetSearch",
			Type = "Function",

			Arguments =
			{
				{ Name = "searchValue", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SetSourceFilter",
			Type = "Function",

			Arguments =
			{
				{ Name = "filterIndex", Type = "number", Nilable = false },
				{ Name = "isChecked", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetTypeFilter",
			Type = "Function",

			Arguments =
			{
				{ Name = "filterIndex", Type = "number", Nilable = false },
				{ Name = "isChecked", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SummonByID",
			Type = "Function",

			Arguments =
			{
				{ Name = "mountID", Type = "number", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "MountEquipmentApplyResult",
			Type = "Event",
			LiteralName = "MOUNT_EQUIPMENT_APPLY_RESULT",
			Payload =
			{
				{ Name = "success", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "MountJournalSearchUpdated",
			Type = "Event",
			LiteralName = "MOUNT_JOURNAL_SEARCH_UPDATED",
		},
		{
			Name = "MountJournalUsabilityChanged",
			Type = "Event",
			LiteralName = "MOUNT_JOURNAL_USABILITY_CHANGED",
		},
		{
			Name = "NewMountAdded",
			Type = "Event",
			LiteralName = "NEW_MOUNT_ADDED",
			Payload =
			{
				{ Name = "mountID", Type = "number", Nilable = false },
			},
		},
	},

	Tables =
	{
		{
			Name = "MountType",
			Type = "Enumeration",
			NumValues = 4,
			MinValue = 0,
			MaxValue = 3,
			Fields =
			{
				{ Name = "Ground", Type = "MountType", EnumValue = 0 },
				{ Name = "Flying", Type = "MountType", EnumValue = 1 },
				{ Name = "Aquatic", Type = "MountType", EnumValue = 2 },
				{ Name = "Dragonriding", Type = "MountType", EnumValue = 3 },
			},
		},
		{
			Name = "MountTypeFlag",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 1,
			MaxValue = 4,
			Fields =
			{
				{ Name = "IsFlyingMount", Type = "MountTypeFlag", EnumValue = 1 },
				{ Name = "IsAquaticMount", Type = "MountTypeFlag", EnumValue = 2 },
				{ Name = "IsDragonRidingMount", Type = "MountTypeFlag", EnumValue = 4 },
			},
		},
		{
			Name = "MountCreatureDisplayInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "creatureDisplayID", Type = "number", Nilable = false },
				{ Name = "isVisible", Type = "bool", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "MythicPlusInfo",
	Type = "System",
	Namespace = "C_MythicPlus",

	Functions =
	{
		{
			Name = "GetCurrentAffixes",
			Type = "Function",

			Returns =
			{
				{ Name = "affixIDs", Type = "table", InnerType = "MythicPlusKeystoneAffix", Nilable = false },
			},
		},
		{
			Name = "GetCurrentSeason",
			Type = "Function",

			Returns =
			{
				{ Name = "seasonID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetCurrentSeasonValues",
			Type = "Function",

			Returns =
			{
				{ Name = "displaySeasonID", Type = "number", Nilable = false },
				{ Name = "milestoneSeasonID", Type = "number", Nilable = false },
				{ Name = "rewardSeasonID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetCurrentUIDisplaySeason",
			Type = "Function",

			Returns =
			{
				{ Name = "seasonID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetLastWeeklyBestInformation",
			Type = "Function",

			Returns =
			{
				{ Name = "challengeMapId", Type = "number", Nilable = false },
				{ Name = "level", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetOwnedKeystoneChallengeMapID",
			Type = "Function",

			Returns =
			{
				{ Name = "challengeMapID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetOwnedKeystoneLevel",
			Type = "Function",

			Returns =
			{
				{ Name = "keyStoneLevel", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetOwnedKeystoneMapID",
			Type = "Function",

			Returns =
			{
				{ Name = "mapID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetRewardLevelForDifficultyLevel",
			Type = "Function",

			Arguments =
			{
				{ Name = "difficultyLevel", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "weeklyRewardLevel", Type = "number", Nilable = false },
				{ Name = "endOfRunRewardLevel", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetRewardLevelFromKeystoneLevel",
			Type = "Function",

			Arguments =
			{
				{ Name = "keystoneLevel", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "rewardLevel", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetRunHistory",
			Type = "Function",

			Arguments =
			{
				{ Name = "includePreviousWeeks", Type = "bool", Nilable = false, Default = false },
				{ Name = "includeIncompleteRuns", Type = "bool", Nilable = false, Default = false },
			},

			Returns =
			{
				{ Name = "runs", Type = "table", InnerType = "MythicPlusRunInfo", Nilable = false },
			},
		},
		{
			Name = "GetSeasonBestAffixScoreInfoForMap",
			Type = "Function",
			Documentation = { "Gets the active players best runs by the seasonal tracked affixes as well as their overall score for the current season." },

			Arguments =
			{
				{ Name = "mapChallengeModeID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "affixScores", Type = "table", InnerType = "MythicPlusAffixScoreInfo", Nilable = false },
				{ Name = "bestOverAllScore", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetSeasonBestForMap",
			Type = "Function",

			Arguments =
			{
				{ Name = "mapChallengeModeID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "intimeInfo", Type = "MapSeasonBestInfo", Nilable = true },
				{ Name = "overtimeInfo", Type = "MapSeasonBestInfo", Nilable = true },
			},
		},
		{
			Name = "GetSeasonBestMythicRatingFromThisExpansion",
			Type = "Function",

			Returns =
			{
				{ Name = "bestSeasonScore", Type = "number", Nilable = false },
				{ Name = "bestSeason", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetWeeklyBestForMap",
			Type = "Function",

			Arguments =
			{
				{ Name = "mapChallengeModeID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "durationSec", Type = "number", Nilable = false },
				{ Name = "level", Type = "number", Nilable = false },
				{ Name = "completionDate", Type = "MythicPlusDate", Nilable = false },
				{ Name = "affixIDs", Type = "table", InnerType = "number", Nilable = false },
				{ Name = "members", Type = "table", InnerType = "MythicPlusMember", Nilable = false },
				{ Name = "dungeonScore", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetWeeklyChestRewardLevel",
			Type = "Function",

			Returns =
			{
				{ Name = "currentWeekBestLevel", Type = "number", Nilable = false },
				{ Name = "weeklyRewardLevel", Type = "number", Nilable = false },
				{ Name = "nextDifficultyWeeklyRewardLevel", Type = "number", Nilable = false },
				{ Name = "nextBestLevel", Type = "number", Nilable = false },
			},
		},
		{
			Name = "IsMythicPlusActive",
			Type = "Function",

			Returns =
			{
				{ Name = "isMythicPlusActive", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsWeeklyRewardAvailable",
			Type = "Function",

			Returns =
			{
				{ Name = "weeklyRewardAvailable", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "RequestCurrentAffixes",
			Type = "Function",
		},
		{
			Name = "RequestMapInfo",
			Type = "Function",
		},
		{
			Name = "RequestRewards",
			Type = "Function",
		},
	},

	Events =
	{
		{
			Name = "MythicPlusCurrentAffixUpdate",
			Type = "Event",
			LiteralName = "MYTHIC_PLUS_CURRENT_AFFIX_UPDATE",
		},
		{
			Name = "MythicPlusNewWeeklyRecord",
			Type = "Event",
			LiteralName = "MYTHIC_PLUS_NEW_WEEKLY_RECORD",
			Payload =
			{
				{ Name = "mapChallengeModeID", Type = "number", Nilable = false },
				{ Name = "completionMilliseconds", Type = "number", Nilable = false },
				{ Name = "level", Type = "number", Nilable = false },
			},
		},
	},

	Tables =
	{
		{
			Name = "MapSeasonBestInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "durationSec", Type = "number", Nilable = false },
				{ Name = "level", Type = "number", Nilable = false },
				{ Name = "completionDate", Type = "MythicPlusDate", Nilable = false },
				{ Name = "affixIDs", Type = "table", InnerType = "number", Nilable = false },
				{ Name = "members", Type = "table", InnerType = "MythicPlusMember", Nilable = false },
				{ Name = "dungeonScore", Type = "number", Nilable = false },
			},
		},
		{
			Name = "MythicPlusDate",
			Type = "Structure",
			Fields =
			{
				{ Name = "year", Type = "number", Nilable = false },
				{ Name = "month", Type = "number", Nilable = false },
				{ Name = "day", Type = "number", Nilable = false },
				{ Name = "hour", Type = "number", Nilable = false },
				{ Name = "minute", Type = "number", Nilable = false },
			},
		},
		{
			Name = "MythicPlusKeystoneAffix",
			Type = "Structure",
			Fields =
			{
				{ Name = "id", Type = "number", Nilable = false },
				{ Name = "seasonID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "MythicPlusMember",
			Type = "Structure",
			Fields =
			{
				{ Name = "name", Type = "string", Nilable = true },
				{ Name = "specID", Type = "number", Nilable = false },
				{ Name = "classID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "MythicPlusRunInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "mapChallengeModeID", Type = "number", Nilable = false },
				{ Name = "level", Type = "number", Nilable = false },
				{ Name = "thisWeek", Type = "bool", Nilable = false },
				{ Name = "completed", Type = "bool", Nilable = false },
				{ Name = "runScore", Type = "number", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "PetBattles",
	Type = "System",
	Namespace = "C_PetBattles",

	Functions =
	{
		{
			Name = "GetBreedQuality",
			Type = "Function",

			Arguments =
			{
				{ Name = "petOwner", Type = "number", Nilable = false },
				{ Name = "slot", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "quality", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetIcon",
			Type = "Function",

			Arguments =
			{
				{ Name = "petOwner", Type = "number", Nilable = false },
				{ Name = "slot", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "iconFileID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetName",
			Type = "Function",

			Arguments =
			{
				{ Name = "petOwner", Type = "number", Nilable = false },
				{ Name = "slot", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "customName", Type = "string", Nilable = false },
				{ Name = "speciesName", Type = "string", Nilable = false },
			},
		},
		{
			Name = "IsPlayerNPC",
			Type = "Function",

			Returns =
			{
				{ Name = "isPlayerNPC", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsWildBattle",
			Type = "Function",

			Returns =
			{
				{ Name = "isWildBattle", Type = "bool", Nilable = false },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "PlayerChoice",
	Type = "System",
	Namespace = "C_PlayerChoice",

	Functions =
	{
		{
			Name = "GetCurrentPlayerChoiceInfo",
			Type = "Function",

			Returns =
			{
				{ Name = "choiceInfo", Type = "PlayerChoiceInfo", Nilable = false },
			},
		},
		{
			Name = "GetNumRerolls",
			Type = "Function",

			Returns =
			{
				{ Name = "numRerolls", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetRemainingTime",
			Type = "Function",

			Returns =
			{
				{ Name = "remainingTime", Type = "number", Nilable = true },
			},
		},
		{
			Name = "IsWaitingForPlayerChoiceResponse",
			Type = "Function",

			Returns =
			{
				{ Name = "isWaitingForResponse", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "OnUIClosed",
			Type = "Function",
		},
		{
			Name = "RequestRerollPlayerChoice",
			Type = "Function",
		},
		{
			Name = "SendPlayerChoiceResponse",
			Type = "Function",

			Arguments =
			{
				{ Name = "responseID", Type = "number", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "PlayerChoiceClose",
			Type = "Event",
			LiteralName = "PLAYER_CHOICE_CLOSE",
		},
		{
			Name = "PlayerChoiceUpdate",
			Type = "Event",
			LiteralName = "PLAYER_CHOICE_UPDATE",
		},
	},

	Tables =
	{
		{
			Name = "PlayerChoiceRarity",
			Type = "Enumeration",
			NumValues = 4,
			MinValue = 0,
			MaxValue = 3,
			Fields =
			{
				{ Name = "Common", Type = "PlayerChoiceRarity", EnumValue = 0 },
				{ Name = "Uncommon", Type = "PlayerChoiceRarity", EnumValue = 1 },
				{ Name = "Rare", Type = "PlayerChoiceRarity", EnumValue = 2 },
				{ Name = "Epic", Type = "PlayerChoiceRarity", EnumValue = 3 },
			},
		},
		{
			Name = "PlayerChoiceInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "objectGUID", Type = "string", Nilable = false },
				{ Name = "choiceID", Type = "number", Nilable = false },
				{ Name = "questionText", Type = "string", Nilable = false },
				{ Name = "pendingChoiceText", Type = "string", Nilable = false },
				{ Name = "uiTextureKit", Type = "string", Nilable = false },
				{ Name = "hideWarboardHeader", Type = "bool", Nilable = false },
				{ Name = "keepOpenAfterChoice", Type = "bool", Nilable = false },
				{ Name = "options", Type = "table", InnerType = "PlayerChoiceOptionInfo", Nilable = false },
				{ Name = "soundKitID", Type = "number", Nilable = true },
				{ Name = "closeUISoundKitID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "PlayerChoiceOptionButtonInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "id", Type = "number", Nilable = false },
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "disabled", Type = "bool", Nilable = false },
				{ Name = "confirmation", Type = "string", Nilable = true },
				{ Name = "tooltip", Type = "string", Nilable = true },
				{ Name = "rewardQuestID", Type = "number", Nilable = true },
				{ Name = "soundKitID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "PlayerChoiceOptionInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "id", Type = "number", Nilable = false },
				{ Name = "description", Type = "string", Nilable = false },
				{ Name = "header", Type = "string", Nilable = false },
				{ Name = "choiceArtID", Type = "number", Nilable = false },
				{ Name = "desaturatedArt", Type = "bool", Nilable = false },
				{ Name = "disabledOption", Type = "bool", Nilable = false },
				{ Name = "hasRewards", Type = "bool", Nilable = false },
				{ Name = "rewardInfo", Type = "PlayerChoiceOptionRewardInfo", Nilable = false },
				{ Name = "uiTextureKit", Type = "string", Nilable = false },
				{ Name = "maxStacks", Type = "number", Nilable = false },
				{ Name = "buttons", Type = "table", InnerType = "PlayerChoiceOptionButtonInfo", Nilable = false },
				{ Name = "widgetSetID", Type = "number", Nilable = true },
				{ Name = "spellID", Type = "number", Nilable = true },
				{ Name = "rarity", Type = "PlayerChoiceRarity", Nilable = true },
				{ Name = "rarityColor", Type = "table", Mixin = "ColorMixin", Nilable = true },
				{ Name = "typeArtID", Type = "number", Nilable = true },
				{ Name = "headerIconAtlasElement", Type = "string", Nilable = true },
				{ Name = "subHeader", Type = "string", Nilable = true },
			},
		},
		{
			Name = "PlayerChoiceOptionRewardInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "currencyRewards", Type = "table", InnerType = "PlayerChoiceRewardCurrencyInfo", Nilable = false },
				{ Name = "itemRewards", Type = "table", InnerType = "PlayerChoiceRewardItemInfo", Nilable = false },
				{ Name = "repRewards", Type = "table", InnerType = "PlayerChoiceRewardReputationInfo", Nilable = false },
			},
		},
		{
			Name = "PlayerChoiceRewardCurrencyInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "currencyId", Type = "number", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "currencyTexture", Type = "number", Nilable = false },
				{ Name = "quantity", Type = "number", Nilable = false },
				{ Name = "isCurrencyContainer", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "PlayerChoiceRewardItemInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "itemId", Type = "number", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "quantity", Type = "number", Nilable = false },
			},
		},
		{
			Name = "PlayerChoiceRewardReputationInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "factionId", Type = "number", Nilable = false },
				{ Name = "quantity", Type = "number", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "PlayerMentorship",
	Type = "System",
	Namespace = "C_PlayerMentorship",

	Functions =
	{
		{
			Name = "GetMentorLevelRequirement",
			Type = "Function",

			Returns =
			{
				{ Name = "level", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetMentorRequirements",
			Type = "Function",

			Returns =
			{
				{ Name = "achievementIDs", Type = "table", InnerType = "number", Nilable = false },
				{ Name = "optionalAchievementIDs", Type = "table", InnerType = "number", Nilable = false },
				{ Name = "optionalCompleteAtLeastCount", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetMentorshipStatus",
			Type = "Function",

			Arguments =
			{
				{ Name = "playerLocation", Type = "table", Mixin = "PlayerLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "status", Type = "PlayerMentorshipStatus", Nilable = false },
			},
		},
		{
			Name = "IsActivePlayerConsideredNewcomer",
			Type = "Function",

			Returns =
			{
				{ Name = "isConsideredNewcomer", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsMentorRestricted",
			Type = "Function",

			Returns =
			{
				{ Name = "isRestricted", Type = "bool", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "MentorshipStatusChanged",
			Type = "Event",
			LiteralName = "MENTORSHIP_STATUS_CHANGED",
		},
		{
			Name = "NewcomerGraduation",
			Type = "Event",
			LiteralName = "NEWCOMER_GRADUATION",
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "ProfessionSpecUI",
	Type = "System",
	Namespace = "C_ProfSpecs",

	Functions =
	{
		{
			Name = "CanRefundPath",
			Type = "Function",

			Arguments =
			{
				{ Name = "pathID", Type = "number", Nilable = false },
				{ Name = "configID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "canRefund", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "CanUnlockTab",
			Type = "Function",

			Arguments =
			{
				{ Name = "tabTreeID", Type = "number", Nilable = false },
				{ Name = "configID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "canUnlock", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetChildrenForPath",
			Type = "Function",

			Arguments =
			{
				{ Name = "pathID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "childIDs", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "GetConfigIDForSkillLine",
			Type = "Function",

			Arguments =
			{
				{ Name = "skillLineID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "configID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetDefaultSpecSkillLine",
			Type = "Function",

			Returns =
			{
				{ Name = "defaultSpecSkillLine", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetDescriptionForPath",
			Type = "Function",

			Arguments =
			{
				{ Name = "pathID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "description", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetDescriptionForPerk",
			Type = "Function",

			Arguments =
			{
				{ Name = "perkID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "description", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetEntryIDForPerk",
			Type = "Function",

			Arguments =
			{
				{ Name = "perkID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "entryID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetPerksForPath",
			Type = "Function",

			Arguments =
			{
				{ Name = "pathID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "perkIDs", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "GetRootPathForTab",
			Type = "Function",

			Arguments =
			{
				{ Name = "tabTreeID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "rootPathID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetSourceTextForPath",
			Type = "Function",

			Arguments =
			{
				{ Name = "pathID", Type = "number", Nilable = false },
				{ Name = "configID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "sourceText", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetSpecTabIDsForSkillLine",
			Type = "Function",

			Arguments =
			{
				{ Name = "skillLineID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "specTabIDs", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "GetSpecTabInfo",
			Type = "Function",

			Returns =
			{
				{ Name = "specTabInfo", Type = "SpecializationTabInfo", Nilable = false },
			},
		},
		{
			Name = "GetSpendCurrencyForPath",
			Type = "Function",

			Arguments =
			{
				{ Name = "pathID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "currencyID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetSpendEntryForPath",
			Type = "Function",

			Arguments =
			{
				{ Name = "pathID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "entryID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetStateForPath",
			Type = "Function",

			Arguments =
			{
				{ Name = "pathID", Type = "number", Nilable = false },
				{ Name = "configID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "state", Type = "ProfessionsSpecPathState", Nilable = false },
			},
		},
		{
			Name = "GetStateForTab",
			Type = "Function",

			Arguments =
			{
				{ Name = "tabTreeID", Type = "number", Nilable = false },
				{ Name = "configID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "tabInfo", Type = "ProfessionsSpecTabState", Nilable = false },
			},
		},
		{
			Name = "GetTabInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "tabTreeID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "tabInfo", Type = "ProfTabInfo", Nilable = true },
			},
		},
		{
			Name = "GetUnlockEntryForPath",
			Type = "Function",

			Arguments =
			{
				{ Name = "pathID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "entryID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetUnlockRankForPerk",
			Type = "Function",

			Arguments =
			{
				{ Name = "perkID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "unlockRank", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetUnspentPointsForSkillLine",
			Type = "Function",

			Arguments =
			{
				{ Name = "skillLineID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "unspentPoints", Type = "number", Nilable = false },
			},
		},
		{
			Name = "PerkIsEarned",
			Type = "Function",

			Arguments =
			{
				{ Name = "perkID", Type = "number", Nilable = false },
				{ Name = "configID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isEarned", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ShouldShowSpecTab",
			Type = "Function",

			Returns =
			{
				{ Name = "showSpecTab", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SkillLineHasSpecialization",
			Type = "Function",

			Arguments =
			{
				{ Name = "skillLineID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "hasSpecialization", Type = "bool", Nilable = false },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "QuestItemUse",
	Type = "System",
	Namespace = "C_QuestItemUse",

	Functions =
	{
		{
			Name = "CanUseQuestItemOnObject",
			Type = "Function",

			Arguments =
			{
				{ Name = "item", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
				{ Name = "unit", Type = "string", Nilable = false },
				{ Name = "checkRange", Type = "bool", Nilable = true },
			},

			Returns =
			{
				{ Name = "canUse", Type = "bool", Nilable = false },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "RecruitAFriend",
	Type = "System",
	Namespace = "C_RecruitAFriend",

	Functions =
	{
		{
			Name = "ClaimActivityReward",
			Type = "Function",

			Arguments =
			{
				{ Name = "activityID", Type = "number", Nilable = false },
				{ Name = "acceptanceID", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "success", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ClaimNextReward",
			Type = "Function",

			Returns =
			{
				{ Name = "success", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GenerateRecruitmentLink",
			Type = "Function",

			Returns =
			{
				{ Name = "success", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetRAFInfo",
			Type = "Function",

			Returns =
			{
				{ Name = "info", Type = "RafInfo", Nilable = false },
			},
		},
		{
			Name = "GetRAFSystemInfo",
			Type = "Function",

			Returns =
			{
				{ Name = "systemInfo", Type = "RafSystemInfo", Nilable = false },
			},
		},
		{
			Name = "GetRecruitActivityRequirementsText",
			Type = "Function",

			Arguments =
			{
				{ Name = "activityID", Type = "number", Nilable = false },
				{ Name = "acceptanceID", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "requirementsText", Type = "table", InnerType = "string", Nilable = false },
			},
		},
		{
			Name = "GetRecruitInfo",
			Type = "Function",

			Returns =
			{
				{ Name = "active", Type = "bool", Nilable = false },
				{ Name = "faction", Type = "number", Nilable = false },
			},
		},
		{
			Name = "IsEnabled",
			Type = "Function",

			Returns =
			{
				{ Name = "enabled", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsRecruitingEnabled",
			Type = "Function",

			Returns =
			{
				{ Name = "enabled", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "RemoveRAFRecruit",
			Type = "Function",

			Arguments =
			{
				{ Name = "wowAccountGUID", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "success", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "RequestUpdatedRecruitmentInfo",
			Type = "Function",

			Returns =
			{
				{ Name = "success", Type = "bool", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "RafInfoUpdated",
			Type = "Event",
			LiteralName = "RAF_INFO_UPDATED",
			Payload =
			{
				{ Name = "info", Type = "RafInfo", Nilable = false },
			},
		},
		{
			Name = "RafRecruitingEnabledStatus",
			Type = "Event",
			LiteralName = "RAF_RECRUITING_ENABLED_STATUS",
			Payload =
			{
				{ Name = "enabled", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "RafSystemEnabledStatus",
			Type = "Event",
			LiteralName = "RAF_SYSTEM_ENABLED_STATUS",
			Payload =
			{
				{ Name = "enabled", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "RafSystemInfoUpdated",
			Type = "Event",
			LiteralName = "RAF_SYSTEM_INFO_UPDATED",
			Payload =
			{
				{ Name = "systemInfo", Type = "RafSystemInfo", Nilable = false },
			},
		},
	},

	Tables =
	{
		{
			Name = "RafRecruitActivityState",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 0,
			MaxValue = 2,
			Fields =
			{
				{ Name = "Incomplete", Type = "RafRecruitActivityState", EnumValue = 0 },
				{ Name = "Complete", Type = "RafRecruitActivityState", EnumValue = 1 },
				{ Name = "RewardClaimed", Type = "RafRecruitActivityState", EnumValue = 2 },
			},
		},
		{
			Name = "RafRecruitSubStatus",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 0,
			MaxValue = 2,
			Fields =
			{
				{ Name = "Trial", Type = "RafRecruitSubStatus", EnumValue = 0 },
				{ Name = "Active", Type = "RafRecruitSubStatus", EnumValue = 1 },
				{ Name = "Inactive", Type = "RafRecruitSubStatus", EnumValue = 2 },
			},
		},
		{
			Name = "RafRewardType",
			Type = "Enumeration",
			NumValues = 8,
			MinValue = 0,
			MaxValue = 7,
			Fields =
			{
				{ Name = "Pet", Type = "RafRewardType", EnumValue = 0 },
				{ Name = "Mount", Type = "RafRewardType", EnumValue = 1 },
				{ Name = "Appearance", Type = "RafRewardType", EnumValue = 2 },
				{ Name = "Title", Type = "RafRewardType", EnumValue = 3 },
				{ Name = "GameTime", Type = "RafRewardType", EnumValue = 4 },
				{ Name = "AppearanceSet", Type = "RafRewardType", EnumValue = 5 },
				{ Name = "Illusion", Type = "RafRewardType", EnumValue = 6 },
				{ Name = "Invalid", Type = "RafRewardType", EnumValue = 7 },
			},
		},
		{
			Name = "RafAppearanceInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "appearanceID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "RafAppearanceSetInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "setID", Type = "number", Nilable = false },
				{ Name = "setName", Type = "string", Nilable = false },
				{ Name = "appearanceIDs", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "RafIllusionInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "spellItemEnchantmentID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "RafInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "lifetimeMonths", Type = "number", Nilable = false },
				{ Name = "spentMonths", Type = "number", Nilable = false },
				{ Name = "availableMonths", Type = "number", Nilable = false },
				{ Name = "claimInProgress", Type = "bool", Nilable = false },
				{ Name = "rewards", Type = "table", InnerType = "RafReward", Nilable = false },
				{ Name = "nextReward", Type = "RafReward", Nilable = true },
				{ Name = "recruitmentInfo", Type = "RafRecruitmentinfo", Nilable = true },
				{ Name = "recruits", Type = "table", InnerType = "RafRecruit", Nilable = false },
			},
		},
		{
			Name = "RafMountInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "spellID", Type = "number", Nilable = false },
				{ Name = "mountID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "RafPetInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "creatureID", Type = "number", Nilable = false },
				{ Name = "speciesID", Type = "number", Nilable = false },
				{ Name = "displayID", Type = "number", Nilable = false },
				{ Name = "speciesName", Type = "string", Nilable = false },
				{ Name = "description", Type = "string", Nilable = false },
			},
		},
		{
			Name = "RafRecruit",
			Type = "Structure",
			Fields =
			{
				{ Name = "bnetAccountID", Type = "number", Nilable = false },
				{ Name = "wowAccountGUID", Type = "string", Nilable = false },
				{ Name = "battleTag", Type = "string", Nilable = false },
				{ Name = "monthsRemaining", Type = "number", Nilable = false },
				{ Name = "subStatus", Type = "RafRecruitSubStatus", Nilable = false },
				{ Name = "acceptanceID", Type = "string", Nilable = false },
				{ Name = "activities", Type = "table", InnerType = "RafRecruitActivity", Nilable = false },
			},
		},
		{
			Name = "RafRecruitActivity",
			Type = "Structure",
			Fields =
			{
				{ Name = "activityID", Type = "number", Nilable = false },
				{ Name = "rewardQuestID", Type = "number", Nilable = false },
				{ Name = "state", Type = "RafRecruitActivityState", Nilable = false },
			},
		},
		{
			Name = "RafRecruitmentinfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "recruitmentCode", Type = "string", Nilable = false },
				{ Name = "recruitmentURL", Type = "string", Nilable = false },
				{ Name = "expireTime", Type = "number", Nilable = false },
				{ Name = "remainingTimeSeconds", Type = "number", Nilable = false },
				{ Name = "totalUses", Type = "number", Nilable = false },
				{ Name = "remainingUses", Type = "number", Nilable = false },
				{ Name = "sourceRealm", Type = "string", Nilable = false },
				{ Name = "sourceFaction", Type = "string", Nilable = false },
			},
		},
		{
			Name = "RafReward",
			Type = "Structure",
			Fields =
			{
				{ Name = "rewardID", Type = "number", Nilable = false },
				{ Name = "itemID", Type = "number", Nilable = false },
				{ Name = "rewardType", Type = "RafRewardType", Nilable = false },
				{ Name = "petInfo", Type = "RafPetInfo", Nilable = true },
				{ Name = "mountInfo", Type = "RafMountInfo", Nilable = true },
				{ Name = "appearanceInfo", Type = "RafAppearanceInfo", Nilable = true },
				{ Name = "titleInfo", Type = "RafTitleInfo", Nilable = true },
				{ Name = "appearanceSetInfo", Type = "RafAppearanceSetInfo", Nilable = true },
				{ Name = "illusionInfo", Type = "RafIllusionInfo", Nilable = true },
				{ Name = "canClaim", Type = "bool", Nilable = false },
				{ Name = "claimed", Type = "bool", Nilable = false },
				{ Name = "repeatable", Type = "bool", Nilable = false },
				{ Name = "repeatableClaimCount", Type = "number", Nilable = false },
				{ Name = "monthsRequired", Type = "number", Nilable = false },
				{ Name = "monthCost", Type = "number", Nilable = false },
				{ Name = "availableInMonths", Type = "number", Nilable = false },
				{ Name = "iconID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "RafSystemInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "maxRecruits", Type = "number", Nilable = false },
				{ Name = "maxRecruitMonths", Type = "number", Nilable = false },
				{ Name = "maxRecruitmentUses", Type = "number", Nilable = false },
				{ Name = "daysInCycle", Type = "number", Nilable = false },
			},
		},
		{
			Name = "RafTitleInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "titleMaskID", Type = "number", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "ResearchInfo",
	Type = "System",
	Namespace = "C_ResearchInfo",

	Functions =
	{
		{
			Name = "GetDigSitesForMap",
			Type = "Function",

			Arguments =
			{
				{ Name = "uiMapID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "digSites", Type = "table", InnerType = "DigSiteMapInfo", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "ArchaeologyClosed",
			Type = "Event",
			LiteralName = "ARCHAEOLOGY_CLOSED",
		},
		{
			Name = "ArchaeologyFindComplete",
			Type = "Event",
			LiteralName = "ARCHAEOLOGY_FIND_COMPLETE",
			Payload =
			{
				{ Name = "numFindsCompleted", Type = "number", Nilable = false },
				{ Name = "totalFinds", Type = "number", Nilable = false },
				{ Name = "researchBranchID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ArchaeologySurveyCast",
			Type = "Event",
			LiteralName = "ARCHAEOLOGY_SURVEY_CAST",
			Payload =
			{
				{ Name = "numFindsCompleted", Type = "number", Nilable = false },
				{ Name = "totalFinds", Type = "number", Nilable = false },
				{ Name = "researchBranchID", Type = "number", Nilable = false },
				{ Name = "successfulFind", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ArchaeologyToggle",
			Type = "Event",
			LiteralName = "ARCHAEOLOGY_TOGGLE",
		},
		{
			Name = "ArtifactDigsiteComplete",
			Type = "Event",
			LiteralName = "ARTIFACT_DIGSITE_COMPLETE",
			Payload =
			{
				{ Name = "researchBranchID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ResearchArtifactComplete",
			Type = "Event",
			LiteralName = "RESEARCH_ARTIFACT_COMPLETE",
			Payload =
			{
				{ Name = "name", Type = "string", Nilable = false },
			},
		},
		{
			Name = "ResearchArtifactDigSiteUpdated",
			Type = "Event",
			LiteralName = "RESEARCH_ARTIFACT_DIG_SITE_UPDATED",
		},
		{
			Name = "ResearchArtifactHistoryReady",
			Type = "Event",
			LiteralName = "RESEARCH_ARTIFACT_HISTORY_READY",
		},
		{
			Name = "ResearchArtifactUpdate",
			Type = "Event",
			LiteralName = "RESEARCH_ARTIFACT_UPDATE",
		},
	},

	Tables =
	{
		{
			Name = "DigSiteMapInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "researchSiteID", Type = "number", Nilable = false },
				{ Name = "position", Type = "table", Mixin = "Vector2DMixin", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "textureIndex", Type = "number", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "ScenarioInfo",
	Type = "System",
	Namespace = "C_ScenarioInfo",

	Functions =
	{
		{
			Name = "GetJailersTowerTypeString",
			Type = "Function",

			Arguments =
			{
				{ Name = "runType", Type = "JailersTowerType", Nilable = false },
			},

			Returns =
			{
				{ Name = "typeString", Type = "string", Nilable = true },
			},
		},
		{
			Name = "GetScenarioInfo",
			Type = "Function",

			Returns =
			{
				{ Name = "scenarioInfo", Type = "ScenarioInformation", Nilable = false },
			},
		},
		{
			Name = "GetScenarioStepInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "scenarioStepID", Type = "number", Nilable = true },
			},

			Returns =
			{
				{ Name = "scenarioStepInfo", Type = "ScenarioStepInfo", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "JailersTowerLevelUpdate",
			Type = "Event",
			LiteralName = "JAILERS_TOWER_LEVEL_UPDATE",
			Payload =
			{
				{ Name = "level", Type = "number", Nilable = false },
				{ Name = "type", Type = "JailersTowerType", Nilable = false },
			},
		},
		{
			Name = "ScenarioBonusObjectiveComplete",
			Type = "Event",
			LiteralName = "SCENARIO_BONUS_OBJECTIVE_COMPLETE",
			Payload =
			{
				{ Name = "bonusObjectiveID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ScenarioBonusVisibilityUpdate",
			Type = "Event",
			LiteralName = "SCENARIO_BONUS_VISIBILITY_UPDATE",
		},
		{
			Name = "ScenarioCompleted",
			Type = "Event",
			LiteralName = "SCENARIO_COMPLETED",
			Payload =
			{
				{ Name = "questID", Type = "number", Nilable = true },
				{ Name = "xp", Type = "number", Nilable = true },
				{ Name = "money", Type = "number", Nilable = true },
			},
		},
		{
			Name = "ScenarioCriteriaShowStateUpdate",
			Type = "Event",
			LiteralName = "SCENARIO_CRITERIA_SHOW_STATE_UPDATE",
			Payload =
			{
				{ Name = "show", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ScenarioCriteriaUpdate",
			Type = "Event",
			LiteralName = "SCENARIO_CRITERIA_UPDATE",
			Payload =
			{
				{ Name = "criteriaID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ScenarioPoiUpdate",
			Type = "Event",
			LiteralName = "SCENARIO_POI_UPDATE",
		},
		{
			Name = "ScenarioSpellUpdate",
			Type = "Event",
			LiteralName = "SCENARIO_SPELL_UPDATE",
		},
		{
			Name = "ScenarioUpdate",
			Type = "Event",
			LiteralName = "SCENARIO_UPDATE",
			Payload =
			{
				{ Name = "newStep", Type = "bool", Nilable = true },
			},
		},
	},

	Tables =
	{
		{
			Name = "JailersTowerType",
			Type = "Enumeration",
			NumValues = 15,
			MinValue = 0,
			MaxValue = 14,
			Fields =
			{
				{ Name = "TwistingCorridors", Type = "JailersTowerType", EnumValue = 0 },
				{ Name = "SkoldusHalls", Type = "JailersTowerType", EnumValue = 1 },
				{ Name = "FractureChambers", Type = "JailersTowerType", EnumValue = 2 },
				{ Name = "Soulforges", Type = "JailersTowerType", EnumValue = 3 },
				{ Name = "Coldheart", Type = "JailersTowerType", EnumValue = 4 },
				{ Name = "Mortregar", Type = "JailersTowerType", EnumValue = 5 },
				{ Name = "UpperReaches", Type = "JailersTowerType", EnumValue = 6 },
				{ Name = "ArkobanHall", Type = "JailersTowerType", EnumValue = 7 },
				{ Name = "TormentChamberJaina", Type = "JailersTowerType", EnumValue = 8 },
				{ Name = "TormentChamberThrall", Type = "JailersTowerType", EnumValue = 9 },
				{ Name = "TormentChamberAnduin", Type = "JailersTowerType", EnumValue = 10 },
				{ Name = "AdamantVaults", Type = "JailersTowerType", EnumValue = 11 },
				{ Name = "ForgottenCatacombs", Type = "JailersTowerType", EnumValue = 12 },
				{ Name = "Ossuary", Type = "JailersTowerType", EnumValue = 13 },
				{ Name = "BossRush", Type = "JailersTowerType", EnumValue = 14 },
			},
		},
		{
			Name = "ScenarioInformation",
			Type = "Structure",
			Fields =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "currentStage", Type = "number", Nilable = false },
				{ Name = "numStages", Type = "number", Nilable = false },
				{ Name = "flags", Type = "number", Nilable = false },
				{ Name = "isComplete", Type = "bool", Nilable = false },
				{ Name = "xp", Type = "number", Nilable = false },
				{ Name = "money", Type = "number", Nilable = false },
				{ Name = "type", Type = "number", Nilable = false },
				{ Name = "area", Type = "string", Nilable = false },
				{ Name = "uiTextureKit", Type = "string", Nilable = false },
			},
		},
		{
			Name = "ScenarioStepInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "title", Type = "string", Nilable = false },
				{ Name = "description", Type = "string", Nilable = false },
				{ Name = "numCriteria", Type = "number", Nilable = false },
				{ Name = "stepFailed", Type = "bool", Nilable = false },
				{ Name = "isBonusStep", Type = "bool", Nilable = false },
				{ Name = "isForCurrentStepOnly", Type = "bool", Nilable = false },
				{ Name = "shouldShowBonusObjective", Type = "bool", Nilable = false },
				{ Name = "spells", Type = "table", InnerType = "ScenarioStepSpellInfo", Nilable = false },
				{ Name = "weightedProgress", Type = "number", Nilable = true },
				{ Name = "rewardQuestID", Type = "number", Nilable = false },
				{ Name = "widgetSetID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "ScenarioStepSpellInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "spellID", Type = "number", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "icon", Type = "number", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "ScrappingMachineUI",
	Type = "System",
	Namespace = "C_ScrappingMachineUI",

	Functions =
	{
		{
			Name = "CloseScrappingMachine",
			Type = "Function",
		},
		{
			Name = "DropPendingScrapItemFromCursor",
			Type = "Function",

			Arguments =
			{
				{ Name = "index", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetCurrentPendingScrapItemLocationByIndex",
			Type = "Function",

			Arguments =
			{
				{ Name = "index", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "itemLoc", Type = "table", Mixin = "ItemLocationMixin", Nilable = false },
			},
		},
		{
			Name = "GetScrapSpellID",
			Type = "Function",

			Returns =
			{
				{ Name = "spellID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetScrappingMachineName",
			Type = "Function",

			Returns =
			{
				{ Name = "name", Type = "string", Nilable = false },
			},
		},
		{
			Name = "HasScrappableItems",
			Type = "Function",

			Returns =
			{
				{ Name = "hasScrappableItems", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "RemoveAllScrapItems",
			Type = "Function",
		},
		{
			Name = "RemoveCurrentScrappingItem",
			Type = "Function",
		},
		{
			Name = "RemoveItemToScrap",
			Type = "Function",

			Arguments =
			{
				{ Name = "index", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ScrapItems",
			Type = "Function",
		},
		{
			Name = "SetScrappingMachine",
			Type = "Function",

			Arguments =
			{
				{ Name = "gameObject", Type = "string", Nilable = false },
			},
		},
		{
			Name = "ValidateScrappingList",
			Type = "Function",
		},
	},

	Events =
	{
		{
			Name = "ScrappingMachineClose",
			Type = "Event",
			LiteralName = "SCRAPPING_MACHINE_CLOSE",
		},
		{
			Name = "ScrappingMachineItemRemovedOrCancelled",
			Type = "Event",
			LiteralName = "SCRAPPING_MACHINE_ITEM_REMOVED_OR_CANCELLED",
			Payload =
			{
				{ Name = "index", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ScrappingMachinePendingItemChanged",
			Type = "Event",
			LiteralName = "SCRAPPING_MACHINE_PENDING_ITEM_CHANGED",
		},
		{
			Name = "ScrappingMachineScrappingFinished",
			Type = "Event",
			LiteralName = "SCRAPPING_MACHINE_SCRAPPING_FINISHED",
		},
		{
			Name = "ScrappingMachineShow",
			Type = "Event",
			LiteralName = "SCRAPPING_MACHINE_SHOW",
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "ScriptedAnimations",
	Type = "System",
	Namespace = "C_ScriptedAnimations",

	Functions =
	{
		{
			Name = "GetAllScriptedAnimationEffects",
			Type = "Function",

			Returns =
			{
				{ Name = "scriptedAnimationEffects", Type = "table", InnerType = "ScriptedAnimationEffect", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "ScriptedAnimationsUpdate",
			Type = "Event",
			LiteralName = "SCRIPTED_ANIMATIONS_UPDATE",
		},
	},

	Tables =
	{
		{
			Name = "ScriptedAnimationBehavior",
			Type = "Enumeration",
			NumValues = 6,
			MinValue = 0,
			MaxValue = 5,
			Fields =
			{
				{ Name = "None", Type = "ScriptedAnimationBehavior", EnumValue = 0 },
				{ Name = "TargetShake", Type = "ScriptedAnimationBehavior", EnumValue = 1 },
				{ Name = "TargetKnockBack", Type = "ScriptedAnimationBehavior", EnumValue = 2 },
				{ Name = "SourceRecoil", Type = "ScriptedAnimationBehavior", EnumValue = 3 },
				{ Name = "SourceCollideWithTarget", Type = "ScriptedAnimationBehavior", EnumValue = 4 },
				{ Name = "UIParentShake", Type = "ScriptedAnimationBehavior", EnumValue = 5 },
			},
		},
		{
			Name = "ScriptedAnimationFlags",
			Type = "Enumeration",
			NumValues = 1,
			MinValue = 1,
			MaxValue = 1,
			Fields =
			{
				{ Name = "UseTargetAsSource", Type = "ScriptedAnimationFlags", EnumValue = 1 },
			},
		},
		{
			Name = "ScriptedAnimationTrajectory",
			Type = "Enumeration",
			NumValues = 7,
			MinValue = 0,
			MaxValue = 6,
			Fields =
			{
				{ Name = "AtSource", Type = "ScriptedAnimationTrajectory", EnumValue = 0 },
				{ Name = "AtTarget", Type = "ScriptedAnimationTrajectory", EnumValue = 1 },
				{ Name = "Straight", Type = "ScriptedAnimationTrajectory", EnumValue = 2 },
				{ Name = "CurveLeft", Type = "ScriptedAnimationTrajectory", EnumValue = 3 },
				{ Name = "CurveRight", Type = "ScriptedAnimationTrajectory", EnumValue = 4 },
				{ Name = "CurveRandom", Type = "ScriptedAnimationTrajectory", EnumValue = 5 },
				{ Name = "HalfwayBetween", Type = "ScriptedAnimationTrajectory", EnumValue = 6 },
			},
		},
		{
			Name = "ScriptedAnimationEffect",
			Type = "Structure",
			Fields =
			{
				{ Name = "id", Type = "number", Nilable = false },
				{ Name = "visual", Type = "number", Nilable = false },
				{ Name = "visualScale", Type = "number", Nilable = false },
				{ Name = "duration", Type = "number", Nilable = false },
				{ Name = "trajectory", Type = "ScriptedAnimationTrajectory", Nilable = false },
				{ Name = "yawRadians", Type = "number", Nilable = false },
				{ Name = "pitchRadians", Type = "number", Nilable = false },
				{ Name = "rollRadians", Type = "number", Nilable = false },
				{ Name = "offsetX", Type = "number", Nilable = false },
				{ Name = "offsetY", Type = "number", Nilable = false },
				{ Name = "offsetZ", Type = "number", Nilable = false },
				{ Name = "animation", Type = "number", Nilable = false },
				{ Name = "animationSpeed", Type = "number", Nilable = false },
				{ Name = "alpha", Type = "number", Nilable = false },
				{ Name = "useTargetAsSource", Type = "bool", Nilable = false },
				{ Name = "startBehavior", Type = "ScriptedAnimationBehavior", Nilable = true },
				{ Name = "startSoundKitID", Type = "number", Nilable = true },
				{ Name = "finishEffectID", Type = "number", Nilable = true },
				{ Name = "finishBehavior", Type = "ScriptedAnimationBehavior", Nilable = true },
				{ Name = "finishSoundKitID", Type = "number", Nilable = true },
				{ Name = "startAlphaFade", Type = "number", Nilable = true },
				{ Name = "startAlphaFadeDuration", Type = "number", Nilable = true },
				{ Name = "endAlphaFade", Type = "number", Nilable = true },
				{ Name = "endAlphaFadeDuration", Type = "number", Nilable = true },
				{ Name = "animationStartOffset", Type = "number", Nilable = true },
				{ Name = "loopingSoundKitID", Type = "number", Nilable = true },
				{ Name = "particleOverrideScale", Type = "number", Nilable = true },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "SocialRestrictions",
	Type = "System",
	Namespace = "C_SocialRestrictions",

	Functions =
	{
		{
			Name = "AcknowledgeRegionalChatDisabled",
			Type = "Function",
		},
		{
			Name = "IsChatDisabled",
			Type = "Function",

			Returns =
			{
				{ Name = "disabled", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsMuted",
			Type = "Function",

			Returns =
			{
				{ Name = "isMuted", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsSilenced",
			Type = "Function",

			Returns =
			{
				{ Name = "isSilenced", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsSquelched",
			Type = "Function",

			Returns =
			{
				{ Name = "isSquelched", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetChatDisabled",
			Type = "Function",

			Arguments =
			{
				{ Name = "disabled", Type = "bool", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "AlertRegionalChatDisabled",
			Type = "Event",
			LiteralName = "ALERT_REGIONAL_CHAT_DISABLED",
		},
		{
			Name = "ChatDisabledChangeFailed",
			Type = "Event",
			LiteralName = "CHAT_DISABLED_CHANGE_FAILED",
			Payload =
			{
				{ Name = "disabled", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ChatDisabledChanged",
			Type = "Event",
			LiteralName = "CHAT_DISABLED_CHANGED",
			Payload =
			{
				{ Name = "disabled", Type = "bool", Nilable = false },
			},
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "Soulbinds",
	Type = "System",
	Namespace = "C_Soulbinds",

	Functions =
	{
		{
			Name = "ActivateSoulbind",
			Type = "Function",

			Arguments =
			{
				{ Name = "soulbindID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "CanActivateSoulbind",
			Type = "Function",

			Arguments =
			{
				{ Name = "soulbindID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "result", Type = "bool", Nilable = false },
				{ Name = "errorDescription", Type = "string", Nilable = true },
			},
		},
		{
			Name = "CanModifySoulbind",
			Type = "Function",

			Returns =
			{
				{ Name = "result", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "CanResetConduitsInSoulbind",
			Type = "Function",

			Arguments =
			{
				{ Name = "soulbindID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "result", Type = "bool", Nilable = false },
				{ Name = "errorDescription", Type = "string", Nilable = true },
			},
		},
		{
			Name = "CanSwitchActiveSoulbindTreeBranch",
			Type = "Function",

			Returns =
			{
				{ Name = "result", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "CloseUI",
			Type = "Function",
		},
		{
			Name = "CommitPendingConduitsInSoulbind",
			Type = "Function",

			Arguments =
			{
				{ Name = "soulbindID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "FindNodeIDActuallyInstalled",
			Type = "Function",

			Arguments =
			{
				{ Name = "soulbindID", Type = "number", Nilable = false },
				{ Name = "conduitID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "nodeID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "FindNodeIDAppearingInstalled",
			Type = "Function",

			Arguments =
			{
				{ Name = "soulbindID", Type = "number", Nilable = false },
				{ Name = "conduitID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "nodeID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "FindNodeIDPendingInstall",
			Type = "Function",

			Arguments =
			{
				{ Name = "soulbindID", Type = "number", Nilable = false },
				{ Name = "conduitID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "nodeID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "FindNodeIDPendingUninstall",
			Type = "Function",

			Arguments =
			{
				{ Name = "soulbindID", Type = "number", Nilable = false },
				{ Name = "conduitID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "nodeID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetActiveSoulbindID",
			Type = "Function",

			Returns =
			{
				{ Name = "soulbindID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetConduitCollection",
			Type = "Function",

			Arguments =
			{
				{ Name = "conduitType", Type = "SoulbindConduitType", Nilable = false },
			},

			Returns =
			{
				{ Name = "collectionData", Type = "table", InnerType = "ConduitCollectionData", Nilable = false },
			},
		},
		{
			Name = "GetConduitCollectionCount",
			Type = "Function",

			Returns =
			{
				{ Name = "count", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetConduitCollectionData",
			Type = "Function",

			Arguments =
			{
				{ Name = "conduitID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "collectionData", Type = "ConduitCollectionData", Nilable = true },
			},
		},
		{
			Name = "GetConduitCollectionDataAtCursor",
			Type = "Function",

			Returns =
			{
				{ Name = "collectionData", Type = "ConduitCollectionData", Nilable = true },
			},
		},
		{
			Name = "GetConduitCollectionDataByVirtualID",
			Type = "Function",

			Arguments =
			{
				{ Name = "virtualID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "collectionData", Type = "ConduitCollectionData", Nilable = true },
			},
		},
		{
			Name = "GetConduitDisplayed",
			Type = "Function",

			Arguments =
			{
				{ Name = "nodeID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "conduitID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetConduitHyperlink",
			Type = "Function",

			Arguments =
			{
				{ Name = "conduitID", Type = "number", Nilable = false },
				{ Name = "rank", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "link", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetConduitIDPendingInstall",
			Type = "Function",

			Arguments =
			{
				{ Name = "nodeID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "conduitID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetConduitQuality",
			Type = "Function",

			Arguments =
			{
				{ Name = "conduitID", Type = "number", Nilable = false },
				{ Name = "rank", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "quality", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetConduitRank",
			Type = "Function",

			Arguments =
			{
				{ Name = "conduitID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "conduitRank", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetConduitSpellID",
			Type = "Function",

			Arguments =
			{
				{ Name = "conduitID", Type = "number", Nilable = false },
				{ Name = "conduitRank", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "spellID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetInstalledConduitID",
			Type = "Function",

			Arguments =
			{
				{ Name = "nodeID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "conduitID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetNode",
			Type = "Function",

			Arguments =
			{
				{ Name = "nodeID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "node", Type = "SoulbindNode", Nilable = false },
			},
		},
		{
			Name = "GetSoulbindData",
			Type = "Function",

			Arguments =
			{
				{ Name = "soulbindID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "data", Type = "SoulbindData", Nilable = false },
			},
		},
		{
			Name = "GetSpecsAssignedToSoulbind",
			Type = "Function",

			Arguments =
			{
				{ Name = "soulbindID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "specIDs", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "GetTree",
			Type = "Function",

			Arguments =
			{
				{ Name = "treeID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "tree", Type = "SoulbindTree", Nilable = false },
			},
		},
		{
			Name = "HasAnyInstalledConduitInSoulbind",
			Type = "Function",

			Arguments =
			{
				{ Name = "soulbindID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "result", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "HasAnyPendingConduits",
			Type = "Function",

			Returns =
			{
				{ Name = "result", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "HasPendingConduitsInSoulbind",
			Type = "Function",

			Arguments =
			{
				{ Name = "soulbindID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "result", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsConduitInstalled",
			Type = "Function",

			Arguments =
			{
				{ Name = "nodeID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "result", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsConduitInstalledInSoulbind",
			Type = "Function",

			Arguments =
			{
				{ Name = "soulbindID", Type = "number", Nilable = false },
				{ Name = "conduitID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "result", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsItemConduitByItemInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemInfo", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "result", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsNodePendingModify",
			Type = "Function",

			Arguments =
			{
				{ Name = "nodeID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "result", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsUnselectedConduitPendingInSoulbind",
			Type = "Function",

			Arguments =
			{
				{ Name = "soulbindID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "result", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ModifyNode",
			Type = "Function",

			Arguments =
			{
				{ Name = "nodeID", Type = "number", Nilable = false },
				{ Name = "conduitID", Type = "number", Nilable = false },
				{ Name = "type", Type = "SoulbindConduitTransactionType", Nilable = false },
			},
		},
		{
			Name = "SelectNode",
			Type = "Function",

			Arguments =
			{
				{ Name = "nodeID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "UnmodifyNode",
			Type = "Function",

			Arguments =
			{
				{ Name = "nodeID", Type = "number", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "SoulbindActivated",
			Type = "Event",
			LiteralName = "SOULBIND_ACTIVATED",
			Payload =
			{
				{ Name = "soulbindID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SoulbindConduitCollectionCleared",
			Type = "Event",
			LiteralName = "SOULBIND_CONDUIT_COLLECTION_CLEARED",
		},
		{
			Name = "SoulbindConduitCollectionRemoved",
			Type = "Event",
			LiteralName = "SOULBIND_CONDUIT_COLLECTION_REMOVED",
			Payload =
			{
				{ Name = "conduitID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SoulbindConduitCollectionUpdated",
			Type = "Event",
			LiteralName = "SOULBIND_CONDUIT_COLLECTION_UPDATED",
			Payload =
			{
				{ Name = "collectionData", Type = "ConduitCollectionData", Nilable = false },
			},
		},
		{
			Name = "SoulbindConduitInstalled",
			Type = "Event",
			LiteralName = "SOULBIND_CONDUIT_INSTALLED",
			Payload =
			{
				{ Name = "nodeID", Type = "number", Nilable = false },
				{ Name = "data", Type = "SoulbindConduitData", Nilable = false },
			},
		},
		{
			Name = "SoulbindConduitUninstalled",
			Type = "Event",
			LiteralName = "SOULBIND_CONDUIT_UNINSTALLED",
			Payload =
			{
				{ Name = "nodeID", Type = "number", Nilable = false },
				{ Name = "data", Type = "SoulbindConduitData", Nilable = false },
			},
		},
		{
			Name = "SoulbindForgeInteractionEnded",
			Type = "Event",
			LiteralName = "SOULBIND_FORGE_INTERACTION_ENDED",
		},
		{
			Name = "SoulbindForgeInteractionStarted",
			Type = "Event",
			LiteralName = "SOULBIND_FORGE_INTERACTION_STARTED",
		},
		{
			Name = "SoulbindNodeLearned",
			Type = "Event",
			LiteralName = "SOULBIND_NODE_LEARNED",
			Payload =
			{
				{ Name = "nodeID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SoulbindNodeUnlearned",
			Type = "Event",
			LiteralName = "SOULBIND_NODE_UNLEARNED",
			Payload =
			{
				{ Name = "nodeID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SoulbindNodeUpdated",
			Type = "Event",
			LiteralName = "SOULBIND_NODE_UPDATED",
			Payload =
			{
				{ Name = "nodeID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SoulbindPathChanged",
			Type = "Event",
			LiteralName = "SOULBIND_PATH_CHANGED",
		},
		{
			Name = "SoulbindPendingConduitChanged",
			Type = "Event",
			LiteralName = "SOULBIND_PENDING_CONDUIT_CHANGED",
			Payload =
			{
				{ Name = "nodeID", Type = "number", Nilable = false },
				{ Name = "conduitID", Type = "number", Nilable = false },
			},
		},
	},

	Tables =
	{
		{
			Name = "ConduitCollectionData",
			Type = "Structure",
			Fields =
			{
				{ Name = "conduitID", Type = "number", Nilable = false },
				{ Name = "conduitRank", Type = "number", Nilable = false },
				{ Name = "conduitItemLevel", Type = "number", Nilable = false },
				{ Name = "conduitType", Type = "SoulbindConduitType", Nilable = false },
				{ Name = "conduitSpecSetID", Type = "number", Nilable = false },
				{ Name = "conduitSpecIDs", Type = "table", InnerType = "number", Nilable = false },
				{ Name = "conduitSpecName", Type = "string", Nilable = true },
				{ Name = "covenantID", Type = "number", Nilable = true },
				{ Name = "conduitItemID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SoulbindConduitData",
			Type = "Structure",
			Fields =
			{
				{ Name = "conduitID", Type = "number", Nilable = false },
				{ Name = "conduitRank", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SoulbindData",
			Type = "Structure",
			Fields =
			{
				{ Name = "ID", Type = "number", Nilable = false },
				{ Name = "covenantID", Type = "number", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "description", Type = "string", Nilable = false },
				{ Name = "textureKit", Type = "string", Nilable = false },
				{ Name = "unlocked", Type = "bool", Nilable = false },
				{ Name = "cvarIndex", Type = "number", Nilable = false },
				{ Name = "tree", Type = "SoulbindTree", Nilable = false },
				{ Name = "modelSceneData", Type = "SoulbindModelSceneData", Nilable = false },
				{ Name = "activationSoundKitID", Type = "number", Nilable = false },
				{ Name = "playerConditionReason", Type = "string", Nilable = true },
			},
		},
		{
			Name = "SoulbindModelSceneData",
			Type = "Structure",
			Fields =
			{
				{ Name = "creatureDisplayInfoID", Type = "number", Nilable = false },
				{ Name = "modelSceneActorID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SoulbindNode",
			Type = "Structure",
			Fields =
			{
				{ Name = "ID", Type = "number", Nilable = false },
				{ Name = "row", Type = "number", Nilable = false },
				{ Name = "column", Type = "number", Nilable = false },
				{ Name = "icon", Type = "number", Nilable = false },
				{ Name = "spellID", Type = "number", Nilable = false },
				{ Name = "playerConditionReason", Type = "string", Nilable = true },
				{ Name = "conduitID", Type = "number", Nilable = false },
				{ Name = "conduitRank", Type = "number", Nilable = false },
				{ Name = "state", Type = "SoulbindNodeState", Nilable = false },
				{ Name = "conduitType", Type = "SoulbindConduitType", Nilable = true },
				{ Name = "parentNodeIDs", Type = "table", InnerType = "number", Nilable = false },
				{ Name = "failureRenownRequirement", Type = "number", Nilable = true },
				{ Name = "socketEnhanced", Type = "bool", Nilable = true },
			},
		},
		{
			Name = "SoulbindTree",
			Type = "Structure",
			Fields =
			{
				{ Name = "editable", Type = "bool", Nilable = false },
				{ Name = "nodes", Type = "table", InnerType = "SoulbindNode", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "SplashScreen",
	Type = "System",
	Namespace = "C_SplashScreen",

	Functions =
	{
		{
			Name = "AcknowledgeSplash",
			Type = "Function",
		},
		{
			Name = "CanViewSplashScreen",
			Type = "Function",

			Returns =
			{
				{ Name = "canView", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "RequestLatestSplashScreen",
			Type = "Function",

			Arguments =
			{
				{ Name = "fromGameMenu", Type = "bool", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "OpenSplashScreen",
			Type = "Event",
			LiteralName = "OPEN_SPLASH_SCREEN",
			Payload =
			{
				{ Name = "info", Type = "SplashScreenInfo", Nilable = true },
			},
		},
	},

	Tables =
	{
		{
			Name = "SplashScreenType",
			Type = "Enumeration",
			NumValues = 2,
			MinValue = 0,
			MaxValue = 1,
			Fields =
			{
				{ Name = "WhatsNew", Type = "SplashScreenType", EnumValue = 0 },
				{ Name = "SeasonRollOver", Type = "SplashScreenType", EnumValue = 1 },
			},
		},
		{
			Name = "SplashScreenInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "textureKit", Type = "string", Nilable = false },
				{ Name = "minDisplayCharLevel", Type = "number", Nilable = false },
				{ Name = "minQuestDisplayLevel", Type = "number", Nilable = false },
				{ Name = "soundKitID", Type = "number", Nilable = false },
				{ Name = "allianceQuestID", Type = "number", Nilable = true },
				{ Name = "hordeQuestID", Type = "number", Nilable = true },
				{ Name = "header", Type = "string", Nilable = false },
				{ Name = "topLeftFeatureTitle", Type = "string", Nilable = false },
				{ Name = "topLeftFeatureDesc", Type = "string", Nilable = false },
				{ Name = "bottomLeftFeatureTitle", Type = "string", Nilable = false },
				{ Name = "bottomLeftFeatureDesc", Type = "string", Nilable = false },
				{ Name = "rightFeatureTitle", Type = "string", Nilable = false },
				{ Name = "rightFeatureDesc", Type = "string", Nilable = false },
				{ Name = "shouldShowQuest", Type = "bool", Nilable = false },
				{ Name = "screenType", Type = "SplashScreenType", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "SuperTrackManager",
	Type = "System",
	Namespace = "C_SuperTrack",

	Functions =
	{
		{
			Name = "GetHighestPrioritySuperTrackingType",
			Type = "Function",

			Returns =
			{
				{ Name = "type", Type = "SuperTrackingType", Nilable = true },
			},
		},
		{
			Name = "GetSuperTrackedQuestID",
			Type = "Function",

			Returns =
			{
				{ Name = "questID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "IsSuperTrackingAnything",
			Type = "Function",

			Returns =
			{
				{ Name = "isSuperTracking", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsSuperTrackingCorpse",
			Type = "Function",

			Returns =
			{
				{ Name = "isSuperTracking", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsSuperTrackingQuest",
			Type = "Function",

			Returns =
			{
				{ Name = "isSuperTracking", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsSuperTrackingUserWaypoint",
			Type = "Function",

			Returns =
			{
				{ Name = "isSuperTracking", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetSuperTrackedQuestID",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetSuperTrackedUserWaypoint",
			Type = "Function",

			Arguments =
			{
				{ Name = "superTracked", Type = "bool", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "SuperTrackingChanged",
			Type = "Event",
			LiteralName = "SUPER_TRACKING_CHANGED",
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "SystemInfo",
	Type = "System",
	Namespace = "C_System",

	Functions =
	{
		{
			Name = "GetFrameStack",
			Type = "Function",

			Returns =
			{
				{ Name = "objects", Type = "table", InnerType = "table", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "CaptureframesFailed",
			Type = "Event",
			LiteralName = "CAPTUREFRAMES_FAILED",
		},
		{
			Name = "CaptureframesSucceeded",
			Type = "Event",
			LiteralName = "CAPTUREFRAMES_SUCCEEDED",
		},
		{
			Name = "DisableTaxiBenchmark",
			Type = "Event",
			LiteralName = "DISABLE_TAXI_BENCHMARK",
		},
		{
			Name = "EnableTaxiBenchmark",
			Type = "Event",
			LiteralName = "ENABLE_TAXI_BENCHMARK",
		},
		{
			Name = "FirstFrameRendered",
			Type = "Event",
			LiteralName = "FIRST_FRAME_RENDERED",
		},
		{
			Name = "GenericError",
			Type = "Event",
			LiteralName = "GENERIC_ERROR",
			Payload =
			{
				{ Name = "errorMessage", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GlobalMouseDown",
			Type = "Event",
			LiteralName = "GLOBAL_MOUSE_DOWN",
			Payload =
			{
				{ Name = "button", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GlobalMouseUp",
			Type = "Event",
			LiteralName = "GLOBAL_MOUSE_UP",
			Payload =
			{
				{ Name = "button", Type = "string", Nilable = false },
			},
		},
		{
			Name = "InitialHotfixesApplied",
			Type = "Event",
			LiteralName = "INITIAL_HOTFIXES_APPLIED",
		},
		{
			Name = "LocResult",
			Type = "Event",
			LiteralName = "LOC_RESULT",
			Payload =
			{
				{ Name = "result", Type = "string", Nilable = false },
			},
		},
		{
			Name = "LogoutCancel",
			Type = "Event",
			LiteralName = "LOGOUT_CANCEL",
		},
		{
			Name = "PlayerCamping",
			Type = "Event",
			LiteralName = "PLAYER_CAMPING",
		},
		{
			Name = "PlayerEnteringWorld",
			Type = "Event",
			LiteralName = "PLAYER_ENTERING_WORLD",
			Payload =
			{
				{ Name = "isInitialLogin", Type = "bool", Nilable = false },
				{ Name = "isReloadingUi", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "PlayerLeavingWorld",
			Type = "Event",
			LiteralName = "PLAYER_LEAVING_WORLD",
		},
		{
			Name = "PlayerLogin",
			Type = "Event",
			LiteralName = "PLAYER_LOGIN",
		},
		{
			Name = "PlayerLogout",
			Type = "Event",
			LiteralName = "PLAYER_LOGOUT",
		},
		{
			Name = "PlayerQuiting",
			Type = "Event",
			LiteralName = "PLAYER_QUITING",
		},
		{
			Name = "SearchDbLoaded",
			Type = "Event",
			LiteralName = "SEARCH_DB_LOADED",
		},
		{
			Name = "StreamingIcon",
			Type = "Event",
			LiteralName = "STREAMING_ICON",
			Payload =
			{
				{ Name = "streamingStatus", Type = "number", Nilable = false },
			},
		},
		{
			Name = "Sysmsg",
			Type = "Event",
			LiteralName = "SYSMSG",
			Payload =
			{
				{ Name = "string", Type = "string", Nilable = false },
				{ Name = "r", Type = "number", Nilable = false },
				{ Name = "g", Type = "number", Nilable = false },
				{ Name = "b", Type = "number", Nilable = false },
			},
		},
		{
			Name = "TimePlayedMsg",
			Type = "Event",
			LiteralName = "TIME_PLAYED_MSG",
			Payload =
			{
				{ Name = "totalTimePlayed", Type = "number", Nilable = false },
				{ Name = "timePlayedThisLevel", Type = "number", Nilable = false },
			},
		},
		{
			Name = "UiErrorMessage",
			Type = "Event",
			LiteralName = "UI_ERROR_MESSAGE",
			Payload =
			{
				{ Name = "errorType", Type = "number", Nilable = false },
				{ Name = "message", Type = "string", Nilable = false },
			},
		},
		{
			Name = "UiErrorPopup",
			Type = "Event",
			LiteralName = "UI_ERROR_POPUP",
			Payload =
			{
				{ Name = "errorType", Type = "number", Nilable = false },
				{ Name = "message", Type = "string", Nilable = false },
			},
		},
		{
			Name = "UiInfoMessage",
			Type = "Event",
			LiteralName = "UI_INFO_MESSAGE",
			Payload =
			{
				{ Name = "errorType", Type = "number", Nilable = false },
				{ Name = "message", Type = "string", Nilable = false },
			},
		},
		{
			Name = "VariablesLoaded",
			Type = "Event",
			LiteralName = "VARIABLES_LOADED",
		},
		{
			Name = "WoWMouseNotFound",
			Type = "Event",
			LiteralName = "WOW_MOUSE_NOT_FOUND",
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "TalkingHead",
	Type = "System",
	Namespace = "C_TalkingHead",

	Functions =
	{
	},

	Events =
	{
		{
			Name = "TalkingheadClose",
			Type = "Event",
			LiteralName = "TALKINGHEAD_CLOSE",
		},
		{
			Name = "TalkingheadRequested",
			Type = "Event",
			LiteralName = "TALKINGHEAD_REQUESTED",
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "Transmogrify",
	Type = "System",
	Namespace = "C_Transmog",

	Functions =
	{
		{
			Name = "ApplyAllPending",
			Type = "Function",

			Arguments =
			{
				{ Name = "currentSpecOnly", Type = "bool", Nilable = false, Default = false },
			},

			Returns =
			{
				{ Name = "requestSent", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "CanHaveSecondaryAppearanceForSlotID",
			Type = "Function",

			Arguments =
			{
				{ Name = "slotID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "canHaveSecondaryAppearance", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "CanTransmogItem",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemInfo", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "canBeTransmogged", Type = "bool", Nilable = false },
				{ Name = "selfFailureReason", Type = "string", Nilable = true },
				{ Name = "canTransmogOthers", Type = "bool", Nilable = false },
				{ Name = "othersFailureReason", Type = "string", Nilable = true },
			},
		},
		{
			Name = "CanTransmogItemWithItem",
			Type = "Function",

			Arguments =
			{
				{ Name = "targetItemInfo", Type = "string", Nilable = false },
				{ Name = "sourceItemInfo", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "canTransmog", Type = "bool", Nilable = false },
				{ Name = "failureReason", Type = "string", Nilable = true },
			},
		},
		{
			Name = "ClearAllPending",
			Type = "Function",
		},
		{
			Name = "ClearPending",
			Type = "Function",

			Arguments =
			{
				{ Name = "transmogLocation", Type = "table", Mixin = "TransmogLocationMixin", Nilable = false },
			},
		},
		{
			Name = "Close",
			Type = "Function",
		},
		{
			Name = "ExtractTransmogIDList",
			Type = "Function",

			Arguments =
			{
				{ Name = "input", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "transmogIDList", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "GetApplyCost",
			Type = "Function",

			Returns =
			{
				{ Name = "cost", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetApplyWarnings",
			Type = "Function",

			Returns =
			{
				{ Name = "warnings", Type = "table", InnerType = "TransmogApplyWarningInfo", Nilable = false },
			},
		},
		{
			Name = "GetBaseCategory",
			Type = "Function",

			Arguments =
			{
				{ Name = "transmogID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "categoryID", Type = "TransmogCollectionType", Nilable = false },
			},
		},
		{
			Name = "GetCreatureDisplayIDForSource",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemModifiedAppearanceID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "creatureDisplayID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetItemIDForSource",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemModifiedAppearanceID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "itemID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetPending",
			Type = "Function",

			Arguments =
			{
				{ Name = "transmogLocation", Type = "table", Mixin = "TransmogLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "pendingInfo", Type = "table", Mixin = "TransmogPendingInfoMixin", Nilable = false },
			},
		},
		{
			Name = "GetSlotEffectiveCategory",
			Type = "Function",

			Arguments =
			{
				{ Name = "transmogLocation", Type = "table", Mixin = "TransmogLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "categoryID", Type = "TransmogCollectionType", Nilable = false },
			},
		},
		{
			Name = "GetSlotForInventoryType",
			Type = "Function",

			Arguments =
			{
				{ Name = "inventoryType", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "slot", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetSlotInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "transmogLocation", Type = "table", Mixin = "TransmogLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "isTransmogrified", Type = "bool", Nilable = false },
				{ Name = "hasPending", Type = "bool", Nilable = false },
				{ Name = "isPendingCollected", Type = "bool", Nilable = false },
				{ Name = "canTransmogrify", Type = "bool", Nilable = false },
				{ Name = "cannotTransmogrifyReason", Type = "number", Nilable = false },
				{ Name = "hasUndo", Type = "bool", Nilable = false },
				{ Name = "isHideVisual", Type = "bool", Nilable = false },
				{ Name = "texture", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetSlotUseError",
			Type = "Function",

			Arguments =
			{
				{ Name = "transmogLocation", Type = "table", Mixin = "TransmogLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "errorCode", Type = "number", Nilable = false },
				{ Name = "errorString", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetSlotVisualInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "transmogLocation", Type = "table", Mixin = "TransmogLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "baseSourceID", Type = "number", Nilable = false },
				{ Name = "baseVisualID", Type = "number", Nilable = false },
				{ Name = "appliedSourceID", Type = "number", Nilable = false },
				{ Name = "appliedVisualID", Type = "number", Nilable = false },
				{ Name = "pendingSourceID", Type = "number", Nilable = false },
				{ Name = "pendingVisualID", Type = "number", Nilable = false },
				{ Name = "hasUndo", Type = "bool", Nilable = false },
				{ Name = "isHideVisual", Type = "bool", Nilable = false },
				{ Name = "itemSubclass", Type = "number", Nilable = false },
			},
		},
		{
			Name = "IsAtTransmogNPC",
			Type = "Function",

			Returns =
			{
				{ Name = "isAtNPC", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsSlotBeingCollapsed",
			Type = "Function",
			Documentation = { "Returns true if the only pending for the location's slot is a ToggleOff for the secondary appearance." },

			Arguments =
			{
				{ Name = "transmogLocation", Type = "table", Mixin = "TransmogLocationMixin", Nilable = false },
			},

			Returns =
			{
				{ Name = "isBeingCollapsed", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "LoadOutfit",
			Type = "Function",

			Arguments =
			{
				{ Name = "outfitID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetPending",
			Type = "Function",

			Arguments =
			{
				{ Name = "transmogLocation", Type = "table", Mixin = "TransmogLocationMixin", Nilable = false },
				{ Name = "pendingInfo", Type = "table", Mixin = "TransmogPendingInfoMixin", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "TransmogCollectionCameraUpdate",
			Type = "Event",
			LiteralName = "TRANSMOG_COLLECTION_CAMERA_UPDATE",
		},
		{
			Name = "TransmogCollectionItemUpdate",
			Type = "Event",
			LiteralName = "TRANSMOG_COLLECTION_ITEM_UPDATE",
		},
		{
			Name = "TransmogCollectionSourceAdded",
			Type = "Event",
			LiteralName = "TRANSMOG_COLLECTION_SOURCE_ADDED",
			Payload =
			{
				{ Name = "itemModifiedAppearanceID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "TransmogCollectionSourceRemoved",
			Type = "Event",
			LiteralName = "TRANSMOG_COLLECTION_SOURCE_REMOVED",
			Payload =
			{
				{ Name = "itemModifiedAppearanceID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "TransmogCollectionUpdated",
			Type = "Event",
			LiteralName = "TRANSMOG_COLLECTION_UPDATED",
			Payload =
			{
				{ Name = "collectionIndex", Type = "number", Nilable = true },
				{ Name = "modID", Type = "number", Nilable = true },
				{ Name = "itemAppearanceID", Type = "number", Nilable = true },
				{ Name = "reason", Type = "string", Nilable = true },
			},
		},
		{
			Name = "TransmogCosmeticCollectionSourceAdded",
			Type = "Event",
			LiteralName = "TRANSMOG_COSMETIC_COLLECTION_SOURCE_ADDED",
			Payload =
			{
				{ Name = "itemModifiedAppearanceID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "TransmogSearchUpdated",
			Type = "Event",
			LiteralName = "TRANSMOG_SEARCH_UPDATED",
			Payload =
			{
				{ Name = "searchType", Type = "TransmogSearchType", Nilable = false },
				{ Name = "collectionType", Type = "TransmogCollectionType", Nilable = true },
			},
		},
		{
			Name = "TransmogSetsUpdateFavorite",
			Type = "Event",
			LiteralName = "TRANSMOG_SETS_UPDATE_FAVORITE",
		},
		{
			Name = "TransmogSourceCollectabilityUpdate",
			Type = "Event",
			LiteralName = "TRANSMOG_SOURCE_COLLECTABILITY_UPDATE",
			Payload =
			{
				{ Name = "itemModifiedAppearanceID", Type = "number", Nilable = false },
				{ Name = "collectable", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "TransmogrifyClose",
			Type = "Event",
			LiteralName = "TRANSMOGRIFY_CLOSE",
		},
		{
			Name = "TransmogrifyItemUpdate",
			Type = "Event",
			LiteralName = "TRANSMOGRIFY_ITEM_UPDATE",
		},
		{
			Name = "TransmogrifyOpen",
			Type = "Event",
			LiteralName = "TRANSMOGRIFY_OPEN",
		},
		{
			Name = "TransmogrifySuccess",
			Type = "Event",
			LiteralName = "TRANSMOGRIFY_SUCCESS",
			Payload =
			{
				{ Name = "transmogLocation", Type = "table", Mixin = "TransmogLocationMixin", Nilable = false },
			},
		},
		{
			Name = "TransmogrifyUpdate",
			Type = "Event",
			LiteralName = "TRANSMOGRIFY_UPDATE",
			Payload =
			{
				{ Name = "transmogLocation", Type = "table", Mixin = "TransmogLocationMixin", Nilable = true },
				{ Name = "action", Type = "string", Nilable = true },
			},
		},
	},

	Tables =
	{
		{
			Name = "TransmogPendingType",
			Type = "Enumeration",
			NumValues = 4,
			MinValue = 0,
			MaxValue = 3,
			Fields =
			{
				{ Name = "Apply", Type = "TransmogPendingType", EnumValue = 0 },
				{ Name = "Revert", Type = "TransmogPendingType", EnumValue = 1 },
				{ Name = "ToggleOn", Type = "TransmogPendingType", EnumValue = 2 },
				{ Name = "ToggleOff", Type = "TransmogPendingType", EnumValue = 3 },
			},
		},
		{
			Name = "TransmogApplyWarningInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "itemLink", Type = "string", Nilable = false },
				{ Name = "text", Type = "string", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "TransmogrifyCollection",
	Type = "System",
	Namespace = "C_TransmogCollection",

	Functions =
	{
		{
			Name = "AccountCanCollectSource",
			Type = "Function",

			Arguments =
			{
				{ Name = "sourceID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "hasItemData", Type = "bool", Nilable = false },
				{ Name = "canCollect", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "AreAllCollectionTypeFiltersChecked",
			Type = "Function",

			Returns =
			{
				{ Name = "areAllCollectionTypeFiltersChecked", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "AreAllSourceTypeFiltersChecked",
			Type = "Function",

			Returns =
			{
				{ Name = "areAllSourceTypeFiltersChecked", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "CanAppearanceHaveIllusion",
			Type = "Function",

			Arguments =
			{
				{ Name = "appearanceID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "canHaveIllusion", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ClearNewAppearance",
			Type = "Function",

			Arguments =
			{
				{ Name = "visualID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ClearSearch",
			Type = "Function",

			Arguments =
			{
				{ Name = "searchType", Type = "TransmogSearchType", Nilable = false },
			},

			Returns =
			{
				{ Name = "completed", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "DeleteOutfit",
			Type = "Function",

			Arguments =
			{
				{ Name = "outfitID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "EndSearch",
			Type = "Function",
		},
		{
			Name = "GetAllAppearanceSources",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemAppearanceID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "itemModifiedAppearanceIDs", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "GetAppearanceCameraID",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemAppearanceID", Type = "number", Nilable = false },
				{ Name = "variation", Type = "TransmogCameraVariation", Nilable = true },
			},

			Returns =
			{
				{ Name = "cameraID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetAppearanceCameraIDBySource",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemModifiedAppearanceID", Type = "number", Nilable = false },
				{ Name = "variation", Type = "TransmogCameraVariation", Nilable = true },
			},

			Returns =
			{
				{ Name = "cameraID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetAppearanceInfoBySource",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemModifiedAppearanceID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "info", Type = "TransmogAppearanceInfoBySourceData", Nilable = false },
			},
		},
		{
			Name = "GetAppearanceSourceDrops",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemModifiedAppearanceID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "encounterInfo", Type = "table", InnerType = "TransmogAppearanceJournalEncounterInfo", Nilable = false },
			},
		},
		{
			Name = "GetAppearanceSourceInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemModifiedAppearanceID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "category", Type = "TransmogCollectionType", Nilable = false },
				{ Name = "itemAppearanceID", Type = "number", Nilable = false },
				{ Name = "canHaveIllusion", Type = "bool", Nilable = false },
				{ Name = "icon", Type = "number", Nilable = false },
				{ Name = "isCollected", Type = "bool", Nilable = false },
				{ Name = "itemLink", Type = "string", Nilable = false },
				{ Name = "transmoglink", Type = "string", Nilable = false },
				{ Name = "sourceType", Type = "number", Nilable = true },
				{ Name = "itemSubClass", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetAppearanceSources",
			Type = "Function",

			Arguments =
			{
				{ Name = "appearanceID", Type = "number", Nilable = false },
				{ Name = "categoryType", Type = "TransmogCollectionType", Nilable = true },
				{ Name = "transmogLocation", Type = "table", Mixin = "TransmogLocationMixin", Nilable = true },
			},

			Returns =
			{
				{ Name = "sources", Type = "table", InnerType = "AppearanceSourceInfo", Nilable = false },
			},
		},
		{
			Name = "GetArtifactAppearanceStrings",
			Type = "Function",

			Arguments =
			{
				{ Name = "appearanceID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "hyperlink", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetCategoryAppearances",
			Type = "Function",

			Arguments =
			{
				{ Name = "category", Type = "TransmogCollectionType", Nilable = false },
				{ Name = "transmogLocation", Type = "table", Mixin = "TransmogLocationMixin", Nilable = true },
			},

			Returns =
			{
				{ Name = "appearances", Type = "table", InnerType = "TransmogCategoryAppearanceInfo", Nilable = false },
			},
		},
		{
			Name = "GetCategoryCollectedCount",
			Type = "Function",

			Arguments =
			{
				{ Name = "category", Type = "TransmogCollectionType", Nilable = false },
			},

			Returns =
			{
				{ Name = "count", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetCategoryForItem",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemModifiedAppearanceID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "collectionCategory", Type = "TransmogCollectionType", Nilable = false },
			},
		},
		{
			Name = "GetCategoryInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "category", Type = "TransmogCollectionType", Nilable = false },
			},

			Returns =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "isWeapon", Type = "bool", Nilable = false, Default = false },
				{ Name = "canHaveIllusions", Type = "bool", Nilable = false, Default = false },
				{ Name = "canMainHand", Type = "bool", Nilable = false, Default = false },
				{ Name = "canOffHand", Type = "bool", Nilable = false, Default = false },
			},
		},
		{
			Name = "GetCategoryTotal",
			Type = "Function",

			Arguments =
			{
				{ Name = "category", Type = "TransmogCollectionType", Nilable = false },
			},

			Returns =
			{
				{ Name = "total", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetCollectedShown",
			Type = "Function",

			Returns =
			{
				{ Name = "shown", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetFallbackWeaponAppearance",
			Type = "Function",

			Returns =
			{
				{ Name = "appearanceID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetIllusionInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "illusionID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "info", Type = "TransmogIllusionInfo", Nilable = false },
			},
		},
		{
			Name = "GetIllusionStrings",
			Type = "Function",

			Arguments =
			{
				{ Name = "illusionID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "hyperlink", Type = "string", Nilable = false },
				{ Name = "sourceText", Type = "string", Nilable = true },
			},
		},
		{
			Name = "GetIllusions",
			Type = "Function",

			Returns =
			{
				{ Name = "illusions", Type = "table", InnerType = "TransmogIllusionInfo", Nilable = false },
			},
		},
		{
			Name = "GetInspectItemTransmogInfoList",
			Type = "Function",

			Returns =
			{
				{ Name = "list", Type = "table", InnerType = "table", Nilable = false },
			},
		},
		{
			Name = "GetIsAppearanceFavorite",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemAppearanceID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isFavorite", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetItemInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemInfo", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "itemAppearanceID", Type = "number", Nilable = false },
				{ Name = "itemModifiedAppearanceID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetItemTransmogInfoListFromOutfitHyperlink",
			Type = "Function",

			Arguments =
			{
				{ Name = "hyperlink", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "list", Type = "table", InnerType = "table", Nilable = false },
			},
		},
		{
			Name = "GetLatestAppearance",
			Type = "Function",

			Returns =
			{
				{ Name = "visualID", Type = "number", Nilable = false },
				{ Name = "category", Type = "TransmogCollectionType", Nilable = false },
			},
		},
		{
			Name = "GetNumMaxOutfits",
			Type = "Function",

			Returns =
			{
				{ Name = "maxOutfits", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetNumTransmogSources",
			Type = "Function",

			Returns =
			{
				{ Name = "count", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetOutfitHyperlinkFromItemTransmogInfoList",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemTransmogInfoList", Type = "table", InnerType = "table", Nilable = false },
			},

			Returns =
			{
				{ Name = "hyperlink", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetOutfitInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "outfitID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "icon", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetOutfitItemTransmogInfoList",
			Type = "Function",

			Arguments =
			{
				{ Name = "outfitID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "list", Type = "table", InnerType = "table", Nilable = false },
			},
		},
		{
			Name = "GetOutfits",
			Type = "Function",

			Returns =
			{
				{ Name = "outfitID", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "GetPairedArtifactAppearance",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemModifiedAppearanceID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "pairedItemModifiedAppearanceID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetSourceIcon",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemModifiedAppearanceID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "icon", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetSourceInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "sourceID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "sourceInfo", Type = "AppearanceSourceInfo", Nilable = false },
			},
		},
		{
			Name = "GetSourceItemID",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemModifiedAppearanceID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "itemID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetSourceRequiredHoliday",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemModifiedAppearanceID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "holidayName", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetUncollectedShown",
			Type = "Function",

			Returns =
			{
				{ Name = "shown", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "HasFavorites",
			Type = "Function",

			Returns =
			{
				{ Name = "hasFavorites", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsAppearanceHiddenVisual",
			Type = "Function",

			Arguments =
			{
				{ Name = "appearanceID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isHiddenVisual", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsCategoryValidForItem",
			Type = "Function",

			Arguments =
			{
				{ Name = "category", Type = "TransmogCollectionType", Nilable = false },
				{ Name = "itemInfo", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "isValid", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsNewAppearance",
			Type = "Function",

			Arguments =
			{
				{ Name = "visualID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isNew", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsSearchDBLoading",
			Type = "Function",

			Returns =
			{
				{ Name = "isLoading", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsSearchInProgress",
			Type = "Function",

			Arguments =
			{
				{ Name = "searchType", Type = "TransmogSearchType", Nilable = false },
			},

			Returns =
			{
				{ Name = "inProgress", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsSourceTypeFilterChecked",
			Type = "Function",

			Arguments =
			{
				{ Name = "index", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "checked", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsUsingDefaultFilters",
			Type = "Function",

			Returns =
			{
				{ Name = "isUsingDefaultFilters", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ModifyOutfit",
			Type = "Function",

			Arguments =
			{
				{ Name = "outfitID", Type = "number", Nilable = false },
				{ Name = "itemTransmogInfoList", Type = "table", InnerType = "table", Nilable = false },
			},
		},
		{
			Name = "NewOutfit",
			Type = "Function",

			Arguments =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "icon", Type = "number", Nilable = false },
				{ Name = "itemTransmogInfoList", Type = "table", InnerType = "table", Nilable = false },
			},

			Returns =
			{
				{ Name = "outfitID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "PlayerCanCollectSource",
			Type = "Function",

			Arguments =
			{
				{ Name = "sourceID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "hasItemData", Type = "bool", Nilable = false },
				{ Name = "canCollect", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "PlayerHasTransmog",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemID", Type = "number", Nilable = false },
				{ Name = "itemAppearanceModID", Type = "number", Nilable = false, Default = 0 },
			},

			Returns =
			{
				{ Name = "hasTransmog", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "PlayerHasTransmogByItemInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemInfo", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "hasTransmog", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "PlayerHasTransmogItemModifiedAppearance",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemModifiedAppearanceID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "hasTransmog", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "PlayerKnowsSource",
			Type = "Function",

			Arguments =
			{
				{ Name = "sourceID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isKnown", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "RenameOutfit",
			Type = "Function",

			Arguments =
			{
				{ Name = "outfitID", Type = "number", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
			},
		},
		{
			Name = "SearchProgress",
			Type = "Function",

			Arguments =
			{
				{ Name = "searchType", Type = "TransmogSearchType", Nilable = false },
			},

			Returns =
			{
				{ Name = "progress", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SearchSize",
			Type = "Function",

			Arguments =
			{
				{ Name = "searchType", Type = "TransmogSearchType", Nilable = false },
			},

			Returns =
			{
				{ Name = "size", Type = "number", Nilable = false },
			},
		},
		{
			Name = "SetAllCollectionTypeFilters",
			Type = "Function",

			Arguments =
			{
				{ Name = "checked", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetAllSourceTypeFilters",
			Type = "Function",

			Arguments =
			{
				{ Name = "checked", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetCollectedShown",
			Type = "Function",

			Arguments =
			{
				{ Name = "shown", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetDefaultFilters",
			Type = "Function",
		},
		{
			Name = "SetIsAppearanceFavorite",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemAppearanceID", Type = "number", Nilable = false },
				{ Name = "isFavorite", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetSearch",
			Type = "Function",

			Arguments =
			{
				{ Name = "searchType", Type = "TransmogSearchType", Nilable = false },
				{ Name = "searchText", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "completed", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetSearchAndFilterCategory",
			Type = "Function",

			Arguments =
			{
				{ Name = "category", Type = "TransmogCollectionType", Nilable = false },
			},
		},
		{
			Name = "SetSourceTypeFilter",
			Type = "Function",

			Arguments =
			{
				{ Name = "index", Type = "number", Nilable = false },
				{ Name = "checked", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetUncollectedShown",
			Type = "Function",

			Arguments =
			{
				{ Name = "shown", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "UpdateUsableAppearances",
			Type = "Function",
		},
	},

	Events =
	{
	},

	Tables =
	{
		{
			Name = "TransmogCameraVariation",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 0,
			MaxValue = 1,
			Fields =
			{
				{ Name = "None", Type = "TransmogCameraVariation", EnumValue = 0 },
				{ Name = "RightShoulder", Type = "TransmogCameraVariation", EnumValue = 1 },
				{ Name = "CloakBackpack", Type = "TransmogCameraVariation", EnumValue = 1 },
			},
		},
		{
			Name = "TransmogAppearanceInfoBySourceData",
			Type = "Structure",
			Fields =
			{
				{ Name = "appearanceID", Type = "number", Nilable = false },
				{ Name = "appearanceIsCollected", Type = "bool", Nilable = false },
				{ Name = "sourceIsCollected", Type = "bool", Nilable = false },
				{ Name = "sourceIsCollectedPermanent", Type = "bool", Nilable = false },
				{ Name = "sourceIsCollectedConditional", Type = "bool", Nilable = false },
				{ Name = "meetsTransmogPlayerCondition", Type = "bool", Nilable = false },
				{ Name = "appearanceHasAnyNonLevelRequirements", Type = "bool", Nilable = false },
				{ Name = "appearanceMeetsNonLevelRequirements", Type = "bool", Nilable = false },
				{ Name = "appearanceIsUsable", Type = "bool", Nilable = false },
				{ Name = "appearanceNumSources", Type = "number", Nilable = false },
				{ Name = "sourceIsKnown", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "TransmogAppearanceJournalEncounterInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "instance", Type = "string", Nilable = false },
				{ Name = "instanceType", Type = "number", Nilable = false },
				{ Name = "tiers", Type = "table", InnerType = "string", Nilable = false },
				{ Name = "encounter", Type = "string", Nilable = false },
				{ Name = "difficulties", Type = "table", InnerType = "string", Nilable = false },
			},
		},
		{
			Name = "TransmogCategoryAppearanceInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "visualID", Type = "number", Nilable = false },
				{ Name = "isCollected", Type = "bool", Nilable = false },
				{ Name = "isFavorite", Type = "bool", Nilable = false },
				{ Name = "isHideVisual", Type = "bool", Nilable = false },
				{ Name = "uiOrder", Type = "number", Nilable = false },
				{ Name = "exclusions", Type = "number", Nilable = false },
				{ Name = "restrictedSlotID", Type = "number", Nilable = true },
				{ Name = "isUsable", Type = "bool", Nilable = false },
				{ Name = "hasRequiredHoliday", Type = "bool", Nilable = false },
				{ Name = "hasActiveRequiredHoliday", Type = "bool", Nilable = false },
				{ Name = "alwaysShowItem", Type = "bool", Nilable = true, Documentation = { "For internal testing only" } },
			},
		},
		{
			Name = "TransmogIllusionInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "visualID", Type = "number", Nilable = false },
				{ Name = "sourceID", Type = "number", Nilable = false },
				{ Name = "icon", Type = "number", Nilable = false },
				{ Name = "isCollected", Type = "bool", Nilable = false },
				{ Name = "isUsable", Type = "bool", Nilable = false },
				{ Name = "isHideVisual", Type = "bool", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "TransmogrifySets",
	Type = "System",
	Namespace = "C_TransmogSets",

	Functions =
	{
		{
			Name = "ClearLatestSource",
			Type = "Function",
		},
		{
			Name = "ClearNewSource",
			Type = "Function",

			Arguments =
			{
				{ Name = "sourceID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "ClearSetNewSourcesForSlot",
			Type = "Function",

			Arguments =
			{
				{ Name = "transmogSetID", Type = "number", Nilable = false },
				{ Name = "slot", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetAllSets",
			Type = "Function",

			Returns =
			{
				{ Name = "sets", Type = "table", InnerType = "TransmogSetInfo", Nilable = false },
			},
		},
		{
			Name = "GetAllSourceIDs",
			Type = "Function",

			Arguments =
			{
				{ Name = "transmogSetID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "sources", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "GetBaseSetID",
			Type = "Function",

			Arguments =
			{
				{ Name = "transmogSetID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "baseTransmogSetID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetBaseSets",
			Type = "Function",

			Returns =
			{
				{ Name = "sets", Type = "table", InnerType = "TransmogSetInfo", Nilable = false },
			},
		},
		{
			Name = "GetBaseSetsCounts",
			Type = "Function",

			Returns =
			{
				{ Name = "numCollected", Type = "number", Nilable = false },
				{ Name = "numTotal", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetBaseSetsFilter",
			Type = "Function",

			Arguments =
			{
				{ Name = "index", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isChecked", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetCameraIDs",
			Type = "Function",

			Returns =
			{
				{ Name = "detailsCameraID", Type = "number", Nilable = true },
				{ Name = "vendorCameraID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetIsFavorite",
			Type = "Function",

			Arguments =
			{
				{ Name = "transmogSetID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isFavorite", Type = "bool", Nilable = false },
				{ Name = "isGroupFavorite", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GetLatestSource",
			Type = "Function",

			Returns =
			{
				{ Name = "sourceID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetSetInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "transmogSetID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "set", Type = "TransmogSetInfo", Nilable = false },
			},
		},
		{
			Name = "GetSetNewSources",
			Type = "Function",

			Arguments =
			{
				{ Name = "transmogSetID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "sourceIDs", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "GetSetPrimaryAppearances",
			Type = "Function",

			Arguments =
			{
				{ Name = "transmogSetID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "apppearances", Type = "table", InnerType = "TransmogSetPrimaryAppearanceInfo", Nilable = false },
			},
		},
		{
			Name = "GetSetsContainingSourceID",
			Type = "Function",

			Arguments =
			{
				{ Name = "sourceID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "setIDs", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "GetSourceIDsForSlot",
			Type = "Function",

			Arguments =
			{
				{ Name = "transmogSetID", Type = "number", Nilable = false },
				{ Name = "slot", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "sources", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "GetSourcesForSlot",
			Type = "Function",

			Arguments =
			{
				{ Name = "transmogSetID", Type = "number", Nilable = false },
				{ Name = "slot", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "sources", Type = "table", InnerType = "AppearanceSourceInfo", Nilable = false },
			},
		},
		{
			Name = "GetUsableSets",
			Type = "Function",

			Returns =
			{
				{ Name = "sets", Type = "table", InnerType = "TransmogSetInfo", Nilable = false },
			},
		},
		{
			Name = "GetVariantSets",
			Type = "Function",

			Arguments =
			{
				{ Name = "transmogSetID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "sets", Type = "table", InnerType = "TransmogSetInfo", Nilable = false },
			},
		},
		{
			Name = "HasUsableSets",
			Type = "Function",

			Returns =
			{
				{ Name = "hasUsableSets", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsBaseSetCollected",
			Type = "Function",

			Arguments =
			{
				{ Name = "transmogSetID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isCollected", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsNewSource",
			Type = "Function",

			Arguments =
			{
				{ Name = "sourceID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isNew", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsSetVisible",
			Type = "Function",

			Arguments =
			{
				{ Name = "transmogSetID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isVisible", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "IsUsingDefaultBaseSetsFilters",
			Type = "Function",

			Returns =
			{
				{ Name = "isUsingDefaultBaseSetsFilters", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetBaseSetsFilter",
			Type = "Function",

			Arguments =
			{
				{ Name = "index", Type = "number", Nilable = false },
				{ Name = "isChecked", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetDefaultBaseSetsFilters",
			Type = "Function",
		},
		{
			Name = "SetHasNewSources",
			Type = "Function",

			Arguments =
			{
				{ Name = "transmogSetID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "hasNewSources", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetHasNewSourcesForSlot",
			Type = "Function",

			Arguments =
			{
				{ Name = "transmogSetID", Type = "number", Nilable = false },
				{ Name = "slot", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "hasNewSources", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "SetIsFavorite",
			Type = "Function",

			Arguments =
			{
				{ Name = "transmogSetID", Type = "number", Nilable = false },
				{ Name = "isFavorite", Type = "bool", Nilable = false },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
		{
			Name = "TransmogSetInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "setID", Type = "number", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "baseSetID", Type = "number", Nilable = true },
				{ Name = "description", Type = "string", Nilable = true },
				{ Name = "label", Type = "string", Nilable = true },
				{ Name = "expansionID", Type = "number", Nilable = false },
				{ Name = "patchID", Type = "number", Nilable = false },
				{ Name = "uiOrder", Type = "number", Nilable = false },
				{ Name = "classMask", Type = "number", Nilable = false },
				{ Name = "hiddenUntilCollected", Type = "bool", Nilable = false },
				{ Name = "requiredFaction", Type = "string", Nilable = true },
				{ Name = "collected", Type = "bool", Nilable = false },
				{ Name = "favorite", Type = "bool", Nilable = false },
				{ Name = "limitedTimeSet", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "TransmogSetPrimaryAppearanceInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "appearanceID", Type = "number", Nilable = false },
				{ Name = "collected", Type = "bool", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "UIEventToastManagerInfo",
	Type = "System",
	Namespace = "C_EventToastManager",

	Functions =
	{
		{
			Name = "GetLevelUpDisplayToastsFromLevel",
			Type = "Function",

			Arguments =
			{
				{ Name = "level", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "toastInfo", Type = "table", InnerType = "EventToastInfo", Nilable = false },
			},
		},
		{
			Name = "GetNextToastToDisplay",
			Type = "Function",

			Returns =
			{
				{ Name = "toastInfo", Type = "EventToastInfo", Nilable = false },
			},
		},
		{
			Name = "RemoveCurrentToast",
			Type = "Function",
		},
	},

	Events =
	{
		{
			Name = "DisplayEventToastLink",
			Type = "Event",
			LiteralName = "DISPLAY_EVENT_TOAST_LINK",
			Payload =
			{
				{ Name = "link", Type = "string", Nilable = false },
			},
		},
		{
			Name = "DisplayEventToasts",
			Type = "Event",
			LiteralName = "DISPLAY_EVENT_TOASTS",
		},
	},

	Tables =
	{
		{
			Name = "EventToastDisplayType",
			Type = "Enumeration",
			NumValues = 9,
			MinValue = 0,
			MaxValue = 8,
			Fields =
			{
				{ Name = "NormalSingleLine", Type = "EventToastDisplayType", EnumValue = 0 },
				{ Name = "NormalBlockText", Type = "EventToastDisplayType", EnumValue = 1 },
				{ Name = "NormalTitleAndSubTitle", Type = "EventToastDisplayType", EnumValue = 2 },
				{ Name = "NormalTextWithIcon", Type = "EventToastDisplayType", EnumValue = 3 },
				{ Name = "LargeTextWithIcon", Type = "EventToastDisplayType", EnumValue = 4 },
				{ Name = "NormalTextWithIconAndRarity", Type = "EventToastDisplayType", EnumValue = 5 },
				{ Name = "Scenario", Type = "EventToastDisplayType", EnumValue = 6 },
				{ Name = "ChallengeMode", Type = "EventToastDisplayType", EnumValue = 7 },
				{ Name = "ScenarioClickExpand", Type = "EventToastDisplayType", EnumValue = 8 },
			},
		},
		{
			Name = "EventToastEventType",
			Type = "Enumeration",
			NumValues = 22,
			MinValue = 0,
			MaxValue = 21,
			Fields =
			{
				{ Name = "LevelUp", Type = "EventToastEventType", EnumValue = 0 },
				{ Name = "LevelUpSpell", Type = "EventToastEventType", EnumValue = 1 },
				{ Name = "LevelUpDungeon", Type = "EventToastEventType", EnumValue = 2 },
				{ Name = "LevelUpRaid", Type = "EventToastEventType", EnumValue = 3 },
				{ Name = "LevelUpPvP", Type = "EventToastEventType", EnumValue = 4 },
				{ Name = "PetBattleNewAbility", Type = "EventToastEventType", EnumValue = 5 },
				{ Name = "PetBattleFinalRound", Type = "EventToastEventType", EnumValue = 6 },
				{ Name = "PetBattleCapture", Type = "EventToastEventType", EnumValue = 7 },
				{ Name = "BattlePetLevelChanged", Type = "EventToastEventType", EnumValue = 8 },
				{ Name = "BattlePetLevelUpAbility", Type = "EventToastEventType", EnumValue = 9 },
				{ Name = "QuestBossEmote", Type = "EventToastEventType", EnumValue = 10 },
				{ Name = "MythicPlusWeeklyRecord", Type = "EventToastEventType", EnumValue = 11 },
				{ Name = "QuestTurnedIn", Type = "EventToastEventType", EnumValue = 12 },
				{ Name = "WorldStateChange", Type = "EventToastEventType", EnumValue = 13 },
				{ Name = "Scenario", Type = "EventToastEventType", EnumValue = 14 },
				{ Name = "LevelUpOther", Type = "EventToastEventType", EnumValue = 15 },
				{ Name = "PlayerAuraAdded", Type = "EventToastEventType", EnumValue = 16 },
				{ Name = "PlayerAuraRemoved", Type = "EventToastEventType", EnumValue = 17 },
				{ Name = "SpellScript", Type = "EventToastEventType", EnumValue = 18 },
				{ Name = "CriteriaUpdated", Type = "EventToastEventType", EnumValue = 19 },
				{ Name = "PvPTierUpdate", Type = "EventToastEventType", EnumValue = 20 },
				{ Name = "SpellLearned", Type = "EventToastEventType", EnumValue = 21 },
			},
		},
		{
			Name = "EventToastInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "eventToastID", Type = "number", Nilable = false },
				{ Name = "title", Type = "string", Nilable = false },
				{ Name = "subtitle", Type = "string", Nilable = false },
				{ Name = "instructionText", Type = "string", Nilable = false },
				{ Name = "iconFileID", Type = "number", Nilable = false },
				{ Name = "subIcon", Type = "string", Nilable = true },
				{ Name = "link", Type = "string", Nilable = false },
				{ Name = "qualityString", Type = "string", Nilable = true },
				{ Name = "quality", Type = "number", Nilable = true },
				{ Name = "eventType", Type = "EventToastEventType", Nilable = false },
				{ Name = "displayType", Type = "EventToastDisplayType", Nilable = false },
				{ Name = "uiTextureKit", Type = "string", Nilable = false },
				{ Name = "sortOrder", Type = "number", Nilable = false },
				{ Name = "time", Type = "number", Nilable = true },
				{ Name = "uiWidgetSetID", Type = "number", Nilable = true },
				{ Name = "extraUiWidgetSetID", Type = "number", Nilable = true },
				{ Name = "titleTooltip", Type = "string", Nilable = true },
				{ Name = "subtitleTooltip", Type = "string", Nilable = true },
				{ Name = "titleTooltipUiWidgetSetID", Type = "number", Nilable = true },
				{ Name = "subtitleTooltipUiWidgetSetID", Type = "number", Nilable = true },
				{ Name = "hideDefaultAtlas", Type = "bool", Nilable = true },
				{ Name = "showSoundKitID", Type = "number", Nilable = true },
				{ Name = "hideSoundKitID", Type = "number", Nilable = true },
				{ Name = "colorTint", Type = "table", Mixin = "ColorMixin", Nilable = true },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "UIFrameManager",
	Type = "System",
	Namespace = "C_FrameManager",

	Functions =
	{
		{
			Name = "GetFrameVisibilityState",
			Type = "Function",

			Arguments =
			{
				{ Name = "frameType", Type = "UIFrameType", Nilable = false },
			},

			Returns =
			{
				{ Name = "shouldShow", Type = "bool", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "FrameManagerUpdateAll",
			Type = "Event",
			LiteralName = "FRAME_MANAGER_UPDATE_ALL",
		},
		{
			Name = "FrameManagerUpdateFrame",
			Type = "Event",
			LiteralName = "FRAME_MANAGER_UPDATE_FRAME",
			Payload =
			{
				{ Name = "type", Type = "UIFrameType", Nilable = false },
				{ Name = "show", Type = "bool", Nilable = false },
			},
		},
	},

	Tables =
	{
		{
			Name = "UIFrameType",
			Type = "Enumeration",
			NumValues = 1,
			MinValue = 0,
			MaxValue = 0,
			Fields =
			{
				{ Name = "JailersTowerBuffs", Type = "UIFrameType", EnumValue = 0 },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "UIModifiedInstance",
	Type = "System",
	Namespace = "C_ModifiedInstance",

	Functions =
	{
		{
			Name = "GetModifiedInstanceInfoFromMapID",
			Type = "Function",

			Arguments =
			{
				{ Name = "mapID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "info", Type = "ModifiedInstanceInfo", Nilable = false },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
		{
			Name = "ModifiedInstanceInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "lfrItemLevel", Type = "number", Nilable = true },
				{ Name = "normalItemLevel", Type = "number", Nilable = true },
				{ Name = "heroicItemLevel", Type = "number", Nilable = true },
				{ Name = "mythicItemLevel", Type = "number", Nilable = true },
				{ Name = "uiTextureKit", Type = "string", Nilable = false },
				{ Name = "description", Type = "string", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "UnitAuras",
	Type = "System",
	Namespace = "C_UnitAuras",

	Functions =
	{
		{
			Name = "GetAuraDataByAuraInstanceID",
			Type = "Function",

			Arguments =
			{
				{ Name = "unitToken", Type = "string", Nilable = false },
				{ Name = "auraInstanceID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "aura", Type = "table", Nilable = true },
			},
		},
		{
			Name = "GetAuraDataBySlot",
			Type = "Function",

			Arguments =
			{
				{ Name = "unitToken", Type = "string", Nilable = false },
				{ Name = "slot", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "aura", Type = "table", Nilable = true },
			},
		},
		{
			Name = "GetCooldownAuraBySpellID",
			Type = "Function",

			Arguments =
			{
				{ Name = "spellID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "cooldownSpellID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetPlayerAuraBySpellID",
			Type = "Function",

			Arguments =
			{
				{ Name = "spellID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "aura", Type = "table", Nilable = true },
			},
		},
		{
			Name = "IsAuraFilteredOutByInstanceID",
			Type = "Function",

			Arguments =
			{
				{ Name = "unitToken", Type = "string", Nilable = false },
				{ Name = "auraInstanceID", Type = "number", Nilable = false },
				{ Name = "filterFlags", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "isFiltered", Type = "bool", Nilable = false },
			},
		},
	},

	Events =
	{
		{
			Name = "UnitAura",
			Type = "Event",
			LiteralName = "UNIT_AURA",
			Payload =
			{
				{ Name = "unitTarget", Type = "string", Nilable = false },
				{ Name = "updateInfo", Type = "UnitAuraUpdateInfo", Nilable = false },
			},
		},
	},

	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "WarCampaign",
	Type = "System",
	Namespace = "C_CampaignInfo",

	Functions =
	{
		{
			Name = "GetAvailableCampaigns",
			Type = "Function",

			Returns =
			{
				{ Name = "campaignIDs", Type = "table", InnerType = "number", Nilable = false },
			},
		},
		{
			Name = "GetCampaignChapterInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "campaignChapterID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "campaignChapterInfo", Type = "CampaignChapterInfo", Nilable = true },
			},
		},
		{
			Name = "GetCampaignID",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "campaignID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GetCampaignInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "campaignID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "campaignInfo", Type = "CampaignInfo", Nilable = true },
			},
		},
		{
			Name = "GetChapterIDs",
			Type = "Function",

			Arguments =
			{
				{ Name = "campaignID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "chapterIDs", Type = "table", InnerType = "number", Nilable = true },
			},
		},
		{
			Name = "GetCurrentChapterID",
			Type = "Function",

			Arguments =
			{
				{ Name = "campaignID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "currentChapterID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "GetFailureReason",
			Type = "Function",

			Arguments =
			{
				{ Name = "campaignID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "failureReason", Type = "CampaignFailureReason", Nilable = true },
			},
		},
		{
			Name = "GetState",
			Type = "Function",

			Arguments =
			{
				{ Name = "campaignID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "state", Type = "CampaignState", Nilable = false },
			},
		},
		{
			Name = "IsCampaignQuest",
			Type = "Function",

			Arguments =
			{
				{ Name = "questID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "isCampaignQuest", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "UsesNormalQuestIcons",
			Type = "Function",

			Arguments =
			{
				{ Name = "campaignID", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "useNormalQuestIcons", Type = "bool", Nilable = false },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
		{
			Name = "CampaignState",
			Type = "Enumeration",
			NumValues = 4,
			MinValue = 0,
			MaxValue = 3,
			Fields =
			{
				{ Name = "Invalid", Type = "CampaignState", EnumValue = 0 },
				{ Name = "Complete", Type = "CampaignState", EnumValue = 1 },
				{ Name = "InProgress", Type = "CampaignState", EnumValue = 2 },
				{ Name = "Stalled", Type = "CampaignState", EnumValue = 3 },
			},
		},
		{
			Name = "CampaignChapterInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "description", Type = "string", Nilable = false },
				{ Name = "rewardQuestID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "CampaignFailureReason",
			Type = "Structure",
			Fields =
			{
				{ Name = "text", Type = "string", Nilable = false },
				{ Name = "questID", Type = "number", Nilable = true },
				{ Name = "mapID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "CampaignInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "description", Type = "string", Nilable = false },
				{ Name = "uiTextureKit", Type = "string", Nilable = false },
				{ Name = "isWarCampaign", Type = "bool", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "WeeklyRewards",
	Type = "System",
	Namespace = "C_WeeklyRewards",

	Functions =
	{
		{
			Name = "AreRewardsForCurrentRewardPeriod",
			Type = "Function",

			Returns =
			{
				{ Name = "isCurrentPeriod", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "CanClaimRewards",
			Type = "Function",

			Returns =
			{
				{ Name = "canClaimRewards", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "ClaimReward",
			Type = "Function",

			Arguments =
			{
				{ Name = "id", Type = "number", Nilable = false },
			},
		},
		{
			Name = "CloseInteraction",
			Type = "Function",
		},
		{
			Name = "GetActivities",
			Type = "Function",

			Arguments =
			{
				{ Name = "type", Type = "WeeklyRewardChestThresholdType", Nilable = true },
			},

			Returns =
			{
				{ Name = "activities", Type = "table", InnerType = "WeeklyRewardActivityInfo", Nilable = false },
			},
		},
		{
			Name = "GetActivityEncounterInfo",
			Type = "Function",

			Arguments =
			{
				{ Name = "type", Type = "WeeklyRewardChestThresholdType", Nilable = false },
				{ Name = "index", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "info", Type = "table", InnerType = "WeeklyRewardActivityEncounterInfo", Nilable = false },
			},
		},
		{
			Name = "GetConquestWeeklyProgress",
			Type = "Function",

			Returns =
			{
				{ Name = "weeklyProgress", Type = "ConquestWeeklyProgress", Nilable = false },
			},
		},
		{
			Name = "GetExampleRewardItemHyperlinks",
			Type = "Function",

			Arguments =
			{
				{ Name = "id", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "hyperlink", Type = "string", Nilable = false },
				{ Name = "upgradeHyperlink", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetItemHyperlink",
			Type = "Function",

			Arguments =
			{
				{ Name = "itemDBID", Type = "string", Nilable = false },
			},

			Returns =
			{
				{ Name = "hyperlink", Type = "string", Nilable = false },
			},
		},
		{
			Name = "GetNextMythicPlusIncrease",
			Type = "Function",

			Arguments =
			{
				{ Name = "mythicPlusLevel", Type = "number", Nilable = false },
			},

			Returns =
			{
				{ Name = "hasSeasonData", Type = "bool", Nilable = false },
				{ Name = "nextMythicPlusLevel", Type = "number", Nilable = true },
				{ Name = "itemLevel", Type = "number", Nilable = true },
			},
		},
		{
			Name = "HasAvailableRewards",
			Type = "Function",

			Returns =
			{
				{ Name = "hasAvailableRewards", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "HasGeneratedRewards",
			Type = "Function",

			Returns =
			{
				{ Name = "hasGeneratedRewards", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "HasInteraction",
			Type = "Function",

			Returns =
			{
				{ Name = "isInteracting", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "OnUIInteract",
			Type = "Function",
		},
	},

	Events =
	{
		{
			Name = "WeeklyRewardsHide",
			Type = "Event",
			LiteralName = "WEEKLY_REWARDS_HIDE",
		},
		{
			Name = "WeeklyRewardsItemChanged",
			Type = "Event",
			LiteralName = "WEEKLY_REWARDS_ITEM_CHANGED",
		},
		{
			Name = "WeeklyRewardsShow",
			Type = "Event",
			LiteralName = "WEEKLY_REWARDS_SHOW",
		},
		{
			Name = "WeeklyRewardsUpdate",
			Type = "Event",
			LiteralName = "WEEKLY_REWARDS_UPDATE",
		},
	},

	Tables =
	{
		{
			Name = "ConquestProgressBarDisplayType",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 0,
			MaxValue = 2,
			Fields =
			{
				{ Name = "FirstChest", Type = "ConquestProgressBarDisplayType", EnumValue = 0 },
				{ Name = "AdditionalChest", Type = "ConquestProgressBarDisplayType", EnumValue = 1 },
				{ Name = "Seasonal", Type = "ConquestProgressBarDisplayType", EnumValue = 2 },
			},
		},
		{
			Name = "ConquestWeeklyProgress",
			Type = "Structure",
			Fields =
			{
				{ Name = "progress", Type = "number", Nilable = false },
				{ Name = "maxProgress", Type = "number", Nilable = false },
				{ Name = "displayType", Type = "ConquestProgressBarDisplayType", Nilable = false },
				{ Name = "unlocksCompleted", Type = "number", Nilable = false },
				{ Name = "maxUnlocks", Type = "number", Nilable = false },
				{ Name = "sampleItemHyperlink", Type = "string", Nilable = false },
			},
		},
		{
			Name = "WeeklyRewardActivityEncounterInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "encounterID", Type = "number", Nilable = false },
				{ Name = "bestDifficulty", Type = "number", Nilable = false },
				{ Name = "uiOrder", Type = "number", Nilable = false },
				{ Name = "instanceID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "WeeklyRewardActivityInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "type", Type = "WeeklyRewardChestThresholdType", Nilable = false },
				{ Name = "index", Type = "number", Nilable = false },
				{ Name = "threshold", Type = "number", Nilable = false },
				{ Name = "progress", Type = "number", Nilable = false },
				{ Name = "id", Type = "number", Nilable = false },
				{ Name = "level", Type = "number", Nilable = false },
				{ Name = "claimID", Type = "number", Nilable = true },
				{ Name = "raidString", Type = "string", Nilable = true },
				{ Name = "rewards", Type = "table", InnerType = "WeeklyRewardActivityRewardInfo", Nilable = false },
			},
		},
		{
			Name = "WeeklyRewardActivityRewardInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "type", Type = "CachedRewardType", Nilable = false },
				{ Name = "id", Type = "number", Nilable = false },
				{ Name = "quantity", Type = "number", Nilable = false },
				{ Name = "itemDBID", Type = "string", Nilable = true },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Name = "ZoneAbility",
	Type = "System",
	Namespace = "C_ZoneAbility",

	Functions =
	{
		{
			Name = "GetActiveAbilities",
			Type = "Function",

			Returns =
			{
				{ Name = "zoneAbilities", Type = "table", InnerType = "ZoneAbilityInfo", Nilable = false },
			},
		},
	},

	Events =
	{
	},

	Tables =
	{
		{
			Name = "ZoneAbilityInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "zoneAbilityID", Type = "number", Nilable = false },
				{ Name = "uiPriority", Type = "number", Nilable = false },
				{ Name = "spellID", Type = "number", Nilable = false },
				{ Name = "textureKit", Type = "string", Nilable = false },
				{ Name = "tutorialText", Type = "string", Nilable = true },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
		{
			Name = "AuctionHouseCommoditySortOrder",
			Type = "Enumeration",
			NumValues = 2,
			MinValue = 0,
			MaxValue = 1,
			Fields =
			{
				{ Name = "UnitPrice", Type = "AuctionHouseCommoditySortOrder", EnumValue = 0 },
				{ Name = "Quantity", Type = "AuctionHouseCommoditySortOrder", EnumValue = 1 },
			},
		},
		{
			Name = "AuctionHouseError",
			Type = "Enumeration",
			NumValues = 26,
			MinValue = 0,
			MaxValue = 25,
			Fields =
			{
				{ Name = "NotEnoughMoney", Type = "AuctionHouseError", EnumValue = 0 },
				{ Name = "HigherBid", Type = "AuctionHouseError", EnumValue = 1 },
				{ Name = "BidIncrement", Type = "AuctionHouseError", EnumValue = 2 },
				{ Name = "BidOwn", Type = "AuctionHouseError", EnumValue = 3 },
				{ Name = "ItemNotFound", Type = "AuctionHouseError", EnumValue = 4 },
				{ Name = "RestrictedAccountTrial", Type = "AuctionHouseError", EnumValue = 5 },
				{ Name = "HasRestriction", Type = "AuctionHouseError", EnumValue = 6 },
				{ Name = "IsBusy", Type = "AuctionHouseError", EnumValue = 7 },
				{ Name = "Unavailable", Type = "AuctionHouseError", EnumValue = 8 },
				{ Name = "ItemHasQuote", Type = "AuctionHouseError", EnumValue = 9 },
				{ Name = "DatabaseError", Type = "AuctionHouseError", EnumValue = 10 },
				{ Name = "MinBid", Type = "AuctionHouseError", EnumValue = 11 },
				{ Name = "NotEnoughItems", Type = "AuctionHouseError", EnumValue = 12 },
				{ Name = "RepairItem", Type = "AuctionHouseError", EnumValue = 13 },
				{ Name = "UsedCharges", Type = "AuctionHouseError", EnumValue = 14 },
				{ Name = "QuestItem", Type = "AuctionHouseError", EnumValue = 15 },
				{ Name = "BoundItem", Type = "AuctionHouseError", EnumValue = 16 },
				{ Name = "ConjuredItem", Type = "AuctionHouseError", EnumValue = 17 },
				{ Name = "LimitedDurationItem", Type = "AuctionHouseError", EnumValue = 18 },
				{ Name = "IsBag", Type = "AuctionHouseError", EnumValue = 19 },
				{ Name = "EquippedBag", Type = "AuctionHouseError", EnumValue = 20 },
				{ Name = "WrappedItem", Type = "AuctionHouseError", EnumValue = 21 },
				{ Name = "LootItem", Type = "AuctionHouseError", EnumValue = 22 },
				{ Name = "DoubleBid", Type = "AuctionHouseError", EnumValue = 23 },
				{ Name = "FavoritesMaxed", Type = "AuctionHouseError", EnumValue = 24 },
				{ Name = "ItemNotAvailable", Type = "AuctionHouseError", EnumValue = 25 },
			},
		},
		{
			Name = "AuctionHouseExtraColumn",
			Type = "Enumeration",
			NumValues = 5,
			MinValue = 0,
			MaxValue = 4,
			Fields =
			{
				{ Name = "None", Type = "AuctionHouseExtraColumn", EnumValue = 0 },
				{ Name = "Ilvl", Type = "AuctionHouseExtraColumn", EnumValue = 1 },
				{ Name = "Slots", Type = "AuctionHouseExtraColumn", EnumValue = 2 },
				{ Name = "Level", Type = "AuctionHouseExtraColumn", EnumValue = 3 },
				{ Name = "Skill", Type = "AuctionHouseExtraColumn", EnumValue = 4 },
			},
		},
		{
			Name = "AuctionHouseFilter",
			Type = "Enumeration",
			NumValues = 13,
			MinValue = 0,
			MaxValue = 12,
			Fields =
			{
				{ Name = "None", Type = "AuctionHouseFilter", EnumValue = 0 },
				{ Name = "UncollectedOnly", Type = "AuctionHouseFilter", EnumValue = 1 },
				{ Name = "UsableOnly", Type = "AuctionHouseFilter", EnumValue = 2 },
				{ Name = "UpgradesOnly", Type = "AuctionHouseFilter", EnumValue = 3 },
				{ Name = "ExactMatch", Type = "AuctionHouseFilter", EnumValue = 4 },
				{ Name = "PoorQuality", Type = "AuctionHouseFilter", EnumValue = 5 },
				{ Name = "CommonQuality", Type = "AuctionHouseFilter", EnumValue = 6 },
				{ Name = "UncommonQuality", Type = "AuctionHouseFilter", EnumValue = 7 },
				{ Name = "RareQuality", Type = "AuctionHouseFilter", EnumValue = 8 },
				{ Name = "EpicQuality", Type = "AuctionHouseFilter", EnumValue = 9 },
				{ Name = "LegendaryQuality", Type = "AuctionHouseFilter", EnumValue = 10 },
				{ Name = "ArtifactQuality", Type = "AuctionHouseFilter", EnumValue = 11 },
				{ Name = "LegendaryCraftedItemOnly", Type = "AuctionHouseFilter", EnumValue = 12 },
			},
		},
		{
			Name = "AuctionHouseItemSortOrder",
			Type = "Enumeration",
			NumValues = 2,
			MinValue = 0,
			MaxValue = 1,
			Fields =
			{
				{ Name = "Bid", Type = "AuctionHouseItemSortOrder", EnumValue = 0 },
				{ Name = "Buyout", Type = "AuctionHouseItemSortOrder", EnumValue = 1 },
			},
		},
		{
			Name = "AuctionHouseNotification",
			Type = "Enumeration",
			NumValues = 6,
			MinValue = 0,
			MaxValue = 5,
			Fields =
			{
				{ Name = "BidPlaced", Type = "AuctionHouseNotification", EnumValue = 0 },
				{ Name = "AuctionRemoved", Type = "AuctionHouseNotification", EnumValue = 1 },
				{ Name = "AuctionWon", Type = "AuctionHouseNotification", EnumValue = 2 },
				{ Name = "AuctionOutbid", Type = "AuctionHouseNotification", EnumValue = 3 },
				{ Name = "AuctionSold", Type = "AuctionHouseNotification", EnumValue = 4 },
				{ Name = "AuctionExpired", Type = "AuctionHouseNotification", EnumValue = 5 },
			},
		},
		{
			Name = "AuctionHouseSortOrder",
			Type = "Enumeration",
			NumValues = 6,
			MinValue = 0,
			MaxValue = 5,
			Fields =
			{
				{ Name = "Price", Type = "AuctionHouseSortOrder", EnumValue = 0 },
				{ Name = "Name", Type = "AuctionHouseSortOrder", EnumValue = 1 },
				{ Name = "Level", Type = "AuctionHouseSortOrder", EnumValue = 2 },
				{ Name = "Bid", Type = "AuctionHouseSortOrder", EnumValue = 3 },
				{ Name = "Buyout", Type = "AuctionHouseSortOrder", EnumValue = 4 },
				{ Name = "TimeRemaining", Type = "AuctionHouseSortOrder", EnumValue = 5 },
			},
		},
		{
			Name = "AuctionHouseTimeLeftBand",
			Type = "Enumeration",
			NumValues = 4,
			MinValue = 0,
			MaxValue = 3,
			Fields =
			{
				{ Name = "Short", Type = "AuctionHouseTimeLeftBand", EnumValue = 0 },
				{ Name = "Medium", Type = "AuctionHouseTimeLeftBand", EnumValue = 1 },
				{ Name = "Long", Type = "AuctionHouseTimeLeftBand", EnumValue = 2 },
				{ Name = "VeryLong", Type = "AuctionHouseTimeLeftBand", EnumValue = 3 },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
		{
			Name = "AzeriteEssenceSlot",
			Type = "Enumeration",
			NumValues = 4,
			MinValue = 0,
			MaxValue = 3,
			Fields =
			{
				{ Name = "MainSlot", Type = "AzeriteEssenceSlot", EnumValue = 0 },
				{ Name = "PassiveOneSlot", Type = "AzeriteEssenceSlot", EnumValue = 1 },
				{ Name = "PassiveTwoSlot", Type = "AzeriteEssenceSlot", EnumValue = 2 },
				{ Name = "PassiveThreeSlot", Type = "AzeriteEssenceSlot", EnumValue = 3 },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
		{
			Name = "BagSlotFlags",
			Type = "Enumeration",
			NumValues = 8,
			MinValue = 1,
			MaxValue = 63,
			Fields =
			{
				{ Name = "DisableAutoSort", Type = "BagSlotFlags", EnumValue = 1 },
				{ Name = "PriorityEquipment", Type = "BagSlotFlags", EnumValue = 2 },
				{ Name = "PriorityConsumables", Type = "BagSlotFlags", EnumValue = 4 },
				{ Name = "PriorityTradeGoods", Type = "BagSlotFlags", EnumValue = 8 },
				{ Name = "PriorityJunk", Type = "BagSlotFlags", EnumValue = 16 },
				{ Name = "PriorityQuestItems", Type = "BagSlotFlags", EnumValue = 32 },
				{ Name = "BagSlotValidFlagsAll", Type = "BagSlotFlags", EnumValue = 63 },
				{ Name = "BagSlotPriorityFlagsAll", Type = "BagSlotFlags", EnumValue = 62 },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
		{
			Name = "BattlePetAbilityFlag",
			Type = "Enumeration",
			NumValues = 6,
			MinValue = 1,
			MaxValue = 32,
			Fields =
			{
				{ Name = "DisplayAsHostileDebuff", Type = "BattlePetAbilityFlag", EnumValue = 1 },
				{ Name = "HideStrongWeakHints", Type = "BattlePetAbilityFlag", EnumValue = 2 },
				{ Name = "Passive", Type = "BattlePetAbilityFlag", EnumValue = 4 },
				{ Name = "ServerOnlyAura", Type = "BattlePetAbilityFlag", EnumValue = 8 },
				{ Name = "ShowCast", Type = "BattlePetAbilityFlag", EnumValue = 16 },
				{ Name = "StartOnCooldown", Type = "BattlePetAbilityFlag", EnumValue = 32 },
			},
		},
		{
			Name = "BattlePetAbilitySlot",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 0,
			MaxValue = 2,
			Fields =
			{
				{ Name = "A", Type = "BattlePetAbilitySlot", EnumValue = 0 },
				{ Name = "B", Type = "BattlePetAbilitySlot", EnumValue = 1 },
				{ Name = "C", Type = "BattlePetAbilitySlot", EnumValue = 2 },
			},
		},
		{
			Name = "BattlePetAbilityTargets",
			Type = "Enumeration",
			NumValues = 13,
			MinValue = 0,
			MaxValue = 12,
			Fields =
			{
				{ Name = "EnemyFrontPet", Type = "BattlePetAbilityTargets", EnumValue = 0 },
				{ Name = "FriendlyFrontPet", Type = "BattlePetAbilityTargets", EnumValue = 1 },
				{ Name = "Weather", Type = "BattlePetAbilityTargets", EnumValue = 2 },
				{ Name = "EnemyPad", Type = "BattlePetAbilityTargets", EnumValue = 3 },
				{ Name = "FriendlyPad", Type = "BattlePetAbilityTargets", EnumValue = 4 },
				{ Name = "EnemyBackPet_1", Type = "BattlePetAbilityTargets", EnumValue = 5 },
				{ Name = "EnemyBackPet_2", Type = "BattlePetAbilityTargets", EnumValue = 6 },
				{ Name = "FriendlyBackPet_1", Type = "BattlePetAbilityTargets", EnumValue = 7 },
				{ Name = "FriendlyBackPet_2", Type = "BattlePetAbilityTargets", EnumValue = 8 },
				{ Name = "Caster", Type = "BattlePetAbilityTargets", EnumValue = 9 },
				{ Name = "Owner", Type = "BattlePetAbilityTargets", EnumValue = 10 },
				{ Name = "Specific", Type = "BattlePetAbilityTargets", EnumValue = 11 },
				{ Name = "ProcTarget", Type = "BattlePetAbilityTargets", EnumValue = 12 },
			},
		},
		{
			Name = "BattlePetAbilityTurnFlag",
			Type = "Enumeration",
			NumValues = 6,
			MinValue = 1,
			MaxValue = 32,
			Fields =
			{
				{ Name = "CanProcFromProc", Type = "BattlePetAbilityTurnFlag", EnumValue = 1 },
				{ Name = "TriggerBySelf", Type = "BattlePetAbilityTurnFlag", EnumValue = 2 },
				{ Name = "TriggerByFriend", Type = "BattlePetAbilityTurnFlag", EnumValue = 4 },
				{ Name = "TriggerByEnemy", Type = "BattlePetAbilityTurnFlag", EnumValue = 8 },
				{ Name = "TriggerByWeather", Type = "BattlePetAbilityTurnFlag", EnumValue = 16 },
				{ Name = "TriggerByAuraCaster", Type = "BattlePetAbilityTurnFlag", EnumValue = 32 },
			},
		},
		{
			Name = "BattlePetAbilityTurnType",
			Type = "Enumeration",
			NumValues = 2,
			MinValue = 0,
			MaxValue = 1,
			Fields =
			{
				{ Name = "Normal", Type = "BattlePetAbilityTurnType", EnumValue = 0 },
				{ Name = "TriggeredEffect", Type = "BattlePetAbilityTurnType", EnumValue = 1 },
			},
		},
		{
			Name = "BattlePetAbilityType",
			Type = "Enumeration",
			NumValues = 2,
			MinValue = 0,
			MaxValue = 1,
			Fields =
			{
				{ Name = "Ability", Type = "BattlePetAbilityType", EnumValue = 0 },
				{ Name = "Aura", Type = "BattlePetAbilityType", EnumValue = 1 },
			},
		},
		{
			Name = "BattlePetAction",
			Type = "Enumeration",
			NumValues = 5,
			MinValue = 0,
			MaxValue = 4,
			Fields =
			{
				{ Name = "None", Type = "BattlePetAction", EnumValue = 0 },
				{ Name = "Ability", Type = "BattlePetAction", EnumValue = 1 },
				{ Name = "SwitchPet", Type = "BattlePetAction", EnumValue = 2 },
				{ Name = "Trap", Type = "BattlePetAction", EnumValue = 3 },
				{ Name = "Skip", Type = "BattlePetAction", EnumValue = 4 },
			},
		},
		{
			Name = "BattlePetBreedQuality",
			Type = "Enumeration",
			NumValues = 6,
			MinValue = 0,
			MaxValue = 5,
			Fields =
			{
				{ Name = "Poor", Type = "BattlePetBreedQuality", EnumValue = 0 },
				{ Name = "Common", Type = "BattlePetBreedQuality", EnumValue = 1 },
				{ Name = "Uncommon", Type = "BattlePetBreedQuality", EnumValue = 2 },
				{ Name = "Rare", Type = "BattlePetBreedQuality", EnumValue = 3 },
				{ Name = "Epic", Type = "BattlePetBreedQuality", EnumValue = 4 },
				{ Name = "Legendary", Type = "BattlePetBreedQuality", EnumValue = 5 },
			},
		},
		{
			Name = "BattlePetEffectFlags",
			Type = "Enumeration",
			NumValues = 2,
			MinValue = 1,
			MaxValue = 2,
			Fields =
			{
				{ Name = "EnableAbilityPicker", Type = "BattlePetEffectFlags", EnumValue = 1 },
				{ Name = "LuaNeedsAllPets", Type = "BattlePetEffectFlags", EnumValue = 2 },
			},
		},
		{
			Name = "BattlePetEffectParamType",
			Type = "Enumeration",
			NumValues = 2,
			MinValue = 0,
			MaxValue = 1,
			Fields =
			{
				{ Name = "Int", Type = "BattlePetEffectParamType", EnumValue = 0 },
				{ Name = "Ability", Type = "BattlePetEffectParamType", EnumValue = 1 },
			},
		},
		{
			Name = "BattlePetEvent",
			Type = "Enumeration",
			NumValues = 13,
			MinValue = 0,
			MaxValue = 12,
			Fields =
			{
				{ Name = "OnAuraApplied", Type = "BattlePetEvent", EnumValue = 0 },
				{ Name = "OnDamageTaken", Type = "BattlePetEvent", EnumValue = 1 },
				{ Name = "OnDamageDealt", Type = "BattlePetEvent", EnumValue = 2 },
				{ Name = "OnHealTaken", Type = "BattlePetEvent", EnumValue = 3 },
				{ Name = "OnHealDealt", Type = "BattlePetEvent", EnumValue = 4 },
				{ Name = "OnAuraRemoved", Type = "BattlePetEvent", EnumValue = 5 },
				{ Name = "OnRoundStart", Type = "BattlePetEvent", EnumValue = 6 },
				{ Name = "OnRoundEnd", Type = "BattlePetEvent", EnumValue = 7 },
				{ Name = "OnTurn", Type = "BattlePetEvent", EnumValue = 8 },
				{ Name = "OnAbility", Type = "BattlePetEvent", EnumValue = 9 },
				{ Name = "OnSwapIn", Type = "BattlePetEvent", EnumValue = 10 },
				{ Name = "OnSwapOut", Type = "BattlePetEvent", EnumValue = 11 },
				{ Name = "PostAuraTicks", Type = "BattlePetEvent", EnumValue = 12 },
			},
		},
		{
			Name = "BattlePetNpcEmote",
			Type = "Enumeration",
			NumValues = 8,
			MinValue = 0,
			MaxValue = 7,
			Fields =
			{
				{ Name = "BattleUnused", Type = "BattlePetNpcEmote", EnumValue = 0 },
				{ Name = "BattleStart", Type = "BattlePetNpcEmote", EnumValue = 1 },
				{ Name = "BattleWin", Type = "BattlePetNpcEmote", EnumValue = 2 },
				{ Name = "BattleLose", Type = "BattlePetNpcEmote", EnumValue = 3 },
				{ Name = "PetSwap", Type = "BattlePetNpcEmote", EnumValue = 4 },
				{ Name = "PetKill", Type = "BattlePetNpcEmote", EnumValue = 5 },
				{ Name = "PetDie", Type = "BattlePetNpcEmote", EnumValue = 6 },
				{ Name = "PetAbility", Type = "BattlePetNpcEmote", EnumValue = 7 },
			},
		},
		{
			Name = "BattlePetNpcTeamFlag",
			Type = "Enumeration",
			NumValues = 2,
			MinValue = 1,
			MaxValue = 2,
			Fields =
			{
				{ Name = "MatchPlayerHighPetLevel", Type = "BattlePetNpcTeamFlag", EnumValue = 1 },
				{ Name = "NoPlayerXP", Type = "BattlePetNpcTeamFlag", EnumValue = 2 },
			},
		},
		{
			Name = "BattlePetOwner",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 0,
			MaxValue = 2,
			Fields =
			{
				{ Name = "Weather", Type = "BattlePetOwner", EnumValue = 0 },
				{ Name = "Ally", Type = "BattlePetOwner", EnumValue = 1 },
				{ Name = "Enemy", Type = "BattlePetOwner", EnumValue = 2 },
			},
		},
		{
			Name = "BattlePetSources",
			Type = "Enumeration",
			NumValues = 11,
			MinValue = 0,
			MaxValue = 10,
			Fields =
			{
				{ Name = "Drop", Type = "BattlePetSources", EnumValue = 0 },
				{ Name = "Quest", Type = "BattlePetSources", EnumValue = 1 },
				{ Name = "Vendor", Type = "BattlePetSources", EnumValue = 2 },
				{ Name = "Profession", Type = "BattlePetSources", EnumValue = 3 },
				{ Name = "WildPet", Type = "BattlePetSources", EnumValue = 4 },
				{ Name = "Achievement", Type = "BattlePetSources", EnumValue = 5 },
				{ Name = "WorldEvent", Type = "BattlePetSources", EnumValue = 6 },
				{ Name = "Promotion", Type = "BattlePetSources", EnumValue = 7 },
				{ Name = "Tcg", Type = "BattlePetSources", EnumValue = 8 },
				{ Name = "PetStore", Type = "BattlePetSources", EnumValue = 9 },
				{ Name = "Discovery", Type = "BattlePetSources", EnumValue = 10 },
			},
		},
		{
			Name = "BattlePetSpeciesFlags",
			Type = "Enumeration",
			NumValues = 16,
			MinValue = 1,
			MaxValue = 32768,
			Fields =
			{
				{ Name = "NoRename", Type = "BattlePetSpeciesFlags", EnumValue = 1 },
				{ Name = "WellKnown", Type = "BattlePetSpeciesFlags", EnumValue = 2 },
				{ Name = "NotAcccountwide", Type = "BattlePetSpeciesFlags", EnumValue = 4 },
				{ Name = "Capturable", Type = "BattlePetSpeciesFlags", EnumValue = 8 },
				{ Name = "NotTradable", Type = "BattlePetSpeciesFlags", EnumValue = 16 },
				{ Name = "HideFromJournal", Type = "BattlePetSpeciesFlags", EnumValue = 32 },
				{ Name = "LegacyAccountUnique", Type = "BattlePetSpeciesFlags", EnumValue = 64 },
				{ Name = "CantBattle", Type = "BattlePetSpeciesFlags", EnumValue = 128 },
				{ Name = "HordeOnly", Type = "BattlePetSpeciesFlags", EnumValue = 256 },
				{ Name = "AllianceOnly", Type = "BattlePetSpeciesFlags", EnumValue = 512 },
				{ Name = "Boss", Type = "BattlePetSpeciesFlags", EnumValue = 1024 },
				{ Name = "RandomDisplay", Type = "BattlePetSpeciesFlags", EnumValue = 2048 },
				{ Name = "NoLicenseRequired", Type = "BattlePetSpeciesFlags", EnumValue = 4096 },
				{ Name = "AddsAllowedWithBoss", Type = "BattlePetSpeciesFlags", EnumValue = 8192 },
				{ Name = "HideUntilLearned", Type = "BattlePetSpeciesFlags", EnumValue = 16384 },
				{ Name = "MatchPlayerHighPetLevel", Type = "BattlePetSpeciesFlags", EnumValue = 32768 },
			},
		},
		{
			Name = "BattlePetStateFlag",
			Type = "Enumeration",
			NumValues = 13,
			MinValue = 0,
			MaxValue = 2048,
			Fields =
			{
				{ Name = "None", Type = "BattlePetStateFlag", EnumValue = 0 },
				{ Name = "SwapOutLock", Type = "BattlePetStateFlag", EnumValue = 1 },
				{ Name = "TurnLock", Type = "BattlePetStateFlag", EnumValue = 2 },
				{ Name = "SpeedBonus", Type = "BattlePetStateFlag", EnumValue = 4 },
				{ Name = "Client", Type = "BattlePetStateFlag", EnumValue = 8 },
				{ Name = "MaxHealthBonus", Type = "BattlePetStateFlag", EnumValue = 16 },
				{ Name = "Stamina", Type = "BattlePetStateFlag", EnumValue = 32 },
				{ Name = "QualityDoesNotEffect", Type = "BattlePetStateFlag", EnumValue = 64 },
				{ Name = "DynamicScaling", Type = "BattlePetStateFlag", EnumValue = 128 },
				{ Name = "Power", Type = "BattlePetStateFlag", EnumValue = 256 },
				{ Name = "SpeedMult", Type = "BattlePetStateFlag", EnumValue = 512 },
				{ Name = "SwapInLock", Type = "BattlePetStateFlag", EnumValue = 1024 },
				{ Name = "ServerOnly", Type = "BattlePetStateFlag", EnumValue = 2048 },
			},
		},
		{
			Name = "BattlePetTypes",
			Type = "Enumeration",
			NumValues = 10,
			MinValue = 0,
			MaxValue = 9,
			Fields =
			{
				{ Name = "Humanoid", Type = "BattlePetTypes", EnumValue = 0 },
				{ Name = "Dragonkin", Type = "BattlePetTypes", EnumValue = 1 },
				{ Name = "Flying", Type = "BattlePetTypes", EnumValue = 2 },
				{ Name = "Undead", Type = "BattlePetTypes", EnumValue = 3 },
				{ Name = "Critter", Type = "BattlePetTypes", EnumValue = 4 },
				{ Name = "Magic", Type = "BattlePetTypes", EnumValue = 5 },
				{ Name = "Elemental", Type = "BattlePetTypes", EnumValue = 6 },
				{ Name = "Beast", Type = "BattlePetTypes", EnumValue = 7 },
				{ Name = "Aquatic", Type = "BattlePetTypes", EnumValue = 8 },
				{ Name = "Mechanical", Type = "BattlePetTypes", EnumValue = 9 },
			},
		},
		{
			Name = "BattlePetVisualFlag",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 1,
			MaxValue = 4,
			Fields =
			{
				{ Name = "Test1", Type = "BattlePetVisualFlag", EnumValue = 1 },
				{ Name = "Test2", Type = "BattlePetVisualFlag", EnumValue = 2 },
				{ Name = "Test3", Type = "BattlePetVisualFlag", EnumValue = 4 },
			},
		},
		{
			Name = "BattlePetVisualRange",
			Type = "Enumeration",
			NumValues = 6,
			MinValue = 0,
			MaxValue = 5,
			Fields =
			{
				{ Name = "Melee", Type = "BattlePetVisualRange", EnumValue = 0 },
				{ Name = "Ranged", Type = "BattlePetVisualRange", EnumValue = 1 },
				{ Name = "InPlace", Type = "BattlePetVisualRange", EnumValue = 2 },
				{ Name = "PointBlank", Type = "BattlePetVisualRange", EnumValue = 3 },
				{ Name = "BehindMelee", Type = "BattlePetVisualRange", EnumValue = 4 },
				{ Name = "BehindRanged", Type = "BattlePetVisualRange", EnumValue = 5 },
			},
		},
		{
			Name = "BattlepetDbFlags",
			Type = "Enumeration",
			NumValues = 11,
			MinValue = 0,
			MaxValue = 256,
			Fields =
			{
				{ Name = "None", Type = "BattlepetDbFlags", EnumValue = 0 },
				{ Name = "Favorite", Type = "BattlepetDbFlags", EnumValue = 1 },
				{ Name = "Converted", Type = "BattlepetDbFlags", EnumValue = 2 },
				{ Name = "Revoked", Type = "BattlepetDbFlags", EnumValue = 4 },
				{ Name = "LockedForConvert", Type = "BattlepetDbFlags", EnumValue = 8 },
				{ Name = "Ability0Selection", Type = "BattlepetDbFlags", EnumValue = 16 },
				{ Name = "Ability1Selection", Type = "BattlepetDbFlags", EnumValue = 32 },
				{ Name = "Ability2Selection", Type = "BattlepetDbFlags", EnumValue = 64 },
				{ Name = "FanfareNeeded", Type = "BattlepetDbFlags", EnumValue = 128 },
				{ Name = "DisplayOverridden", Type = "BattlepetDbFlags", EnumValue = 256 },
				{ Name = "LockMask", Type = "BattlepetDbFlags", EnumValue = 12 },
			},
		},
		{
			Name = "BattlepetDeletedReason",
			Type = "Enumeration",
			NumValues = 6,
			MinValue = 0,
			MaxValue = 5,
			Fields =
			{
				{ Name = "Unknown", Type = "BattlepetDeletedReason", EnumValue = 0 },
				{ Name = "PlayerReleased", Type = "BattlepetDeletedReason", EnumValue = 1 },
				{ Name = "PlayerCaged", Type = "BattlepetDeletedReason", EnumValue = 2 },
				{ Name = "Gm", Type = "BattlepetDeletedReason", EnumValue = 3 },
				{ Name = "CageError", Type = "BattlepetDeletedReason", EnumValue = 4 },
				{ Name = "DelJournal", Type = "BattlepetDeletedReason", EnumValue = 5 },
			},
		},
		{
			Name = "BattlepetSlotLockCheat",
			Type = "Enumeration",
			NumValues = 5,
			MinValue = -3,
			MaxValue = 1,
			Fields =
			{
				{ Name = "Cheat_2_Locked", Type = "BattlepetSlotLockCheat", EnumValue = -3 },
				{ Name = "Cheat_1_Locked", Type = "BattlepetSlotLockCheat", EnumValue = -2 },
				{ Name = "Cheat_0_Locked", Type = "BattlepetSlotLockCheat", EnumValue = -1 },
				{ Name = "CheatOff", Type = "BattlepetSlotLockCheat", EnumValue = 0 },
				{ Name = "UnlockAll", Type = "BattlepetSlotLockCheat", EnumValue = 1 },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
		{
			Name = "CalendarCommandType",
			Type = "Enumeration",
			NumValues = 12,
			MinValue = 0,
			MaxValue = 11,
			Fields =
			{
				{ Name = "Create", Type = "CalendarCommandType", EnumValue = 0 },
				{ Name = "Invite", Type = "CalendarCommandType", EnumValue = 1 },
				{ Name = "Rsvp", Type = "CalendarCommandType", EnumValue = 2 },
				{ Name = "RemoveInvite", Type = "CalendarCommandType", EnumValue = 3 },
				{ Name = "RemoveEvent", Type = "CalendarCommandType", EnumValue = 4 },
				{ Name = "Status", Type = "CalendarCommandType", EnumValue = 5 },
				{ Name = "ModeratorStatus", Type = "CalendarCommandType", EnumValue = 6 },
				{ Name = "GetCalendar", Type = "CalendarCommandType", EnumValue = 7 },
				{ Name = "GetEvent", Type = "CalendarCommandType", EnumValue = 8 },
				{ Name = "UpdateEvent", Type = "CalendarCommandType", EnumValue = 9 },
				{ Name = "Complain", Type = "CalendarCommandType", EnumValue = 10 },
				{ Name = "Notes", Type = "CalendarCommandType", EnumValue = 11 },
			},
		},
		{
			Name = "CalendarErrorType",
			Type = "Enumeration",
			NumValues = 51,
			MinValue = 0,
			MaxValue = 50,
			Fields =
			{
				{ Name = "Success", Type = "CalendarErrorType", EnumValue = 0 },
				{ Name = "CommunityEventsExceeded", Type = "CalendarErrorType", EnumValue = 1 },
				{ Name = "EventsExceeded", Type = "CalendarErrorType", EnumValue = 2 },
				{ Name = "SelfInvitesExceeded", Type = "CalendarErrorType", EnumValue = 3 },
				{ Name = "OtherInvitesExceeded", Type = "CalendarErrorType", EnumValue = 4 },
				{ Name = "NoPermission", Type = "CalendarErrorType", EnumValue = 5 },
				{ Name = "EventInvalid", Type = "CalendarErrorType", EnumValue = 6 },
				{ Name = "NotInvited", Type = "CalendarErrorType", EnumValue = 7 },
				{ Name = "UnknownError", Type = "CalendarErrorType", EnumValue = 8 },
				{ Name = "NotInGuild", Type = "CalendarErrorType", EnumValue = 9 },
				{ Name = "NotInCommunity", Type = "CalendarErrorType", EnumValue = 10 },
				{ Name = "TargetAlreadyInvited", Type = "CalendarErrorType", EnumValue = 11 },
				{ Name = "NameNotFound", Type = "CalendarErrorType", EnumValue = 12 },
				{ Name = "WrongFaction", Type = "CalendarErrorType", EnumValue = 13 },
				{ Name = "Ignored", Type = "CalendarErrorType", EnumValue = 14 },
				{ Name = "InvitesExceeded", Type = "CalendarErrorType", EnumValue = 15 },
				{ Name = "InvalidMaxSize", Type = "CalendarErrorType", EnumValue = 16 },
				{ Name = "InvalidDate", Type = "CalendarErrorType", EnumValue = 17 },
				{ Name = "InvalidTime", Type = "CalendarErrorType", EnumValue = 18 },
				{ Name = "NoInvites", Type = "CalendarErrorType", EnumValue = 19 },
				{ Name = "NeedsTitle", Type = "CalendarErrorType", EnumValue = 20 },
				{ Name = "EventPassed", Type = "CalendarErrorType", EnumValue = 21 },
				{ Name = "EventLocked", Type = "CalendarErrorType", EnumValue = 22 },
				{ Name = "DeleteCreatorFailed", Type = "CalendarErrorType", EnumValue = 23 },
				{ Name = "DataAlreadySet", Type = "CalendarErrorType", EnumValue = 24 },
				{ Name = "CalendarDisabled", Type = "CalendarErrorType", EnumValue = 25 },
				{ Name = "RestrictedAccount", Type = "CalendarErrorType", EnumValue = 26 },
				{ Name = "ArenaEventsExceeded", Type = "CalendarErrorType", EnumValue = 27 },
				{ Name = "RestrictedLevel", Type = "CalendarErrorType", EnumValue = 28 },
				{ Name = "Squelched", Type = "CalendarErrorType", EnumValue = 29 },
				{ Name = "NoInvite", Type = "CalendarErrorType", EnumValue = 30 },
				{ Name = "ComplaintDisabled", Type = "CalendarErrorType", EnumValue = 31 },
				{ Name = "ComplaintSelf", Type = "CalendarErrorType", EnumValue = 32 },
				{ Name = "ComplaintSameGuild", Type = "CalendarErrorType", EnumValue = 33 },
				{ Name = "ComplaintGm", Type = "CalendarErrorType", EnumValue = 34 },
				{ Name = "ComplaintLimit", Type = "CalendarErrorType", EnumValue = 35 },
				{ Name = "ComplaintNotFound", Type = "CalendarErrorType", EnumValue = 36 },
				{ Name = "EventWrongServer", Type = "CalendarErrorType", EnumValue = 37 },
				{ Name = "NoCommunityInvites", Type = "CalendarErrorType", EnumValue = 38 },
				{ Name = "InvalidSignup", Type = "CalendarErrorType", EnumValue = 39 },
				{ Name = "NoModerator", Type = "CalendarErrorType", EnumValue = 40 },
				{ Name = "ModeratorRestricted", Type = "CalendarErrorType", EnumValue = 41 },
				{ Name = "InvalidNotes", Type = "CalendarErrorType", EnumValue = 42 },
				{ Name = "InvalidTitle", Type = "CalendarErrorType", EnumValue = 43 },
				{ Name = "InvalidDescription", Type = "CalendarErrorType", EnumValue = 44 },
				{ Name = "InvalidClub", Type = "CalendarErrorType", EnumValue = 45 },
				{ Name = "CreatorNotFound", Type = "CalendarErrorType", EnumValue = 46 },
				{ Name = "EventThrottled", Type = "CalendarErrorType", EnumValue = 47 },
				{ Name = "InviteThrottled", Type = "CalendarErrorType", EnumValue = 48 },
				{ Name = "Internal", Type = "CalendarErrorType", EnumValue = 49 },
				{ Name = "ComplaintAdded", Type = "CalendarErrorType", EnumValue = 50 },
			},
		},
		{
			Name = "CalendarEventBits",
			Type = "Enumeration",
			NumValues = 15,
			MinValue = 1,
			MaxValue = 3788,
			Fields =
			{
				{ Name = "Player", Type = "CalendarEventBits", EnumValue = 1 },
				{ Name = "GuildDeprecated", Type = "CalendarEventBits", EnumValue = 2 },
				{ Name = "System", Type = "CalendarEventBits", EnumValue = 4 },
				{ Name = "Holiday", Type = "CalendarEventBits", EnumValue = 8 },
				{ Name = "Locked", Type = "CalendarEventBits", EnumValue = 16 },
				{ Name = "AutoApprove", Type = "CalendarEventBits", EnumValue = 32 },
				{ Name = "CommunityAnnouncement", Type = "CalendarEventBits", EnumValue = 64 },
				{ Name = "RaidLockout", Type = "CalendarEventBits", EnumValue = 128 },
				{ Name = "ArenaDeprecated", Type = "CalendarEventBits", EnumValue = 256 },
				{ Name = "RaidResetDeprecated", Type = "CalendarEventBits", EnumValue = 512 },
				{ Name = "CommunitySignup", Type = "CalendarEventBits", EnumValue = 1024 },
				{ Name = "GuildSignup", Type = "CalendarEventBits", EnumValue = 2048 },
				{ Name = "CommunityWide", Type = "CalendarEventBits", EnumValue = 3136 },
				{ Name = "PlayerCreated", Type = "CalendarEventBits", EnumValue = 3395 },
				{ Name = "CantComplain", Type = "CalendarEventBits", EnumValue = 3788 },
			},
		},
		{
			Name = "CalendarEventRepeatOptions",
			Type = "Enumeration",
			NumValues = 4,
			MinValue = 0,
			MaxValue = 3,
			Fields =
			{
				{ Name = "Never", Type = "CalendarEventRepeatOptions", EnumValue = 0 },
				{ Name = "Weekly", Type = "CalendarEventRepeatOptions", EnumValue = 1 },
				{ Name = "Biweekly", Type = "CalendarEventRepeatOptions", EnumValue = 2 },
				{ Name = "Monthly", Type = "CalendarEventRepeatOptions", EnumValue = 3 },
			},
		},
		{
			Name = "CalendarEventType",
			Type = "Enumeration",
			NumValues = 6,
			MinValue = 0,
			MaxValue = 5,
			Fields =
			{
				{ Name = "Raid", Type = "CalendarEventType", EnumValue = 0 },
				{ Name = "Dungeon", Type = "CalendarEventType", EnumValue = 1 },
				{ Name = "PvP", Type = "CalendarEventType", EnumValue = 2 },
				{ Name = "Meeting", Type = "CalendarEventType", EnumValue = 3 },
				{ Name = "Other", Type = "CalendarEventType", EnumValue = 4 },
				{ Name = "HeroicDeprecated", Type = "CalendarEventType", EnumValue = 5 },
			},
		},
		{
			Name = "CalendarFilterFlags",
			Type = "Enumeration",
			NumValues = 5,
			MinValue = 1,
			MaxValue = 16,
			Fields =
			{
				{ Name = "WeeklyHoliday", Type = "CalendarFilterFlags", EnumValue = 1 },
				{ Name = "Darkmoon", Type = "CalendarFilterFlags", EnumValue = 2 },
				{ Name = "Battleground", Type = "CalendarFilterFlags", EnumValue = 4 },
				{ Name = "RaidLockout", Type = "CalendarFilterFlags", EnumValue = 8 },
				{ Name = "RaidReset", Type = "CalendarFilterFlags", EnumValue = 16 },
			},
		},
		{
			Name = "CalendarGetEventType",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 0,
			MaxValue = 2,
			Fields =
			{
				{ Name = "Get", Type = "CalendarGetEventType", EnumValue = 0 },
				{ Name = "Add", Type = "CalendarGetEventType", EnumValue = 1 },
				{ Name = "Copy", Type = "CalendarGetEventType", EnumValue = 2 },
			},
		},
		{
			Name = "CalendarHolidayFilterType",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 0,
			MaxValue = 2,
			Fields =
			{
				{ Name = "Weekly", Type = "CalendarHolidayFilterType", EnumValue = 0 },
				{ Name = "Darkmoon", Type = "CalendarHolidayFilterType", EnumValue = 1 },
				{ Name = "Battleground", Type = "CalendarHolidayFilterType", EnumValue = 2 },
			},
		},
		{
			Name = "CalendarInviteBits",
			Type = "Enumeration",
			NumValues = 4,
			MinValue = 1,
			MaxValue = 8,
			Fields =
			{
				{ Name = "PendingInvite", Type = "CalendarInviteBits", EnumValue = 1 },
				{ Name = "Moderator", Type = "CalendarInviteBits", EnumValue = 2 },
				{ Name = "Creator", Type = "CalendarInviteBits", EnumValue = 4 },
				{ Name = "Signup", Type = "CalendarInviteBits", EnumValue = 8 },
			},
		},
		{
			Name = "CalendarInviteSortType",
			Type = "Enumeration",
			NumValues = 6,
			MinValue = 0,
			MaxValue = 5,
			Fields =
			{
				{ Name = "Name", Type = "CalendarInviteSortType", EnumValue = 0 },
				{ Name = "Level", Type = "CalendarInviteSortType", EnumValue = 1 },
				{ Name = "Class", Type = "CalendarInviteSortType", EnumValue = 2 },
				{ Name = "Status", Type = "CalendarInviteSortType", EnumValue = 3 },
				{ Name = "Party", Type = "CalendarInviteSortType", EnumValue = 4 },
				{ Name = "Notes", Type = "CalendarInviteSortType", EnumValue = 5 },
			},
		},
		{
			Name = "CalendarInviteType",
			Type = "Enumeration",
			NumValues = 2,
			MinValue = 0,
			MaxValue = 1,
			Fields =
			{
				{ Name = "Normal", Type = "CalendarInviteType", EnumValue = 0 },
				{ Name = "Signup", Type = "CalendarInviteType", EnumValue = 1 },
			},
		},
		{
			Name = "CalendarModeratorStatus",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 0,
			MaxValue = 2,
			Fields =
			{
				{ Name = "None", Type = "CalendarModeratorStatus", EnumValue = 0 },
				{ Name = "Moderator", Type = "CalendarModeratorStatus", EnumValue = 1 },
				{ Name = "Creator", Type = "CalendarModeratorStatus", EnumValue = 2 },
			},
		},
		{
			Name = "CalendarStatus",
			Type = "Enumeration",
			NumValues = 9,
			MinValue = 0,
			MaxValue = 8,
			Fields =
			{
				{ Name = "Invited", Type = "CalendarStatus", EnumValue = 0 },
				{ Name = "Available", Type = "CalendarStatus", EnumValue = 1 },
				{ Name = "Declined", Type = "CalendarStatus", EnumValue = 2 },
				{ Name = "Confirmed", Type = "CalendarStatus", EnumValue = 3 },
				{ Name = "Out", Type = "CalendarStatus", EnumValue = 4 },
				{ Name = "Standby", Type = "CalendarStatus", EnumValue = 5 },
				{ Name = "Signedup", Type = "CalendarStatus", EnumValue = 6 },
				{ Name = "NotSignedup", Type = "CalendarStatus", EnumValue = 7 },
				{ Name = "Tentative", Type = "CalendarStatus", EnumValue = 8 },
			},
		},
		{
			Name = "CalendarTexturesType",
			Type = "Enumeration",
			NumValues = 2,
			MinValue = 0,
			MaxValue = 1,
			Fields =
			{
				{ Name = "Dungeons", Type = "CalendarTexturesType", EnumValue = 0 },
				{ Name = "Raid", Type = "CalendarTexturesType", EnumValue = 1 },
			},
		},
		{
			Name = "CalendarType",
			Type = "Enumeration",
			NumValues = 8,
			MinValue = 0,
			MaxValue = 7,
			Fields =
			{
				{ Name = "Player", Type = "CalendarType", EnumValue = 0 },
				{ Name = "Community", Type = "CalendarType", EnumValue = 1 },
				{ Name = "RaidLockout", Type = "CalendarType", EnumValue = 2 },
				{ Name = "RaidResetDeprecated", Type = "CalendarType", EnumValue = 3 },
				{ Name = "Holiday", Type = "CalendarType", EnumValue = 4 },
				{ Name = "HolidayWeekly", Type = "CalendarType", EnumValue = 5 },
				{ Name = "HolidayDarkmoon", Type = "CalendarType", EnumValue = 6 },
				{ Name = "HolidayBattleground", Type = "CalendarType", EnumValue = 7 },
			},
		},
		{
			Name = "CalendarWebActionType",
			Type = "Enumeration",
			NumValues = 7,
			MinValue = 0,
			MaxValue = 6,
			Fields =
			{
				{ Name = "Accept", Type = "CalendarWebActionType", EnumValue = 0 },
				{ Name = "Decline", Type = "CalendarWebActionType", EnumValue = 1 },
				{ Name = "Remove", Type = "CalendarWebActionType", EnumValue = 2 },
				{ Name = "ReportSpam", Type = "CalendarWebActionType", EnumValue = 3 },
				{ Name = "Signup", Type = "CalendarWebActionType", EnumValue = 4 },
				{ Name = "Tentative", Type = "CalendarWebActionType", EnumValue = 5 },
				{ Name = "TentativeSignup", Type = "CalendarWebActionType", EnumValue = 6 },
			},
		},
		{
			Name = "HolidayCalendarFlags",
			Type = "Enumeration",
			NumValues = 2,
			MinValue = 1,
			MaxValue = 2,
			Fields =
			{
				{ Name = "Alliance", Type = "HolidayCalendarFlags", EnumValue = 1 },
				{ Name = "Horde", Type = "HolidayCalendarFlags", EnumValue = 2 },
			},
		},
		{
			Name = "HolidayFlags",
			Type = "Enumeration",
			NumValues = 6,
			MinValue = 1,
			MaxValue = 32,
			Fields =
			{
				{ Name = "IsRegionwide", Type = "HolidayFlags", EnumValue = 1 },
				{ Name = "DontShowInCalendar", Type = "HolidayFlags", EnumValue = 2 },
				{ Name = "DontDisplayEnd", Type = "HolidayFlags", EnumValue = 4 },
				{ Name = "DontDisplayBanner", Type = "HolidayFlags", EnumValue = 8 },
				{ Name = "NotAvailableClientSide", Type = "HolidayFlags", EnumValue = 16 },
				{ Name = "DurationUseMinutes", Type = "HolidayFlags", EnumValue = 32 },
			},
		},
		{
			Name = "CalendarGetEventTypeConstants",
			Type = "Constants",
			Values =
			{
				{ Name = "DEFAULT_CALENDAR_GET_EVENT_TYPE", Type = "CalendarGetEventType", Value = Get },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
		{
			Name = "CharCustomizationType",
			Type = "Enumeration",
			NumValues = 10,
			MinValue = 0,
			MaxValue = 9,
			Fields =
			{
				{ Name = "Skin", Type = "CharCustomizationType", EnumValue = 0 },
				{ Name = "Face", Type = "CharCustomizationType", EnumValue = 1 },
				{ Name = "Hair", Type = "CharCustomizationType", EnumValue = 2 },
				{ Name = "HairColor", Type = "CharCustomizationType", EnumValue = 3 },
				{ Name = "FacialHair", Type = "CharCustomizationType", EnumValue = 4 },
				{ Name = "CustomOptionTattoo", Type = "CharCustomizationType", EnumValue = 5 },
				{ Name = "CustomOptionHorn", Type = "CharCustomizationType", EnumValue = 6 },
				{ Name = "CustomOptionFacewear", Type = "CharCustomizationType", EnumValue = 7 },
				{ Name = "CustomOptionTattooColor", Type = "CharCustomizationType", EnumValue = 8 },
				{ Name = "Outfit", Type = "CharCustomizationType", EnumValue = 9 },
			},
		},
		{
			Name = "ChrCustomizationCategoryFlag",
			Type = "Enumeration",
			NumValues = 1,
			MinValue = 1,
			MaxValue = 1,
			Fields =
			{
				{ Name = "UndressModel", Type = "ChrCustomizationCategoryFlag", EnumValue = 1 },
			},
		},
		{
			Name = "ChrCustomizationOptionType",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 0,
			MaxValue = 2,
			Fields =
			{
				{ Name = "SelectionPopout", Type = "ChrCustomizationOptionType", EnumValue = 0 },
				{ Name = "Checkbox", Type = "ChrCustomizationOptionType", EnumValue = 1 },
				{ Name = "Slider", Type = "ChrCustomizationOptionType", EnumValue = 2 },
			},
		},
		{
			Name = "CharCustomizationChoice",
			Type = "Structure",
			Fields =
			{
				{ Name = "id", Type = "number", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "ineligibleChoice", Type = "bool", Nilable = false },
				{ Name = "isNew", Type = "bool", Nilable = false },
				{ Name = "swatchColor1", Type = "table", Mixin = "ColorMixin", Nilable = true },
				{ Name = "swatchColor2", Type = "table", Mixin = "ColorMixin", Nilable = true },
			},
		},
		{
			Name = "CharCustomizationConstants",
			Type = "Constants",
			Values =
			{
				{ Name = "CHAR_CUSTOMIZE_CUSTOM_DISPLAY_OPTION_FIRST", Type = "CharCustomizationType", Value = CustomOptionTattoo },
				{ Name = "CHAR_CUSTOMIZE_CUSTOM_DISPLAY_OPTION_LAST", Type = "CharCustomizationType", Value = CustomOptionTattooColor },
				{ Name = "NUM_CUSTOM_DISPLAY", Type = "number", Value = CHAR_CUSTOMIZE_CUSTOM_DISPLAY_OPTION_LAST - CHAR_CUSTOMIZE_CUSTOM_DISPLAY_OPTION_FIRST + 1 },
			},
		},
		{
			Name = "CharCustomizationOption",
			Type = "Structure",
			Fields =
			{
				{ Name = "id", Type = "number", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "orderIndex", Type = "number", Nilable = false },
				{ Name = "optionType", Type = "ChrCustomizationOptionType", Nilable = false },
				{ Name = "choices", Type = "table", InnerType = "CharCustomizationChoice", Nilable = false },
				{ Name = "currentChoiceIndex", Type = "number", Nilable = false },
				{ Name = "hasNewChoices", Type = "bool", Nilable = false },
				{ Name = "isSound", Type = "bool", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
		{
			Name = "ChatChannelRuleset",
			Type = "Enumeration",
			NumValues = 9,
			MinValue = 0,
			MaxValue = 8,
			Fields =
			{
				{ Name = "None", Type = "ChatChannelRuleset", EnumValue = 0 },
				{ Name = "Mentor", Type = "ChatChannelRuleset", EnumValue = 1 },
				{ Name = "Disabled", Type = "ChatChannelRuleset", EnumValue = 2 },
				{ Name = "ChromieTimeCataclysm", Type = "ChatChannelRuleset", EnumValue = 3 },
				{ Name = "ChromieTimeBuringCrusade", Type = "ChatChannelRuleset", EnumValue = 4 },
				{ Name = "ChromieTimeWrath", Type = "ChatChannelRuleset", EnumValue = 5 },
				{ Name = "ChromieTimeMists", Type = "ChatChannelRuleset", EnumValue = 6 },
				{ Name = "ChromieTimeWoD", Type = "ChatChannelRuleset", EnumValue = 7 },
				{ Name = "ChromieTimeLegion", Type = "ChatChannelRuleset", EnumValue = 8 },
			},
		},
		{
			Name = "ChatChannelType",
			Type = "Enumeration",
			NumValues = 5,
			MinValue = 0,
			MaxValue = 4,
			Fields =
			{
				{ Name = "None", Type = "ChatChannelType", EnumValue = 0 },
				{ Name = "Custom", Type = "ChatChannelType", EnumValue = 1 },
				{ Name = "PrivateParty", Type = "ChatChannelType", EnumValue = 2 },
				{ Name = "PublicParty", Type = "ChatChannelType", EnumValue = 3 },
				{ Name = "Communities", Type = "ChatChannelType", EnumValue = 4 },
			},
		},
		{
			Name = "LanguageFlag",
			Type = "Enumeration",
			NumValues = 2,
			MinValue = 1,
			MaxValue = 2,
			Fields =
			{
				{ Name = "IsExotic", Type = "LanguageFlag", EnumValue = 1 },
				{ Name = "HiddenFromPlayer", Type = "LanguageFlag", EnumValue = 2 },
			},
		},
		{
			Name = "PermanentChatChannelType",
			Type = "Enumeration",
			NumValues = 4,
			MinValue = 0,
			MaxValue = 3,
			Fields =
			{
				{ Name = "None", Type = "PermanentChatChannelType", EnumValue = 0 },
				{ Name = "Zone", Type = "PermanentChatChannelType", EnumValue = 1 },
				{ Name = "Communities", Type = "PermanentChatChannelType", EnumValue = 2 },
				{ Name = "Custom", Type = "PermanentChatChannelType", EnumValue = 3 },
			},
		},
		{
			Name = "TtsBoolSetting",
			Type = "Enumeration",
			NumValues = 5,
			MinValue = 0,
			MaxValue = 4,
			Fields =
			{
				{ Name = "PlaySoundSeparatingChatLineBreaks", Type = "TtsBoolSetting", EnumValue = 0 },
				{ Name = "AddCharacterNameToSpeech", Type = "TtsBoolSetting", EnumValue = 1 },
				{ Name = "PlayActivitySoundWhenNotFocused", Type = "TtsBoolSetting", EnumValue = 2 },
				{ Name = "AlternateSystemVoice", Type = "TtsBoolSetting", EnumValue = 3 },
				{ Name = "NarrateMyMessages", Type = "TtsBoolSetting", EnumValue = 4 },
			},
		},
		{
			Name = "TtsVoiceType",
			Type = "Enumeration",
			NumValues = 2,
			MinValue = 0,
			MaxValue = 1,
			Fields =
			{
				{ Name = "Standard", Type = "TtsVoiceType", EnumValue = 0 },
				{ Name = "Alternate", Type = "TtsVoiceType", EnumValue = 1 },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
		{
			Name = "CurrencyFlags",
			Type = "Enumeration",
			NumValues = 32,
			MinValue = 1,
			MaxValue = 2147483648,
			Fields =
			{
				{ Name = "CurrencyTradable", Type = "CurrencyFlags", EnumValue = 1 },
				{ Name = "CurrencyAppearsInLootWindow", Type = "CurrencyFlags", EnumValue = 2 },
				{ Name = "CurrencyComputedWeeklyMaximum", Type = "CurrencyFlags", EnumValue = 4 },
				{ Name = "Currency_100_Scaler", Type = "CurrencyFlags", EnumValue = 8 },
				{ Name = "CurrencyNoLowLevelDrop", Type = "CurrencyFlags", EnumValue = 16 },
				{ Name = "CurrencyIgnoreMaxQtyOnLoad", Type = "CurrencyFlags", EnumValue = 32 },
				{ Name = "CurrencyLogOnWorldChange", Type = "CurrencyFlags", EnumValue = 64 },
				{ Name = "CurrencyTrackQuantity", Type = "CurrencyFlags", EnumValue = 128 },
				{ Name = "CurrencyResetTrackedQuantity", Type = "CurrencyFlags", EnumValue = 256 },
				{ Name = "CurrencyUpdateVersionIgnoreMax", Type = "CurrencyFlags", EnumValue = 512 },
				{ Name = "CurrencySuppressChatMessageOnVersionChange", Type = "CurrencyFlags", EnumValue = 1024 },
				{ Name = "CurrencySingleDropInLoot", Type = "CurrencyFlags", EnumValue = 2048 },
				{ Name = "CurrencyHasWeeklyCatchup", Type = "CurrencyFlags", EnumValue = 4096 },
				{ Name = "CurrencyDoNotCompressChat", Type = "CurrencyFlags", EnumValue = 8192 },
				{ Name = "CurrencyDoNotLogAcquisitionToBi", Type = "CurrencyFlags", EnumValue = 16384 },
				{ Name = "CurrencyNoRaidDrop", Type = "CurrencyFlags", EnumValue = 32768 },
				{ Name = "CurrencyNotPersistent", Type = "CurrencyFlags", EnumValue = 65536 },
				{ Name = "CurrencyDeprecated", Type = "CurrencyFlags", EnumValue = 131072 },
				{ Name = "CurrencyDynamicMaximum", Type = "CurrencyFlags", EnumValue = 262144 },
				{ Name = "CurrencySuppressChatMessages", Type = "CurrencyFlags", EnumValue = 524288 },
				{ Name = "CurrencyDoNotToast", Type = "CurrencyFlags", EnumValue = 1048576 },
				{ Name = "CurrencyDestroyExtraOnLoot", Type = "CurrencyFlags", EnumValue = 2097152 },
				{ Name = "CurrencyDontShowTotalInTooltip", Type = "CurrencyFlags", EnumValue = 4194304 },
				{ Name = "CurrencyDontCoalesceInLootWindow", Type = "CurrencyFlags", EnumValue = 8388608 },
				{ Name = "CurrencyAccountWide", Type = "CurrencyFlags", EnumValue = 16777216 },
				{ Name = "CurrencyAllowOverflowMailer", Type = "CurrencyFlags", EnumValue = 33554432 },
				{ Name = "CurrencyHideAsReward", Type = "CurrencyFlags", EnumValue = 67108864 },
				{ Name = "CurrencyHasWarmodeBonus", Type = "CurrencyFlags", EnumValue = 134217728 },
				{ Name = "CurrencyIsAllianceOnly", Type = "CurrencyFlags", EnumValue = 268435456 },
				{ Name = "CurrencyIsHordeOnly", Type = "CurrencyFlags", EnumValue = 536870912 },
				{ Name = "CurrencyLimitWarmodeBonusOncePerTooltip", Type = "CurrencyFlags", EnumValue = 1073741824 },
				{ Name = "DeprecatedCurrencyFlag", Type = "CurrencyFlags", EnumValue = 2147483648 },
			},
		},
		{
			Name = "CurrencyFlagsB",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 1,
			MaxValue = 4,
			Fields =
			{
				{ Name = "CurrencyBUseTotalEarnedForEarned", Type = "CurrencyFlagsB", EnumValue = 1 },
				{ Name = "CurrencyBShowQuestXPGainInTooltip", Type = "CurrencyFlagsB", EnumValue = 2 },
				{ Name = "CurrencyBNoNotificationMailOnOfflineProgress", Type = "CurrencyFlagsB", EnumValue = 4 },
			},
		},
		{
			Name = "CurrencyGainFlags",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 1,
			MaxValue = 4,
			Fields =
			{
				{ Name = "BonusAward", Type = "CurrencyGainFlags", EnumValue = 1 },
				{ Name = "DroppedFromDeath", Type = "CurrencyGainFlags", EnumValue = 2 },
				{ Name = "FromAccountServer", Type = "CurrencyGainFlags", EnumValue = 4 },
			},
		},
		{
			Name = "CurrencyTokenCategoryFlags",
			Type = "Enumeration",
			NumValues = 4,
			MinValue = 1,
			MaxValue = 8,
			Fields =
			{
				{ Name = "FlagSortLast", Type = "CurrencyTokenCategoryFlags", EnumValue = 1 },
				{ Name = "FlagPlayerItemAssignment", Type = "CurrencyTokenCategoryFlags", EnumValue = 2 },
				{ Name = "Hidden", Type = "CurrencyTokenCategoryFlags", EnumValue = 4 },
				{ Name = "Virtual", Type = "CurrencyTokenCategoryFlags", EnumValue = 8 },
			},
		},
		{
			Name = "LinkedCurrencyFlags",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 1,
			MaxValue = 4,
			Fields =
			{
				{ Name = "IgnoreAdd", Type = "LinkedCurrencyFlags", EnumValue = 1 },
				{ Name = "IgnoreSubtract", Type = "LinkedCurrencyFlags", EnumValue = 2 },
				{ Name = "SuppressChatLog", Type = "LinkedCurrencyFlags", EnumValue = 4 },
			},
		},
		{
			Name = "PlayerCurrencyFlags",
			Type = "Enumeration",
			NumValues = 2,
			MinValue = 1,
			MaxValue = 2,
			Fields =
			{
				{ Name = "Incremented", Type = "PlayerCurrencyFlags", EnumValue = 1 },
				{ Name = "Loading", Type = "PlayerCurrencyFlags", EnumValue = 2 },
			},
		},
		{
			Name = "PlayerCurrencyFlagsDbFlags",
			Type = "Enumeration",
			NumValues = 5,
			MinValue = 1,
			MaxValue = 16,
			Fields =
			{
				{ Name = "IgnoreMaxQtyOnload", Type = "PlayerCurrencyFlagsDbFlags", EnumValue = 1 },
				{ Name = "Reuse1", Type = "PlayerCurrencyFlagsDbFlags", EnumValue = 2 },
				{ Name = "InBackpack", Type = "PlayerCurrencyFlagsDbFlags", EnumValue = 4 },
				{ Name = "UnusedInUI", Type = "PlayerCurrencyFlagsDbFlags", EnumValue = 8 },
				{ Name = "Reuse2", Type = "PlayerCurrencyFlagsDbFlags", EnumValue = 16 },
			},
		},
		{
			Name = "CurrencyConsts",
			Type = "Constants",
			Values =
			{
				{ Name = "PLAYER_CURRENCY_CLIENT_FLAGS", Type = "number", Value = Enum.PlayerCurrencyFlagsDbFlags.InBackpack + Enum.PlayerCurrencyFlagsDbFlags.UnusedInUI },
				{ Name = "MAX_CURRENCY_QUANTITY", Type = "number", Value = 100000000 },
				{ Name = "CONQUEST_ARENA_AND_BG_META_CURRENCY_ID", Type = "number", Value = 483 },
				{ Name = "CONQUEST_RATED_BG_META_CURRENCY_ID", Type = "number", Value = 484 },
				{ Name = "CONQUEST_ASHRAN_META_CURRENCY_ID", Type = "number", Value = 692 },
				{ Name = "ACCOUNT_WIDE_HONOR_CURRENCY_ID", Type = "number", Value = 1585 },
				{ Name = "ACCOUNT_WIDE_HONOR_LEVEL_CURRENCY_ID", Type = "number", Value = 1586 },
				{ Name = "CONQUEST_CURRENCY_ID", Type = "number", Value = 1602 },
				{ Name = "HONOR_CURRENCY_ID", Type = "number", Value = 1792 },
				{ Name = "ARTIFACT_KNOWLEDGE_CURRENCY_ID", Type = "number", Value = 1171 },
				{ Name = "WAR_RESOURCES_CURRENCY_ID", Type = "number", Value = 1560 },
				{ Name = "ECHOES_OF_NYALOTHA_CURRENCY_ID", Type = "number", Value = 1803 },
				{ Name = "QUESTIONMARK_INV_ICON", Type = "number", Value = 134400 },
				{ Name = "CURRENCY_ID_RENOWN", Type = "number", Value = 1822 },
				{ Name = "CURRENCY_ID_RENOWN_KYRIAN", Type = "number", Value = 1829 },
				{ Name = "CURRENCY_ID_RENOWN_VENTHYR", Type = "number", Value = 1830 },
				{ Name = "CURRENCY_ID_RENOWN_NIGHT_FAE", Type = "number", Value = 1831 },
				{ Name = "CURRENCY_ID_RENOWN_NECROLORD", Type = "number", Value = 1832 },
				{ Name = "CURRENCY_ID_WILLING_SOUL", Type = "number", Value = 1810 },
				{ Name = "CURRENCY_ID_RESERVOIR_ANIMA", Type = "number", Value = 1813 },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
		{
			Name = "CursorStyle",
			Type = "Enumeration",
			NumValues = 2,
			MinValue = 0,
			MaxValue = 1,
			Fields =
			{
				{ Name = "Mouse", Type = "CursorStyle", EnumValue = 0 },
				{ Name = "Crosshair", Type = "CursorStyle", EnumValue = 1 },
			},
		},
		{
			Name = "Cursormode",
			Type = "Enumeration",
			NumValues = 58,
			MinValue = 0,
			MaxValue = 57,
			Fields =
			{
				{ Name = "NoCursor", Type = "Cursormode", EnumValue = 0 },
				{ Name = "PointCursor", Type = "Cursormode", EnumValue = 1 },
				{ Name = "CastCursor", Type = "Cursormode", EnumValue = 2 },
				{ Name = "BuyCursor", Type = "Cursormode", EnumValue = 3 },
				{ Name = "AttackCursor", Type = "Cursormode", EnumValue = 4 },
				{ Name = "InteractCursor", Type = "Cursormode", EnumValue = 5 },
				{ Name = "SpeakCursor", Type = "Cursormode", EnumValue = 6 },
				{ Name = "InspectCursor", Type = "Cursormode", EnumValue = 7 },
				{ Name = "PickupCursor", Type = "Cursormode", EnumValue = 8 },
				{ Name = "TaxiCursor", Type = "Cursormode", EnumValue = 9 },
				{ Name = "TrainerCursor", Type = "Cursormode", EnumValue = 10 },
				{ Name = "MineCursor", Type = "Cursormode", EnumValue = 11 },
				{ Name = "SkinCursor", Type = "Cursormode", EnumValue = 12 },
				{ Name = "GatherCursor", Type = "Cursormode", EnumValue = 13 },
				{ Name = "LockCursor", Type = "Cursormode", EnumValue = 14 },
				{ Name = "MailCursor", Type = "Cursormode", EnumValue = 15 },
				{ Name = "LootAllCursor", Type = "Cursormode", EnumValue = 16 },
				{ Name = "RepairCursor", Type = "Cursormode", EnumValue = 17 },
				{ Name = "RepairnpcCursor", Type = "Cursormode", EnumValue = 18 },
				{ Name = "ItemCursor", Type = "Cursormode", EnumValue = 19 },
				{ Name = "SkinHordeCursor", Type = "Cursormode", EnumValue = 20 },
				{ Name = "SkinAllianceCursor", Type = "Cursormode", EnumValue = 21 },
				{ Name = "InnkeeperCursor", Type = "Cursormode", EnumValue = 22 },
				{ Name = "QuestCursor", Type = "Cursormode", EnumValue = 23 },
				{ Name = "QuestRepeatableCursor", Type = "Cursormode", EnumValue = 24 },
				{ Name = "QuestTurninCursor", Type = "Cursormode", EnumValue = 25 },
				{ Name = "VehicleCursor", Type = "Cursormode", EnumValue = 26 },
				{ Name = "UIMoveCursor", Type = "Cursormode", EnumValue = 27 },
				{ Name = "UIResizeCursor", Type = "Cursormode", EnumValue = 28 },
				{ Name = "MapPinCursor", Type = "Cursormode", EnumValue = 29 },
				{ Name = "PointErrorCursor", Type = "Cursormode", EnumValue = 30 },
				{ Name = "CastErrorCursor", Type = "Cursormode", EnumValue = 31 },
				{ Name = "BuyErrorCursor", Type = "Cursormode", EnumValue = 32 },
				{ Name = "AttackErrorCursor", Type = "Cursormode", EnumValue = 33 },
				{ Name = "InteractErrorCursor", Type = "Cursormode", EnumValue = 34 },
				{ Name = "SpeakErrorCursor", Type = "Cursormode", EnumValue = 35 },
				{ Name = "InspectErrorCursor", Type = "Cursormode", EnumValue = 36 },
				{ Name = "PickupErrorCursor", Type = "Cursormode", EnumValue = 37 },
				{ Name = "TaxiErrorCursor", Type = "Cursormode", EnumValue = 38 },
				{ Name = "TrainerErrorCursor", Type = "Cursormode", EnumValue = 39 },
				{ Name = "MineErrorCursor", Type = "Cursormode", EnumValue = 40 },
				{ Name = "SkinErrorCursor", Type = "Cursormode", EnumValue = 41 },
				{ Name = "GatherErrorCursor", Type = "Cursormode", EnumValue = 42 },
				{ Name = "LockErrorCursor", Type = "Cursormode", EnumValue = 43 },
				{ Name = "MailErrorCursor", Type = "Cursormode", EnumValue = 44 },
				{ Name = "LootAllErrorCursor", Type = "Cursormode", EnumValue = 45 },
				{ Name = "RepairErrorCursor", Type = "Cursormode", EnumValue = 46 },
				{ Name = "RepairnpcErrorCursor", Type = "Cursormode", EnumValue = 47 },
				{ Name = "ItemErrorCursor", Type = "Cursormode", EnumValue = 48 },
				{ Name = "SkinHordeErrorCursor", Type = "Cursormode", EnumValue = 49 },
				{ Name = "SkinAllianceErrorCursor", Type = "Cursormode", EnumValue = 50 },
				{ Name = "InnkeeperErrorCursor", Type = "Cursormode", EnumValue = 51 },
				{ Name = "QuestErrorCursor", Type = "Cursormode", EnumValue = 52 },
				{ Name = "QuestRepeatableErrorCursor", Type = "Cursormode", EnumValue = 53 },
				{ Name = "QuestTurninErrorCursor", Type = "Cursormode", EnumValue = 54 },
				{ Name = "VehicleErrorCursor", Type = "Cursormode", EnumValue = 55 },
				{ Name = "MapPinErrorCursor", Type = "Cursormode", EnumValue = 56 },
				{ Name = "CustomCursor", Type = "Cursormode", EnumValue = 57 },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
		{
			Name = "Damageclass",
			Type = "Enumeration",
			NumValues = 47,
			MinValue = 0,
			MaxValue = 127,
			Fields =
			{
				{ Name = "Physical", Type = "Damageclass", EnumValue = 0 },
				{ Name = "Holy", Type = "Damageclass", EnumValue = 1 },
				{ Name = "Fire", Type = "Damageclass", EnumValue = 2 },
				{ Name = "Nature", Type = "Damageclass", EnumValue = 3 },
				{ Name = "Frost", Type = "Damageclass", EnumValue = 4 },
				{ Name = "Shadow", Type = "Damageclass", EnumValue = 5 },
				{ Name = "Arcane", Type = "Damageclass", EnumValue = 6 },
				{ Name = "NumClasses", Type = "Damageclass", EnumValue = 7 },
				{ Name = "FirstResist", Type = "Damageclass", EnumValue = 2 },
				{ Name = "LastResist", Type = "Damageclass", EnumValue = 6 },
				{ Name = "MaskNone", Type = "Damageclass", EnumValue = 0 },
				{ Name = "MaskPhysical", Type = "Damageclass", EnumValue = 1 },
				{ Name = "MaskHoly", Type = "Damageclass", EnumValue = 2 },
				{ Name = "MaskFire", Type = "Damageclass", EnumValue = 4 },
				{ Name = "MaskNature", Type = "Damageclass", EnumValue = 8 },
				{ Name = "MaskFrost", Type = "Damageclass", EnumValue = 16 },
				{ Name = "MaskShadow", Type = "Damageclass", EnumValue = 32 },
				{ Name = "MaskArcane", Type = "Damageclass", EnumValue = 64 },
				{ Name = "AllPhysical", Type = "Damageclass", EnumValue = 1 },
				{ Name = "AllMagical", Type = "Damageclass", EnumValue = 126 },
				{ Name = "All", Type = "Damageclass", EnumValue = 127 },
				{ Name = "MaskFlamestrike", Type = "Damageclass", EnumValue = 5 },
				{ Name = "MaskFroststrike", Type = "Damageclass", EnumValue = 17 },
				{ Name = "MaskSpellstrike", Type = "Damageclass", EnumValue = 65 },
				{ Name = "MaskShadowstrike", Type = "Damageclass", EnumValue = 33 },
				{ Name = "MaskStormstrike", Type = "Damageclass", EnumValue = 9 },
				{ Name = "MaskHolystrike", Type = "Damageclass", EnumValue = 3 },
				{ Name = "MaskFrostfire", Type = "Damageclass", EnumValue = 20 },
				{ Name = "MaskSpellfire", Type = "Damageclass", EnumValue = 68 },
				{ Name = "MaskFirestorm", Type = "Damageclass", EnumValue = 12 },
				{ Name = "MaskShadowflame", Type = "Damageclass", EnumValue = 36 },
				{ Name = "MaskHolyfire", Type = "Damageclass", EnumValue = 6 },
				{ Name = "MaskSpellfrost", Type = "Damageclass", EnumValue = 80 },
				{ Name = "MaskFroststorm", Type = "Damageclass", EnumValue = 24 },
				{ Name = "MaskShadowfrost", Type = "Damageclass", EnumValue = 48 },
				{ Name = "MaskHolyfrost", Type = "Damageclass", EnumValue = 18 },
				{ Name = "MaskSpellstorm", Type = "Damageclass", EnumValue = 72 },
				{ Name = "MaskSpellshadow", Type = "Damageclass", EnumValue = 96 },
				{ Name = "MaskDivine", Type = "Damageclass", EnumValue = 66 },
				{ Name = "MaskShadowstorm", Type = "Damageclass", EnumValue = 40 },
				{ Name = "MaskHolystorm", Type = "Damageclass", EnumValue = 10 },
				{ Name = "MaskTwilight", Type = "Damageclass", EnumValue = 34 },
				{ Name = "MaskElemental", Type = "Damageclass", EnumValue = 28 },
				{ Name = "MaskChromatic", Type = "Damageclass", EnumValue = 62 },
				{ Name = "MaskMagical", Type = "Damageclass", EnumValue = 126 },
				{ Name = "MaskChaos", Type = "Damageclass", EnumValue = 124 },
				{ Name = "MaskCosmic", Type = "Damageclass", EnumValue = 106 },
			},
		},
		{
			Name = "DamageclassType",
			Type = "Enumeration",
			NumValues = 2,
			MinValue = 0,
			MaxValue = 1,
			Fields =
			{
				{ Name = "Physical", Type = "DamageclassType", EnumValue = 0 },
				{ Name = "Magical", Type = "DamageclassType", EnumValue = 1 },
			},
		},
		{
			Name = "EnvironmentalDamageFlags",
			Type = "Enumeration",
			NumValues = 2,
			MinValue = 1,
			MaxValue = 2,
			Fields =
			{
				{ Name = "OneTime", Type = "EnvironmentalDamageFlags", EnumValue = 1 },
				{ Name = "DmgIsPct", Type = "EnvironmentalDamageFlags", EnumValue = 2 },
			},
		},
		{
			Name = "Environmentaldamagetype",
			Type = "Enumeration",
			NumValues = 6,
			MinValue = 0,
			MaxValue = 5,
			Fields =
			{
				{ Name = "Fatigue", Type = "Environmentaldamagetype", EnumValue = 0 },
				{ Name = "Drowning", Type = "Environmentaldamagetype", EnumValue = 1 },
				{ Name = "Falling", Type = "Environmentaldamagetype", EnumValue = 2 },
				{ Name = "Lava", Type = "Environmentaldamagetype", EnumValue = 3 },
				{ Name = "Slime", Type = "Environmentaldamagetype", EnumValue = 4 },
				{ Name = "Fire", Type = "Environmentaldamagetype", EnumValue = 5 },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
		{
			Name = "ActionBarOrientation",
			Type = "Enumeration",
			NumValues = 2,
			MinValue = 0,
			MaxValue = 1,
			Fields =
			{
				{ Name = "Horizontal", Type = "ActionBarOrientation", EnumValue = 0 },
				{ Name = "Vertical", Type = "ActionBarOrientation", EnumValue = 1 },
			},
		},
		{
			Name = "ActionBarVisibleSetting",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 0,
			MaxValue = 2,
			Fields =
			{
				{ Name = "Always", Type = "ActionBarVisibleSetting", EnumValue = 0 },
				{ Name = "InCombat", Type = "ActionBarVisibleSetting", EnumValue = 1 },
				{ Name = "OutOfCombat", Type = "ActionBarVisibleSetting", EnumValue = 2 },
			},
		},
		{
			Name = "CastBarSize",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 0,
			MaxValue = 2,
			Fields =
			{
				{ Name = "Small", Type = "CastBarSize", EnumValue = 0 },
				{ Name = "Medium", Type = "CastBarSize", EnumValue = 1 },
				{ Name = "Large", Type = "CastBarSize", EnumValue = 2 },
			},
		},
		{
			Name = "EditModeActionBarSetting",
			Type = "Enumeration",
			NumValues = 10,
			MinValue = 0,
			MaxValue = 9,
			Fields =
			{
				{ Name = "Orientation", Type = "EditModeActionBarSetting", EnumValue = 0 },
				{ Name = "NumRows", Type = "EditModeActionBarSetting", EnumValue = 1 },
				{ Name = "NumIcons", Type = "EditModeActionBarSetting", EnumValue = 2 },
				{ Name = "IconSize", Type = "EditModeActionBarSetting", EnumValue = 3 },
				{ Name = "IconPadding", Type = "EditModeActionBarSetting", EnumValue = 4 },
				{ Name = "VisibleSetting", Type = "EditModeActionBarSetting", EnumValue = 5 },
				{ Name = "HideBarArt", Type = "EditModeActionBarSetting", EnumValue = 6 },
				{ Name = "SnapToSide", Type = "EditModeActionBarSetting", EnumValue = 7 },
				{ Name = "HideBarScrolling", Type = "EditModeActionBarSetting", EnumValue = 8 },
				{ Name = "AlwaysShowButtons", Type = "EditModeActionBarSetting", EnumValue = 9 },
			},
		},
		{
			Name = "EditModeCastBarSetting",
			Type = "Enumeration",
			NumValues = 1,
			MinValue = 0,
			MaxValue = 0,
			Fields =
			{
				{ Name = "BarSize", Type = "EditModeCastBarSetting", EnumValue = 0 },
			},
		},
		{
			Name = "EditModeLayoutType",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 0,
			MaxValue = 2,
			Fields =
			{
				{ Name = "Preset", Type = "EditModeLayoutType", EnumValue = 0 },
				{ Name = "Account", Type = "EditModeLayoutType", EnumValue = 1 },
				{ Name = "Character", Type = "EditModeLayoutType", EnumValue = 2 },
			},
		},
		{
			Name = "EditModeMinimapSetting",
			Type = "Enumeration",
			NumValues = 1,
			MinValue = 0,
			MaxValue = 0,
			Fields =
			{
				{ Name = "HeaderUnderneath", Type = "EditModeMinimapSetting", EnumValue = 0 },
			},
		},
		{
			Name = "EditModePresetLayouts",
			Type = "Enumeration",
			NumValues = 2,
			MinValue = 0,
			MaxValue = 1,
			Fields =
			{
				{ Name = "Modern", Type = "EditModePresetLayouts", EnumValue = 0 },
				{ Name = "Classic", Type = "EditModePresetLayouts", EnumValue = 1 },
			},
		},
		{
			Name = "EditModeSettingDisplayType",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 0,
			MaxValue = 2,
			Fields =
			{
				{ Name = "Dropdown", Type = "EditModeSettingDisplayType", EnumValue = 0 },
				{ Name = "Checkbox", Type = "EditModeSettingDisplayType", EnumValue = 1 },
				{ Name = "Slider", Type = "EditModeSettingDisplayType", EnumValue = 2 },
			},
		},
		{
			Name = "EditModeSystem",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 0,
			MaxValue = 2,
			Fields =
			{
				{ Name = "ActionBar", Type = "EditModeSystem", EnumValue = 0 },
				{ Name = "CastBar", Type = "EditModeSystem", EnumValue = 1 },
				{ Name = "Minimap", Type = "EditModeSystem", EnumValue = 2 },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
		{
			Name = "GamePadPowerLevel",
			Type = "Enumeration",
			NumValues = 6,
			MinValue = 0,
			MaxValue = 5,
			Fields =
			{
				{ Name = "Critical", Type = "GamePadPowerLevel", EnumValue = 0 },
				{ Name = "Low", Type = "GamePadPowerLevel", EnumValue = 1 },
				{ Name = "Medium", Type = "GamePadPowerLevel", EnumValue = 2 },
				{ Name = "High", Type = "GamePadPowerLevel", EnumValue = 3 },
				{ Name = "Wired", Type = "GamePadPowerLevel", EnumValue = 4 },
				{ Name = "Unknown", Type = "GamePadPowerLevel", EnumValue = 5 },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
		{
			Name = "ContributionState",
			Type = "Enumeration",
			NumValues = 5,
			MinValue = 0,
			MaxValue = 4,
			Fields =
			{
				{ Name = "None", Type = "ContributionState", EnumValue = 0 },
				{ Name = "Building", Type = "ContributionState", EnumValue = 1 },
				{ Name = "Active", Type = "ContributionState", EnumValue = 2 },
				{ Name = "UnderAttack", Type = "ContributionState", EnumValue = 3 },
				{ Name = "Destroyed", Type = "ContributionState", EnumValue = 4 },
			},
		},
		{
			Name = "CovenantSkill",
			Type = "Enumeration",
			NumValues = 4,
			MinValue = 2730,
			MaxValue = 2733,
			Fields =
			{
				{ Name = "Kyrian", Type = "CovenantSkill", EnumValue = 2730 },
				{ Name = "Venthyr", Type = "CovenantSkill", EnumValue = 2731 },
				{ Name = "NightFae", Type = "CovenantSkill", EnumValue = 2732 },
				{ Name = "Necrolord", Type = "CovenantSkill", EnumValue = 2733 },
			},
		},
		{
			Name = "CovenantType",
			Type = "Enumeration",
			NumValues = 5,
			MinValue = 0,
			MaxValue = 4,
			Fields =
			{
				{ Name = "None", Type = "CovenantType", EnumValue = 0 },
				{ Name = "Kyrian", Type = "CovenantType", EnumValue = 1 },
				{ Name = "Venthyr", Type = "CovenantType", EnumValue = 2 },
				{ Name = "NightFae", Type = "CovenantType", EnumValue = 3 },
				{ Name = "Necrolord", Type = "CovenantType", EnumValue = 4 },
			},
		},
		{
			Name = "FollowerAbilityCastResult",
			Type = "Enumeration",
			NumValues = 15,
			MinValue = 0,
			MaxValue = 14,
			Fields =
			{
				{ Name = "Success", Type = "FollowerAbilityCastResult", EnumValue = 0 },
				{ Name = "Failure", Type = "FollowerAbilityCastResult", EnumValue = 1 },
				{ Name = "NoPendingCast", Type = "FollowerAbilityCastResult", EnumValue = 2 },
				{ Name = "InvalidTarget", Type = "FollowerAbilityCastResult", EnumValue = 3 },
				{ Name = "InvalidFollowerSpell", Type = "FollowerAbilityCastResult", EnumValue = 4 },
				{ Name = "RerollNotAllowed", Type = "FollowerAbilityCastResult", EnumValue = 5 },
				{ Name = "SingleMissionDuration", Type = "FollowerAbilityCastResult", EnumValue = 6 },
				{ Name = "MustTargetFollower", Type = "FollowerAbilityCastResult", EnumValue = 7 },
				{ Name = "MustTargetTrait", Type = "FollowerAbilityCastResult", EnumValue = 8 },
				{ Name = "InvalidFollowerType", Type = "FollowerAbilityCastResult", EnumValue = 9 },
				{ Name = "MustBeUnique", Type = "FollowerAbilityCastResult", EnumValue = 10 },
				{ Name = "CannotTargetLimitedUseFollower", Type = "FollowerAbilityCastResult", EnumValue = 11 },
				{ Name = "MustTargetLimitedUseFollower", Type = "FollowerAbilityCastResult", EnumValue = 12 },
				{ Name = "AlreadyAtMaxDurability", Type = "FollowerAbilityCastResult", EnumValue = 13 },
				{ Name = "CannotTargetNonAutoMissionFollower", Type = "FollowerAbilityCastResult", EnumValue = 14 },
			},
		},
		{
			Name = "GarrAutoBoardIndex",
			Type = "Enumeration",
			NumValues = 14,
			MinValue = -1,
			MaxValue = 12,
			Fields =
			{
				{ Name = "None", Type = "GarrAutoBoardIndex", EnumValue = -1 },
				{ Name = "AllyLeftBack", Type = "GarrAutoBoardIndex", EnumValue = 0 },
				{ Name = "AllyRightBack", Type = "GarrAutoBoardIndex", EnumValue = 1 },
				{ Name = "AllyLeftFront", Type = "GarrAutoBoardIndex", EnumValue = 2 },
				{ Name = "AllyCenterFront", Type = "GarrAutoBoardIndex", EnumValue = 3 },
				{ Name = "AllyRightFront", Type = "GarrAutoBoardIndex", EnumValue = 4 },
				{ Name = "EnemyLeftFront", Type = "GarrAutoBoardIndex", EnumValue = 5 },
				{ Name = "EnemyCenterLeftFront", Type = "GarrAutoBoardIndex", EnumValue = 6 },
				{ Name = "EnemyCenterRightFront", Type = "GarrAutoBoardIndex", EnumValue = 7 },
				{ Name = "EnemyRightFront", Type = "GarrAutoBoardIndex", EnumValue = 8 },
				{ Name = "EnemyLeftBack", Type = "GarrAutoBoardIndex", EnumValue = 9 },
				{ Name = "EnemyCenterLeftBack", Type = "GarrAutoBoardIndex", EnumValue = 10 },
				{ Name = "EnemyCenterRightBack", Type = "GarrAutoBoardIndex", EnumValue = 11 },
				{ Name = "EnemyRightBack", Type = "GarrAutoBoardIndex", EnumValue = 12 },
			},
		},
		{
			Name = "GarrAutoCombatSpellTutorialFlag",
			Type = "Enumeration",
			NumValues = 5,
			MinValue = 0,
			MaxValue = 4,
			Fields =
			{
				{ Name = "None", Type = "GarrAutoCombatSpellTutorialFlag", EnumValue = 0 },
				{ Name = "Single", Type = "GarrAutoCombatSpellTutorialFlag", EnumValue = 1 },
				{ Name = "Column", Type = "GarrAutoCombatSpellTutorialFlag", EnumValue = 2 },
				{ Name = "Row", Type = "GarrAutoCombatSpellTutorialFlag", EnumValue = 3 },
				{ Name = "All", Type = "GarrAutoCombatSpellTutorialFlag", EnumValue = 4 },
			},
		},
		{
			Name = "GarrAutoCombatTutorial",
			Type = "Enumeration",
			NumValues = 11,
			MinValue = 1,
			MaxValue = 1024,
			Fields =
			{
				{ Name = "SelectMission", Type = "GarrAutoCombatTutorial", EnumValue = 1 },
				{ Name = "PlaceCompanion", Type = "GarrAutoCombatTutorial", EnumValue = 2 },
				{ Name = "HealCompanion", Type = "GarrAutoCombatTutorial", EnumValue = 4 },
				{ Name = "LevelHeal", Type = "GarrAutoCombatTutorial", EnumValue = 8 },
				{ Name = "BeneficialEffect", Type = "GarrAutoCombatTutorial", EnumValue = 16 },
				{ Name = "AttackSingle", Type = "GarrAutoCombatTutorial", EnumValue = 32 },
				{ Name = "AttackColumn", Type = "GarrAutoCombatTutorial", EnumValue = 64 },
				{ Name = "AttackRow", Type = "GarrAutoCombatTutorial", EnumValue = 128 },
				{ Name = "AttackAll", Type = "GarrAutoCombatTutorial", EnumValue = 256 },
				{ Name = "TroopTutorial", Type = "GarrAutoCombatTutorial", EnumValue = 512 },
				{ Name = "EnvironmentalEffect", Type = "GarrAutoCombatTutorial", EnumValue = 1024 },
			},
		},
		{
			Name = "GarrAutoCombatantRole",
			Type = "Enumeration",
			NumValues = 6,
			MinValue = 0,
			MaxValue = 5,
			Fields =
			{
				{ Name = "None", Type = "GarrAutoCombatantRole", EnumValue = 0 },
				{ Name = "Melee", Type = "GarrAutoCombatantRole", EnumValue = 1 },
				{ Name = "RangedPhysical", Type = "GarrAutoCombatantRole", EnumValue = 2 },
				{ Name = "RangedMagic", Type = "GarrAutoCombatantRole", EnumValue = 3 },
				{ Name = "HealSupport", Type = "GarrAutoCombatantRole", EnumValue = 4 },
				{ Name = "Tank", Type = "GarrAutoCombatantRole", EnumValue = 5 },
			},
		},
		{
			Name = "GarrAutoEventFlags",
			Type = "Enumeration",
			NumValues = 4,
			MinValue = 0,
			MaxValue = 4,
			Fields =
			{
				{ Name = "None", Type = "GarrAutoEventFlags", EnumValue = 0 },
				{ Name = "AutoAttack", Type = "GarrAutoEventFlags", EnumValue = 1 },
				{ Name = "Passive", Type = "GarrAutoEventFlags", EnumValue = 2 },
				{ Name = "Environment", Type = "GarrAutoEventFlags", EnumValue = 4 },
			},
		},
		{
			Name = "GarrAutoMissionEventType",
			Type = "Enumeration",
			NumValues = 10,
			MinValue = 0,
			MaxValue = 9,
			Fields =
			{
				{ Name = "MeleeDamage", Type = "GarrAutoMissionEventType", EnumValue = 0 },
				{ Name = "RangeDamage", Type = "GarrAutoMissionEventType", EnumValue = 1 },
				{ Name = "SpellMeleeDamage", Type = "GarrAutoMissionEventType", EnumValue = 2 },
				{ Name = "SpellRangeDamage", Type = "GarrAutoMissionEventType", EnumValue = 3 },
				{ Name = "Heal", Type = "GarrAutoMissionEventType", EnumValue = 4 },
				{ Name = "PeriodicDamage", Type = "GarrAutoMissionEventType", EnumValue = 5 },
				{ Name = "PeriodicHeal", Type = "GarrAutoMissionEventType", EnumValue = 6 },
				{ Name = "ApplyAura", Type = "GarrAutoMissionEventType", EnumValue = 7 },
				{ Name = "RemoveAura", Type = "GarrAutoMissionEventType", EnumValue = 8 },
				{ Name = "Died", Type = "GarrAutoMissionEventType", EnumValue = 9 },
			},
		},
		{
			Name = "GarrAutoPreviewTargetType",
			Type = "Enumeration",
			NumValues = 5,
			MinValue = 0,
			MaxValue = 8,
			Fields =
			{
				{ Name = "None", Type = "GarrAutoPreviewTargetType", EnumValue = 0 },
				{ Name = "Damage", Type = "GarrAutoPreviewTargetType", EnumValue = 1 },
				{ Name = "Heal", Type = "GarrAutoPreviewTargetType", EnumValue = 2 },
				{ Name = "Buff", Type = "GarrAutoPreviewTargetType", EnumValue = 4 },
				{ Name = "Debuff", Type = "GarrAutoPreviewTargetType", EnumValue = 8 },
			},
		},
		{
			Name = "GarrFollowerMissionCompleteState",
			Type = "Enumeration",
			NumValues = 4,
			MinValue = 0,
			MaxValue = 3,
			Fields =
			{
				{ Name = "Alive", Type = "GarrFollowerMissionCompleteState", EnumValue = 0 },
				{ Name = "KilledByMissionFailure", Type = "GarrFollowerMissionCompleteState", EnumValue = 1 },
				{ Name = "SavedByPreventDeath", Type = "GarrFollowerMissionCompleteState", EnumValue = 2 },
				{ Name = "OutOfDurability", Type = "GarrFollowerMissionCompleteState", EnumValue = 3 },
			},
		},
		{
			Name = "GarrFollowerQuality",
			Type = "Enumeration",
			NumValues = 7,
			MinValue = 0,
			MaxValue = 6,
			Fields =
			{
				{ Name = "None", Type = "GarrFollowerQuality", EnumValue = 0 },
				{ Name = "Common", Type = "GarrFollowerQuality", EnumValue = 1 },
				{ Name = "Uncommon", Type = "GarrFollowerQuality", EnumValue = 2 },
				{ Name = "Rare", Type = "GarrFollowerQuality", EnumValue = 3 },
				{ Name = "Epic", Type = "GarrFollowerQuality", EnumValue = 4 },
				{ Name = "Legendary", Type = "GarrFollowerQuality", EnumValue = 5 },
				{ Name = "Title", Type = "GarrFollowerQuality", EnumValue = 6 },
			},
		},
		{
			Name = "GarrTalentCostType",
			Type = "Enumeration",
			NumValues = 4,
			MinValue = 0,
			MaxValue = 3,
			Fields =
			{
				{ Name = "Initial", Type = "GarrTalentCostType", EnumValue = 0 },
				{ Name = "Respec", Type = "GarrTalentCostType", EnumValue = 1 },
				{ Name = "MakePermanent", Type = "GarrTalentCostType", EnumValue = 2 },
				{ Name = "TreeReset", Type = "GarrTalentCostType", EnumValue = 3 },
			},
		},
		{
			Name = "GarrTalentFeatureSubtype",
			Type = "Enumeration",
			NumValues = 5,
			MinValue = 0,
			MaxValue = 4,
			Fields =
			{
				{ Name = "Generic", Type = "GarrTalentFeatureSubtype", EnumValue = 0 },
				{ Name = "Bastion", Type = "GarrTalentFeatureSubtype", EnumValue = 1 },
				{ Name = "Revendreth", Type = "GarrTalentFeatureSubtype", EnumValue = 2 },
				{ Name = "Ardenweald", Type = "GarrTalentFeatureSubtype", EnumValue = 3 },
				{ Name = "Maldraxxus", Type = "GarrTalentFeatureSubtype", EnumValue = 4 },
			},
		},
		{
			Name = "GarrTalentFeatureType",
			Type = "Enumeration",
			NumValues = 9,
			MinValue = 0,
			MaxValue = 8,
			Fields =
			{
				{ Name = "Generic", Type = "GarrTalentFeatureType", EnumValue = 0 },
				{ Name = "AnimaDiversion", Type = "GarrTalentFeatureType", EnumValue = 1 },
				{ Name = "TravelPortals", Type = "GarrTalentFeatureType", EnumValue = 2 },
				{ Name = "Adventures", Type = "GarrTalentFeatureType", EnumValue = 3 },
				{ Name = "ReservoirUpgrades", Type = "GarrTalentFeatureType", EnumValue = 4 },
				{ Name = "SanctumUnique", Type = "GarrTalentFeatureType", EnumValue = 5 },
				{ Name = "SoulBinds", Type = "GarrTalentFeatureType", EnumValue = 6 },
				{ Name = "AnimaDiversionMap", Type = "GarrTalentFeatureType", EnumValue = 7 },
				{ Name = "Cyphers", Type = "GarrTalentFeatureType", EnumValue = 8 },
			},
		},
		{
			Name = "GarrTalentResearchCostSource",
			Type = "Enumeration",
			NumValues = 2,
			MinValue = 0,
			MaxValue = 1,
			Fields =
			{
				{ Name = "Talent", Type = "GarrTalentResearchCostSource", EnumValue = 0 },
				{ Name = "Tree", Type = "GarrTalentResearchCostSource", EnumValue = 1 },
			},
		},
		{
			Name = "GarrTalentSocketType",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 0,
			MaxValue = 2,
			Fields =
			{
				{ Name = "None", Type = "GarrTalentSocketType", EnumValue = 0 },
				{ Name = "Spell", Type = "GarrTalentSocketType", EnumValue = 1 },
				{ Name = "Conduit", Type = "GarrTalentSocketType", EnumValue = 2 },
			},
		},
		{
			Name = "GarrTalentTreeType",
			Type = "Enumeration",
			NumValues = 2,
			MinValue = 0,
			MaxValue = 1,
			Fields =
			{
				{ Name = "Tiers", Type = "GarrTalentTreeType", EnumValue = 0 },
				{ Name = "Classic", Type = "GarrTalentTreeType", EnumValue = 1 },
			},
		},
		{
			Name = "GarrTalentType",
			Type = "Enumeration",
			NumValues = 4,
			MinValue = 0,
			MaxValue = 3,
			Fields =
			{
				{ Name = "Standard", Type = "GarrTalentType", EnumValue = 0 },
				{ Name = "Minor", Type = "GarrTalentType", EnumValue = 1 },
				{ Name = "Major", Type = "GarrTalentType", EnumValue = 2 },
				{ Name = "Socket", Type = "GarrTalentType", EnumValue = 3 },
			},
		},
		{
			Name = "GarrTalentUI",
			Type = "Enumeration",
			NumValues = 4,
			MinValue = 0,
			MaxValue = 3,
			Fields =
			{
				{ Name = "Generic", Type = "GarrTalentUI", EnumValue = 0 },
				{ Name = "CovenantSanctum", Type = "GarrTalentUI", EnumValue = 1 },
				{ Name = "SoulBinds", Type = "GarrTalentUI", EnumValue = 2 },
				{ Name = "AnimaDiversionMap", Type = "GarrTalentUI", EnumValue = 3 },
			},
		},
		{
			Name = "GarrisonFollowerType",
			Type = "Enumeration",
			NumValues = 5,
			MinValue = 1,
			MaxValue = 123,
			Fields =
			{
				{ Name = "FollowerType_6_0", Type = "GarrisonFollowerType", EnumValue = 1 },
				{ Name = "FollowerType_6_2", Type = "GarrisonFollowerType", EnumValue = 2 },
				{ Name = "FollowerType_7_0", Type = "GarrisonFollowerType", EnumValue = 4 },
				{ Name = "FollowerType_8_0", Type = "GarrisonFollowerType", EnumValue = 22 },
				{ Name = "FollowerType_9_0", Type = "GarrisonFollowerType", EnumValue = 123 },
			},
		},
		{
			Name = "GarrisonTalentAvailability",
			Type = "Enumeration",
			NumValues = 9,
			MinValue = 0,
			MaxValue = 8,
			Fields =
			{
				{ Name = "Available", Type = "GarrisonTalentAvailability", EnumValue = 0 },
				{ Name = "Unavailable", Type = "GarrisonTalentAvailability", EnumValue = 1 },
				{ Name = "UnavailableAnotherIsResearching", Type = "GarrisonTalentAvailability", EnumValue = 2 },
				{ Name = "UnavailableNotEnoughResources", Type = "GarrisonTalentAvailability", EnumValue = 3 },
				{ Name = "UnavailableNotEnoughGold", Type = "GarrisonTalentAvailability", EnumValue = 4 },
				{ Name = "UnavailableTierUnavailable", Type = "GarrisonTalentAvailability", EnumValue = 5 },
				{ Name = "UnavailablePlayerCondition", Type = "GarrisonTalentAvailability", EnumValue = 6 },
				{ Name = "UnavailableAlreadyHave", Type = "GarrisonTalentAvailability", EnumValue = 7 },
				{ Name = "UnavailableRequiresPrerequisiteTalent", Type = "GarrisonTalentAvailability", EnumValue = 8 },
			},
		},
		{
			Name = "GarrisonType",
			Type = "Enumeration",
			NumValues = 4,
			MinValue = 2,
			MaxValue = 111,
			Fields =
			{
				{ Name = "Type_6_0", Type = "GarrisonType", EnumValue = 2 },
				{ Name = "Type_7_0", Type = "GarrisonType", EnumValue = 3 },
				{ Name = "Type_8_0", Type = "GarrisonType", EnumValue = 9 },
				{ Name = "Type_9_0", Type = "GarrisonType", EnumValue = 111 },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
		{
			Name = "InputContext",
			Type = "Enumeration",
			NumValues = 4,
			MinValue = 0,
			MaxValue = 3,
			Fields =
			{
				{ Name = "None", Type = "InputContext", EnumValue = 0 },
				{ Name = "Keyboard", Type = "InputContext", EnumValue = 1 },
				{ Name = "Mouse", Type = "InputContext", EnumValue = 2 },
				{ Name = "GamePad", Type = "InputContext", EnumValue = 3 },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
		{
			Name = "InventoryType",
			Type = "Enumeration",
			NumValues = 35,
			MinValue = 0,
			MaxValue = 34,
			Fields =
			{
				{ Name = "IndexNonEquipType", Type = "InventoryType", EnumValue = 0 },
				{ Name = "IndexHeadType", Type = "InventoryType", EnumValue = 1 },
				{ Name = "IndexNeckType", Type = "InventoryType", EnumValue = 2 },
				{ Name = "IndexShoulderType", Type = "InventoryType", EnumValue = 3 },
				{ Name = "IndexBodyType", Type = "InventoryType", EnumValue = 4 },
				{ Name = "IndexChestType", Type = "InventoryType", EnumValue = 5 },
				{ Name = "IndexWaistType", Type = "InventoryType", EnumValue = 6 },
				{ Name = "IndexLegsType", Type = "InventoryType", EnumValue = 7 },
				{ Name = "IndexFeetType", Type = "InventoryType", EnumValue = 8 },
				{ Name = "IndexWristType", Type = "InventoryType", EnumValue = 9 },
				{ Name = "IndexHandType", Type = "InventoryType", EnumValue = 10 },
				{ Name = "IndexFingerType", Type = "InventoryType", EnumValue = 11 },
				{ Name = "IndexTrinketType", Type = "InventoryType", EnumValue = 12 },
				{ Name = "IndexWeaponType", Type = "InventoryType", EnumValue = 13 },
				{ Name = "IndexShieldType", Type = "InventoryType", EnumValue = 14 },
				{ Name = "IndexRangedType", Type = "InventoryType", EnumValue = 15 },
				{ Name = "IndexCloakType", Type = "InventoryType", EnumValue = 16 },
				{ Name = "Index2HweaponType", Type = "InventoryType", EnumValue = 17 },
				{ Name = "IndexBagType", Type = "InventoryType", EnumValue = 18 },
				{ Name = "IndexTabardType", Type = "InventoryType", EnumValue = 19 },
				{ Name = "IndexRobeType", Type = "InventoryType", EnumValue = 20 },
				{ Name = "IndexWeaponmainhandType", Type = "InventoryType", EnumValue = 21 },
				{ Name = "IndexWeaponoffhandType", Type = "InventoryType", EnumValue = 22 },
				{ Name = "IndexHoldableType", Type = "InventoryType", EnumValue = 23 },
				{ Name = "IndexAmmoType", Type = "InventoryType", EnumValue = 24 },
				{ Name = "IndexThrownType", Type = "InventoryType", EnumValue = 25 },
				{ Name = "IndexRangedrightType", Type = "InventoryType", EnumValue = 26 },
				{ Name = "IndexQuiverType", Type = "InventoryType", EnumValue = 27 },
				{ Name = "IndexRelicType", Type = "InventoryType", EnumValue = 28 },
				{ Name = "IndexProfessionToolType", Type = "InventoryType", EnumValue = 29 },
				{ Name = "IndexProfessionGearType", Type = "InventoryType", EnumValue = 30 },
				{ Name = "IndexEquipablespellOffensiveType", Type = "InventoryType", EnumValue = 31 },
				{ Name = "IndexEquipablespellUtilityType", Type = "InventoryType", EnumValue = 32 },
				{ Name = "IndexEquipablespellDefensiveType", Type = "InventoryType", EnumValue = 33 },
				{ Name = "IndexEquipablespellMobilityType", Type = "InventoryType", EnumValue = 34 },
			},
		},
		{
			Name = "ItemArmorSubclass",
			Type = "Enumeration",
			NumValues = 12,
			MinValue = 0,
			MaxValue = 11,
			Fields =
			{
				{ Name = "Generic", Type = "ItemArmorSubclass", EnumValue = 0 },
				{ Name = "Cloth", Type = "ItemArmorSubclass", EnumValue = 1 },
				{ Name = "Leather", Type = "ItemArmorSubclass", EnumValue = 2 },
				{ Name = "Mail", Type = "ItemArmorSubclass", EnumValue = 3 },
				{ Name = "Plate", Type = "ItemArmorSubclass", EnumValue = 4 },
				{ Name = "Cosmetic", Type = "ItemArmorSubclass", EnumValue = 5 },
				{ Name = "Shield", Type = "ItemArmorSubclass", EnumValue = 6 },
				{ Name = "Libram", Type = "ItemArmorSubclass", EnumValue = 7 },
				{ Name = "Idol", Type = "ItemArmorSubclass", EnumValue = 8 },
				{ Name = "Totem", Type = "ItemArmorSubclass", EnumValue = 9 },
				{ Name = "Sigil", Type = "ItemArmorSubclass", EnumValue = 10 },
				{ Name = "Relic", Type = "ItemArmorSubclass", EnumValue = 11 },
			},
		},
		{
			Name = "ItemClass",
			Type = "Enumeration",
			NumValues = 20,
			MinValue = 0,
			MaxValue = 19,
			Fields =
			{
				{ Name = "Consumable", Type = "ItemClass", EnumValue = 0 },
				{ Name = "Container", Type = "ItemClass", EnumValue = 1 },
				{ Name = "Weapon", Type = "ItemClass", EnumValue = 2 },
				{ Name = "Gem", Type = "ItemClass", EnumValue = 3 },
				{ Name = "Armor", Type = "ItemClass", EnumValue = 4 },
				{ Name = "Reagent", Type = "ItemClass", EnumValue = 5 },
				{ Name = "Projectile", Type = "ItemClass", EnumValue = 6 },
				{ Name = "Tradegoods", Type = "ItemClass", EnumValue = 7 },
				{ Name = "ItemEnhancement", Type = "ItemClass", EnumValue = 8 },
				{ Name = "Recipe", Type = "ItemClass", EnumValue = 9 },
				{ Name = "CurrencyTokenObsolete", Type = "ItemClass", EnumValue = 10 },
				{ Name = "Quiver", Type = "ItemClass", EnumValue = 11 },
				{ Name = "Questitem", Type = "ItemClass", EnumValue = 12 },
				{ Name = "Key", Type = "ItemClass", EnumValue = 13 },
				{ Name = "PermanentObsolete", Type = "ItemClass", EnumValue = 14 },
				{ Name = "Miscellaneous", Type = "ItemClass", EnumValue = 15 },
				{ Name = "Glyph", Type = "ItemClass", EnumValue = 16 },
				{ Name = "Battlepet", Type = "ItemClass", EnumValue = 17 },
				{ Name = "WoWToken", Type = "ItemClass", EnumValue = 18 },
				{ Name = "Profession", Type = "ItemClass", EnumValue = 19 },
			},
		},
		{
			Name = "ItemConsumableSubclass",
			Type = "Enumeration",
			NumValues = 8,
			MinValue = 0,
			MaxValue = 7,
			Fields =
			{
				{ Name = "Generic", Type = "ItemConsumableSubclass", EnumValue = 0 },
				{ Name = "Potion", Type = "ItemConsumableSubclass", EnumValue = 1 },
				{ Name = "Elixir", Type = "ItemConsumableSubclass", EnumValue = 2 },
				{ Name = "Scroll", Type = "ItemConsumableSubclass", EnumValue = 3 },
				{ Name = "Fooddrink", Type = "ItemConsumableSubclass", EnumValue = 4 },
				{ Name = "Itemenhancement", Type = "ItemConsumableSubclass", EnumValue = 5 },
				{ Name = "Bandage", Type = "ItemConsumableSubclass", EnumValue = 6 },
				{ Name = "Other", Type = "ItemConsumableSubclass", EnumValue = 7 },
			},
		},
		{
			Name = "ItemGemColor",
			Type = "Enumeration",
			NumValues = 24,
			MinValue = 1,
			MaxValue = 8388608,
			Fields =
			{
				{ Name = "Meta", Type = "ItemGemColor", EnumValue = 1 },
				{ Name = "Red", Type = "ItemGemColor", EnumValue = 2 },
				{ Name = "Yellow", Type = "ItemGemColor", EnumValue = 4 },
				{ Name = "Blue", Type = "ItemGemColor", EnumValue = 8 },
				{ Name = "Hydraulic", Type = "ItemGemColor", EnumValue = 16 },
				{ Name = "Cogwheel", Type = "ItemGemColor", EnumValue = 32 },
				{ Name = "Iron", Type = "ItemGemColor", EnumValue = 64 },
				{ Name = "Blood", Type = "ItemGemColor", EnumValue = 128 },
				{ Name = "Shadow", Type = "ItemGemColor", EnumValue = 256 },
				{ Name = "Fel", Type = "ItemGemColor", EnumValue = 512 },
				{ Name = "Arcane", Type = "ItemGemColor", EnumValue = 1024 },
				{ Name = "Frost", Type = "ItemGemColor", EnumValue = 2048 },
				{ Name = "Fire", Type = "ItemGemColor", EnumValue = 4096 },
				{ Name = "Water", Type = "ItemGemColor", EnumValue = 8192 },
				{ Name = "Life", Type = "ItemGemColor", EnumValue = 16384 },
				{ Name = "Wind", Type = "ItemGemColor", EnumValue = 32768 },
				{ Name = "Holy", Type = "ItemGemColor", EnumValue = 65536 },
				{ Name = "PunchcardRed", Type = "ItemGemColor", EnumValue = 131072 },
				{ Name = "PunchcardYellow", Type = "ItemGemColor", EnumValue = 262144 },
				{ Name = "PunchcardBlue", Type = "ItemGemColor", EnumValue = 524288 },
				{ Name = "DominationBlood", Type = "ItemGemColor", EnumValue = 1048576 },
				{ Name = "DominationFrost", Type = "ItemGemColor", EnumValue = 2097152 },
				{ Name = "DominationUnholy", Type = "ItemGemColor", EnumValue = 4194304 },
				{ Name = "Cypher", Type = "ItemGemColor", EnumValue = 8388608 },
			},
		},
		{
			Name = "ItemMiscellaneousSubclass",
			Type = "Enumeration",
			NumValues = 7,
			MinValue = 0,
			MaxValue = 6,
			Fields =
			{
				{ Name = "Junk", Type = "ItemMiscellaneousSubclass", EnumValue = 0 },
				{ Name = "Reagent", Type = "ItemMiscellaneousSubclass", EnumValue = 1 },
				{ Name = "CompanionPet", Type = "ItemMiscellaneousSubclass", EnumValue = 2 },
				{ Name = "Holiday", Type = "ItemMiscellaneousSubclass", EnumValue = 3 },
				{ Name = "Other", Type = "ItemMiscellaneousSubclass", EnumValue = 4 },
				{ Name = "Mount", Type = "ItemMiscellaneousSubclass", EnumValue = 5 },
				{ Name = "MountEquipment", Type = "ItemMiscellaneousSubclass", EnumValue = 6 },
			},
		},
		{
			Name = "ItemProfessionSubclass",
			Type = "Enumeration",
			NumValues = 14,
			MinValue = 0,
			MaxValue = 13,
			Fields =
			{
				{ Name = "Blacksmithing", Type = "ItemProfessionSubclass", EnumValue = 0 },
				{ Name = "Leatherworking", Type = "ItemProfessionSubclass", EnumValue = 1 },
				{ Name = "Alchemy", Type = "ItemProfessionSubclass", EnumValue = 2 },
				{ Name = "Herbalism", Type = "ItemProfessionSubclass", EnumValue = 3 },
				{ Name = "Cooking", Type = "ItemProfessionSubclass", EnumValue = 4 },
				{ Name = "Mining", Type = "ItemProfessionSubclass", EnumValue = 5 },
				{ Name = "Tailoring", Type = "ItemProfessionSubclass", EnumValue = 6 },
				{ Name = "Engineering", Type = "ItemProfessionSubclass", EnumValue = 7 },
				{ Name = "Enchanting", Type = "ItemProfessionSubclass", EnumValue = 8 },
				{ Name = "Fishing", Type = "ItemProfessionSubclass", EnumValue = 9 },
				{ Name = "Skinning", Type = "ItemProfessionSubclass", EnumValue = 10 },
				{ Name = "Jewelcrafting", Type = "ItemProfessionSubclass", EnumValue = 11 },
				{ Name = "Inscription", Type = "ItemProfessionSubclass", EnumValue = 12 },
				{ Name = "Archaeology", Type = "ItemProfessionSubclass", EnumValue = 13 },
			},
		},
		{
			Name = "ItemQuality",
			Type = "Enumeration",
			NumValues = 9,
			MinValue = 0,
			MaxValue = 8,
			Fields =
			{
				{ Name = "Poor", Type = "ItemQuality", EnumValue = 0 },
				{ Name = "Common", Type = "ItemQuality", EnumValue = 1 },
				{ Name = "Uncommon", Type = "ItemQuality", EnumValue = 2 },
				{ Name = "Rare", Type = "ItemQuality", EnumValue = 3 },
				{ Name = "Epic", Type = "ItemQuality", EnumValue = 4 },
				{ Name = "Legendary", Type = "ItemQuality", EnumValue = 5 },
				{ Name = "Artifact", Type = "ItemQuality", EnumValue = 6 },
				{ Name = "Heirloom", Type = "ItemQuality", EnumValue = 7 },
				{ Name = "WoWToken", Type = "ItemQuality", EnumValue = 8 },
			},
		},
		{
			Name = "ItemReagentSubclass",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 0,
			MaxValue = 2,
			Fields =
			{
				{ Name = "Reagent", Type = "ItemReagentSubclass", EnumValue = 0 },
				{ Name = "Keystone", Type = "ItemReagentSubclass", EnumValue = 1 },
				{ Name = "ContextToken", Type = "ItemReagentSubclass", EnumValue = 2 },
			},
		},
		{
			Name = "ItemRecipeSubclass",
			Type = "Enumeration",
			NumValues = 12,
			MinValue = 0,
			MaxValue = 11,
			Fields =
			{
				{ Name = "Book", Type = "ItemRecipeSubclass", EnumValue = 0 },
				{ Name = "Leatherworking", Type = "ItemRecipeSubclass", EnumValue = 1 },
				{ Name = "Tailoring", Type = "ItemRecipeSubclass", EnumValue = 2 },
				{ Name = "Engineering", Type = "ItemRecipeSubclass", EnumValue = 3 },
				{ Name = "Blacksmithing", Type = "ItemRecipeSubclass", EnumValue = 4 },
				{ Name = "Cooking", Type = "ItemRecipeSubclass", EnumValue = 5 },
				{ Name = "Alchemy", Type = "ItemRecipeSubclass", EnumValue = 6 },
				{ Name = "FirstAid", Type = "ItemRecipeSubclass", EnumValue = 7 },
				{ Name = "Enchanting", Type = "ItemRecipeSubclass", EnumValue = 8 },
				{ Name = "Fishing", Type = "ItemRecipeSubclass", EnumValue = 9 },
				{ Name = "Jewelcrafting", Type = "ItemRecipeSubclass", EnumValue = 10 },
				{ Name = "Inscription", Type = "ItemRecipeSubclass", EnumValue = 11 },
			},
		},
		{
			Name = "ItemSocketType",
			Type = "Enumeration",
			NumValues = 24,
			MinValue = 0,
			MaxValue = 23,
			Fields =
			{
				{ Name = "None", Type = "ItemSocketType", EnumValue = 0 },
				{ Name = "Meta", Type = "ItemSocketType", EnumValue = 1 },
				{ Name = "Red", Type = "ItemSocketType", EnumValue = 2 },
				{ Name = "Yellow", Type = "ItemSocketType", EnumValue = 3 },
				{ Name = "Blue", Type = "ItemSocketType", EnumValue = 4 },
				{ Name = "Hydraulic", Type = "ItemSocketType", EnumValue = 5 },
				{ Name = "Cogwheel", Type = "ItemSocketType", EnumValue = 6 },
				{ Name = "Prismatic", Type = "ItemSocketType", EnumValue = 7 },
				{ Name = "Iron", Type = "ItemSocketType", EnumValue = 8 },
				{ Name = "Blood", Type = "ItemSocketType", EnumValue = 9 },
				{ Name = "Shadow", Type = "ItemSocketType", EnumValue = 10 },
				{ Name = "Fel", Type = "ItemSocketType", EnumValue = 11 },
				{ Name = "Arcane", Type = "ItemSocketType", EnumValue = 12 },
				{ Name = "Frost", Type = "ItemSocketType", EnumValue = 13 },
				{ Name = "Fire", Type = "ItemSocketType", EnumValue = 14 },
				{ Name = "Water", Type = "ItemSocketType", EnumValue = 15 },
				{ Name = "Life", Type = "ItemSocketType", EnumValue = 16 },
				{ Name = "Wind", Type = "ItemSocketType", EnumValue = 17 },
				{ Name = "Holy", Type = "ItemSocketType", EnumValue = 18 },
				{ Name = "PunchcardRed", Type = "ItemSocketType", EnumValue = 19 },
				{ Name = "PunchcardYellow", Type = "ItemSocketType", EnumValue = 20 },
				{ Name = "PunchcardBlue", Type = "ItemSocketType", EnumValue = 21 },
				{ Name = "Domination", Type = "ItemSocketType", EnumValue = 22 },
				{ Name = "Cypher", Type = "ItemSocketType", EnumValue = 23 },
			},
		},
		{
			Name = "ItemSubclassDisplay",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 1,
			MaxValue = 4,
			Fields =
			{
				{ Name = "HideSubclassInTooltips", Type = "ItemSubclassDisplay", EnumValue = 1 },
				{ Name = "HideSubclassInAuction", Type = "ItemSubclassDisplay", EnumValue = 2 },
				{ Name = "ShowItemCount", Type = "ItemSubclassDisplay", EnumValue = 4 },
			},
		},
		{
			Name = "ItemSubclassFlag",
			Type = "Enumeration",
			NumValues = 11,
			MinValue = 1,
			MaxValue = 1024,
			Fields =
			{
				{ Name = "WeaponsubclassCanparry", Type = "ItemSubclassFlag", EnumValue = 1 },
				{ Name = "WeaponsubclassSetfingerseq", Type = "ItemSubclassFlag", EnumValue = 2 },
				{ Name = "WeaponsubclassIsunarmed", Type = "ItemSubclassFlag", EnumValue = 4 },
				{ Name = "WeaponsubclassIsrifle", Type = "ItemSubclassFlag", EnumValue = 8 },
				{ Name = "WeaponsubclassIsthrown", Type = "ItemSubclassFlag", EnumValue = 16 },
				{ Name = "WeaponsubclassRighthandRanged", Type = "ItemSubclassFlag", EnumValue = 32 },
				{ Name = "ItemsubclassQuivernotrequired", Type = "ItemSubclassFlag", EnumValue = 64 },
				{ Name = "WeaponsubclassRanged", Type = "ItemSubclassFlag", EnumValue = 128 },
				{ Name = "WeaponsubclassDeprecatedReuseMe", Type = "ItemSubclassFlag", EnumValue = 256 },
				{ Name = "ItemsubclassUsesInvtype", Type = "ItemSubclassFlag", EnumValue = 512 },
				{ Name = "ArmorsubclassLfgscalingarmor", Type = "ItemSubclassFlag", EnumValue = 1024 },
			},
		},
		{
			Name = "ItemWeaponSubclass",
			Type = "Enumeration",
			NumValues = 21,
			MinValue = 0,
			MaxValue = 20,
			Fields =
			{
				{ Name = "Axe1H", Type = "ItemWeaponSubclass", EnumValue = 0 },
				{ Name = "Axe2H", Type = "ItemWeaponSubclass", EnumValue = 1 },
				{ Name = "Bows", Type = "ItemWeaponSubclass", EnumValue = 2 },
				{ Name = "Guns", Type = "ItemWeaponSubclass", EnumValue = 3 },
				{ Name = "Mace1H", Type = "ItemWeaponSubclass", EnumValue = 4 },
				{ Name = "Mace2H", Type = "ItemWeaponSubclass", EnumValue = 5 },
				{ Name = "Polearm", Type = "ItemWeaponSubclass", EnumValue = 6 },
				{ Name = "Sword1H", Type = "ItemWeaponSubclass", EnumValue = 7 },
				{ Name = "Sword2H", Type = "ItemWeaponSubclass", EnumValue = 8 },
				{ Name = "Warglaive", Type = "ItemWeaponSubclass", EnumValue = 9 },
				{ Name = "Staff", Type = "ItemWeaponSubclass", EnumValue = 10 },
				{ Name = "Bearclaw", Type = "ItemWeaponSubclass", EnumValue = 11 },
				{ Name = "Catclaw", Type = "ItemWeaponSubclass", EnumValue = 12 },
				{ Name = "Unarmed", Type = "ItemWeaponSubclass", EnumValue = 13 },
				{ Name = "Generic", Type = "ItemWeaponSubclass", EnumValue = 14 },
				{ Name = "Dagger", Type = "ItemWeaponSubclass", EnumValue = 15 },
				{ Name = "Thrown", Type = "ItemWeaponSubclass", EnumValue = 16 },
				{ Name = "Obsolete3", Type = "ItemWeaponSubclass", EnumValue = 17 },
				{ Name = "Crossbow", Type = "ItemWeaponSubclass", EnumValue = 18 },
				{ Name = "Wand", Type = "ItemWeaponSubclass", EnumValue = 19 },
				{ Name = "Fishingpole", Type = "ItemWeaponSubclass", EnumValue = 20 },
			},
		},
		{
			Name = "Itemclassfilterflags",
			Type = "Enumeration",
			NumValues = 18,
			MinValue = 1,
			MaxValue = 131072,
			Fields =
			{
				{ Name = "Consumable", Type = "Itemclassfilterflags", EnumValue = 1 },
				{ Name = "Container", Type = "Itemclassfilterflags", EnumValue = 2 },
				{ Name = "Weapon", Type = "Itemclassfilterflags", EnumValue = 4 },
				{ Name = "Gem", Type = "Itemclassfilterflags", EnumValue = 8 },
				{ Name = "Armor", Type = "Itemclassfilterflags", EnumValue = 16 },
				{ Name = "Reagent", Type = "Itemclassfilterflags", EnumValue = 32 },
				{ Name = "Projectile", Type = "Itemclassfilterflags", EnumValue = 64 },
				{ Name = "Tradegoods", Type = "Itemclassfilterflags", EnumValue = 128 },
				{ Name = "ItemEnhancement", Type = "Itemclassfilterflags", EnumValue = 256 },
				{ Name = "Recipe", Type = "Itemclassfilterflags", EnumValue = 512 },
				{ Name = "CurrencyTokenObsolete", Type = "Itemclassfilterflags", EnumValue = 1024 },
				{ Name = "Quiver", Type = "Itemclassfilterflags", EnumValue = 2048 },
				{ Name = "Questitemclassfilterflags", Type = "Itemclassfilterflags", EnumValue = 4096 },
				{ Name = "Key", Type = "Itemclassfilterflags", EnumValue = 8192 },
				{ Name = "PermanentObsolete", Type = "Itemclassfilterflags", EnumValue = 16384 },
				{ Name = "Miscellaneous", Type = "Itemclassfilterflags", EnumValue = 32768 },
				{ Name = "Glyph", Type = "Itemclassfilterflags", EnumValue = 65536 },
				{ Name = "Battlepet", Type = "Itemclassfilterflags", EnumValue = 131072 },
			},
		},
		{
			Name = "Itemsetflags",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 1,
			MaxValue = 4,
			Fields =
			{
				{ Name = "Legacy", Type = "Itemsetflags", EnumValue = 1 },
				{ Name = "UseItemHistorySetSlots", Type = "Itemsetflags", EnumValue = 2 },
				{ Name = "RequiresPvPTalentsActive", Type = "Itemsetflags", EnumValue = 4 },
			},
		},
		{
			Name = "UIItemInteractionFlags",
			Type = "Enumeration",
			NumValues = 4,
			MinValue = 1,
			MaxValue = 8,
			Fields =
			{
				{ Name = "DisplayWithInset", Type = "UIItemInteractionFlags", EnumValue = 1 },
				{ Name = "ConfirmationHasDelay", Type = "UIItemInteractionFlags", EnumValue = 2 },
				{ Name = "ConversionMode", Type = "UIItemInteractionFlags", EnumValue = 4 },
				{ Name = "ClickShowsFlyout", Type = "UIItemInteractionFlags", EnumValue = 8 },
			},
		},
		{
			Name = "UIItemInteractionType",
			Type = "Enumeration",
			NumValues = 5,
			MinValue = 0,
			MaxValue = 4,
			Fields =
			{
				{ Name = "None", Type = "UIItemInteractionType", EnumValue = 0 },
				{ Name = "CastSpell", Type = "UIItemInteractionType", EnumValue = 1 },
				{ Name = "CleanseCorruption", Type = "UIItemInteractionType", EnumValue = 2 },
				{ Name = "RunecarverScrapping", Type = "UIItemInteractionType", EnumValue = 3 },
				{ Name = "ItemConversion", Type = "UIItemInteractionType", EnumValue = 4 },
			},
		},
		{
			Name = "ITEM_WEAPON_SUBCLASSConstants",
			Type = "Constants",
			Values =
			{
				{ Name = "ITEM_WEAPON_SUBCLASS_NONE", Type = "ItemWeaponSubclass", Value = -1 },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
		{
			Name = "LFGListFilter",
			Type = "Enumeration",
			NumValues = 4,
			MinValue = 1,
			MaxValue = 8,
			Fields =
			{
				{ Name = "Recommended", Type = "LFGListFilter", EnumValue = 1 },
				{ Name = "NotRecommended", Type = "LFGListFilter", EnumValue = 2 },
				{ Name = "PvE", Type = "LFGListFilter", EnumValue = 4 },
				{ Name = "PvP", Type = "LFGListFilter", EnumValue = 8 },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
		{
			Name = "LevelConstsExposed",
			Type = "Constants",
			Values =
			{
				{ Name = "MIN_RES_SICKNESS_LEVEL", Type = "number", Value = 10 },
				{ Name = "MIN_ACHIEVEMENT_LEVEL", Type = "number", Value = 10 },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
		{
			Name = "MinimapTrackingFilter",
			Type = "Enumeration",
			NumValues = 21,
			MinValue = 0,
			MaxValue = 524288,
			Fields =
			{
				{ Name = "Unfiltered", Type = "MinimapTrackingFilter", EnumValue = 0 },
				{ Name = "Auctioneer", Type = "MinimapTrackingFilter", EnumValue = 1 },
				{ Name = "Banker", Type = "MinimapTrackingFilter", EnumValue = 2 },
				{ Name = "Battlemaster", Type = "MinimapTrackingFilter", EnumValue = 4 },
				{ Name = "TaxiNode", Type = "MinimapTrackingFilter", EnumValue = 8 },
				{ Name = "VenderFood", Type = "MinimapTrackingFilter", EnumValue = 16 },
				{ Name = "Innkeeper", Type = "MinimapTrackingFilter", EnumValue = 32 },
				{ Name = "Mailbox", Type = "MinimapTrackingFilter", EnumValue = 64 },
				{ Name = "TrainerProfession", Type = "MinimapTrackingFilter", EnumValue = 128 },
				{ Name = "VendorReagent", Type = "MinimapTrackingFilter", EnumValue = 256 },
				{ Name = "Repair", Type = "MinimapTrackingFilter", EnumValue = 512 },
				{ Name = "TrivialQuests", Type = "MinimapTrackingFilter", EnumValue = 1024 },
				{ Name = "Stablemaster", Type = "MinimapTrackingFilter", EnumValue = 2048 },
				{ Name = "Transmogrifier", Type = "MinimapTrackingFilter", EnumValue = 4096 },
				{ Name = "POI", Type = "MinimapTrackingFilter", EnumValue = 8192 },
				{ Name = "Target", Type = "MinimapTrackingFilter", EnumValue = 16384 },
				{ Name = "Focus", Type = "MinimapTrackingFilter", EnumValue = 32768 },
				{ Name = "QuestPoIs", Type = "MinimapTrackingFilter", EnumValue = 65536 },
				{ Name = "Digsites", Type = "MinimapTrackingFilter", EnumValue = 131072 },
				{ Name = "Barber", Type = "MinimapTrackingFilter", EnumValue = 262144 },
				{ Name = "ItemUpgrade", Type = "MinimapTrackingFilter", EnumValue = 524288 },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
		{
			Name = "PetBattleQueueStatus",
			Type = "Enumeration",
			NumValues = 22,
			MinValue = 0,
			MaxValue = 21,
			Fields =
			{
				{ Name = "None", Type = "PetBattleQueueStatus", EnumValue = 0 },
				{ Name = "Queued", Type = "PetBattleQueueStatus", EnumValue = 1 },
				{ Name = "QueuedUpdate", Type = "PetBattleQueueStatus", EnumValue = 2 },
				{ Name = "AlreadyQueued", Type = "PetBattleQueueStatus", EnumValue = 3 },
				{ Name = "JoinFailed", Type = "PetBattleQueueStatus", EnumValue = 4 },
				{ Name = "JoinFailedSlots", Type = "PetBattleQueueStatus", EnumValue = 5 },
				{ Name = "JoinFailedJournalLock", Type = "PetBattleQueueStatus", EnumValue = 6 },
				{ Name = "JoinFailedNeutral", Type = "PetBattleQueueStatus", EnumValue = 7 },
				{ Name = "MatchAccepted", Type = "PetBattleQueueStatus", EnumValue = 8 },
				{ Name = "MatchDeclined", Type = "PetBattleQueueStatus", EnumValue = 9 },
				{ Name = "MatchOpponentDeclined", Type = "PetBattleQueueStatus", EnumValue = 10 },
				{ Name = "ProposalTimedOut", Type = "PetBattleQueueStatus", EnumValue = 11 },
				{ Name = "Removed", Type = "PetBattleQueueStatus", EnumValue = 12 },
				{ Name = "RequeuedAfterInternalError", Type = "PetBattleQueueStatus", EnumValue = 13 },
				{ Name = "RequeuedAfterOpponentRemoved", Type = "PetBattleQueueStatus", EnumValue = 14 },
				{ Name = "Matchmaking", Type = "PetBattleQueueStatus", EnumValue = 15 },
				{ Name = "LostConnection", Type = "PetBattleQueueStatus", EnumValue = 16 },
				{ Name = "Shutdown", Type = "PetBattleQueueStatus", EnumValue = 17 },
				{ Name = "Suspended", Type = "PetBattleQueueStatus", EnumValue = 18 },
				{ Name = "Unsuspended", Type = "PetBattleQueueStatus", EnumValue = 19 },
				{ Name = "InBattle", Type = "PetBattleQueueStatus", EnumValue = 20 },
				{ Name = "NoBattlingHere", Type = "PetBattleQueueStatus", EnumValue = 21 },
			},
		},
		{
			Name = "PetbattleAuraStateFlags",
			Type = "Enumeration",
			NumValues = 7,
			MinValue = 0,
			MaxValue = 32,
			Fields =
			{
				{ Name = "None", Type = "PetbattleAuraStateFlags", EnumValue = 0 },
				{ Name = "Infinite", Type = "PetbattleAuraStateFlags", EnumValue = 1 },
				{ Name = "Canceled", Type = "PetbattleAuraStateFlags", EnumValue = 2 },
				{ Name = "InitDisabled", Type = "PetbattleAuraStateFlags", EnumValue = 4 },
				{ Name = "CountdownFirstRound", Type = "PetbattleAuraStateFlags", EnumValue = 8 },
				{ Name = "JustApplied", Type = "PetbattleAuraStateFlags", EnumValue = 16 },
				{ Name = "RemoveEventHandled", Type = "PetbattleAuraStateFlags", EnumValue = 32 },
			},
		},
		{
			Name = "PetbattleCheatFlags",
			Type = "Enumeration",
			NumValues = 2,
			MinValue = 0,
			MaxValue = 1,
			Fields =
			{
				{ Name = "None", Type = "PetbattleCheatFlags", EnumValue = 0 },
				{ Name = "AutoPlay", Type = "PetbattleCheatFlags", EnumValue = 1 },
			},
		},
		{
			Name = "PetbattleEffectFlags",
			Type = "Enumeration",
			NumValues = 15,
			MinValue = 0,
			MaxValue = 8192,
			Fields =
			{
				{ Name = "None", Type = "PetbattleEffectFlags", EnumValue = 0 },
				{ Name = "InvalidTarget", Type = "PetbattleEffectFlags", EnumValue = 1 },
				{ Name = "Miss", Type = "PetbattleEffectFlags", EnumValue = 2 },
				{ Name = "Crit", Type = "PetbattleEffectFlags", EnumValue = 4 },
				{ Name = "Blocked", Type = "PetbattleEffectFlags", EnumValue = 8 },
				{ Name = "Dodge", Type = "PetbattleEffectFlags", EnumValue = 16 },
				{ Name = "Heal", Type = "PetbattleEffectFlags", EnumValue = 32 },
				{ Name = "Unkillable", Type = "PetbattleEffectFlags", EnumValue = 64 },
				{ Name = "Reflect", Type = "PetbattleEffectFlags", EnumValue = 128 },
				{ Name = "Absorb", Type = "PetbattleEffectFlags", EnumValue = 256 },
				{ Name = "Immune", Type = "PetbattleEffectFlags", EnumValue = 512 },
				{ Name = "Strong", Type = "PetbattleEffectFlags", EnumValue = 1024 },
				{ Name = "Weak", Type = "PetbattleEffectFlags", EnumValue = 2048 },
				{ Name = "SuccessChain", Type = "PetbattleEffectFlags", EnumValue = 4096 },
				{ Name = "AuraReapply", Type = "PetbattleEffectFlags", EnumValue = 8192 },
			},
		},
		{
			Name = "PetbattleEffectType",
			Type = "Enumeration",
			NumValues = 18,
			MinValue = 0,
			MaxValue = 17,
			Fields =
			{
				{ Name = "SetHealth", Type = "PetbattleEffectType", EnumValue = 0 },
				{ Name = "AuraApply", Type = "PetbattleEffectType", EnumValue = 1 },
				{ Name = "AuraCancel", Type = "PetbattleEffectType", EnumValue = 2 },
				{ Name = "AuraChange", Type = "PetbattleEffectType", EnumValue = 3 },
				{ Name = "PetSwap", Type = "PetbattleEffectType", EnumValue = 4 },
				{ Name = "StatusChange", Type = "PetbattleEffectType", EnumValue = 5 },
				{ Name = "SetState", Type = "PetbattleEffectType", EnumValue = 6 },
				{ Name = "SetMaxHealth", Type = "PetbattleEffectType", EnumValue = 7 },
				{ Name = "SetSpeed", Type = "PetbattleEffectType", EnumValue = 8 },
				{ Name = "SetPower", Type = "PetbattleEffectType", EnumValue = 9 },
				{ Name = "TriggerAbility", Type = "PetbattleEffectType", EnumValue = 10 },
				{ Name = "AbilityChange", Type = "PetbattleEffectType", EnumValue = 11 },
				{ Name = "NpcEmote", Type = "PetbattleEffectType", EnumValue = 12 },
				{ Name = "AuraProcessingBegin", Type = "PetbattleEffectType", EnumValue = 13 },
				{ Name = "AuraProcessingEnd", Type = "PetbattleEffectType", EnumValue = 14 },
				{ Name = "ReplacePet", Type = "PetbattleEffectType", EnumValue = 15 },
				{ Name = "OverrideAbility", Type = "PetbattleEffectType", EnumValue = 16 },
				{ Name = "WorldStateUpdate", Type = "PetbattleEffectType", EnumValue = 17 },
			},
		},
		{
			Name = "PetbattleEnviros",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 0,
			MaxValue = 2,
			Fields =
			{
				{ Name = "Pad0", Type = "PetbattleEnviros", EnumValue = 0 },
				{ Name = "Pad1", Type = "PetbattleEnviros", EnumValue = 1 },
				{ Name = "Weather", Type = "PetbattleEnviros", EnumValue = 2 },
			},
		},
		{
			Name = "PetbattleInputMoveMsgDebugFlag",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 0,
			MaxValue = 2,
			Fields =
			{
				{ Name = "None", Type = "PetbattleInputMoveMsgDebugFlag", EnumValue = 0 },
				{ Name = "DontValidate", Type = "PetbattleInputMoveMsgDebugFlag", EnumValue = 1 },
				{ Name = "EnemyCast", Type = "PetbattleInputMoveMsgDebugFlag", EnumValue = 2 },
			},
		},
		{
			Name = "PetbattleMoveType",
			Type = "Enumeration",
			NumValues = 6,
			MinValue = 0,
			MaxValue = 5,
			Fields =
			{
				{ Name = "Quit", Type = "PetbattleMoveType", EnumValue = 0 },
				{ Name = "Ability", Type = "PetbattleMoveType", EnumValue = 1 },
				{ Name = "Swap", Type = "PetbattleMoveType", EnumValue = 2 },
				{ Name = "Trap", Type = "PetbattleMoveType", EnumValue = 3 },
				{ Name = "FinalRoundOk", Type = "PetbattleMoveType", EnumValue = 4 },
				{ Name = "Pass", Type = "PetbattleMoveType", EnumValue = 5 },
			},
		},
		{
			Name = "PetbattlePboid",
			Type = "Enumeration",
			NumValues = 9,
			MinValue = 0,
			MaxValue = 8,
			Fields =
			{
				{ Name = "P0Pet_0", Type = "PetbattlePboid", EnumValue = 0 },
				{ Name = "P0Pet_1", Type = "PetbattlePboid", EnumValue = 1 },
				{ Name = "P0Pet_2", Type = "PetbattlePboid", EnumValue = 2 },
				{ Name = "P1Pet_0", Type = "PetbattlePboid", EnumValue = 3 },
				{ Name = "P1Pet_1", Type = "PetbattlePboid", EnumValue = 4 },
				{ Name = "P1Pet_2", Type = "PetbattlePboid", EnumValue = 5 },
				{ Name = "EnvPad_0", Type = "PetbattlePboid", EnumValue = 6 },
				{ Name = "EnvPad_1", Type = "PetbattlePboid", EnumValue = 7 },
				{ Name = "EnvWeather", Type = "PetbattlePboid", EnumValue = 8 },
			},
		},
		{
			Name = "PetbattlePetStatus",
			Type = "Enumeration",
			NumValues = 5,
			MinValue = 0,
			MaxValue = 8,
			Fields =
			{
				{ Name = "FlagNone", Type = "PetbattlePetStatus", EnumValue = 0 },
				{ Name = "FlagTrapped", Type = "PetbattlePetStatus", EnumValue = 1 },
				{ Name = "Stunned", Type = "PetbattlePetStatus", EnumValue = 2 },
				{ Name = "SwapOutLocked", Type = "PetbattlePetStatus", EnumValue = 4 },
				{ Name = "SwapInLocked", Type = "PetbattlePetStatus", EnumValue = 8 },
			},
		},
		{
			Name = "PetbattlePlayer",
			Type = "Enumeration",
			NumValues = 2,
			MinValue = 0,
			MaxValue = 1,
			Fields =
			{
				{ Name = "Player_0", Type = "PetbattlePlayer", EnumValue = 0 },
				{ Name = "Player_1", Type = "PetbattlePlayer", EnumValue = 1 },
			},
		},
		{
			Name = "PetbattlePlayerInputFlags",
			Type = "Enumeration",
			NumValues = 5,
			MinValue = 0,
			MaxValue = 8,
			Fields =
			{
				{ Name = "None", Type = "PetbattlePlayerInputFlags", EnumValue = 0 },
				{ Name = "TurnInProgress", Type = "PetbattlePlayerInputFlags", EnumValue = 1 },
				{ Name = "AbilityLocked", Type = "PetbattlePlayerInputFlags", EnumValue = 2 },
				{ Name = "SwapLocked", Type = "PetbattlePlayerInputFlags", EnumValue = 4 },
				{ Name = "WaitingForPet", Type = "PetbattlePlayerInputFlags", EnumValue = 8 },
			},
		},
		{
			Name = "PetbattleResult",
			Type = "Enumeration",
			NumValues = 24,
			MinValue = 0,
			MaxValue = 23,
			Fields =
			{
				{ Name = "FailUnknown", Type = "PetbattleResult", EnumValue = 0 },
				{ Name = "FailNotHere", Type = "PetbattleResult", EnumValue = 1 },
				{ Name = "FailNotHereOnTransport", Type = "PetbattleResult", EnumValue = 2 },
				{ Name = "FailNotHereUnevenGround", Type = "PetbattleResult", EnumValue = 3 },
				{ Name = "FailNotHereObstructed", Type = "PetbattleResult", EnumValue = 4 },
				{ Name = "FailNotWhileInCombat", Type = "PetbattleResult", EnumValue = 5 },
				{ Name = "FailNotWhileDead", Type = "PetbattleResult", EnumValue = 6 },
				{ Name = "FailNotWhileFlying", Type = "PetbattleResult", EnumValue = 7 },
				{ Name = "FailTargetInvalid", Type = "PetbattleResult", EnumValue = 8 },
				{ Name = "FailTargetOutOfRange", Type = "PetbattleResult", EnumValue = 9 },
				{ Name = "FailTargetNotCapturable", Type = "PetbattleResult", EnumValue = 10 },
				{ Name = "FailNotATrainer", Type = "PetbattleResult", EnumValue = 11 },
				{ Name = "FailDeclined", Type = "PetbattleResult", EnumValue = 12 },
				{ Name = "FailInBattle", Type = "PetbattleResult", EnumValue = 13 },
				{ Name = "FailInvalidLoadout", Type = "PetbattleResult", EnumValue = 14 },
				{ Name = "FailInvalidLoadoutAllDead", Type = "PetbattleResult", EnumValue = 15 },
				{ Name = "FailInvalidLoadoutNoneSlotted", Type = "PetbattleResult", EnumValue = 16 },
				{ Name = "FailNoJournalLock", Type = "PetbattleResult", EnumValue = 17 },
				{ Name = "FailWildPetTapped", Type = "PetbattleResult", EnumValue = 18 },
				{ Name = "FailRestrictedAccount", Type = "PetbattleResult", EnumValue = 19 },
				{ Name = "FailOpponentNotAvailable", Type = "PetbattleResult", EnumValue = 20 },
				{ Name = "FailLogout", Type = "PetbattleResult", EnumValue = 21 },
				{ Name = "FailDisconnect", Type = "PetbattleResult", EnumValue = 22 },
				{ Name = "Success", Type = "PetbattleResult", EnumValue = 23 },
			},
		},
		{
			Name = "PetbattleSlot",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 0,
			MaxValue = 2,
			Fields =
			{
				{ Name = "Slot_0", Type = "PetbattleSlot", EnumValue = 0 },
				{ Name = "Slot_1", Type = "PetbattleSlot", EnumValue = 1 },
				{ Name = "Slot_2", Type = "PetbattleSlot", EnumValue = 2 },
			},
		},
		{
			Name = "PetbattleSlotAbility",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 0,
			MaxValue = 2,
			Fields =
			{
				{ Name = "Ability_0", Type = "PetbattleSlotAbility", EnumValue = 0 },
				{ Name = "Ability_1", Type = "PetbattleSlotAbility", EnumValue = 1 },
				{ Name = "Ability_2", Type = "PetbattleSlotAbility", EnumValue = 2 },
			},
		},
		{
			Name = "PetbattleSlotResult",
			Type = "Enumeration",
			NumValues = 9,
			MinValue = 0,
			MaxValue = 8,
			Fields =
			{
				{ Name = "Success", Type = "PetbattleSlotResult", EnumValue = 0 },
				{ Name = "SlotLocked", Type = "PetbattleSlotResult", EnumValue = 1 },
				{ Name = "SlotEmpty", Type = "PetbattleSlotResult", EnumValue = 2 },
				{ Name = "NoTracker", Type = "PetbattleSlotResult", EnumValue = 3 },
				{ Name = "NoSpeciesRec", Type = "PetbattleSlotResult", EnumValue = 4 },
				{ Name = "CantBattle", Type = "PetbattleSlotResult", EnumValue = 5 },
				{ Name = "Revoked", Type = "PetbattleSlotResult", EnumValue = 6 },
				{ Name = "Dead", Type = "PetbattleSlotResult", EnumValue = 7 },
				{ Name = "NoPet", Type = "PetbattleSlotResult", EnumValue = 8 },
			},
		},
		{
			Name = "PetbattleState",
			Type = "Enumeration",
			NumValues = 7,
			MinValue = 0,
			MaxValue = 6,
			Fields =
			{
				{ Name = "Created", Type = "PetbattleState", EnumValue = 0 },
				{ Name = "WaitingPreBattle", Type = "PetbattleState", EnumValue = 1 },
				{ Name = "RoundInProgress", Type = "PetbattleState", EnumValue = 2 },
				{ Name = "WaitingForFrontPets", Type = "PetbattleState", EnumValue = 3 },
				{ Name = "CreatedFailed", Type = "PetbattleState", EnumValue = 4 },
				{ Name = "FinalRound", Type = "PetbattleState", EnumValue = 5 },
				{ Name = "Finished", Type = "PetbattleState", EnumValue = 6 },
			},
		},
		{
			Name = "PetbattleTrapstatus",
			Type = "Enumeration",
			NumValues = 9,
			MinValue = 0,
			MaxValue = 8,
			Fields =
			{
				{ Name = "Invalid", Type = "PetbattleTrapstatus", EnumValue = 0 },
				{ Name = "CanTrap", Type = "PetbattleTrapstatus", EnumValue = 1 },
				{ Name = "CantTrapNewbie", Type = "PetbattleTrapstatus", EnumValue = 2 },
				{ Name = "CantTrapPetDead", Type = "PetbattleTrapstatus", EnumValue = 3 },
				{ Name = "CantTrapPetHealth", Type = "PetbattleTrapstatus", EnumValue = 4 },
				{ Name = "CantTrapNoRoomInJournal", Type = "PetbattleTrapstatus", EnumValue = 5 },
				{ Name = "CantTrapPetNotCapturable", Type = "PetbattleTrapstatus", EnumValue = 6 },
				{ Name = "CantTrapTrainerBattle", Type = "PetbattleTrapstatus", EnumValue = 7 },
				{ Name = "CantTrapTwice", Type = "PetbattleTrapstatus", EnumValue = 8 },
			},
		},
		{
			Name = "PetbattleType",
			Type = "Enumeration",
			NumValues = 4,
			MinValue = 0,
			MaxValue = 3,
			Fields =
			{
				{ Name = "PvE", Type = "PetbattleType", EnumValue = 0 },
				{ Name = "PvP", Type = "PetbattleType", EnumValue = 1 },
				{ Name = "Lfpb", Type = "PetbattleType", EnumValue = 2 },
				{ Name = "Npc", Type = "PetbattleType", EnumValue = 3 },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
		{
			Name = "PlayerMentorshipApplicationResult",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 0,
			MaxValue = 2,
			Fields =
			{
				{ Name = "Success", Type = "PlayerMentorshipApplicationResult", EnumValue = 0 },
				{ Name = "AlreadyMentor", Type = "PlayerMentorshipApplicationResult", EnumValue = 1 },
				{ Name = "Ineligible", Type = "PlayerMentorshipApplicationResult", EnumValue = 2 },
			},
		},
		{
			Name = "PlayerMentorshipStatus",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 0,
			MaxValue = 2,
			Fields =
			{
				{ Name = "None", Type = "PlayerMentorshipStatus", EnumValue = 0 },
				{ Name = "Newcomer", Type = "PlayerMentorshipStatus", EnumValue = 1 },
				{ Name = "Mentor", Type = "PlayerMentorshipStatus", EnumValue = 2 },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
		{
			Name = "CraftingReagentType",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 0,
			MaxValue = 2,
			Fields =
			{
				{ Name = "Optional", Type = "CraftingReagentType", EnumValue = 0 },
				{ Name = "Basic", Type = "CraftingReagentType", EnumValue = 1 },
				{ Name = "Finishing", Type = "CraftingReagentType", EnumValue = 2 },
			},
		},
		{
			Name = "Profession",
			Type = "Enumeration",
			NumValues = 15,
			MinValue = 0,
			MaxValue = 14,
			Fields =
			{
				{ Name = "FirstAid", Type = "Profession", EnumValue = 0 },
				{ Name = "Blacksmithing", Type = "Profession", EnumValue = 1 },
				{ Name = "Leatherworking", Type = "Profession", EnumValue = 2 },
				{ Name = "Alchemy", Type = "Profession", EnumValue = 3 },
				{ Name = "Herbalism", Type = "Profession", EnumValue = 4 },
				{ Name = "Cooking", Type = "Profession", EnumValue = 5 },
				{ Name = "Mining", Type = "Profession", EnumValue = 6 },
				{ Name = "Tailoring", Type = "Profession", EnumValue = 7 },
				{ Name = "Engineering", Type = "Profession", EnumValue = 8 },
				{ Name = "Enchanting", Type = "Profession", EnumValue = 9 },
				{ Name = "Fishing", Type = "Profession", EnumValue = 10 },
				{ Name = "Skinning", Type = "Profession", EnumValue = 11 },
				{ Name = "Jewelcrafting", Type = "Profession", EnumValue = 12 },
				{ Name = "Inscription", Type = "Profession", EnumValue = 13 },
				{ Name = "Archaeology", Type = "Profession", EnumValue = 14 },
			},
		},
		{
			Name = "ProfessionEffect",
			Type = "Enumeration",
			NumValues = 22,
			MinValue = 0,
			MaxValue = 21,
			Fields =
			{
				{ Name = "Skill", Type = "ProfessionEffect", EnumValue = 0 },
				{ Name = "StatInspiration", Type = "ProfessionEffect", EnumValue = 1 },
				{ Name = "StatResourcefulness", Type = "ProfessionEffect", EnumValue = 2 },
				{ Name = "StatFinesse", Type = "ProfessionEffect", EnumValue = 3 },
				{ Name = "StatDeftness", Type = "ProfessionEffect", EnumValue = 4 },
				{ Name = "StatPerception", Type = "ProfessionEffect", EnumValue = 5 },
				{ Name = "StatCraftingSpeed", Type = "ProfessionEffect", EnumValue = 6 },
				{ Name = "StatMulticraft", Type = "ProfessionEffect", EnumValue = 7 },
				{ Name = "UnlockReagentSlot", Type = "ProfessionEffect", EnumValue = 8 },
				{ Name = "ModCraftCrit", Type = "ProfessionEffect", EnumValue = 9 },
				{ Name = "ModCraftReduction", Type = "ProfessionEffect", EnumValue = 10 },
				{ Name = "ModGatherExtra", Type = "ProfessionEffect", EnumValue = 11 },
				{ Name = "ModGatherTimeDecrease", Type = "ProfessionEffect", EnumValue = 12 },
				{ Name = "ModGatherDiscover", Type = "ProfessionEffect", EnumValue = 13 },
				{ Name = "ModCraftTimeDecrease", Type = "ProfessionEffect", EnumValue = 14 },
				{ Name = "ModCraftExtra", Type = "ProfessionEffect", EnumValue = 15 },
				{ Name = "ModGatherTimeIncrease", Type = "ProfessionEffect", EnumValue = 16 },
				{ Name = "ModGatherRange", Type = "ProfessionEffect", EnumValue = 17 },
				{ Name = "ModCraftExtraQuantity", Type = "ProfessionEffect", EnumValue = 18 },
				{ Name = "ModGatherExtraQuantity", Type = "ProfessionEffect", EnumValue = 19 },
				{ Name = "ModCraftCritSize", Type = "ProfessionEffect", EnumValue = 20 },
				{ Name = "ModCraftReductionQuantity", Type = "ProfessionEffect", EnumValue = 21 },
			},
		},
		{
			Name = "ProfessionRating",
			Type = "Enumeration",
			NumValues = 9,
			MinValue = 0,
			MaxValue = 8,
			Fields =
			{
				{ Name = "CraftCrit", Type = "ProfessionRating", EnumValue = 0 },
				{ Name = "CraftReduction", Type = "ProfessionRating", EnumValue = 1 },
				{ Name = "GatherExtra", Type = "ProfessionRating", EnumValue = 2 },
				{ Name = "GatherTimeDecrease", Type = "ProfessionRating", EnumValue = 3 },
				{ Name = "GatherDiscover", Type = "ProfessionRating", EnumValue = 4 },
				{ Name = "CraftTimeDecrease", Type = "ProfessionRating", EnumValue = 5 },
				{ Name = "CraftExtra", Type = "ProfessionRating", EnumValue = 6 },
				{ Name = "GatherTimeIncrease", Type = "ProfessionRating", EnumValue = 7 },
				{ Name = "GatherRange", Type = "ProfessionRating", EnumValue = 8 },
			},
		},
		{
			Name = "ProfessionRatingType",
			Type = "Enumeration",
			NumValues = 2,
			MinValue = 0,
			MaxValue = 1,
			Fields =
			{
				{ Name = "Craft", Type = "ProfessionRatingType", EnumValue = 0 },
				{ Name = "Gather", Type = "ProfessionRatingType", EnumValue = 1 },
			},
		},
		{
			Name = "SkinningState",
			Type = "Enumeration",
			NumValues = 5,
			MinValue = 0,
			MaxValue = 4,
			Fields =
			{
				{ Name = "None", Type = "SkinningState", EnumValue = 0 },
				{ Name = "Reserved", Type = "SkinningState", EnumValue = 1 },
				{ Name = "Skinning", Type = "SkinningState", EnumValue = 2 },
				{ Name = "Looting", Type = "SkinningState", EnumValue = 3 },
				{ Name = "Skinned", Type = "SkinningState", EnumValue = 4 },
			},
		},
		{
			Name = "ProfessionConsts",
			Type = "Constants",
			Values =
			{
				{ Name = "NUM_PRIMARY_PROFESSIONS", Type = "number", Value = 2 },
				{ Name = "CLASSIC_PROFESSION_PARENT_TIER_INDEX", Type = "number", Value = 4 },
				{ Name = "RUNEFORGING_SKILL_LINE_ID", Type = "number", Value = 960 },
				{ Name = "RUNEFORGING_ROOT_CATEGORY_ID", Type = "number", Value = 210 },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
		{
			Name = "PvPFaction",
			Type = "Enumeration",
			NumValues = 2,
			MinValue = 0,
			MaxValue = 1,
			Fields =
			{
				{ Name = "Horde", Type = "PvPFaction", EnumValue = 0 },
				{ Name = "Alliance", Type = "PvPFaction", EnumValue = 1 },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
		{
			Name = "PvpInfoConsts",
			Type = "Constants",
			Values =
			{
				{ Name = "MaxPlayersPerInstance", Type = "number", Value = 80 },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
		{
			Name = "QuestTagType",
			Type = "Enumeration",
			NumValues = 16,
			MinValue = 0,
			MaxValue = 15,
			Fields =
			{
				{ Name = "Tag", Type = "QuestTagType", EnumValue = 0 },
				{ Name = "Profession", Type = "QuestTagType", EnumValue = 1 },
				{ Name = "Normal", Type = "QuestTagType", EnumValue = 2 },
				{ Name = "PvP", Type = "QuestTagType", EnumValue = 3 },
				{ Name = "PetBattle", Type = "QuestTagType", EnumValue = 4 },
				{ Name = "Bounty", Type = "QuestTagType", EnumValue = 5 },
				{ Name = "Dungeon", Type = "QuestTagType", EnumValue = 6 },
				{ Name = "Invasion", Type = "QuestTagType", EnumValue = 7 },
				{ Name = "Raid", Type = "QuestTagType", EnumValue = 8 },
				{ Name = "Contribution", Type = "QuestTagType", EnumValue = 9 },
				{ Name = "RatedReward", Type = "QuestTagType", EnumValue = 10 },
				{ Name = "InvasionWrapper", Type = "QuestTagType", EnumValue = 11 },
				{ Name = "FactionAssault", Type = "QuestTagType", EnumValue = 12 },
				{ Name = "Islands", Type = "QuestTagType", EnumValue = 13 },
				{ Name = "Threat", Type = "QuestTagType", EnumValue = 14 },
				{ Name = "CovenantCalling", Type = "QuestTagType", EnumValue = 15 },
			},
		},
		{
			Name = "RelativeContentDifficulty",
			Type = "Enumeration",
			NumValues = 5,
			MinValue = 0,
			MaxValue = 4,
			Fields =
			{
				{ Name = "Trivial", Type = "RelativeContentDifficulty", EnumValue = 0 },
				{ Name = "Easy", Type = "RelativeContentDifficulty", EnumValue = 1 },
				{ Name = "Fair", Type = "RelativeContentDifficulty", EnumValue = 2 },
				{ Name = "Difficult", Type = "RelativeContentDifficulty", EnumValue = 3 },
				{ Name = "Impossible", Type = "RelativeContentDifficulty", EnumValue = 4 },
			},
		},
		{
			Name = "QuestWatchConsts",
			Type = "Constants",
			Values =
			{
				{ Name = "MAX_QUEST_WATCHES", Type = "number", Value = 25 },
				{ Name = "MAX_WORLD_QUEST_WATCHES_AUTOMATIC", Type = "number", Value = 1 },
				{ Name = "MAX_WORLD_QUEST_WATCHES_MANUAL", Type = "number", Value = 5 },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
		{
			Name = "QuestSessionCommand",
			Type = "Enumeration",
			NumValues = 4,
			MinValue = 0,
			MaxValue = 3,
			Fields =
			{
				{ Name = "None", Type = "QuestSessionCommand", EnumValue = 0 },
				{ Name = "Start", Type = "QuestSessionCommand", EnumValue = 1 },
				{ Name = "Stop", Type = "QuestSessionCommand", EnumValue = 2 },
				{ Name = "SessionActiveNoCommand", Type = "QuestSessionCommand", EnumValue = 3 },
			},
		},
		{
			Name = "QuestSessionResult",
			Type = "Enumeration",
			NumValues = 35,
			MinValue = 0,
			MaxValue = 34,
			Fields =
			{
				{ Name = "Ok", Type = "QuestSessionResult", EnumValue = 0 },
				{ Name = "NotInParty", Type = "QuestSessionResult", EnumValue = 1 },
				{ Name = "InvalidOwner", Type = "QuestSessionResult", EnumValue = 2 },
				{ Name = "AlreadyActive", Type = "QuestSessionResult", EnumValue = 3 },
				{ Name = "NotActive", Type = "QuestSessionResult", EnumValue = 4 },
				{ Name = "InRaid", Type = "QuestSessionResult", EnumValue = 5 },
				{ Name = "OwnerRefused", Type = "QuestSessionResult", EnumValue = 6 },
				{ Name = "Timeout", Type = "QuestSessionResult", EnumValue = 7 },
				{ Name = "Disabled", Type = "QuestSessionResult", EnumValue = 8 },
				{ Name = "Started", Type = "QuestSessionResult", EnumValue = 9 },
				{ Name = "Stopped", Type = "QuestSessionResult", EnumValue = 10 },
				{ Name = "Joined", Type = "QuestSessionResult", EnumValue = 11 },
				{ Name = "Left", Type = "QuestSessionResult", EnumValue = 12 },
				{ Name = "OwnerLeft", Type = "QuestSessionResult", EnumValue = 13 },
				{ Name = "ReadyCheckFailed", Type = "QuestSessionResult", EnumValue = 14 },
				{ Name = "PartyDestroyed", Type = "QuestSessionResult", EnumValue = 15 },
				{ Name = "MemberTimeout", Type = "QuestSessionResult", EnumValue = 16 },
				{ Name = "AlreadyMember", Type = "QuestSessionResult", EnumValue = 17 },
				{ Name = "NotOwner", Type = "QuestSessionResult", EnumValue = 18 },
				{ Name = "AlreadyOwner", Type = "QuestSessionResult", EnumValue = 19 },
				{ Name = "AlreadyJoined", Type = "QuestSessionResult", EnumValue = 20 },
				{ Name = "NotMember", Type = "QuestSessionResult", EnumValue = 21 },
				{ Name = "Busy", Type = "QuestSessionResult", EnumValue = 22 },
				{ Name = "JoinRejected", Type = "QuestSessionResult", EnumValue = 23 },
				{ Name = "Logout", Type = "QuestSessionResult", EnumValue = 24 },
				{ Name = "Empty", Type = "QuestSessionResult", EnumValue = 25 },
				{ Name = "QuestNotCompleted", Type = "QuestSessionResult", EnumValue = 26 },
				{ Name = "Resync", Type = "QuestSessionResult", EnumValue = 27 },
				{ Name = "Restricted", Type = "QuestSessionResult", EnumValue = 28 },
				{ Name = "InPetBattle", Type = "QuestSessionResult", EnumValue = 29 },
				{ Name = "InvalidPublicParty", Type = "QuestSessionResult", EnumValue = 30 },
				{ Name = "Unknown", Type = "QuestSessionResult", EnumValue = 31 },
				{ Name = "InCombat", Type = "QuestSessionResult", EnumValue = 32 },
				{ Name = "MemberInCombat", Type = "QuestSessionResult", EnumValue = 33 },
				{ Name = "RestrictedCrossFaction", Type = "QuestSessionResult", EnumValue = 34 },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
		{
			Name = "ReportMajorCategory",
			Type = "Enumeration",
			NumValues = 4,
			MinValue = 0,
			MaxValue = 3,
			Fields =
			{
				{ Name = "InappropriateCommunication", Type = "ReportMajorCategory", EnumValue = 0 },
				{ Name = "GameplaySabotage", Type = "ReportMajorCategory", EnumValue = 1 },
				{ Name = "Cheating", Type = "ReportMajorCategory", EnumValue = 2 },
				{ Name = "InappropriateName", Type = "ReportMajorCategory", EnumValue = 3 },
			},
		},
		{
			Name = "ReportMinorCategory",
			Type = "Enumeration",
			NumValues = 15,
			MinValue = 1,
			MaxValue = 16384,
			Fields =
			{
				{ Name = "TextChat", Type = "ReportMinorCategory", EnumValue = 1 },
				{ Name = "Boosting", Type = "ReportMinorCategory", EnumValue = 2 },
				{ Name = "Spam", Type = "ReportMinorCategory", EnumValue = 4 },
				{ Name = "Afk", Type = "ReportMinorCategory", EnumValue = 8 },
				{ Name = "IntentionallyFeeding", Type = "ReportMinorCategory", EnumValue = 16 },
				{ Name = "BlockingProgress", Type = "ReportMinorCategory", EnumValue = 32 },
				{ Name = "Hacking", Type = "ReportMinorCategory", EnumValue = 64 },
				{ Name = "Botting", Type = "ReportMinorCategory", EnumValue = 128 },
				{ Name = "Advertisement", Type = "ReportMinorCategory", EnumValue = 256 },
				{ Name = "BTag", Type = "ReportMinorCategory", EnumValue = 512 },
				{ Name = "GroupName", Type = "ReportMinorCategory", EnumValue = 1024 },
				{ Name = "CharacterName", Type = "ReportMinorCategory", EnumValue = 2048 },
				{ Name = "GuildName", Type = "ReportMinorCategory", EnumValue = 4096 },
				{ Name = "Description", Type = "ReportMinorCategory", EnumValue = 8192 },
				{ Name = "Name", Type = "ReportMinorCategory", EnumValue = 16384 },
			},
		},
		{
			Name = "ReportType",
			Type = "Enumeration",
			NumValues = 15,
			MinValue = 0,
			MaxValue = 14,
			Fields =
			{
				{ Name = "Chat", Type = "ReportType", EnumValue = 0 },
				{ Name = "InWorld", Type = "ReportType", EnumValue = 1 },
				{ Name = "ClubFinderPosting", Type = "ReportType", EnumValue = 2 },
				{ Name = "ClubFinderApplicant", Type = "ReportType", EnumValue = 3 },
				{ Name = "GroupFinderPosting", Type = "ReportType", EnumValue = 4 },
				{ Name = "GroupFinderApplicant", Type = "ReportType", EnumValue = 5 },
				{ Name = "ClubMember", Type = "ReportType", EnumValue = 6 },
				{ Name = "GroupMember", Type = "ReportType", EnumValue = 7 },
				{ Name = "Friend", Type = "ReportType", EnumValue = 8 },
				{ Name = "Pet", Type = "ReportType", EnumValue = 9 },
				{ Name = "BattlePet", Type = "ReportType", EnumValue = 10 },
				{ Name = "Calendar", Type = "ReportType", EnumValue = 11 },
				{ Name = "Mail", Type = "ReportType", EnumValue = 12 },
				{ Name = "PvP", Type = "ReportType", EnumValue = 13 },
				{ Name = "PvPScoreboard", Type = "ReportType", EnumValue = 14 },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
		{
			Name = "TradeskillOrderDuration",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 1,
			MaxValue = 3,
			Fields =
			{
				{ Name = "Short", Type = "TradeskillOrderDuration", EnumValue = 1 },
				{ Name = "Medium", Type = "TradeskillOrderDuration", EnumValue = 2 },
				{ Name = "Long", Type = "TradeskillOrderDuration", EnumValue = 3 },
			},
		},
		{
			Name = "TradeskillOrderRecipient",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 1,
			MaxValue = 3,
			Fields =
			{
				{ Name = "Public", Type = "TradeskillOrderRecipient", EnumValue = 1 },
				{ Name = "Guild", Type = "TradeskillOrderRecipient", EnumValue = 2 },
				{ Name = "Private", Type = "TradeskillOrderRecipient", EnumValue = 3 },
			},
		},
		{
			Name = "TradeskillOrderStatus",
			Type = "Enumeration",
			NumValues = 4,
			MinValue = 1,
			MaxValue = 4,
			Fields =
			{
				{ Name = "Unclaimed", Type = "TradeskillOrderStatus", EnumValue = 1 },
				{ Name = "Started", Type = "TradeskillOrderStatus", EnumValue = 2 },
				{ Name = "Completed", Type = "TradeskillOrderStatus", EnumValue = 3 },
				{ Name = "Expired", Type = "TradeskillOrderStatus", EnumValue = 4 },
			},
		},
		{
			Name = "TradeskillRecipeType",
			Type = "Enumeration",
			NumValues = 2,
			MinValue = 1,
			MaxValue = 2,
			Fields =
			{
				{ Name = "Item", Type = "TradeskillRecipeType", EnumValue = 1 },
				{ Name = "Salvage", Type = "TradeskillRecipeType", EnumValue = 2 },
			},
		},
		{
			Name = "TradeskillRelativeDifficulty",
			Type = "Enumeration",
			NumValues = 4,
			MinValue = 0,
			MaxValue = 3,
			Fields =
			{
				{ Name = "Optimal", Type = "TradeskillRelativeDifficulty", EnumValue = 0 },
				{ Name = "Medium", Type = "TradeskillRelativeDifficulty", EnumValue = 1 },
				{ Name = "Easy", Type = "TradeskillRelativeDifficulty", EnumValue = 2 },
				{ Name = "Trivial", Type = "TradeskillRelativeDifficulty", EnumValue = 3 },
			},
		},
		{
			Name = "CraftingOperationBonusStatInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "bonusStatName", Type = "string", Nilable = false },
				{ Name = "bonusStatValue", Type = "number", Nilable = false },
				{ Name = "ratingDescription", Type = "string", Nilable = false },
				{ Name = "ratingPct", Type = "number", Nilable = false },
				{ Name = "bonusRatingPct", Type = "number", Nilable = false },
			},
		},
		{
			Name = "CraftingReagent",
			Type = "Structure",
			Fields =
			{
				{ Name = "itemID", Type = "number", Nilable = true },
				{ Name = "currencyID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "CraftingReagentSlotInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "mcrSlotID", Type = "number", Nilable = false },
				{ Name = "requiredSkillRank", Type = "number", Nilable = false },
				{ Name = "slotText", Type = "string", Nilable = true },
			},
		},
		{
			Name = "CraftingReagentSlotSchematic",
			Type = "Structure",
			Fields =
			{
				{ Name = "reagents", Type = "table", InnerType = "CraftingReagent", Nilable = false },
				{ Name = "reagentType", Type = "CraftingReagentType", Nilable = false },
				{ Name = "quantityRequired", Type = "number", Nilable = false },
				{ Name = "slotInfo", Type = "CraftingReagentSlotInfo", Nilable = true },
				{ Name = "reagentSlotIndex", Type = "number", Nilable = true },
				{ Name = "mcrSlotIndex", Type = "number", Nilable = true },
				{ Name = "slotIndex", Type = "number", Nilable = false },
			},
		},
		{
			Name = "CraftingResourceReturnInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "itemID", Type = "number", Nilable = false },
				{ Name = "quantity", Type = "number", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
		{
			Name = "NodeOpFailureReason",
			Type = "Enumeration",
			NumValues = 24,
			MinValue = 0,
			MaxValue = 23,
			Fields =
			{
				{ Name = "None", Type = "NodeOpFailureReason", EnumValue = 0 },
				{ Name = "MissingEdgeConnection", Type = "NodeOpFailureReason", EnumValue = 1 },
				{ Name = "RequiredForEdge", Type = "NodeOpFailureReason", EnumValue = 2 },
				{ Name = "MissingRequiredEdge", Type = "NodeOpFailureReason", EnumValue = 3 },
				{ Name = "HasMutuallyExclusiveEdge", Type = "NodeOpFailureReason", EnumValue = 4 },
				{ Name = "NotEnoughSourcedCurrencySpent", Type = "NodeOpFailureReason", EnumValue = 5 },
				{ Name = "NotEnoughCurrencySpent", Type = "NodeOpFailureReason", EnumValue = 6 },
				{ Name = "NotEnoughGoldSpent", Type = "NodeOpFailureReason", EnumValue = 7 },
				{ Name = "MissingAchievement", Type = "NodeOpFailureReason", EnumValue = 8 },
				{ Name = "MissingQuest", Type = "NodeOpFailureReason", EnumValue = 9 },
				{ Name = "WrongSpec", Type = "NodeOpFailureReason", EnumValue = 10 },
				{ Name = "WrongSelection", Type = "NodeOpFailureReason", EnumValue = 11 },
				{ Name = "MaxRank", Type = "NodeOpFailureReason", EnumValue = 12 },
				{ Name = "DataError", Type = "NodeOpFailureReason", EnumValue = 13 },
				{ Name = "NotEnoughSourcedCurrency", Type = "NodeOpFailureReason", EnumValue = 14 },
				{ Name = "NotEnoughCurrency", Type = "NodeOpFailureReason", EnumValue = 15 },
				{ Name = "NotEnoughGold", Type = "NodeOpFailureReason", EnumValue = 16 },
				{ Name = "SameSelection", Type = "NodeOpFailureReason", EnumValue = 17 },
				{ Name = "NodeNotFound", Type = "NodeOpFailureReason", EnumValue = 18 },
				{ Name = "EntryNotFound", Type = "NodeOpFailureReason", EnumValue = 19 },
				{ Name = "RequiredForCondition", Type = "NodeOpFailureReason", EnumValue = 20 },
				{ Name = "WrongTreeID", Type = "NodeOpFailureReason", EnumValue = 21 },
				{ Name = "LevelTooLow", Type = "NodeOpFailureReason", EnumValue = 22 },
				{ Name = "TreeFlaggedNoRefund", Type = "NodeOpFailureReason", EnumValue = 23 },
			},
		},
		{
			Name = "SharedStringFlag",
			Type = "Enumeration",
			NumValues = 1,
			MinValue = 1,
			MaxValue = 1,
			Fields =
			{
				{ Name = "InternalOnly", Type = "SharedStringFlag", EnumValue = 1 },
			},
		},
		{
			Name = "TraitCombatConfigFlags",
			Type = "Enumeration",
			NumValues = 1,
			MinValue = 1,
			MaxValue = 1,
			Fields =
			{
				{ Name = "ActiveForSpec", Type = "TraitCombatConfigFlags", EnumValue = 1 },
			},
		},
		{
			Name = "TraitCondFlag",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 1,
			MaxValue = 4,
			Fields =
			{
				{ Name = "IsGate", Type = "TraitCondFlag", EnumValue = 1 },
				{ Name = "IsAlwaysMet", Type = "TraitCondFlag", EnumValue = 2 },
				{ Name = "IsSufficient", Type = "TraitCondFlag", EnumValue = 4 },
			},
		},
		{
			Name = "TraitConditionType",
			Type = "Enumeration",
			NumValues = 4,
			MinValue = 0,
			MaxValue = 3,
			Fields =
			{
				{ Name = "Available", Type = "TraitConditionType", EnumValue = 0 },
				{ Name = "Visible", Type = "TraitConditionType", EnumValue = 1 },
				{ Name = "Granted", Type = "TraitConditionType", EnumValue = 2 },
				{ Name = "Increased", Type = "TraitConditionType", EnumValue = 3 },
			},
		},
		{
			Name = "TraitConfigDbState",
			Type = "Enumeration",
			NumValues = 4,
			MinValue = 0,
			MaxValue = 3,
			Fields =
			{
				{ Name = "Ready", Type = "TraitConfigDbState", EnumValue = 0 },
				{ Name = "Created", Type = "TraitConfigDbState", EnumValue = 1 },
				{ Name = "Removed", Type = "TraitConfigDbState", EnumValue = 2 },
				{ Name = "Deleted", Type = "TraitConfigDbState", EnumValue = 3 },
			},
		},
		{
			Name = "TraitConfigType",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 0,
			MaxValue = 2,
			Fields =
			{
				{ Name = "Invalid", Type = "TraitConfigType", EnumValue = 0 },
				{ Name = "Combat", Type = "TraitConfigType", EnumValue = 1 },
				{ Name = "Profession", Type = "TraitConfigType", EnumValue = 2 },
			},
		},
		{
			Name = "TraitCostDefinitionType",
			Type = "Enumeration",
			NumValues = 4,
			MinValue = 0,
			MaxValue = 3,
			Fields =
			{
				{ Name = "PrimaryCurrency", Type = "TraitCostDefinitionType", EnumValue = 0 },
				{ Name = "SecondaryCurrency", Type = "TraitCostDefinitionType", EnumValue = 1 },
				{ Name = "Item", Type = "TraitCostDefinitionType", EnumValue = 2 },
				{ Name = "Gold", Type = "TraitCostDefinitionType", EnumValue = 3 },
			},
		},
		{
			Name = "TraitCurrencyFlag",
			Type = "Enumeration",
			NumValues = 4,
			MinValue = 1,
			MaxValue = 8,
			Fields =
			{
				{ Name = "ShowQuantityAsSpent", Type = "TraitCurrencyFlag", EnumValue = 1 },
				{ Name = "TraitSourcedShowMax", Type = "TraitCurrencyFlag", EnumValue = 2 },
				{ Name = "UseClassIcon", Type = "TraitCurrencyFlag", EnumValue = 4 },
				{ Name = "UseSpecIcon", Type = "TraitCurrencyFlag", EnumValue = 8 },
			},
		},
		{
			Name = "TraitCurrencyType",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 0,
			MaxValue = 2,
			Fields =
			{
				{ Name = "Gold", Type = "TraitCurrencyType", EnumValue = 0 },
				{ Name = "CurrencyTypesBased", Type = "TraitCurrencyType", EnumValue = 1 },
				{ Name = "TraitSourced", Type = "TraitCurrencyType", EnumValue = 2 },
			},
		},
		{
			Name = "TraitEdgeType",
			Type = "Enumeration",
			NumValues = 6,
			MinValue = 0,
			MaxValue = 5,
			Fields =
			{
				{ Name = "VisualOnly", Type = "TraitEdgeType", EnumValue = 0 },
				{ Name = "DeprecatedRankConnection", Type = "TraitEdgeType", EnumValue = 1 },
				{ Name = "SufficientForAvailability", Type = "TraitEdgeType", EnumValue = 2 },
				{ Name = "RequiredForAvailability", Type = "TraitEdgeType", EnumValue = 3 },
				{ Name = "MutuallyExclusive", Type = "TraitEdgeType", EnumValue = 4 },
				{ Name = "DeprecatedSelectionOption", Type = "TraitEdgeType", EnumValue = 5 },
			},
		},
		{
			Name = "TraitEdgeVisualStyle",
			Type = "Enumeration",
			NumValues = 2,
			MinValue = 0,
			MaxValue = 1,
			Fields =
			{
				{ Name = "None", Type = "TraitEdgeVisualStyle", EnumValue = 0 },
				{ Name = "Straight", Type = "TraitEdgeVisualStyle", EnumValue = 1 },
			},
		},
		{
			Name = "TraitNodeEntryType",
			Type = "Enumeration",
			NumValues = 10,
			MinValue = 0,
			MaxValue = 9,
			Fields =
			{
				{ Name = "SpendHex", Type = "TraitNodeEntryType", EnumValue = 0 },
				{ Name = "SpendSquare", Type = "TraitNodeEntryType", EnumValue = 1 },
				{ Name = "SpendCircle", Type = "TraitNodeEntryType", EnumValue = 2 },
				{ Name = "SpendSmallCircle", Type = "TraitNodeEntryType", EnumValue = 3 },
				{ Name = "DeprecatedSelect", Type = "TraitNodeEntryType", EnumValue = 4 },
				{ Name = "DragAndDrop", Type = "TraitNodeEntryType", EnumValue = 5 },
				{ Name = "SpendDiamond", Type = "TraitNodeEntryType", EnumValue = 6 },
				{ Name = "ProfPath", Type = "TraitNodeEntryType", EnumValue = 7 },
				{ Name = "ProfPerk", Type = "TraitNodeEntryType", EnumValue = 8 },
				{ Name = "ProfPathUnlock", Type = "TraitNodeEntryType", EnumValue = 9 },
			},
		},
		{
			Name = "TraitNodeFlag",
			Type = "Enumeration",
			NumValues = 1,
			MinValue = 1,
			MaxValue = 1,
			Fields =
			{
				{ Name = "ShowMultipleIcons", Type = "TraitNodeFlag", EnumValue = 1 },
			},
		},
		{
			Name = "TraitNodeGroupFlag",
			Type = "Enumeration",
			NumValues = 1,
			MinValue = 1,
			MaxValue = 1,
			Fields =
			{
				{ Name = "AvailableByDefault", Type = "TraitNodeGroupFlag", EnumValue = 1 },
			},
		},
		{
			Name = "TraitNodeType",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 0,
			MaxValue = 2,
			Fields =
			{
				{ Name = "Single", Type = "TraitNodeType", EnumValue = 0 },
				{ Name = "Tiered", Type = "TraitNodeType", EnumValue = 1 },
				{ Name = "Selection", Type = "TraitNodeType", EnumValue = 2 },
			},
		},
		{
			Name = "TraitPointsOperationType",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = -1,
			MaxValue = 1,
			Fields =
			{
				{ Name = "None", Type = "TraitPointsOperationType", EnumValue = -1 },
				{ Name = "Set", Type = "TraitPointsOperationType", EnumValue = 0 },
				{ Name = "Multiply", Type = "TraitPointsOperationType", EnumValue = 1 },
			},
		},
		{
			Name = "TraitTreeFlag",
			Type = "Enumeration",
			NumValues = 1,
			MinValue = 1,
			MaxValue = 1,
			Fields =
			{
				{ Name = "CannotRefund", Type = "TraitTreeFlag", EnumValue = 1 },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
		{
			Name = "TransmogCollectionType",
			Type = "Enumeration",
			NumValues = 30,
			MinValue = 0,
			MaxValue = 29,
			Fields =
			{
				{ Name = "None", Type = "TransmogCollectionType", EnumValue = 0 },
				{ Name = "Head", Type = "TransmogCollectionType", EnumValue = 1 },
				{ Name = "Shoulder", Type = "TransmogCollectionType", EnumValue = 2 },
				{ Name = "Back", Type = "TransmogCollectionType", EnumValue = 3 },
				{ Name = "Chest", Type = "TransmogCollectionType", EnumValue = 4 },
				{ Name = "Shirt", Type = "TransmogCollectionType", EnumValue = 5 },
				{ Name = "Tabard", Type = "TransmogCollectionType", EnumValue = 6 },
				{ Name = "Wrist", Type = "TransmogCollectionType", EnumValue = 7 },
				{ Name = "Hands", Type = "TransmogCollectionType", EnumValue = 8 },
				{ Name = "Waist", Type = "TransmogCollectionType", EnumValue = 9 },
				{ Name = "Legs", Type = "TransmogCollectionType", EnumValue = 10 },
				{ Name = "Feet", Type = "TransmogCollectionType", EnumValue = 11 },
				{ Name = "Wand", Type = "TransmogCollectionType", EnumValue = 12 },
				{ Name = "OneHAxe", Type = "TransmogCollectionType", EnumValue = 13 },
				{ Name = "OneHSword", Type = "TransmogCollectionType", EnumValue = 14 },
				{ Name = "OneHMace", Type = "TransmogCollectionType", EnumValue = 15 },
				{ Name = "Dagger", Type = "TransmogCollectionType", EnumValue = 16 },
				{ Name = "Fist", Type = "TransmogCollectionType", EnumValue = 17 },
				{ Name = "Shield", Type = "TransmogCollectionType", EnumValue = 18 },
				{ Name = "Holdable", Type = "TransmogCollectionType", EnumValue = 19 },
				{ Name = "TwoHAxe", Type = "TransmogCollectionType", EnumValue = 20 },
				{ Name = "TwoHSword", Type = "TransmogCollectionType", EnumValue = 21 },
				{ Name = "TwoHMace", Type = "TransmogCollectionType", EnumValue = 22 },
				{ Name = "Staff", Type = "TransmogCollectionType", EnumValue = 23 },
				{ Name = "Polearm", Type = "TransmogCollectionType", EnumValue = 24 },
				{ Name = "Bow", Type = "TransmogCollectionType", EnumValue = 25 },
				{ Name = "Gun", Type = "TransmogCollectionType", EnumValue = 26 },
				{ Name = "Crossbow", Type = "TransmogCollectionType", EnumValue = 27 },
				{ Name = "Warglaives", Type = "TransmogCollectionType", EnumValue = 28 },
				{ Name = "Paired", Type = "TransmogCollectionType", EnumValue = 29 },
			},
		},
		{
			Name = "TransmogModification",
			Type = "Enumeration",
			NumValues = 2,
			MinValue = 0,
			MaxValue = 1,
			Fields =
			{
				{ Name = "Main", Type = "TransmogModification", EnumValue = 0 },
				{ Name = "Secondary", Type = "TransmogModification", EnumValue = 1 },
			},
		},
		{
			Name = "TransmogSearchType",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 1,
			MaxValue = 3,
			Fields =
			{
				{ Name = "Items", Type = "TransmogSearchType", EnumValue = 1 },
				{ Name = "BaseSets", Type = "TransmogSearchType", EnumValue = 2 },
				{ Name = "UsableSets", Type = "TransmogSearchType", EnumValue = 3 },
			},
		},
		{
			Name = "TransmogSource",
			Type = "Enumeration",
			NumValues = 10,
			MinValue = 0,
			MaxValue = 9,
			Fields =
			{
				{ Name = "None", Type = "TransmogSource", EnumValue = 0 },
				{ Name = "JournalEncounter", Type = "TransmogSource", EnumValue = 1 },
				{ Name = "Quest", Type = "TransmogSource", EnumValue = 2 },
				{ Name = "Vendor", Type = "TransmogSource", EnumValue = 3 },
				{ Name = "WorldDrop", Type = "TransmogSource", EnumValue = 4 },
				{ Name = "HiddenUntilCollected", Type = "TransmogSource", EnumValue = 5 },
				{ Name = "CantCollect", Type = "TransmogSource", EnumValue = 6 },
				{ Name = "Achievement", Type = "TransmogSource", EnumValue = 7 },
				{ Name = "Profession", Type = "TransmogSource", EnumValue = 8 },
				{ Name = "NotValidForTransmog", Type = "TransmogSource", EnumValue = 9 },
			},
		},
		{
			Name = "TransmogType",
			Type = "Enumeration",
			NumValues = 2,
			MinValue = 0,
			MaxValue = 1,
			Fields =
			{
				{ Name = "Appearance", Type = "TransmogType", EnumValue = 0 },
				{ Name = "Illusion", Type = "TransmogType", EnumValue = 1 },
			},
		},
		{
			Name = "TransmogUseErrorType",
			Type = "Enumeration",
			NumValues = 7,
			MinValue = 0,
			MaxValue = 6,
			Fields =
			{
				{ Name = "None", Type = "TransmogUseErrorType", EnumValue = 0 },
				{ Name = "PlayerCondition", Type = "TransmogUseErrorType", EnumValue = 1 },
				{ Name = "Skill", Type = "TransmogUseErrorType", EnumValue = 2 },
				{ Name = "Ability", Type = "TransmogUseErrorType", EnumValue = 3 },
				{ Name = "Faction", Type = "TransmogUseErrorType", EnumValue = 4 },
				{ Name = "Holiday", Type = "TransmogUseErrorType", EnumValue = 5 },
				{ Name = "HotRecheckFailed", Type = "TransmogUseErrorType", EnumValue = 6 },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
		{
			Name = "UIWidgetLayoutDirection",
			Type = "Enumeration",
			NumValues = 5,
			MinValue = 0,
			MaxValue = 4,
			Fields =
			{
				{ Name = "Default", Type = "UIWidgetLayoutDirection", EnumValue = 0 },
				{ Name = "Vertical", Type = "UIWidgetLayoutDirection", EnumValue = 1 },
				{ Name = "Horizontal", Type = "UIWidgetLayoutDirection", EnumValue = 2 },
				{ Name = "Overlap", Type = "UIWidgetLayoutDirection", EnumValue = 3 },
				{ Name = "HorizontalForceNewRow", Type = "UIWidgetLayoutDirection", EnumValue = 4 },
			},
		},
		{
			Name = "UIWidgetScale",
			Type = "Enumeration",
			NumValues = 6,
			MinValue = 0,
			MaxValue = 5,
			Fields =
			{
				{ Name = "OneHundred", Type = "UIWidgetScale", EnumValue = 0 },
				{ Name = "Ninty", Type = "UIWidgetScale", EnumValue = 1 },
				{ Name = "Eighty", Type = "UIWidgetScale", EnumValue = 2 },
				{ Name = "Seventy", Type = "UIWidgetScale", EnumValue = 3 },
				{ Name = "Sixty", Type = "UIWidgetScale", EnumValue = 4 },
				{ Name = "Fifty", Type = "UIWidgetScale", EnumValue = 5 },
			},
		},
		{
			Name = "UIWidgetSetLayoutDirection",
			Type = "Enumeration",
			NumValues = 2,
			MinValue = 0,
			MaxValue = 1,
			Fields =
			{
				{ Name = "Vertical", Type = "UIWidgetSetLayoutDirection", EnumValue = 0 },
				{ Name = "Horizontal", Type = "UIWidgetSetLayoutDirection", EnumValue = 1 },
			},
		},
		{
			Name = "UIWidgetVisualizationType",
			Type = "Enumeration",
			NumValues = 24,
			MinValue = 0,
			MaxValue = 23,
			Fields =
			{
				{ Name = "IconAndText", Type = "UIWidgetVisualizationType", EnumValue = 0 },
				{ Name = "CaptureBar", Type = "UIWidgetVisualizationType", EnumValue = 1 },
				{ Name = "StatusBar", Type = "UIWidgetVisualizationType", EnumValue = 2 },
				{ Name = "DoubleStatusBar", Type = "UIWidgetVisualizationType", EnumValue = 3 },
				{ Name = "IconTextAndBackground", Type = "UIWidgetVisualizationType", EnumValue = 4 },
				{ Name = "DoubleIconAndText", Type = "UIWidgetVisualizationType", EnumValue = 5 },
				{ Name = "StackedResourceTracker", Type = "UIWidgetVisualizationType", EnumValue = 6 },
				{ Name = "IconTextAndCurrencies", Type = "UIWidgetVisualizationType", EnumValue = 7 },
				{ Name = "TextWithState", Type = "UIWidgetVisualizationType", EnumValue = 8 },
				{ Name = "HorizontalCurrencies", Type = "UIWidgetVisualizationType", EnumValue = 9 },
				{ Name = "BulletTextList", Type = "UIWidgetVisualizationType", EnumValue = 10 },
				{ Name = "ScenarioHeaderCurrenciesAndBackground", Type = "UIWidgetVisualizationType", EnumValue = 11 },
				{ Name = "TextureAndText", Type = "UIWidgetVisualizationType", EnumValue = 12 },
				{ Name = "SpellDisplay", Type = "UIWidgetVisualizationType", EnumValue = 13 },
				{ Name = "DoubleStateIconRow", Type = "UIWidgetVisualizationType", EnumValue = 14 },
				{ Name = "TextureAndTextRow", Type = "UIWidgetVisualizationType", EnumValue = 15 },
				{ Name = "ZoneControl", Type = "UIWidgetVisualizationType", EnumValue = 16 },
				{ Name = "CaptureZone", Type = "UIWidgetVisualizationType", EnumValue = 17 },
				{ Name = "TextureWithAnimation", Type = "UIWidgetVisualizationType", EnumValue = 18 },
				{ Name = "DiscreteProgressSteps", Type = "UIWidgetVisualizationType", EnumValue = 19 },
				{ Name = "ScenarioHeaderTimer", Type = "UIWidgetVisualizationType", EnumValue = 20 },
				{ Name = "TextColumnRow", Type = "UIWidgetVisualizationType", EnumValue = 21 },
				{ Name = "Spacer", Type = "UIWidgetVisualizationType", EnumValue = 22 },
				{ Name = "UnitPowerBar", Type = "UIWidgetVisualizationType", EnumValue = 23 },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
		{
			Name = "UnitSex",
			Type = "Enumeration",
			NumValues = 5,
			MinValue = 0,
			MaxValue = 4,
			Fields =
			{
				{ Name = "Male", Type = "UnitSex", EnumValue = 0 },
				{ Name = "Female", Type = "UnitSex", EnumValue = 1 },
				{ Name = "None", Type = "UnitSex", EnumValue = 2 },
				{ Name = "Both", Type = "UnitSex", EnumValue = 3 },
				{ Name = "Neutral", Type = "UnitSex", EnumValue = 4 },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
		{
			Name = "VignetteType",
			Type = "Enumeration",
			NumValues = 4,
			MinValue = 0,
			MaxValue = 3,
			Fields =
			{
				{ Name = "Normal", Type = "VignetteType", EnumValue = 0 },
				{ Name = "PvPBounty", Type = "VignetteType", EnumValue = 1 },
				{ Name = "Torghast", Type = "VignetteType", EnumValue = 2 },
				{ Name = "Treasure", Type = "VignetteType", EnumValue = 3 },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
		{
			Name = "ClickBindingInteraction",
			Type = "Enumeration",
			NumValues = 2,
			MinValue = 1,
			MaxValue = 2,
			Fields =
			{
				{ Name = "Target", Type = "ClickBindingInteraction", EnumValue = 1 },
				{ Name = "OpenContextMenu", Type = "ClickBindingInteraction", EnumValue = 2 },
			},
		},
		{
			Name = "ClickBindingType",
			Type = "Enumeration",
			NumValues = 4,
			MinValue = 0,
			MaxValue = 3,
			Fields =
			{
				{ Name = "None", Type = "ClickBindingType", EnumValue = 0 },
				{ Name = "Spell", Type = "ClickBindingType", EnumValue = 1 },
				{ Name = "Macro", Type = "ClickBindingType", EnumValue = 2 },
				{ Name = "Interaction", Type = "ClickBindingType", EnumValue = 3 },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
		{
			Name = "CallingStates",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 0,
			MaxValue = 2,
			Fields =
			{
				{ Name = "QuestOffer", Type = "CallingStates", EnumValue = 0 },
				{ Name = "QuestActive", Type = "CallingStates", EnumValue = 1 },
				{ Name = "QuestCompleted", Type = "CallingStates", EnumValue = 2 },
			},
		},
		{
			Name = "Callings",
			Type = "Constants",
			Values =
			{
				{ Name = "MaxCallings", Type = "number", Value = 3 },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
		{
			Name = "CraftingOrderCustomerCategoryType",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 0,
			MaxValue = 2,
			Fields =
			{
				{ Name = "Primary", Type = "CraftingOrderCustomerCategoryType", EnumValue = 0 },
				{ Name = "Secondary", Type = "CraftingOrderCustomerCategoryType", EnumValue = 1 },
				{ Name = "Tertiary", Type = "CraftingOrderCustomerCategoryType", EnumValue = 2 },
			},
		},
		{
			Name = "CraftingOrderCustomerCategoryFilters",
			Type = "Structure",
			Fields =
			{
				{ Name = "primaryCategoryID", Type = "number", Nilable = true },
				{ Name = "secondaryCategoryID", Type = "number", Nilable = true },
				{ Name = "tertiaryCategoryID", Type = "number", Nilable = true },
			},
		},
		{
			Name = "CraftingOrderCustomerOption",
			Type = "Structure",
			Fields =
			{
				{ Name = "skillLineAbilityID", Type = "number", Nilable = false },
				{ Name = "professionID", Type = "number", Nilable = false },
				{ Name = "skillUpSkillLineID", Type = "number", Nilable = false },
				{ Name = "spellID", Type = "number", Nilable = false },
				{ Name = "itemID", Type = "number", Nilable = false },
				{ Name = "itemName", Type = "string", Nilable = false },
				{ Name = "primaryCategoryID", Type = "number", Nilable = false },
				{ Name = "iLvl", Type = "number", Nilable = false },
				{ Name = "slots", Type = "number", Nilable = true },
				{ Name = "level", Type = "number", Nilable = true },
				{ Name = "skill", Type = "number", Nilable = true },
				{ Name = "secondaryCategoryID", Type = "number", Nilable = true },
				{ Name = "tertiaryCategoryID", Type = "number", Nilable = true },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
		{
			Name = "CurrencyDestroyReason",
			Type = "Enumeration",
			NumValues = 12,
			MinValue = 0,
			MaxValue = 11,
			Fields =
			{
				{ Name = "Cheat", Type = "CurrencyDestroyReason", EnumValue = 0 },
				{ Name = "Spell", Type = "CurrencyDestroyReason", EnumValue = 1 },
				{ Name = "VersionUpdate", Type = "CurrencyDestroyReason", EnumValue = 2 },
				{ Name = "QuestTurnin", Type = "CurrencyDestroyReason", EnumValue = 3 },
				{ Name = "Vendor", Type = "CurrencyDestroyReason", EnumValue = 4 },
				{ Name = "Trade", Type = "CurrencyDestroyReason", EnumValue = 5 },
				{ Name = "Capped", Type = "CurrencyDestroyReason", EnumValue = 6 },
				{ Name = "Garrison", Type = "CurrencyDestroyReason", EnumValue = 7 },
				{ Name = "DroppedToCorpse", Type = "CurrencyDestroyReason", EnumValue = 8 },
				{ Name = "BonusRoll", Type = "CurrencyDestroyReason", EnumValue = 9 },
				{ Name = "FactionConversion", Type = "CurrencyDestroyReason", EnumValue = 10 },
				{ Name = "Last", Type = "CurrencyDestroyReason", EnumValue = 11 },
			},
		},
		{
			Name = "CurrencySource",
			Type = "Enumeration",
			NumValues = 57,
			MinValue = 0,
			MaxValue = 56,
			Fields =
			{
				{ Name = "ConvertOldItem", Type = "CurrencySource", EnumValue = 0 },
				{ Name = "ConvertOldPvPCurrency", Type = "CurrencySource", EnumValue = 1 },
				{ Name = "ItemRefund", Type = "CurrencySource", EnumValue = 2 },
				{ Name = "QuestReward", Type = "CurrencySource", EnumValue = 3 },
				{ Name = "Cheat", Type = "CurrencySource", EnumValue = 4 },
				{ Name = "Vendor", Type = "CurrencySource", EnumValue = 5 },
				{ Name = "PvPKillCredit", Type = "CurrencySource", EnumValue = 6 },
				{ Name = "PvPMetaCredit", Type = "CurrencySource", EnumValue = 7 },
				{ Name = "PvPScriptedAward", Type = "CurrencySource", EnumValue = 8 },
				{ Name = "Loot", Type = "CurrencySource", EnumValue = 9 },
				{ Name = "UpdatingVersion", Type = "CurrencySource", EnumValue = 10 },
				{ Name = "LFGReward", Type = "CurrencySource", EnumValue = 11 },
				{ Name = "Trade", Type = "CurrencySource", EnumValue = 12 },
				{ Name = "Spell", Type = "CurrencySource", EnumValue = 13 },
				{ Name = "ItemDeletion", Type = "CurrencySource", EnumValue = 14 },
				{ Name = "RatedBattleground", Type = "CurrencySource", EnumValue = 15 },
				{ Name = "RandomBattleground", Type = "CurrencySource", EnumValue = 16 },
				{ Name = "Arena", Type = "CurrencySource", EnumValue = 17 },
				{ Name = "ExceededMaxQty", Type = "CurrencySource", EnumValue = 18 },
				{ Name = "PvPCompletionBonus", Type = "CurrencySource", EnumValue = 19 },
				{ Name = "Script", Type = "CurrencySource", EnumValue = 20 },
				{ Name = "GuildBankWithdrawal", Type = "CurrencySource", EnumValue = 21 },
				{ Name = "Pushloot", Type = "CurrencySource", EnumValue = 22 },
				{ Name = "GarrisonBuilding", Type = "CurrencySource", EnumValue = 23 },
				{ Name = "PvPDrop", Type = "CurrencySource", EnumValue = 24 },
				{ Name = "GarrisonFollowerActivation", Type = "CurrencySource", EnumValue = 25 },
				{ Name = "GarrisonBuildingRefund", Type = "CurrencySource", EnumValue = 26 },
				{ Name = "GarrisonMissionReward", Type = "CurrencySource", EnumValue = 27 },
				{ Name = "GarrisonResourceOverTime", Type = "CurrencySource", EnumValue = 28 },
				{ Name = "QuestRewardIgnoreCaps", Type = "CurrencySource", EnumValue = 29 },
				{ Name = "GarrisonTalent", Type = "CurrencySource", EnumValue = 30 },
				{ Name = "GarrisonWorldQuestBonus", Type = "CurrencySource", EnumValue = 31 },
				{ Name = "PvPHonorReward", Type = "CurrencySource", EnumValue = 32 },
				{ Name = "BonusRoll", Type = "CurrencySource", EnumValue = 33 },
				{ Name = "AzeriteRespec", Type = "CurrencySource", EnumValue = 34 },
				{ Name = "WorldQuestReward", Type = "CurrencySource", EnumValue = 35 },
				{ Name = "WorldQuestRewardIgnoreCaps", Type = "CurrencySource", EnumValue = 36 },
				{ Name = "FactionConversion", Type = "CurrencySource", EnumValue = 37 },
				{ Name = "DailyQuestReward", Type = "CurrencySource", EnumValue = 38 },
				{ Name = "DailyQuestWarModeReward", Type = "CurrencySource", EnumValue = 39 },
				{ Name = "WeeklyQuestReward", Type = "CurrencySource", EnumValue = 40 },
				{ Name = "WeeklyQuestWarModeReward", Type = "CurrencySource", EnumValue = 41 },
				{ Name = "AccountCopy", Type = "CurrencySource", EnumValue = 42 },
				{ Name = "WeeklyRewardChest", Type = "CurrencySource", EnumValue = 43 },
				{ Name = "GarrisonTalentTreeReset", Type = "CurrencySource", EnumValue = 44 },
				{ Name = "DailyReset", Type = "CurrencySource", EnumValue = 45 },
				{ Name = "AddConduitToCollection", Type = "CurrencySource", EnumValue = 46 },
				{ Name = "Barbershop", Type = "CurrencySource", EnumValue = 47 },
				{ Name = "ConvertItemsToCurrencyValue", Type = "CurrencySource", EnumValue = 48 },
				{ Name = "PvPTeamContribution", Type = "CurrencySource", EnumValue = 49 },
				{ Name = "Transmogrify", Type = "CurrencySource", EnumValue = 50 },
				{ Name = "AuctionDeposit", Type = "CurrencySource", EnumValue = 51 },
				{ Name = "PlayerTrait", Type = "CurrencySource", EnumValue = 52 },
				{ Name = "PhBuffer_53", Type = "CurrencySource", EnumValue = 53 },
				{ Name = "PhBuffer_54", Type = "CurrencySource", EnumValue = 54 },
				{ Name = "RenownRepGain", Type = "CurrencySource", EnumValue = 55 },
				{ Name = "Last", Type = "CurrencySource", EnumValue = 56 },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
		{
			Name = "GarrisonAbilityEffect",
			Type = "Structure",
			Fields =
			{
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "description", Type = "string", Nilable = false },
				{ Name = "icon", Type = "number", Nilable = false },
				{ Name = "factor", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GarrisonFollowerAbilityInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "id", Type = "number", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "description", Type = "string", Nilable = false },
				{ Name = "icon", Type = "number", Nilable = false },
				{ Name = "isTrait", Type = "bool", Nilable = false },
				{ Name = "isSpecialization", Type = "bool", Nilable = false },
				{ Name = "temporary", Type = "bool", Nilable = false },
				{ Name = "category", Type = "string", Nilable = true },
				{ Name = "counters", Type = "table", InnerType = "GarrisonAbilityEffect", Nilable = false },
				{ Name = "isEmptySlot", Type = "bool", Nilable = false },
			},
		},
		{
			Name = "GarrisonTalentCurrencyCostInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "currencyType", Type = "number", Nilable = false },
				{ Name = "currencyQuantity", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GarrisonTalentInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "id", Type = "number", Nilable = false },
				{ Name = "ability", Type = "GarrisonFollowerAbilityInfo", Nilable = false },
				{ Name = "name", Type = "string", Nilable = false },
				{ Name = "icon", Type = "number", Nilable = false },
				{ Name = "tier", Type = "number", Nilable = false },
				{ Name = "uiOrder", Type = "number", Nilable = false },
				{ Name = "type", Type = "number", Nilable = false },
				{ Name = "prerequisiteTalentID", Type = "number", Nilable = true },
				{ Name = "selected", Type = "bool", Nilable = false },
				{ Name = "researched", Type = "bool", Nilable = false },
				{ Name = "ignoreTalent", Type = "bool", Nilable = false },
				{ Name = "researchDuration", Type = "number", Nilable = false },
				{ Name = "startTime", Type = "number", Nilable = false },
				{ Name = "timeRemaining", Type = "number", Nilable = false },
				{ Name = "researchGoldCost", Type = "number", Nilable = false },
				{ Name = "researchCurrencyCosts", Type = "table", InnerType = "GarrisonTalentCurrencyCostInfo", Nilable = false },
				{ Name = "talentAvailability", Type = "GarrisonTalentAvailability", Nilable = false },
				{ Name = "talentRank", Type = "number", Nilable = false },
				{ Name = "talentMaxRank", Type = "number", Nilable = false },
				{ Name = "isBeingResearched", Type = "bool", Nilable = false },
				{ Name = "description", Type = "string", Nilable = false },
				{ Name = "perkSpellID", Type = "number", Nilable = false },
				{ Name = "researchDescription", Type = "string", Nilable = true },
				{ Name = "playerConditionReason", Type = "string", Nilable = true },
				{ Name = "socketInfo", Type = "GarrisonTalentSocketInfo", Nilable = false },
				{ Name = "treeID", Type = "number", Nilable = false },
			},
		},
		{
			Name = "GarrisonTalentSocketInfo",
			Type = "Structure",
			Fields =
			{
				{ Name = "socketType", Type = "number", Nilable = false },
				{ Name = "socketSubtype", Type = "number", Nilable = false },
				{ Name = "misc0", Type = "number", Nilable = false },
				{ Name = "misc1", Type = "number", Nilable = false },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
		{
			Name = "ItemGemSubclass",
			Type = "Enumeration",
			NumValues = 12,
			MinValue = 0,
			MaxValue = 11,
			Fields =
			{
				{ Name = "Intellect", Type = "ItemGemSubclass", EnumValue = 0 },
				{ Name = "Agility", Type = "ItemGemSubclass", EnumValue = 1 },
				{ Name = "Strength", Type = "ItemGemSubclass", EnumValue = 2 },
				{ Name = "Stamina", Type = "ItemGemSubclass", EnumValue = 3 },
				{ Name = "Spirit", Type = "ItemGemSubclass", EnumValue = 4 },
				{ Name = "Criticalstrike", Type = "ItemGemSubclass", EnumValue = 5 },
				{ Name = "Mastery", Type = "ItemGemSubclass", EnumValue = 6 },
				{ Name = "Haste", Type = "ItemGemSubclass", EnumValue = 7 },
				{ Name = "Versatility", Type = "ItemGemSubclass", EnumValue = 8 },
				{ Name = "Other", Type = "ItemGemSubclass", EnumValue = 9 },
				{ Name = "Multiplestats", Type = "ItemGemSubclass", EnumValue = 10 },
				{ Name = "Artifactrelic", Type = "ItemGemSubclass", EnumValue = 11 },
			},
		},
		{
			Name = "PointsModifierSourceType",
			Type = "Enumeration",
			NumValues = 63,
			MinValue = 0,
			MaxValue = 62,
			Fields =
			{
				{ Name = "PlayerLevel", Type = "PointsModifierSourceType", EnumValue = 0 },
				{ Name = "SkillRank", Type = "PointsModifierSourceType", EnumValue = 1 },
				{ Name = "ProgressiveEventMissCount", Type = "PointsModifierSourceType", EnumValue = 2 },
				{ Name = "ProgressiveEventItemWinCount", Type = "PointsModifierSourceType", EnumValue = 3 },
				{ Name = "NumLooters", Type = "PointsModifierSourceType", EnumValue = 4 },
				{ Name = "BaseItemLevel", Type = "PointsModifierSourceType", EnumValue = 5 },
				{ Name = "LootLevel", Type = "PointsModifierSourceType", EnumValue = 6 },
				{ Name = "InstanceGroupSize", Type = "PointsModifierSourceType", EnumValue = 7 },
				{ Name = "QuestItemGroupMissCount", Type = "PointsModifierSourceType", EnumValue = 8 },
				{ Name = "TreasureItemPvalue", Type = "PointsModifierSourceType", EnumValue = 9 },
				{ Name = "FollowerLevelInBuilding", Type = "PointsModifierSourceType", EnumValue = 10 },
				{ Name = "FollowerQualityInBuilding", Type = "PointsModifierSourceType", EnumValue = 11 },
				{ Name = "NumGroupFriends", Type = "PointsModifierSourceType", EnumValue = 12 },
				{ Name = "FollowerLevelForCurrentShipment", Type = "PointsModifierSourceType", EnumValue = 13 },
				{ Name = "FollowerQualityForCurrentShipment", Type = "PointsModifierSourceType", EnumValue = 14 },
				{ Name = "PvPBracketRatingSpecific", Type = "PointsModifierSourceType", EnumValue = 15 },
				{ Name = "ChallengeModeLevel", Type = "PointsModifierSourceType", EnumValue = 16 },
				{ Name = "CurrencyMaxDelta", Type = "PointsModifierSourceType", EnumValue = 17 },
				{ Name = "WorldStateValue", Type = "PointsModifierSourceType", EnumValue = 18 },
				{ Name = "PlayerKeystoneLevel", Type = "PointsModifierSourceType", EnumValue = 19 },
				{ Name = "PlayerCondition", Type = "PointsModifierSourceType", EnumValue = 20 },
				{ Name = "PassesTreasureTrackingQuestEligibility", Type = "PointsModifierSourceType", EnumValue = 21 },
				{ Name = "PvPBracketRatingCurrentInstance", Type = "PointsModifierSourceType", EnumValue = 22 },
				{ Name = "PvPTeamSize", Type = "PointsModifierSourceType", EnumValue = 23 },
				{ Name = "ItemLevelHighWaterMarkAverage", Type = "PointsModifierSourceType", EnumValue = 24 },
				{ Name = "ProgressiveEventNumWinsForLootSpec", Type = "PointsModifierSourceType", EnumValue = 25 },
				{ Name = "ProgressiveEventNumRemainingForLootSpec", Type = "PointsModifierSourceType", EnumValue = 26 },
				{ Name = "WorldStateExpression", Type = "PointsModifierSourceType", EnumValue = 27 },
				{ Name = "ProgressiveEventNumRemainingForClass", Type = "PointsModifierSourceType", EnumValue = 28 },
				{ Name = "CreatureClassification", Type = "PointsModifierSourceType", EnumValue = 29 },
				{ Name = "HonorEarnedThisPvPMatch", Type = "PointsModifierSourceType", EnumValue = 30 },
				{ Name = "NumTappers", Type = "PointsModifierSourceType", EnumValue = 31 },
				{ Name = "PvPJackpotTier", Type = "PointsModifierSourceType", EnumValue = 32 },
				{ Name = "PlayerLevelContentTuningMax", Type = "PointsModifierSourceType", EnumValue = 33 },
				{ Name = "SalvagedItemIsCloth", Type = "PointsModifierSourceType", EnumValue = 34 },
				{ Name = "SalvagedItemIsLeather", Type = "PointsModifierSourceType", EnumValue = 35 },
				{ Name = "SalvagedItemIsMail", Type = "PointsModifierSourceType", EnumValue = 36 },
				{ Name = "SalvagedItemIsPlate", Type = "PointsModifierSourceType", EnumValue = 37 },
				{ Name = "SalvagedItemIsMisc", Type = "PointsModifierSourceType", EnumValue = 38 },
				{ Name = "QuestExpansionID", Type = "PointsModifierSourceType", EnumValue = 39 },
				{ Name = "Reserved_2", Type = "PointsModifierSourceType", EnumValue = 40 },
				{ Name = "JailersTowerActiveFloorDifficulty", Type = "PointsModifierSourceType", EnumValue = 41 },
				{ Name = "NumLootSourceAuraStacks", Type = "PointsModifierSourceType", EnumValue = 42 },
				{ Name = "HasLegendaryCloakUpdgradeAvailable", Type = "PointsModifierSourceType", EnumValue = 43 },
				{ Name = "ObjectLevel", Type = "PointsModifierSourceType", EnumValue = 44 },
				{ Name = "PercentThroughContentTuning", Type = "PointsModifierSourceType", EnumValue = 45 },
				{ Name = "PvPTier", Type = "PointsModifierSourceType", EnumValue = 46 },
				{ Name = "CurrencyQuantity", Type = "PointsModifierSourceType", EnumValue = 47 },
				{ Name = "AreaGroup", Type = "PointsModifierSourceType", EnumValue = 48 },
				{ Name = "ObjectLabelID", Type = "PointsModifierSourceType", EnumValue = 49 },
				{ Name = "WeeklyMythicPlusCount", Type = "PointsModifierSourceType", EnumValue = 50 },
				{ Name = "PercentThroughExpansion", Type = "PointsModifierSourceType", EnumValue = 51 },
				{ Name = "AutoMissionScalar", Type = "PointsModifierSourceType", EnumValue = 52 },
				{ Name = "RenownCatchup", Type = "PointsModifierSourceType", EnumValue = 53 },
				{ Name = "RenownRapidCatchup", Type = "PointsModifierSourceType", EnumValue = 54 },
				{ Name = "ParagonLevel", Type = "PointsModifierSourceType", EnumValue = 55 },
				{ Name = "NumPlayersThatGainedDungeonScore", Type = "PointsModifierSourceType", EnumValue = 56 },
				{ Name = "ProfessionQualityLevel", Type = "PointsModifierSourceType", EnumValue = 57 },
				{ Name = "CraftSkill", Type = "PointsModifierSourceType", EnumValue = 58 },
				{ Name = "NumWeeklyRewardsThresholdsEarned", Type = "PointsModifierSourceType", EnumValue = 59 },
				{ Name = "SalvagedItemLevel", Type = "PointsModifierSourceType", EnumValue = 60 },
				{ Name = "ProfessionRatingGatherExtra", Type = "PointsModifierSourceType", EnumValue = 61 },
				{ Name = "ProfessionRatingGatherDiscover", Type = "PointsModifierSourceType", EnumValue = 62 },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
		{
			Name = "RuneforgePowerFilter",
			Type = "Enumeration",
			NumValues = 4,
			MinValue = 0,
			MaxValue = 3,
			Fields =
			{
				{ Name = "All", Type = "RuneforgePowerFilter", EnumValue = 0 },
				{ Name = "Relevant", Type = "RuneforgePowerFilter", EnumValue = 1 },
				{ Name = "Available", Type = "RuneforgePowerFilter", EnumValue = 2 },
				{ Name = "Unavailable", Type = "RuneforgePowerFilter", EnumValue = 3 },
			},
		},
		{
			Name = "RuneforgePowerState",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 0,
			MaxValue = 2,
			Fields =
			{
				{ Name = "Available", Type = "RuneforgePowerState", EnumValue = 0 },
				{ Name = "Unavailable", Type = "RuneforgePowerState", EnumValue = 1 },
				{ Name = "Invalid", Type = "RuneforgePowerState", EnumValue = 2 },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
		{
			Name = "ProfTraitPerkNodeFlags",
			Type = "Enumeration",
			NumValues = 1,
			MinValue = 1,
			MaxValue = 1,
			Fields =
			{
				{ Name = "UnlocksSubpath", Type = "ProfTraitPerkNodeFlags", EnumValue = 1 },
			},
		},
		{
			Name = "ProfessionsSpecPathState",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 0,
			MaxValue = 2,
			Fields =
			{
				{ Name = "Locked", Type = "ProfessionsSpecPathState", EnumValue = 0 },
				{ Name = "Progressing", Type = "ProfessionsSpecPathState", EnumValue = 1 },
				{ Name = "Completed", Type = "ProfessionsSpecPathState", EnumValue = 2 },
			},
		},
		{
			Name = "ProfessionsSpecTabState",
			Type = "Enumeration",
			NumValues = 3,
			MinValue = 0,
			MaxValue = 2,
			Fields =
			{
				{ Name = "Locked", Type = "ProfessionsSpecTabState", EnumValue = 0 },
				{ Name = "Unlocked", Type = "ProfessionsSpecTabState", EnumValue = 1 },
				{ Name = "Unlockable", Type = "ProfessionsSpecTabState", EnumValue = 2 },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
		{
			Name = "RafLinkType",
			Type = "Enumeration",
			NumValues = 4,
			MinValue = 0,
			MaxValue = 3,
			Fields =
			{
				{ Name = "None", Type = "RafLinkType", EnumValue = 0 },
				{ Name = "Recruit", Type = "RafLinkType", EnumValue = 1 },
				{ Name = "Friend", Type = "RafLinkType", EnumValue = 2 },
				{ Name = "Both", Type = "RafLinkType", EnumValue = 3 },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
		{
			Name = "AddSoulbindConduitReason",
			Type = "Enumeration",
			NumValues = 4,
			MinValue = 0,
			MaxValue = 3,
			Fields =
			{
				{ Name = "None", Type = "AddSoulbindConduitReason", EnumValue = 0 },
				{ Name = "Cheat", Type = "AddSoulbindConduitReason", EnumValue = 1 },
				{ Name = "SpellEffect", Type = "AddSoulbindConduitReason", EnumValue = 2 },
				{ Name = "Upgrade", Type = "AddSoulbindConduitReason", EnumValue = 3 },
			},
		},
		{
			Name = "SoulbindConduitFlags",
			Type = "Enumeration",
			NumValues = 1,
			MinValue = 1,
			MaxValue = 1,
			Fields =
			{
				{ Name = "VisibleToGetallsoulbindconduitScript", Type = "SoulbindConduitFlags", EnumValue = 1 },
			},
		},
		{
			Name = "SoulbindConduitInstallResult",
			Type = "Enumeration",
			NumValues = 7,
			MinValue = 0,
			MaxValue = 6,
			Fields =
			{
				{ Name = "Success", Type = "SoulbindConduitInstallResult", EnumValue = 0 },
				{ Name = "InvalidItem", Type = "SoulbindConduitInstallResult", EnumValue = 1 },
				{ Name = "InvalidConduit", Type = "SoulbindConduitInstallResult", EnumValue = 2 },
				{ Name = "InvalidTalent", Type = "SoulbindConduitInstallResult", EnumValue = 3 },
				{ Name = "DuplicateConduit", Type = "SoulbindConduitInstallResult", EnumValue = 4 },
				{ Name = "ForgeNotInProximity", Type = "SoulbindConduitInstallResult", EnumValue = 5 },
				{ Name = "SocketNotEmpty", Type = "SoulbindConduitInstallResult", EnumValue = 6 },
			},
		},
		{
			Name = "SoulbindConduitTransactionType",
			Type = "Enumeration",
			NumValues = 2,
			MinValue = 0,
			MaxValue = 1,
			Fields =
			{
				{ Name = "Install", Type = "SoulbindConduitTransactionType", EnumValue = 0 },
				{ Name = "Uninstall", Type = "SoulbindConduitTransactionType", EnumValue = 1 },
			},
		},
		{
			Name = "SoulbindConduitType",
			Type = "Enumeration",
			NumValues = 4,
			MinValue = 0,
			MaxValue = 3,
			Fields =
			{
				{ Name = "Finesse", Type = "SoulbindConduitType", EnumValue = 0 },
				{ Name = "Potency", Type = "SoulbindConduitType", EnumValue = 1 },
				{ Name = "Endurance", Type = "SoulbindConduitType", EnumValue = 2 },
				{ Name = "Flex", Type = "SoulbindConduitType", EnumValue = 3 },
			},
		},
		{
			Name = "SoulbindNodeState",
			Type = "Enumeration",
			NumValues = 4,
			MinValue = 0,
			MaxValue = 3,
			Fields =
			{
				{ Name = "Unavailable", Type = "SoulbindNodeState", EnumValue = 0 },
				{ Name = "Unselected", Type = "SoulbindNodeState", EnumValue = 1 },
				{ Name = "Selectable", Type = "SoulbindNodeState", EnumValue = 2 },
				{ Name = "Selected", Type = "SoulbindNodeState", EnumValue = 3 },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
		{
			Name = "SuperTrackingType",
			Type = "Enumeration",
			NumValues = 4,
			MinValue = 0,
			MaxValue = 3,
			Fields =
			{
				{ Name = "Quest", Type = "SuperTrackingType", EnumValue = 0 },
				{ Name = "UserWaypoint", Type = "SuperTrackingType", EnumValue = 1 },
				{ Name = "Corpse", Type = "SuperTrackingType", EnumValue = 2 },
				{ Name = "Scenario", Type = "SuperTrackingType", EnumValue = 3 },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
		{
			Name = "TransmogIllisionFlags",
			Type = "Enumeration",
			NumValues = 2,
			MinValue = 1,
			MaxValue = 2,
			Fields =
			{
				{ Name = "HideUntilCollected", Type = "TransmogIllisionFlags", EnumValue = 1 },
				{ Name = "PlayerConditionGrantsOnLogin", Type = "TransmogIllisionFlags", EnumValue = 2 },
			},
		},
		{
			Name = "TransmogSlot",
			Type = "Enumeration",
			NumValues = 13,
			MinValue = 0,
			MaxValue = 12,
			Fields =
			{
				{ Name = "Head", Type = "TransmogSlot", EnumValue = 0 },
				{ Name = "Shoulder", Type = "TransmogSlot", EnumValue = 1 },
				{ Name = "Back", Type = "TransmogSlot", EnumValue = 2 },
				{ Name = "Chest", Type = "TransmogSlot", EnumValue = 3 },
				{ Name = "Body", Type = "TransmogSlot", EnumValue = 4 },
				{ Name = "Tabard", Type = "TransmogSlot", EnumValue = 5 },
				{ Name = "Wrist", Type = "TransmogSlot", EnumValue = 6 },
				{ Name = "Hand", Type = "TransmogSlot", EnumValue = 7 },
				{ Name = "Waist", Type = "TransmogSlot", EnumValue = 8 },
				{ Name = "Legs", Type = "TransmogSlot", EnumValue = 9 },
				{ Name = "Feet", Type = "TransmogSlot", EnumValue = 10 },
				{ Name = "Mainhand", Type = "TransmogSlot", EnumValue = 11 },
				{ Name = "Offhand", Type = "TransmogSlot", EnumValue = 12 },
			},
		},
		{
			Name = "Transmog",
			Type = "Constants",
			Values =
			{
				{ Name = "NoTransmogID", Type = "number", Value = 0 },
				{ Name = "MainHandTransmogIsIndividualWeapon", Type = "number", Value = -1 },
				{ Name = "MainHandTransmogIsPairedWeapon", Type = "number", Value = 0 },
			},
		},
	},
});

APIDocumentation:AddDocumentationTable(
{
	Tables =
	{
	},
});
